Setting up dependencies for coverage build
Dependencies installed successfully
Configuring Z3 build with coverage instrumentation
Z3 configured successfully with coverage instrumentation
Building Z3 with coverage instrumentation
Z3 built and installed successfully
Building test-z3 executable
test-z3 built successfully
Building Z3 examples for additional coverage
Examples build completed
Cloning z3test repository for regression testing
z3test repository cloned successfully
Running Z3 unit tests
PASS
(test random :time 0.00 :before-memory 0.00 :after-memory 0.00)
PASS
(test random :time 0.00 :before-memory 0.00 :after-memory 0.00)
PASS
(test symbol_table :time 0.00 :before-memory 0.00 :after-memory 0.00)
PASS
(test symbol_table :time 0.00 :before-memory 0.00 :after-memory 0.00)
PASS
(test region :time 0.00 :before-memory 0.00 :after-memory 0.00)
PASS
(test region :time 0.00 :before-memory 0.00 :after-memory 0.00)
foo boo foo
PASS
(test symbol :time 0.00 :before-memory 0.00 :after-memory 0.00)
foo boo foo
PASS
(test symbol :time 0.00 :before-memory 0.00 :after-memory 0.00)
i: 0
i: 0
i: 0
PASS
(test heap :time 0.03 :before-memory 0.00 :after-memory 0.00)
i: 0
i: 0
i: 0
PASS
(test heap :time 0.03 :before-memory 0.00 :after-memory 0.00)
PASS
(test hashtable :time 0.00 :before-memory 0.00 :after-memory 0.00)
PASS
(test hashtable :time 0.00 :before-memory 0.00 :after-memory 0.00)
sizeof(rational): 32
int64_max: 9223372036854775807, INT64_MAX: 9223372036854775807, int64_max.get_int64(): 9223372036854775807, int64_max.get_uint64(): 9223372036854775807
running tst6
running tst7
running tst8
running tst9
41000000000000 -7000000000000 -5 6000000000000
41000000000000 == 41000000000000
-41000000000000 -7000000000000 6 1000000000000
-41000000000000 == -41000000000000
-41000000000000 7000000000000 -6 1000000000000
-41000000000000 == -41000000000000
41000000000000 7000000000000 5 6000000000000
41000000000000 == 41000000000000
41 -7 -5 6
41 == 41
-41 -7 6 1
-41 == -41
-41 7 -6 1
-41 == -41
41 7 5 6
41 == 41
running rational_tester::tst1
(multiplication with big rationals :time 6.80 :before-memory 0.38 :after-memory 31.16)
(multiplication with floats:  :time 0.00 :before-memory 31.16 :after-memory 31.16)

Testing multiplication performance using small ints
(multiplication with rationals :time 0.13 :before-memory 68.10 :after-memory 68.10)
(multiplication with floats:  :time 0.02 :before-memory 68.10 :after-memory 68.10)

Testing multiplication performance using small rationals
(multiplication with rationals :time 0.65 :before-memory 68.10 :after-memory 68.10)
(multiplication with floats:  :time 0.02 :before-memory 68.10 :after-memory 68.10)

test12
0: 1
1: 0
2: 0
3: 0
4: 0
5: 0
6: 0
7: 0
8: 0
9: 0
10: 0
11: 0
12: 0
13: 0
14: 0
15: 0
16: 0
17: 0
18: 0
19: 0
20: 0
21: 0
22: 0
23: 0
24: 0
25: 0
26: 0
27: 0
28: 0
29: 0
30: 0
31: 0
32: 0
33: 0
34: 1
35: 0
36: 0
37: 1
38: 1
39: 0
40: 0
41: 1
42: 1
43: 1
44: 0
45: 0
46: 0
47: 1
48: 1
49: 0
50: 1
51: 1
52: 0
53: 0
54: 0
55: 1
56: 1
57: 1
58: 1
59: 0
60: 1
61: 1
62: 0
63: 0
64: 0
65: 0
66: 0
67: 0
68: 0
69: 0
70: 1
71: 1
72: 1
73: 1
74: 1
75: 0
76: 0
77: 0
78: 0
79: 1
80: 1
81: 0
82: 1
83: 1
84: 0
85: 1
86: 0
87: 1
88: 0
89: 1
90: 1
91: 1
92: 1
93: 1
94: 0
95: 1
96: 1
97: 0
98: 0
99: 1
100: 0
101: 0
102: 0
103: 0
104: 1
105: 0
106: 1
107: 1
108: 0
109: 1
110: 1
111: 1
112: 1
test13
PASS
(test rational :time 8.83 :before-memory 0.00 :after-memory 0.00)
sizeof(rational): 32
int64_max: 9223372036854775807, INT64_MAX: 9223372036854775807, int64_max.get_int64(): 9223372036854775807, int64_max.get_uint64(): 9223372036854775807
running tst6
running tst7
running tst8
running tst9
41000000000000 -7000000000000 -5 6000000000000
41000000000000 == 41000000000000
-41000000000000 -7000000000000 6 1000000000000
-41000000000000 == -41000000000000
-41000000000000 7000000000000 -6 1000000000000
-41000000000000 == -41000000000000
41000000000000 7000000000000 5 6000000000000
41000000000000 == 41000000000000
41 -7 -5 6
41 == 41
-41 -7 6 1
-41 == -41
-41 7 -6 1
-41 == -41
41 7 5 6
41 == 41
running rational_tester::tst1
(multiplication with big rationals :time 6.87 :before-memory 0.38 :after-memory 31.15)
(multiplication with floats:  :time 0.00 :before-memory 31.15 :after-memory 31.15)

Testing multiplication performance using small ints
(multiplication with rationals :time 0.13 :before-memory 68.10 :after-memory 68.10)
(multiplication with floats:  :time 0.02 :before-memory 68.10 :after-memory 68.10)

Testing multiplication performance using small rationals
(multiplication with rationals :time 0.65 :before-memory 68.10 :after-memory 68.10)
(multiplication with floats:  :time 0.02 :before-memory 68.10 :after-memory 68.10)

test12
0: 1
1: 0
2: 0
3: 0
4: 0
5: 0
6: 0
7: 0
8: 0
9: 0
10: 0
11: 0
12: 0
13: 0
14: 0
15: 0
16: 0
17: 0
18: 0
19: 0
20: 0
21: 0
22: 0
23: 0
24: 0
25: 0
26: 0
27: 0
28: 0
29: 0
30: 0
31: 0
32: 0
33: 0
34: 1
35: 0
36: 0
37: 1
38: 1
39: 0
40: 0
41: 1
42: 1
43: 1
44: 0
45: 0
46: 0
47: 1
48: 1
49: 0
50: 1
51: 1
52: 0
53: 0
54: 0
55: 1
56: 1
57: 1
58: 1
59: 0
60: 1
61: 1
62: 0
63: 0
64: 0
65: 0
66: 0
67: 0
68: 0
69: 0
70: 1
71: 1
72: 1
73: 1
74: 1
75: 0
76: 0
77: 0
78: 0
79: 1
80: 1
81: 0
82: 1
83: 1
84: 0
85: 1
86: 0
87: 1
88: 0
89: 1
90: 1
91: 1
92: 1
93: 1
94: 0
95: 1
96: 1
97: 0
98: 0
99: 1
100: 0
101: 0
102: 0
103: 0
104: 1
105: 0
106: 1
107: 1
108: 0
109: 1
110: 1
111: 1
112: 1
test13
PASS
(test rational :time 8.91 :before-memory 0.00 :after-memory 0.01)
PASS
(test inf_rational :time 0.00 :before-memory 0.01 :after-memory 0.01)
PASS
(test inf_rational :time 0.00 :before-memory 0.01 :after-memory 0.01)
PASS
(test ast :time 0.01 :before-memory 0.01 :after-memory 0.01)
PASS
(test ast :time 0.01 :before-memory 0.01 :after-memory 0.01)
PASS
(test optional :time 0.00 :before-memory 0.01 :after-memory 0.01)
PASS
(test optional :time 0.00 :before-memory 0.01 :after-memory 0.01)
b: 000001000001100000001000000000100001000000000000000000000000000000000000000001111000000000000000000010000000000
b: 0000010000011000000010000000001000010000000000000000000000000000000000000000011110000000000000000000100000000000000000000000000
b: 00000100000110000000100000000010000100000000000000000000000000000000000000000111100000000000000000001000000000000000000000000000
b: 0000010000011000000010000000001000010000000000000000000000000000000000000000011110000000000000000000100000000000000000000000000000000000000000000000000000000000
b: 0000010000011000000010000000001000010000000000000000000000000000000000000000011110000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b: 00000100000110000000100000000010000100000000000000000000000000000000000000000111100000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b: 00000100000110000000100000000010000100000000000000000000000000000000000000000111100000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000
0100001110
0100011110
-----
10001
b1(size32): 00000000000000000000000100100011
------
b1: 10100
------
b1: 00100
PASS
(test bit_vector :time 0.00 :before-memory 0.01 :after-memory 0.01)
b: 000001000001100000001000000000100001000000000000000000000000000000000000000001111000000000000000000010000000000
b: 0000010000011000000010000000001000010000000000000000000000000000000000000000011110000000000000000000100000000000000000000000000
b: 00000100000110000000100000000010000100000000000000000000000000000000000000000111100000000000000000001000000000000000000000000000
b: 0000010000011000000010000000001000010000000000000000000000000000000000000000011110000000000000000000100000000000000000000000000000000000000000000000000000000000
b: 0000010000011000000010000000001000010000000000000000000000000000000000000000011110000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b: 00000100000110000000100000000010000100000000000000000000000000000000000000000111100000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b: 00000100000110000000100000000010000100000000000000000000000000000000000000000111100000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000
0100001110
0100011110
-----
10001
b1(size32): 00000000000000000000000100100011
------
b1: 10100
------
b1: 00100
PASS
(test bit_vector :time 0.00 :before-memory 0.01 :after-memory 0.01)
0000010000
0100001110
0100011110
PASS
(test fixed_bit_vector :time 0.00 :before-memory 0.01 :after-memory 0.01)
0000010000
0100001110
0100011110
PASS
(test fixed_bit_vector :time 0.00 :before-memory 0.01 :after-memory 0.01)
[]
[]
[]
0000000000000000000000000000000
1111111111111111111111111111111
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
0000000000000000000000000011111
11111111111111111111111111x1011 -> 11111111111111111111111111x01
00000000000
11111111111
xxxxxxxxxxx
00000011111
111111x1011 -> 111111x01
000000000000000
111111111111111
xxxxxxxxxxxxxxx
000000000011111
1111111111x1011 -> 1111111111x01
0000000000000000
1111111111111111
xxxxxxxxxxxxxxxx
0000000000011111
11111111111x1011 -> 11111111111x01
00000000000000000
11111111111111111
xxxxxxxxxxxxxxxxx
00000000000011111
111111111111x1011 -> 111111111111x01
PASS
(test tbv :time 0.00 :before-memory 0.01 :after-memory 0.01)
[]
[]
[]
0000000000000000000000000000000
1111111111111111111111111111111
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
0000000000000000000000000011111
11111111111111111111111111x1011 -> 11111111111111111111111111x01
00000000000
11111111111
xxxxxxxxxxx
00000011111
111111x1011 -> 111111x01
000000000000000
111111111111111
xxxxxxxxxxxxxxx
000000000011111
1111111111x1011 -> 1111111111x01
0000000000000000
1111111111111111
xxxxxxxxxxxxxxxx
0000000000011111
11111111111x1011 -> 11111111111x01
00000000000000000
11111111111111111
xxxxxxxxxxxxxxxxx
00000000000011111
111111111111x1011 -> 111111111111x01
PASS
(test tbv :time 0.00 :before-memory 0.01 :after-memory 0.01)
xxxx \ {xxx0}
xxx
(or (and true (not (not true))) (and true (not (not false)))) true
{xx10}
{xxxx \ {x0x1, x1x0}}
{x110}
11111
00000
xxxxx
01010
10100
00000
xxxxx
11111 \ {00000} -> 11111
11111 -> 111
x1x11 -> xx1
x1x11 \ {11111} -> xx1 \ {111}
1111111111
0000000000
xxxxxxxxxx
0000001010
0000010100
0000000000
xxxxxxxxxx
1111111111 \ {
   0000000000} -> 1111111111
1111111111 -> 11111111
11111x1x11 -> 11111xx1
11111x1x11 \ {
   1111111111} -> 11111xx1 \ {11111111}
1111111111111111111111111111111111111111111111111111111111111111111111
0000000000000000000000000000000000000000000000000000000000000000000000
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
0000000000000000000000000000000000000000000000000000000000000000001010
0000000000000000000000000000000000000000000000000000000000000000010100
0000000000000000000000000000000000000000000000000000000000000000000000
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
1111111111111111111111111111111111111111111111111111111111111111111111 \ {
   0000000000000000000000000000000000000000000000000000000000000000000000} -> 1111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111 -> 11111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111x1x11 -> 11111111111111111111111111111111111111111111111111111111111111111xx1
11111111111111111111111111111111111111111111111111111111111111111x1x11 \ {
   1111111111111111111111111111111111111111111111111111111111111111111111} -> 11111111111111111111111111111111111111111111111111111111111111111xx1 \ {
   11111111111111111111111111111111111111111111111111111111111111111111}
PASS
(test doc :time 35.65 :before-memory 0.01 :after-memory 0.03)
xxxx \ {xxx0}
xxx
(or (and true (not (not true))) (and true (not (not false)))) true
{xx10}
{xxxx \ {x0x1, x1x0}}
{x110}
11111
00000
xxxxx
01010
10100
00000
xxxxx
11111 \ {00000} -> 11111
11111 -> 111
x1x11 -> xx1
x1x11 \ {11111} -> xx1 \ {111}
1111111111
0000000000
xxxxxxxxxx
0000001010
0000010100
0000000000
xxxxxxxxxx
1111111111 \ {
   0000000000} -> 1111111111
1111111111 -> 11111111
11111x1x11 -> 11111xx1
11111x1x11 \ {
   1111111111} -> 11111xx1 \ {11111111}
1111111111111111111111111111111111111111111111111111111111111111111111
0000000000000000000000000000000000000000000000000000000000000000000000
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
0000000000000000000000000000000000000000000000000000000000000000001010
0000000000000000000000000000000000000000000000000000000000000000010100
0000000000000000000000000000000000000000000000000000000000000000000000
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
1111111111111111111111111111111111111111111111111111111111111111111111 \ {
   0000000000000000000000000000000000000000000000000000000000000000000000} -> 1111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111 -> 11111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111x1x11 -> 11111111111111111111111111111111111111111111111111111111111111111xx1
11111111111111111111111111111111111111111111111111111111111111111x1x11 \ {
   1111111111111111111111111111111111111111111111111111111111111111111111} -> 11111111111111111111111111111111111111111111111111111111111111111xx1 \ {
   11111111111111111111111111111111111111111111111111111111111111111111}
PASS
(test doc :time 35.69 :before-memory 0.03 :after-memory 0.03)
{xxx \ {0x1}}
{xxx \ {0x0, 1x1}}
{0xxx \ {00xx, 0101, 0111}}
{}
{}
{0x01 \ {0001, 0101, 0101}}
{}
{}
{x1xx \ {01xx, 0101, x100}, x1x1 \ {x111, 1101}}
{}
{}
{}
{}
{}
{}
{x1xx \ {x10x, 11x1, 0100}}
{}
{1xx1 \ {1001, 1x11, 1011}}
{1xx0 \ {1000, 1x00, 1100}, 1xxx \ {11x1, 1x11, 1111}}
{x1x1 \ {1101, 0111, x111, 11x1}}
{xxx0 \ {x110, 0010, x000}}
{}
{}
{xx00 \ {0000, x000}, 0x00 \ {0000, 0100, 0100}}
{10xx \ {1001, 1000, 1010}}
{0000 \ {0000}}
{1x1x \ {1x10, 1x11}}
{x11x \ {0111, x111}}
{1x1x \ {1110, 1011, 1x10, 1x11, 111x}}
{}
{1x0x \ {1x01, 1000, 1000}}
{}
{0xx0 \ {0000, 00x0, 0100}}
{}
{}
{x1x1 \ {0101, 11x1, 1111}, 0x11 \ {0011}}
{10x0 \ {1000, 1010}}
{}
{xxxx \ {011x, 1x01}, 0xx1 \ {0x01, 00x1, 0011}, 1xxx \ {11xx, 11x0, 100x}}
{x10x \ {110x, 0101, 0100}, 1x01 \ {1101}}
{0x0x \ {0100, 0001, 010x, 000x}, 0101}
{0xx0 \ {0000, 0110, 0x00}}
{}
{}
{10xx \ {10x1, 10x0, 1000}}
{1xx0 \ {1x10, 11x0, 1010}, xxx1 \ {x1x1, 0011, x101}}
{x0x0 \ {x0x0}, x1x1 \ {x1x1}}
{x1x1 \ {1101, x101}, 0x0x \ {0001, 0101, 010x}}
{}
{}
{01xx \ {011x, 010x, 0110}, x000 \ {1000, 0000}}
{xx1x \ {xx10, 101x, 101x}, 0x10 \ {0010, 0110, 0110}}
{1x1x \ {1x1x}, 1010 \ {1010}}
{x0x0 \ {x010, x000, 10x0}}
{0xx1 \ {0101, 0111, 0011}, 0x00 \ {0000}}
{0000 \ {0000}}
{x1x0 \ {1100, 1110, 0110}}
{100x \ {1001, 1000}}
{0000 \ {0000}}
{1xx1 \ {1111, 11x1, 1101}, x0xx \ {x001, x000, x0x0}}
{0x00 \ {0000}, xx1x \ {001x, 1x11, 1x11}}
{1111, 0000 \ {0000}, 1x1x \ {1110, 1011, 1x10}}
{1x1x \ {1111, 101x, 1010}}
{xx1x \ {111x, 001x, xx10}}
{1x1x \ {1110, 1011, 101x, 1x11}}
{}
{0xx0 \ {0x00, 0110, 0100}}
{}
{0x1x \ {0111, 001x, 0x11}}
{00x0 \ {0010, 0000}}
{1010 \ {1010}}
{100x \ {1000}, xx10 \ {0110, x010, 0x10}, xx0x \ {1101, 1100, 100x}}
{0x0x \ {000x, 0001, 0100}}
{0x0x \ {0100, 0001, 000x}}
{x0xx \ {x001, 10x1, x01x}}
{x0xx \ {1011, 0000}, 110x \ {1101, 1100, 1100}}
{xxxx \ {x1x0, x0x1, 1x0x, 0x1x, xx01, xx1x}, 0x0x \ {0100, 0001, 0x01, 010x, 000x, 000x}}
{x001 \ {1001, 0001}}
{xx0x \ {1100, 0x0x, x10x}, 000x \ {0001}}
{0101 \ {0101}}
{x001 \ {1001, 0001, 0001}}
{10xx \ {1011, 1001, 10x0}}
{0101 \ {0101}}
{}
{0x00 \ {0000, 0100}}
{}
{x1xx \ {01x1, 010x, x1x0}}
{011x \ {0111, 0110}, x00x \ {x001, 1000}, xxxx \ {0000, 00xx, 0111}}
{1x1x \ {1110, 1011, 1x10, 111x, 101x}, 0x0x \ {0100, 0001, 0x00, 010x}, xxxx \ {x1x0, x0x1, 1x0x, 0x1x, xxx0}}
{01xx \ {01x1, 0110}}
{}
{}
{x111 \ {0111, 1111}, 101x \ {1010, 1011}}
{}
{}
{x101 \ {1101}}
{x1xx \ {1101, 01xx, x101}, 1x0x \ {1x01, 1x00}}
{0101 \ {0101}}
{001x \ {0010}, 1x1x \ {1111, 1010, 1x10}}
{0x0x \ {0000, 0x01, 000x}, 10xx \ {100x, 10x0, 1011}}
{1x1x \ {1110, 1011, 1x10, 101x, 111x}}
{}
{1x00 \ {1000}}
{}
{xx11 \ {0011, 1111, 1111}}
{xxx1 \ {1101, 1111, 0111}}
{1111}
{00xx \ {00x0, 00x1, 0001}}
{10x0 \ {1000}, x10x \ {0100, x101, x100}}
{x0x0 \ {x0x0}, 0x0x \ {
   0100, 0001, 0x00, 0x01, 0x01, 010x, 000x}}
{xx01 \ {1001, 0x01, 0101}}
{011x \ {0111, 0110}}
{}
{}
{x1xx \ {x10x, 1101, 0111}, xx11 \ {0111, 1111, 1x11}}
{}
{xx00 \ {0000, 0x00, 0100}}
{x11x \ {0111, 111x, x111}, x01x \ {x011, x010, x010}}
{}
{11x1 \ {1101}}
{1x1x \ {1011, 1110, 1x10}}
{1111}
{0x00 \ {0000, 0100}}
{0xxx \ {0x00, 0101, 0001}}
{0000 \ {0000}}
{x0x0 \ {10x0, 1000}, 0x0x \ {0x00, 0000, 010x}}
{xxx1 \ {xx11, xx01, x0x1}, 0xx0 \ {0100, 01x0}}
{x0x0 \ {1000, 0010}, 0101 \ {0101}, 0000 \ {0000}}
{x1x0 \ {01x0, 0110}}
{x010 \ {1010, 0010}}
{1010 \ {1010}}
{x1x0 \ {1110, 1100, x100}}
{1xx1 \ {1011, 1111}}
{}
{0xx0 \ {0000, 0x00, 01x0}}
{x0x1 \ {x001, 1001, 0011}, 01xx \ {0111, 0110, 010x}, 0xx1 \ {0101, 0111, 0111}}
{x0x0 \ {1000, 0010, x000, 10x0, 00x0, x000}}
{1x0x \ {1x00, 1100}, x0xx \ {x00x, 1000, x001}, 100x \ {1001, 1000}}
{xx0x \ {xx01, 1100, 010x}}
{0x0x \ {0100, 0001, 0x00, 010x}}
{1x1x \ {111x, 1010}, x001 \ {1001, 0001}}
{xx0x \ {0000, x000, 1101}}
{0101 \ {0101}}
{xx11 \ {0111, 0011, 0011}, 00x0 \ {0010, 0000}}
{0xxx \ {0x1x, 011x, 011x}}
{1111 \ {1111}, x0x0 \ {1000, 0010, x010, x000, 10x0}}
{}
{11x1 \ {1101, 1111}, xxx1 \ {0x11, xx11, 1x01}}
{}
{0xx1 \ {0x01, 00x1, 0111}, xx01 \ {1001, x001, x101}, 1xx0 \ {1x10, 1000, 1100}}
{01xx \ {011x, 01x0, 01x1}}
{x1x1 \ {x1x1}, 0101 \ {0101}, x0x0 \ {x0x0}}
{x0xx \ {0000, 10x1, 10x1}}
{x010 \ {1010, 0010}}
{1010 \ {1010}}
{xx00 \ {1000, 0x00, x000}, 00x0 \ {0000, 0010}}
{x100 \ {0100, 1100, 1100}, xx00 \ {x100, x000, 1000}}
{0000 \ {0000}}
{x010 \ {1010, 0010, 0010}, 000x \ {0001}}
{10xx \ {10x1, 101x}}
{1010 \ {1010}, 0x0x \ {0100, 0001, 0x01, 010x}}
{x1xx \ {11x1, x10x, 1100}, 0x11 \ {0111, 0011}}
{}
{}
{0x10 \ {0110}}
{}
{}
{}
{xx11 \ {1x11, x011}, 111x \ {1110}}
{}
{xx1x \ {0x10, x011, 111x}}
{0xx0 \ {0100, 01x0, 00x0}, 10xx \ {10x1, 1010}}
{1010 \ {1010}, 1x1x \ {1110, 1011, 111x, 101x}}
{}
{011x \ {0111, 0110}, 01x1 \ {0111, 0101}}
{}
{x1x0 \ {1100, 01x0, 1110}, 1x0x \ {1000, 110x}}
{10xx \ {1000, 100x, 1011}, 0xx0 \ {0100, 0x10, 0x00}, 00xx \ {001x, 00x1, 0011}}
{x0x0 \ {1000, 0010, 00x0, 00x0, x000, x010}, x0x0 \ {1000, 0010, 10x0, x000, x010}, 0000 \ {0000}, 0x0x \ {0100, 0001, 010x, 0x00}}
{11x0 \ {1110, 1100, 1100}}
{1x1x \ {111x, 1x11, 1111}, x110 \ {0110, 1110, 1110}, 00xx \ {00x0, 000x, 0011}}
{1010 \ {1010}, x0x0 \ {x0x0}}
{0x11 \ {0111, 0011, 0011}, x1xx \ {110x, 111x, 0100}}
{xxxx \ {110x, xx10, 11x0}}
{1111 \ {1111}, xxxx \ {x1x0, x0x1, 1x0x, 0x1x, 10xx, xx00}}
{}
{xx0x \ {xx00, 0000, x001}, 0x01 \ {0101}, xx0x \ {xx01, 1001, x100}}
{}
{0xxx \ {0010, 0x00, 0xx0}}
{xx00 \ {x100, 1x00, 1000}}
{0000 \ {0000}}
{xxx0 \ {1100, 0010, 1x10}, xx01 \ {1001, 0101}}
{x010 \ {0010, 1010}}
{1010 \ {1010}}
{x111 \ {1111, 0111}, x00x \ {1001, 0001, 0001}}
{010x \ {0100}}
{0x0x \ {0100, 0001, 000x, 0x01, 0x01}}
{xx11 \ {0011, x111, 0x11}, 1x00 \ {1000, 1100}}
{1xx1 \ {1x01, 1101, 1101}, 010x \ {0101, 0100}}
{1111, 0000 \ {0000}}
{00xx \ {00x1, 001x, 0001}}
{x11x \ {0111, 0110, 011x}}
{1x1x \ {1x1x}}
{0xxx \ {010x, 0x01}}
{1x11 \ {1111, 1011, 1011}}
{1111 \ {1111}}
{x1x0 \ {0110, 0100}, x01x \ {x010, 001x, 0010}}
{}
{}
{1xxx \ {1101, 10x0, 1x11}, x1x1 \ {01x1, 1111}}
{00x1 \ {0001, 0011}}
{x1x1 \ {1101, 0111, x111, 01x1, 11x1}}
{0x01 \ {0001}, xxx1 \ {1x01, 0001, 10x1}}
{1x1x \ {1x11, 1011, 1011}, 00xx \ {000x, 001x, 00x1}}
{0101 \ {0101}, 1111 \ {1111}, x1x1 \ {x1x1}}
{1xxx \ {1xx0, 111x, 1x1x}, x0x1 \ {0011, 10x1}, x01x \ {101x, 001x}}
{10x0 \ {1010, 1000}, 11x1 \ {1111, 1101, 1101}}
{x0x0 \ {x0x0}, x1x1 \ {1101, 0111, x111, 11x1, 01x1, 01x1}, 1010 \ {1010}, 1111 \ {1111}}
{x01x \ {1010, x010, 0011}}
{1x11 \ {1111, 1011}}
{1111 \ {1111}}
{}
{010x \ {0100, 0101}, xx00 \ {x000, 0100}}
{}
{xxx0 \ {x100, x010, 1x00}, xxx1 \ {0001, 1011, 1x01}}
{x010 \ {1010, 0010}, xx0x \ {x101, x10x, 1000}}
{1010 \ {1010}, 0000, 0101}
{x0xx \ {1000, 1010, 00x0}, xx00 \ {0100, 1x00, 0x00}}
{01xx \ {0101, 01x0, 0100}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, 01xx, x0xx, 00xx, xx00, xx10}, 0000 \ {0000}}
{x0x1 \ {0001, 1011}, 010x \ {0101}}
{x110 \ {1110, 0110, 0110}, 0x00 \ {0000}, 10xx \ {1001, 101x, 1010}}
{x1x1 \ {1101, 0111, 01x1, 11x1}, 0000, 0x0x \ {0100, 0001, 0x01, 010x}}
{00xx \ {00x0, 000x, 0001}}
{101x \ {1011, 1010, 1010}}
{1x1x \ {1110, 1011, 1x10, 111x, 101x, 101x}}
{01xx \ {0100, 0101}, 10xx \ {10x1, 1001, 1011}}
{xx01 \ {1001, x001, 0001}, 0xx1 \ {0111, 0001, 0101}}
{0101 \ {0101}, x1x1 \ {1101, 0111, x101, 01x1}}
{11x1 \ {1111, 1101, 1101}, x0x1 \ {10x1, 00x1}}
{xxxx \ {0x11, 0x1x, 00x0}, x111 \ {0111, 1111}, x10x \ {0101, 110x, 1101}}
{x1x1 \ {1101, 0111, x111, x101, x101}, 1111 \ {1111}, 0101 \ {0101}}
{000x \ {0001, 0000, 0000}, xx10 \ {0110, x010, 1x10}}
{01xx \ {01x1, 011x, 0101}}
{0x0x \ {
   0100, 0001, 0x01, 0x00, 0x00, 010x, 010x}, 1010 \ {1010}}
{10xx \ {101x, 10x0, 10x0}, 1x0x \ {1x01, 1000, 110x}}
{x011 \ {0011, 1011}, xxx1 \ {1011, 0x01, 1x11}}
{1111 \ {1111}, x1x1 \ {1101, 0111, x111}, 0101 \ {0101}}
{xx01 \ {x001, 0001, 0001}, xxxx \ {x10x, 1011, 10x1}, xx00 \ {0x00, 1x00, x000}}
{0xx0 \ {0x00, 0110, 0000}, x1x0 \ {x110, 0100, x100}}
{x0x0 \ {1000, 0010, 00x0}, 0000 \ {0000}}
{0xx0 \ {01x0, 0010, 0110}, 111x \ {1111, 1110, 1110}}
{xx1x \ {001x, 0010, 011x}}
{1010 \ {1010}, 1x1x \ {1110, 1011, 1x11, 1x10, 1x10}}
{11xx \ {111x, 110x}}
{x10x \ {x100, 1101, 0101}}
{0x0x \ {0x0x}}
{x10x \ {010x, 1100}}
{}
{}
{10x1 \ {1001, 1011}, xx0x \ {0100, 000x, 1x0x}}
{x00x \ {1001, 000x, 0000}}
{0101 \ {0101}, 0x0x \ {0100, 0001, 010x, 0x00}}
{x1x1 \ {1101, x101}}
{001x \ {0011, 0010}}
{1111 \ {1111}}
{xx00 \ {0100, 1000, x000}}
{0x10 \ {0010, 0110}, xx1x \ {0x10, x111, x110}}
{}
{x1x0 \ {0100, x100, 0110}, x0x1 \ {1011, 10x1, x011}}
{0x1x \ {011x, 001x, 0x10}}
{1010 \ {1010}, 1111 \ {1111}}
{000x \ {0001, 0000, 0000}, 0x1x \ {001x, 0x10, 011x}}
{01xx \ {01x1, 010x, 0110}}
{0x0x \ {0x0x}, 1x1x \ {1x1x}}
{0x0x \ {0100, 010x, 000x}}
{x101 \ {0101}}
{0101 \ {0101}}
{x10x \ {x100, 0101, 1100}, 1x0x \ {1x01, 1100}, xx1x \ {111x, 1011, 0010}}
{}
{}
{1xxx \ {101x, 10x1, 1110}}
{1x00 \ {1100, 1000}}
{0000 \ {0000}}
{01xx \ {011x, 01x1}, x11x \ {0110, x110, 0111}}
{x1xx \ {11xx, 01x1, 1101}, 01xx \ {01x0, 0100, 010x}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx1x, xxx1, x1xx, 01xx}, xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx1x, xxx1, x0xx, 00xx, 0xxx}, 1x1x \ {1110, 1011, 1x10, 111x}, 1x1x \ {1110, 1011, 1x10, 101x}}
{011x \ {0111, 0110}}
{x110 \ {1110, 0110}, xx00 \ {0x00, 1x00, x100}}
{1010 \ {1010}}
{10xx \ {1001, 1011, 101x}}
{xxxx \ {x10x, 1000, 00xx}, 0x0x \ {0100, 0x01, 0000}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx01, xx11, xx1x, 00xx}, 0x0x \ {0100, 0001, 0x01, 010x, 000x}}
{x10x \ {010x, x101, 0101}, 0x0x \ {000x, 0100, 0x01}, x0x0 \ {10x0}}
{11xx \ {11x0}}
{0x0x \ {0100, 0001, 0x01, 000x}, x0x0 \ {x0x0}}
{}
{00xx \ {000x, 00x1, 0011}, 0x1x \ {0110, 001x, 011x}}
{}
{xx01 \ {1x01, 1101, 1101}}
{x11x \ {0111, 1111, 011x}, xx00 \ {x000, 1000, x100}, 0x10 \ {0110, 0010, 0010}}
{}
{0x0x \ {0100, 000x, 010x}, 1x0x \ {1101, 1x01, 1001}}
{}
{}
{}
{x001 \ {1001, 0001}}
{}
{xxx1 \ {0xx1, 0x11, x1x1}, x00x \ {1001, 000x, 000x}}
{xx01 \ {0101, 1001, x101}, x01x \ {0010, 1010, 001x}}
{0101, 1111}
{xx01 \ {0x01, 1101}}
{x11x \ {x111, 0110, x110}}
{}
{001x \ {0010}, 0xxx \ {011x, 0x00}}
{}
{}
{x01x \ {x010, 101x, 101x}, 100x \ {1001, 1000, 1000}}
{}
{}
{1x0x \ {1101, 110x, 110x}, x100 \ {0100}}
{111x \ {1111, 1110}}
{}
{x1xx \ {01x0, 11x1, x11x}, 100x \ {1001, 1000}, x011 \ {1011, 0011}}
{x1x0 \ {1100, 0100}}
{x0x0 \ {1000, 0010, x010, 00x0}, 0000 \ {0000}}
{x1x1 \ {1111, 0111, 01x1}, xxxx \ {0010, 00x1, 1010}}
{}
{}
{xx00 \ {1000, 0000, 0100}}
{}
{}
{11xx \ {1101, 11x1, 11x0}}
{10x1 \ {1011, 1001, 1001}}
{x1x1 \ {x1x1}}
{01xx \ {01x0, 0100, 011x}}
{1xx0 \ {1010, 1100, 11x0}, 01xx \ {0110, 010x, 0100}}
{x0x0 \ {x0x0}, xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xxx0, xx00, xx1x, 10xx, 0xxx, 00xx}}
{00x0 \ {0010, 0000, 0000}, 10x0 \ {1010}}
{x110 \ {1110}, x010 \ {1010, 0010}}
{1010 \ {1010}}
{}
{xxxx \ {000x, 010x, x11x}}
{}
{}
{xxx0 \ {x010, x100, x0x0}}
{}
{x100 \ {0100}, x0xx \ {x000, 00x0}}
{xxx0 \ {0110, x100, x0x0}}
{0000 \ {0000}, x0x0 \ {1000, 0010, x000, 00x0}}
{}
{x0xx \ {1001, 0001, 0011}, x0xx \ {x000, 0000, x001}}
{}
{0xx0 \ {00x0, 0000, 01x0}, 1x01 \ {1001, 1101, 1101}}
{1xxx \ {101x, 10x1, 1100}, 000x \ {0001, 0000, 0000}, 1x0x \ {1x01, 100x, 1001}}
{x0x0 \ {x0x0}, 0000 \ {0000}, 0101 \ {0101}}
{1xxx \ {1xx0, 10x0, 1001}, 0x10 \ {0110, 0010}}
{x00x \ {1001, x001}}
{0x0x \ {0100, 0001, 0x00, 010x}}
{001x \ {0011, 0010, 0010}}
{xxx0 \ {x000, 1010, 0000}, x0xx \ {000x, 00x0, 10x1}}
{1010 \ {1010}, 1x1x \ {1110, 1011, 1x11, 1x10, 1x10}}
{0x00 \ {0000, 0100}}
{11x0 \ {1110, 1100, 1100}, 11x0 \ {1100, 1110, 1110}, 101x \ {1010, 1011, 1011}}
{0000 \ {0000}}
{}
{}
{}
{00xx \ {000x, 001x, 00x1}}
{}
{}
{x011 \ {1011, 0011}, x01x \ {0010, 001x, x010}}
{}
{}
{010x \ {0101, 0100, 0100}, xxx0 \ {0110, 1xx0, 1100}, x00x \ {000x, 1001}}
{01xx \ {0110, 0111, 0100}}
{x0x0 \ {1000, 0010, 10x0, 00x0}, 0x0x \ {0100, 0001, 000x, 0x01}}
{x0x0 \ {1000, 0010, x000}}
{100x \ {1001}, 1xx0 \ {1000, 11x0, 1x10}}
{0000 \ {0000}, x0x0 \ {1000, 0010, x000, 10x0, 00x0}}
{1x10 \ {1010, 1110}}
{}
{}
{x1xx \ {x10x, 11x1, 11x0}, 00x0 \ {0000}}
{x1xx \ {0100, 0101, 111x}, 0xxx \ {0001, 0110, 0010}}
{xxxx \ {x1x0, x0x1, 1x0x, 0x1x, xx0x}, x0x0 \ {1000, 0010, x000}}
{x0x1 \ {x001, 0001, 0011}}
{101x \ {1010, 1011}}
{1111 \ {1111}}
{}
{}
{}
{x1x0 \ {0110, 0100}}
{x1x1 \ {0101, 1101, 1111}}
{}
{}
{01xx \ {01x1, 011x, 0110}}
{}
{0xxx \ {0011, 0xx1, 0111}, xx11 \ {0011, x011}, x1xx \ {111x, x10x}}
{000x \ {0000, 0001, 0001}, 0x10 \ {0110, 0010, 0010}}
{0x0x \ {0100, 0001, 0x01, 000x, 010x, 010x}, 1010 \ {1010}}
{x1x0 \ {0110, x100, 01x0}}
{1x0x \ {1x01, 1001, 1x00}, x00x \ {0000, 0001, 100x}}
{0000 \ {0000}}
{}
{x0x1 \ {10x1, 00x1, 00x1}}
{}
{}
{x0x1 \ {0001, x011, 1011}, xxx1 \ {x011, 1xx1, 10x1}}
{}
{xx11 \ {1111, 1x11}}
{11x1 \ {1111, 1101}}
{1111 \ {1111}}
{0xx1 \ {00x1, 01x1, 0x01}}
{x1x0 \ {1110, 01x0, 1100}, xx0x \ {100x, 1000, 1100}}
{0101 \ {0101}}
{xx0x \ {110x, 000x, x001}, x11x \ {111x, x111, 0110}}
{01x0 \ {0100, 0110}}
{0000 \ {0000}, 1010 \ {1010}}
{10xx \ {1001, 1010, 100x}}
{x001 \ {1001, 0001}}
{0101 \ {0101}}
{0x00 \ {0100}}
{xx0x \ {0000, 1x0x, xx01}}
{0000}
{1x0x \ {1100, 110x, 1x01}, x00x \ {1001, 0001, 0001}}
{1x1x \ {1110, 101x, 1010}, xx01 \ {x001, 1101, 0x01}}
{0101 \ {0101}}
{}
{}
{}
{x110 \ {0110, 1110}}
{xx00 \ {0000, x100, x000}, xx00 \ {0000, x100}}
{}
{}
{xx10 \ {0110, x110, x110}}
{}
{xx01 \ {0001, 1001}, 0xxx \ {0101, 0110, 0x1x}}
{x01x \ {0011, 1011, x011}}
{1x1x \ {1x1x}}
{xxx1 \ {01x1, x011, 1011}, 1xx1 \ {1101, 1111, 1011}, 11xx \ {110x, 1110, 11x1}}
{0x1x \ {011x, 0x11}}
{1111 \ {1111}, 1x1x \ {1110, 1011, 1x10, 1x11, 111x}}
{xxxx \ {x101, 0010, 110x}, 111x \ {1111, 1110}}
{x0x0 \ {1000, 0010, 10x0}, x0x1 \ {1001, 0011}}
{x0x0 \ {1000, 0010, 10x0}, x1x1 \ {1101, 0111}, 1010 \ {1010}, 1111 \ {1111}}
{}
{11x0 \ {1110, 1100}}
{}
{10xx \ {1001, 1011, 100x}}
{00x1 \ {0001}, 11x1 \ {1111, 1101}}
{x1x1 \ {1101, 0111, x101, x111, x101, 01x1}}
{}
{0xx1 \ {0011, 0111}}
{}
{11xx \ {1101, 11x0, 1110}}
{x1xx \ {01x0, x10x, 110x}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx01, xxx0, xx10, 0xxx, 00xx}}
{1xx1 \ {1101, 1111}}
{}
{}
{x101 \ {0101, 1101}}
{0xx1 \ {0x01, 0001, 0111}, xxxx \ {0111, 1xx1, 001x}, x10x \ {1100, 110x, 0101}}
{0101 \ {0101}}
{01xx \ {0101, 011x, 0100}, x0x0 \ {00x0, x000, x010}, 0xxx \ {010x, 00x0, 00x1}}
{10x1 \ {1001, 1011}, xx10 \ {1x10, x110, 1110}}
{x1x1 \ {1101, 0111, 01x1, 11x1, x101}, 1010}
{010x \ {0101, 0100}}
{x11x \ {1111, 0111, 111x}, 0x00 \ {0100}}
{0000 \ {0000}}
{x0x0 \ {x010}}
{1x0x \ {100x, 110x}}
{0000 \ {0000}}
{xx10 \ {0x10, x110, 0010}, 01x0 \ {0100, 0110, 0110}}
{1x0x \ {1101, 100x, 1001}, 0xxx \ {0100, 0x10, 0010}}
{1010 \ {1010}, 0000 \ {0000}, x0x0 \ {1000, 0010, x000, x010, x010, 10x0}}
{1x0x \ {1100, 110x, 1000}, 1xx0 \ {1x10, 1x00, 10x0}, 1x1x \ {101x, 1111, 1x10}}
{1x10 \ {1010, 1110, 1110}}
{1010 \ {1010}}
{}
{0x0x \ {0x01, 0001, 0x00}}
{}
{}
{x11x \ {1110, 0110, x111}}
{}
{0x00 \ {0000, 0100, 0100}}
{xxx1 \ {x011, 0101, 1x01}}
{}
{x1x1 \ {01x1, 0111, 1111}}
{01xx \ {0110, 0101, 01x1}}
{x1x1 \ {x1x1}}
{1x1x \ {1010, 111x, 1x10}}
{}
{}
{}
{10x0 \ {1000, 1010, 1010}}
{}
{}
{x0x1 \ {1001, x001}, x01x \ {x010, 1011}}
{}
{0x1x \ {011x, 001x}, x0xx \ {x00x, 0011, 1001}}
{xx00 \ {1100, x100}}
{0000 \ {0000}}
{xx00 \ {0100, 1100, 1100}, x11x \ {x110, x111, 0111}}
{0xx1 \ {00x1, 0011, 0x01}}
{1111 \ {1111}}
{x0x1 \ {0011, 1001, 00x1}, 0x0x \ {0000, 0101, 000x}}
{x100 \ {0100}}
{0000}
{}
{}
{}
{xx10 \ {0110, 0x10}}
{x0xx \ {x000, 10x1, 0001}}
{1010}
{}
{x0x1 \ {00x1, 1011, 1011}}
{}
{}
{01xx \ {010x, 011x}}
{}
{}
{x1xx \ {11xx, 01xx, 010x}, xxx1 \ {00x1, 1101, 0001}}
{}
{xxxx \ {00x1, 010x, x111}, x101 \ {0101, 1101}}
{0xx0 \ {0110, 0000, 0010}, 1x01 \ {1101, 1001}, 0x0x \ {0101, 0100, 0000}}
{x0x0 \ {1000, 0010, 10x0}, 0101 \ {0101}, 0x0x \ {0100, 0001, 000x}}
{x01x \ {0011, 101x, 101x}}
{x101 \ {1101, 0101, 0101}}
{}
{xx10 \ {1x10, x110, 0x10}}
{1x01 \ {1001, 1101, 1101}, 1xx1 \ {11x1, 1x01, 1111}}
{}
{0xx0 \ {0x00, 0010, 0010}}
{x0xx \ {00x1, 10x0, 00x0}}
{x0x0 \ {x0x0}}
{x001 \ {0001, 1001}, 1x00 \ {1000, 1100, 1100}}
{10xx \ {101x, 1011, 100x}, 1xxx \ {1011, 1xx0, 1111}}
{0101 \ {0101}, 0000 \ {0000}}
{x0x0 \ {0000, x010, 1000}, xx0x \ {1x0x, 0001, 1101}, xxx0 \ {11x0, 0xx0, 1xx0}}
{001x \ {0010, 0011}}
{1010 \ {1010}}
{xx1x \ {x110, 1x10, 101x}, xx01 \ {0001, 0101, 1x01}, 0xx0 \ {0x00, 0010, 0100}}
{xxxx \ {1010, xxx1, 100x}, xxx1 \ {01x1, 0011, 00x1}}
{1x1x \ {1110, 1011, 111x}, 1111, 0101 \ {0101}, x0x0 \ {1000, 0010, x000}}
{xx1x \ {001x, 1x10, 111x}}
{x101 \ {0101}, x1xx \ {11x1, 0101, x1x0}}
{1x1x \ {1110, 1011, 101x}}
{01xx \ {01x0, 01x1, 0110}}
{}
{}
{xxxx \ {101x, 0xx1, xx0x}, xx0x \ {0001, 1101}}
{0xx0 \ {0110, 00x0}, 1xx0 \ {11x0, 1010, 1100}}
{x0x0 \ {1000, 0010, x000, 10x0}, 0000}
{0xxx \ {01xx, 00x1, 00x0}, xxx1 \ {1101, 0101, 0x01}}
{0xx1 \ {01x1, 0011, 0011}, x00x \ {100x, 1001, x000}, xxx0 \ {x0x0, 1100, 1110}}
{0x0x \ {0100, 0001, 000x, 0x01, 0x00}, x0x0 \ {x0x0}, x1x1 \ {1101, 0111, 11x1, 11x1}, 0101}
{xxxx \ {01xx, 0xx0, 1xxx}}
{}
{}
{xxx0 \ {x010, 0100}}
{11xx \ {1100, 11x1, 11x1}}
{x0x0 \ {1000, 0010, 00x0}}
{00x0 \ {0010, 0000}}
{1x0x \ {110x, 1100, 1001}}
{0000 \ {0000}}
{xxx1 \ {xx11, 00x1, 1x01}}
{}
{}
{xx10 \ {x010, x110, 0110}}
{00x1 \ {0011, 0001}, xx0x \ {x101, 0x01, 0x0x}, x11x \ {0111, 111x}}
{1010 \ {1010}}
{}
{xx0x \ {100x, 0x00, x000}}
{}
{}
{}
{}
{x011 \ {1011, 0011, 0011}, x0x0 \ {00x0, 1000, 1010}}
{}
{}
{}
{0xx1 \ {0x01, 0011, 0x11}}
{}
{x010 \ {0010, 1010}, xxx0 \ {1010, xx00, 00x0}}
{xx10 \ {0x10, x110, x010}}
{1010 \ {1010}}
{x01x \ {x010, 001x}}
{xxx0 \ {0000, 01x0, 1x00}, xxx1 \ {0x11, 0111, 1xx1}}
{1010 \ {1010}, 1111 \ {1111}}
{100x \ {1001, 1000, 1000}}
{0x1x \ {0111, 0010, 0011}, xxx1 \ {11x1, 1011, 0011}}
{0101 \ {0101}}
{1x0x \ {1101, 1x00, 1001}}
{0xx0 \ {0010, 00x0, 0x00}, 1x00 \ {1100, 1000}}
{0000 \ {0000}}
{0xxx \ {01x0, 000x, 00x1}, xx1x \ {0111, 1011, 0x11}}
{}
{}
{xx1x \ {1110, 1111}}
{xx1x \ {111x, x010, x011}, xx1x \ {0x1x, 1010, 011x}}
{1x1x \ {1110, 1011}}
t1:{0111}
t2:{1100, 1101}
t:{1101}
{x0000 \ {10000, 00000}}
{0x01x \ {00010, 0x011, 0101x}}
{}

{00xx1 \ {00101, 000x1, 00111}, 1xx10 \ {10010, 11010}}
{x0111 \ {10111}, 0101x \ {01011}}
{
   x011100x11 \ {
   x011100011, x011100111, 1011100x11}, 0101100x11 \ {
   0101100011, 0101100111, 0101100x11}, 010101xx10 \ {
   0101010010, 0101011010}}

{01x11 \ {01011, 01111}, 1x0xx \ {10011, 11011, 110x1}}
{}
{}

{1x110 \ {10110}, 10x10 \ {10110, 10010}}
{110xx \ {1101x, 110x1, 110x0}}
{
   110101x110 \ {
   1101010110, 110101x110, 110101x110}, 1101010x10 \ {
   1101010110, 1101010010, 1101010x10, 1101010x10}}

{xx01x \ {01010, x101x, 0101x}, 0xx01 \ {01001, 01101}, xx110 \ {11110, 01110, 00110}}
{0xx0x \ {0000x, 00x01, 0100x}}
{
   0xx010xx01 \ {
   0xx0101001, 0xx0101101, 000010xx01, 00x010xx01, 010010xx01}}

{x0100 \ {00100}, 0x11x \ {0011x, 0x110, 00111}, xx001 \ {11001, 01001}}
{0x1x1 \ {001x1, 01111, 0x101}, x1xxx \ {11x1x, 01011, 11001}, 00xxx \ {000x0, 00xx0, 001x1}}
{
   x1x00x0100 \ {
   x1x0000100}, 00x00x0100 \ {
   00x0000100, 00000x0100, 00x00x0100}, 0x1110x111 \ {
   0x11100111, 0x11100111, 001110x111, 011110x111}, x1x1x0x11x \ {
   x1x110x110, x1x100x111, x1x1x0011x, x1x1x0x110, x1x1x00111, 11x1x0x11x, 010110x11x}, 00x1x0x11x \ {
   00x110x110, 00x100x111, 00x1x0011x, 00x1x0x110, 00x1x00111, 000100x11x, 00x100x11x, 001110x11x}, 0x101xx001 \ {
   0x10111001, 0x10101001, 00101xx001, 0x101xx001}, x1x01xx001 \ {
   x1x0111001, x1x0101001, 11001xx001}, 00x01xx001 \ {
   00x0111001, 00x0101001, 00101xx001}}

{xxxx0 \ {x11x0, 0xx00, 111x0}}
{xx00x \ {11001, x0000}}
{
   xx000xxx00 \ {
   xx000x1100, xx0000xx00, xx00011100, x0000xxx00}}

{xxx01 \ {00001, 01001, 11x01}}
{xxxx1 \ {x1101, 10x01, 0x011}}
{
   xxx01xxx01 \ {
   xxx0100001, xxx0101001, xxx0111x01, x1101xxx01, 10x01xxx01}}

{}
{xx001 \ {x1001, 0x001}}
{}

{xx1xx \ {xx101, 1x10x, 0111x}}
{00xx1 \ {00001, 00111, 00011}}
{
   00xx1xx1x1 \ {
   00x11xx101, 00x01xx111, 00xx1xx101, 00xx11x101, 00xx101111, 00001xx1x1, 00111xx1x1, 00011xx1x1}}

{01x0x \ {01100, 01001, 01x01}, 0xxxx \ {00xx0, 0x0xx, 0xx00}}
{xx00x \ {xx001, x000x, 0000x}}
{
   xx00x01x0x \ {
   xx00101x00, xx00001x01, xx00x01100, xx00x01001, xx00x01x01, xx00101x0x, x000x01x0x, 0000x01x0x}, xx00x0xx0x \ {
   xx0010xx00, xx0000xx01, xx00x00x00, xx00x0x00x, xx00x0xx00, xx0010xx0x, x000x0xx0x, 0000x0xx0x}}

{11x1x \ {11010, 11011, 11011}, 01xxx \ {01010, 010xx, 01x1x}}
{}
{}

{1xx0x \ {1000x, 10x0x, 11101}, 1x1x1 \ {10111, 111x1, 11111}}
{0xxxx \ {00111, 0x100, 01xx1}, xx01x \ {0x011, 11010, x101x}}
{
   0xx0x1xx0x \ {
   0xx011xx00, 0xx001xx01, 0xx0x1000x, 0xx0x10x0x, 0xx0x11101, 0x1001xx0x, 01x011xx0x}, 0xxx11x1x1 \ {
   0xx111x101, 0xx011x111, 0xxx110111, 0xxx1111x1, 0xxx111111, 001111x1x1, 01xx11x1x1}, xx0111x111 \ {
   xx01110111, xx01111111, xx01111111, 0x0111x111, x10111x111}}

{110xx \ {11000, 110x1, 11010}}
{x0111 \ {10111}, 11xxx \ {11110, 11x1x, 110x0}}
{
   x011111011 \ {
   x011111011, 1011111011}, 11xxx110xx \ {
   11xx1110x0, 11xx0110x1, 11x1x1100x, 11x0x1101x, 11xxx11000, 11xxx110x1, 11xxx11010, 11110110xx, 11x1x110xx, 110x0110xx}}

{x0110 \ {10110, 00110, 00110}}
{xx00x \ {x0000, 1x000, 0000x}, 1x0x1 \ {10011, 1x001, 1x001}}
{}

{0x11x \ {00110, 01111, 0x110}}
{x01x0 \ {00100, 10100, x0100}}
{
   x01100x110 \ {
   x011000110, x01100x110}}

{0xxxx \ {00111, 00xxx, 0x1x1}, 00x10 \ {00110, 00010}}
{x10xx \ {x10x0, 11000, 010x1}, x1xx0 \ {x11x0, x10x0, 011x0}}
{
   x10xx0xxxx \ {
   x10x10xxx0, x10x00xxx1, x101x0xx0x, x100x0xx1x, x10xx00111, x10xx00xxx, x10xx0x1x1, x10x00xxxx, 110000xxxx, 010x10xxxx}, x1xx00xxx0 \ {
   x1x100xx00, x1x000xx10, x1xx000xx0, x11x00xxx0, x10x00xxx0, 011x00xxx0}, x101000x10 \ {
   x101000110, x101000010, x101000x10}, x1x1000x10 \ {
   x1x1000110, x1x1000010, x111000x10, x101000x10, 0111000x10}}

{0xxx0 \ {01010, 00110, 01100}, xxx10 \ {01110, x0010, x1110}}
{00xxx \ {00010, 0010x, 00111}, x11xx \ {1111x, x110x, 11100}}
{
   00xx00xxx0 \ {
   00x100xx00, 00x000xx10, 00xx001010, 00xx000110, 00xx001100, 000100xxx0, 001000xxx0}, x11x00xxx0 \ {
   x11100xx00, x11000xx10, x11x001010, x11x000110, x11x001100, 111100xxx0, x11000xxx0, 111000xxx0}, 00x10xxx10 \ {
   00x1001110, 00x10x0010, 00x10x1110, 00010xxx10}, x1110xxx10 \ {
   x111001110, x1110x0010, x1110x1110, 11110xxx10}}

{0x0x0 \ {000x0, 01010, 01000}}
{xx1xx \ {x1100, xx101, 0x1x1}, 0x01x \ {00011, 0x010}}
{
   xx1x00x0x0 \ {
   xx1100x000, xx1000x010, xx1x0000x0, xx1x001010, xx1x001000, x11000x0x0}, 0x0100x010 \ {
   0x01000010, 0x01001010, 0x0100x010}}

{xx110 \ {01110, x0110, x0110}, 10x11 \ {10111, 10011}, 0x1xx \ {01111, 011xx, 01100}}
{x100x \ {0100x, x1000, 11000}, x100x \ {0100x, 01000, x1000}}
{
   x100x0x10x \ {
   x10010x100, x10000x101, x100x0110x, x100x01100, 0100x0x10x, x10000x10x, 110000x10x}}

{100x1 \ {10011}, xx111 \ {00111, 01111, x1111}}
{xxx0x \ {0xx0x, xx001, x000x}}
{
   xxx0110001 \ {
   0xx0110001, xx00110001, x000110001}}

{000xx \ {00000, 000x0, 0000x}}
{1100x \ {11001, 11000}, x011x \ {0011x, x0110, 00110}, xxx00 \ {1x000, x1100, 01x00}}
{
   1100x0000x \ {
   1100100000, 1100000001, 1100x00000, 1100x00000, 1100x0000x, 110010000x, 110000000x}, x011x0001x \ {
   x011100010, x011000011, x011x00010, 0011x0001x, x01100001x, 001100001x}, xxx0000000 \ {
   xxx0000000, xxx0000000, xxx0000000, 1x00000000, x110000000, 01x0000000}}

{0xxx1 \ {00x01, 0x1x1, 01x01}, x1x01 \ {01x01, 11101}}
{xx110 \ {x1110, 11110, 1x110}, 01x00 \ {01100, 01000}}
{}

{}
{x100x \ {1100x, x1001, 01001}, 00xx1 \ {00x01, 00001}, 111x0 \ {11100, 11110}}
{}

{1111x \ {11111}, x11x1 \ {11111, 011x1, 011x1}, 0x1xx \ {0x10x, 0x1x0, 001x0}}
{0x111 \ {01111, 00111}, 0111x \ {01110}}
{
   0x11111111 \ {
   0x11111111, 0111111111, 0011111111}, 0111x1111x \ {
   0111111110, 0111011111, 0111x11111, 011101111x}, 0x111x1111 \ {
   0x11111111, 0x11101111, 0x11101111, 01111x1111, 00111x1111}, 01111x1111 \ {
   0111111111, 0111101111, 0111101111}, 0x1110x111 \ {
   011110x111, 001110x111}, 0111x0x11x \ {
   011110x110, 011100x111, 0111x0x110, 0111x00110, 011100x11x}}

{11xxx \ {11xx1, 11111, 110x1}, 00x10 \ {00110, 00010}}
{x0011 \ {00011, 10011}, 0001x \ {00010, 00011}}
{
   x001111x11 \ {
   x001111x11, x001111111, x001111011, 0001111x11, 1001111x11}, 0001x11x1x \ {
   0001111x10, 0001011x11, 0001x11x11, 0001x11111, 0001x11011, 0001011x1x, 0001111x1x}, 0001000x10 \ {
   0001000110, 0001000010, 0001000x10}}

{1xx00 \ {11x00, 11100, 1x100}, 0x10x \ {00100, 01101, 01100}}
{1010x \ {10101, 10100}}
{
   101001xx00 \ {
   1010011x00, 1010011100, 101001x100, 101001xx00}, 1010x0x10x \ {
   101010x100, 101000x101, 1010x00100, 1010x01101, 1010x01100, 101010x10x, 101000x10x}}

{0x0xx \ {010xx, 000xx, 01011}}
{0110x \ {01100, 01101}}
{
   0110x0x00x \ {
   011010x000, 011000x001, 0110x0100x, 0110x0000x, 011000x00x, 011010x00x}}

{1x00x \ {1x001, 1100x, 10000}, 111xx \ {11110, 11101, 111x0}}
{01xx0 \ {01x10, 01000, 01010}, x1x10 \ {11010, 01110, 11110}, x11x0 \ {01100, x1110, 011x0}}
{
   01x001x000 \ {
   01x0011000, 01x0010000, 010001x000}, x11001x000 \ {
   x110011000, x110010000, 011001x000, 011001x000}, 01xx0111x0 \ {
   01x1011100, 01x0011110, 01xx011110, 01xx0111x0, 01x10111x0, 01000111x0, 01010111x0}, x1x1011110 \ {
   x1x1011110, x1x1011110, 1101011110, 0111011110, 1111011110}, x11x0111x0 \ {
   x111011100, x110011110, x11x011110, x11x0111x0, 01100111x0, x1110111x0, 011x0111x0}}

{xx1x0 \ {01110, x01x0, 101x0}, xx01x \ {1001x, 11010, x1010}}
{0xxx1 \ {01001, 00x11, 00001}, x00x0 \ {000x0, x0010, x0010}}
{
   x00x0xx1x0 \ {
   x0010xx100, x0000xx110, x00x001110, x00x0x01x0, x00x0101x0, 000x0xx1x0, x0010xx1x0, x0010xx1x0}, 0xx11xx011 \ {
   0xx1110011, 00x11xx011}, x0010xx010 \ {
   x001010010, x001011010, x0010x1010, 00010xx010, x0010xx010, x0010xx010}}

{}
{x0x1x \ {1001x, 10011, 10111}}
{}

{00x11 \ {00111, 00011, 00011}, 1xx0x \ {10x0x, 10001, 1x10x}}
{1xx01 \ {1x001, 10101, 11x01}, x1001 \ {11001, 01001}}
{
   1xx011xx01 \ {
   1xx0110x01, 1xx0110001, 1xx011x101, 1x0011xx01, 101011xx01, 11x011xx01}, x10011xx01 \ {
   x100110x01, x100110001, x10011x101, 110011xx01, 010011xx01}}

{xxxxx \ {1x001, xx011, 1x10x}, 000x1 \ {00011, 00001, 00001}, xx100 \ {10100, 1x100}}
{1100x \ {11001, 11000, 11000}, 0x10x \ {01100, 01101}}
{
   1100xxxx0x \ {
   11001xxx00, 11000xxx01, 1100x1x001, 1100x1x10x, 11001xxx0x, 11000xxx0x, 11000xxx0x}, 0x10xxxx0x \ {
   0x101xxx00, 0x100xxx01, 0x10x1x001, 0x10x1x10x, 01100xxx0x, 01101xxx0x}, 1100100001 \ {
   1100100001, 1100100001, 1100100001}, 0x10100001 \ {
   0x10100001, 0x10100001, 0110100001}, 11000xx100 \ {
   1100010100, 110001x100, 11000xx100, 11000xx100}, 0x100xx100 \ {
   0x10010100, 0x1001x100, 01100xx100}}

{xxx01 \ {10101, 1x001, 0x101}}
{1xx10 \ {11110, 10x10}}
{}

{xxx0x \ {x1x00, 1x001, 01000}}
{01xx0 \ {01000, 01110, 010x0}, 000xx \ {000x1, 00010, 00010}, 0x11x \ {0x111, 00111, 00111}}
{
   01x00xxx00 \ {
   01x00x1x00, 01x0001000, 01000xxx00, 01000xxx00}, 0000xxxx0x \ {
   00001xxx00, 00000xxx01, 0000xx1x00, 0000x1x001, 0000x01000, 00001xxx0x}}

{}
{xxxx1 \ {0x111, 101x1, 01xx1}, 10xxx \ {10101, 10xx0, 100x1}}
{}

{x1001 \ {01001, 11001}, 0xx10 \ {00x10, 01110, 0x010}}
{xxxx1 \ {1xx01, 0xx01, 110x1}, 11xx1 \ {11x11, 111x1, 111x1}, x0x1x \ {1011x, 1001x, 0011x}}
{
   xxx01x1001 \ {
   xxx0101001, xxx0111001, 1xx01x1001, 0xx01x1001, 11001x1001}, 11x01x1001 \ {
   11x0101001, 11x0111001, 11101x1001, 11101x1001}, x0x100xx10 \ {
   x0x1000x10, x0x1001110, x0x100x010, 101100xx10, 100100xx10, 001100xx10}}

{x0x11 \ {10111, x0011, 10x11}}
{0xx11 \ {01011, 01111, 01111}, x0xx1 \ {00111, x0101, 00011}, 0x00x \ {0x001, 01001, 0x000}}
{
   0xx11x0x11 \ {
   0xx1110111, 0xx11x0011, 0xx1110x11, 01011x0x11, 01111x0x11, 01111x0x11}, x0x11x0x11 \ {
   x0x1110111, x0x11x0011, x0x1110x11, 00111x0x11, 00011x0x11}}

{11x1x \ {11011, 11x11}}
{x0110 \ {10110}}
{
   x011011x10 \ {
   1011011x10}}

{010xx \ {0101x, 01010, 010x1}, x1x11 \ {11x11, x1111}}
{}
{}

{0xxx1 \ {0x101, 0x011, 010x1}, 00x1x \ {00x10, 00011}}
{0x11x \ {0x110, 0x111, 01110}}
{
   0x1110xx11 \ {
   0x1110x011, 0x11101011, 0x1110xx11}, 0x11x00x1x \ {
   0x11100x10, 0x11000x11, 0x11x00x10, 0x11x00011, 0x11000x1x, 0x11100x1x, 0111000x1x}}

{x0101 \ {00101, 10101, 10101}, 1x1xx \ {11111, 1110x, 111x0}}
{}
{}

{1xxxx \ {11xxx, 1xx01, 11001}, 01x01 \ {01101, 01001, 01001}}
{xx1x0 \ {0x1x0, x01x0, 001x0}, x1000 \ {11000}}
{
   xx1x01xxx0 \ {
   xx1101xx00, xx1001xx10, xx1x011xx0, 0x1x01xxx0, x01x01xxx0, 001x01xxx0}, x10001xx00 \ {
   x100011x00, 110001xx00}}

{x0111 \ {00111, 10111}, 1101x \ {11010, 11011}}
{0xx00 \ {01100, 01000, 00100}}
{}

{}
{x0x1x \ {0001x, 10x10, x0x11}}
{}

{}
{}
{}

{11xx1 \ {11011, 110x1, 111x1}, xx00x \ {xx001, x000x}}
{0x0xx \ {00001, 0001x, 000x1}}
{
   0x0x111xx1 \ {
   0x01111x01, 0x00111x11, 0x0x111011, 0x0x1110x1, 0x0x1111x1, 0000111xx1, 0001111xx1, 000x111xx1}, 0x00xxx00x \ {
   0x001xx000, 0x000xx001, 0x00xxx001, 0x00xx000x, 00001xx00x, 00001xx00x}}

{xx010 \ {00010, 11010, x0010}}
{0x11x \ {0x111, 01111}}
{
   0x110xx010 \ {
   0x11000010, 0x11011010, 0x110x0010}}

{000xx \ {000x0, 0000x, 000x1}}
{0x11x \ {01111, 00110, 00111}, x11x1 \ {11101, 111x1}}
{
   0x11x0001x \ {
   0x11100010, 0x11000011, 0x11x00010, 0x11x00011, 011110001x, 001100001x, 001110001x}, x11x1000x1 \ {
   x111100001, x110100011, x11x100001, x11x1000x1, 11101000x1, 111x1000x1}}

{xxx10 \ {00010, 11110, 10x10}, 0x110 \ {01110, 00110}, 1x1x0 \ {111x0, 101x0}}
{011xx \ {01111, 0110x}, 1xx00 \ {11x00, 10x00, 1x100}, 1x0x1 \ {10011, 110x1}}
{
   01110xxx10 \ {
   0111000010, 0111011110, 0111010x10}, 011100x110 \ {
   0111001110, 0111000110}, 011x01x1x0 \ {
   011101x100, 011001x110, 011x0111x0, 011x0101x0, 011001x1x0}, 1xx001x100 \ {
   1xx0011100, 1xx0010100, 11x001x100, 10x001x100, 1x1001x100}}

{x11x1 \ {x1101, 11101, 011x1}, xx1x0 \ {01110, 1x1x0, xx110}}
{x111x \ {01111, 01110, 11111}, 001x0 \ {00110, 00100, 00100}}
{
   x1111x1111 \ {
   x111101111, 01111x1111, 11111x1111}, x1110xx110 \ {
   x111001110, x11101x110, x1110xx110, 01110xx110}, 001x0xx1x0 \ {
   00110xx100, 00100xx110, 001x001110, 001x01x1x0, 001x0xx110, 00110xx1x0, 00100xx1x0, 00100xx1x0}}

{1xxxx \ {1xx00, 1100x, 1x111}, 10x10 \ {10110, 10010, 10010}}
{x001x \ {00010, 0001x}, 11xxx \ {11x00, 111xx, 1110x}}
{
   x001x1xx1x \ {
   x00111xx10, x00101xx11, x001x1x111, 000101xx1x, 0001x1xx1x}, 11xxx1xxxx \ {
   11xx11xxx0, 11xx01xxx1, 11x1x1xx0x, 11x0x1xx1x, 11xxx1xx00, 11xxx1100x, 11xxx1x111, 11x001xxxx, 111xx1xxxx, 1110x1xxxx}, x001010x10 \ {
   x001010110, x001010010, x001010010, 0001010x10, 0001010x10}, 11x1010x10 \ {
   11x1010110, 11x1010010, 11x1010010, 1111010x10}}

{00x1x \ {00010, 00110, 00x10}}
{1x1x0 \ {1x100, 11110, 101x0}, 100x0 \ {10000}, x101x \ {x1010, 11010, 11010}}
{
   1x11000x10 \ {
   1x11000010, 1x11000110, 1x11000x10, 1111000x10, 1011000x10}, 1001000x10 \ {
   1001000010, 1001000110, 1001000x10}, x101x00x1x \ {
   x101100x10, x101000x11, x101x00010, x101x00110, x101x00x10, x101000x1x, 1101000x1x, 1101000x1x}}

{00x1x \ {00x11, 00011, 00x10}}
{1x0xx \ {11000, 100x0, 100xx}, 0x11x \ {0x111, 00110, 0111x}}
{
   1x01x00x1x \ {
   1x01100x10, 1x01000x11, 1x01x00x11, 1x01x00011, 1x01x00x10, 1001000x1x, 1001x00x1x}, 0x11x00x1x \ {
   0x11100x10, 0x11000x11, 0x11x00x11, 0x11x00011, 0x11x00x10, 0x11100x1x, 0011000x1x, 0111x00x1x}}

{11xx0 \ {11000, 11100, 11x00}, 1x101 \ {10101, 11101, 11101}}
{0xxx1 \ {01xx1, 0x011, 01011}, xxx11 \ {xx011, 0xx11, 01011}}
{
   0xx011x101 \ {
   0xx0110101, 0xx0111101, 0xx0111101, 01x011x101}}

{}
{xx1x0 \ {x1100, 11100, 111x0}, xx110 \ {01110, 10110, 11110}}
{}

{}
{xxxx0 \ {xx100, x0110, 11100}, 000x1 \ {00011}}
{}

{x0xx0 \ {00100, x0x10, 00110}, 1x10x \ {10101, 1x100, 1x100}}
{00x10 \ {00110}}
{
   00x10x0x10 \ {
   00x10x0x10, 00x1000110, 00110x0x10}}

{011xx \ {0111x, 0110x, 0110x}}
{xx1x1 \ {01101, 0x111, 10101}}
{
   xx1x1011x1 \ {
   xx11101101, xx10101111, xx1x101111, xx1x101101, xx1x101101, 01101011x1, 0x111011x1, 10101011x1}}

{xx11x \ {00111, 01111, 1111x}}
{}
{}

{0x0x1 \ {000x1, 0x011, 01001}, 10x0x \ {10001, 1010x, 10100}, 1x001 \ {11001}}
{x11x1 \ {x1111, 111x1, 011x1}}
{
   x11x10x0x1 \ {
   x11110x001, x11010x011, x11x1000x1, x11x10x011, x11x101001, x11110x0x1, 111x10x0x1, 011x10x0x1}, x110110x01 \ {
   x110110001, x110110101, 1110110x01, 0110110x01}, x11011x001 \ {
   x110111001, 111011x001, 011011x001}}

{x1x1x \ {1101x, 11110, 0111x}, xxxxx \ {0x101, x1x1x, 011x0}, 1xx01 \ {1x001, 10x01, 10x01}}
{x1x01 \ {11101, 01001, 01001}}
{
   x1x01xxx01 \ {
   x1x010x101, 11101xxx01, 01001xxx01, 01001xxx01}, x1x011xx01 \ {
   x1x011x001, x1x0110x01, x1x0110x01, 111011xx01, 010011xx01, 010011xx01}}

{11xx0 \ {11110, 110x0}}
{x0x1x \ {10x10, 00x10, 00x1x}}
{
   x0x1011x10 \ {
   x0x1011110, x0x1011010, 10x1011x10, 00x1011x10, 00x1011x10}}

{x1xxx \ {110xx, x1111, 01x11}}
{0xx11 \ {0x011, 01x11, 01x11}, 00x1x \ {00x10, 00x11, 0001x}}
{
   0xx11x1x11 \ {
   0xx1111011, 0xx11x1111, 0xx1101x11, 0x011x1x11, 01x11x1x11, 01x11x1x11}, 00x1xx1x1x \ {
   00x11x1x10, 00x10x1x11, 00x1x1101x, 00x1xx1111, 00x1x01x11, 00x10x1x1x, 00x11x1x1x, 0001xx1x1x}}

{01x01 \ {01001, 01101}, xxxx0 \ {xxx10, x00x0, x0010}}
{x1xx1 \ {11101, 11x11, x1001}, xx1xx \ {x01x1, xx1x1, x111x}, xxx1x \ {0101x, 11010, x0110}}
{
   x1x0101x01 \ {
   x1x0101001, x1x0101101, 1110101x01, x100101x01}, xx10101x01 \ {
   xx10101001, xx10101101, x010101x01, xx10101x01}, xx1x0xxxx0 \ {
   xx110xxx00, xx100xxx10, xx1x0xxx10, xx1x0x00x0, xx1x0x0010, x1110xxxx0}, xxx10xxx10 \ {
   xxx10xxx10, xxx10x0010, xxx10x0010, 01010xxx10, 11010xxx10, x0110xxx10}}

{01x1x \ {01011, 0111x, 0111x}, 01x01 \ {01001, 01101}}
{11x1x \ {11011, 11111}, 1x1x1 \ {11111, 111x1, 11101}}
{
   11x1x01x1x \ {
   11x1101x10, 11x1001x11, 11x1x01011, 11x1x0111x, 11x1x0111x, 1101101x1x, 1111101x1x}, 1x11101x11 \ {
   1x11101011, 1x11101111, 1x11101111, 1111101x11, 1111101x11}, 1x10101x01 \ {
   1x10101001, 1x10101101, 1110101x01, 1110101x01}}

{0xxx0 \ {01110, 0x110}}
{xxx0x \ {1110x, 0x000, x0x00}, 0xx0x \ {01x00, 01x0x}}
{
   xxx000xx00 \ {
   111000xx00, 0x0000xx00, x0x000xx00}, 0xx000xx00 \ {
   01x000xx00, 01x000xx00}}

{}
{1101x \ {11010, 11011}}
{}

{x1x11 \ {11x11, x1011, 01x11}}
{}
{}

{1xx00 \ {1x100, 1x000}}
{x000x \ {00000, x0001}, 01xxx \ {01x0x, 01000, 01xx0}}
{
   x00001xx00 \ {
   x00001x100, x00001x000, 000001xx00}, 01x001xx00 \ {
   01x001x100, 01x001x000, 01x001xx00, 010001xx00, 01x001xx00}}

{0x11x \ {01111, 00110, 00111}, 100xx \ {100x0, 100x1, 10001}}
{}
{}

{010xx \ {01001, 01011, 01000}, 01xx0 \ {01110, 01100}, 111x0 \ {11100}}
{}
{}

{xxx11 \ {10011, x0011, x0x11}, 1x00x \ {11000, 10001, 10001}, 0xxx0 \ {0x110, 01x00, 0xx00}}
{}
{}

{xxx1x \ {xx111, 01011, 0001x}, 00x0x \ {0010x, 0000x, 00001}}
{}
{}

{00x0x \ {00101, 00100}, x0100 \ {10100, 00100}}
{0x00x \ {01001}}
{
   0x00x00x0x \ {
   0x00100x00, 0x00000x01, 0x00x00101, 0x00x00100, 0100100x0x}, 0x000x0100 \ {
   0x00010100, 0x00000100}}

{00x1x \ {00110, 0001x}, 001xx \ {00110, 001x0, 0011x}}
{xx001 \ {01001, x0001, 11001}}
{
   xx00100101 \ {
   0100100101, x000100101, 1100100101}}

{x00xx \ {x00x1, 10000, 1001x}, 11x11 \ {11011, 11111}, x11xx \ {01101, 01111, x1101}}
{}
{}

{xx0x1 \ {xx011, 00011, x0011}, xxxx0 \ {10110, 010x0, 010x0}, x10x0 \ {x1010, 110x0, 01010}}
{0x10x \ {00101, 01100, 0010x}}
{
   0x101xx001 \ {
   00101xx001, 00101xx001}, 0x100xxx00 \ {
   0x10001000, 0x10001000, 01100xxx00, 00100xxx00}, 0x100x1000 \ {
   0x10011000, 01100x1000, 00100x1000}}

{}
{0x1x1 \ {0x101, 01111, 01111}, x1x10 \ {x1110, 01110, 01110}, xx000 \ {11000, 00000}}
{}

{x10xx \ {x1000, 01011, 11010}, 1xx1x \ {1xx11, 10x1x, 10x11}}
{xxx00 \ {01100, 01x00, 01x00}}
{
   xxx00x1000 \ {
   xxx00x1000, 01100x1000, 01x00x1000, 01x00x1000}}

{}
{x11x1 \ {01111, 11101, 111x1}}
{}

{x1x1x \ {11x1x, x111x, 01011}, 1100x \ {11001, 11000}}
{0x001 \ {01001, 00001}}
{
   0x00111001 \ {
   0x00111001, 0100111001, 0000111001}}

{1xx00 \ {11000, 10000}, x1x01 \ {x1001, 01x01, 01x01}}
{x0x1x \ {x0011, 10x10, 00011}, x00x1 \ {x0001, 00011, 100x1}}
{
   x0001x1x01 \ {
   x0001x1001, x000101x01, x000101x01, x0001x1x01, 10001x1x01}}

{xxxx0 \ {01000, x1010, 11000}}
{10x1x \ {10010, 1011x, 10x10}, xx0x0 \ {0x0x0, 0x000, xx010}, x0xxx \ {10101, 001xx, 00x00}}
{
   10x10xxx10 \ {
   10x10x1010, 10010xxx10, 10110xxx10, 10x10xxx10}, xx0x0xxxx0 \ {
   xx010xxx00, xx000xxx10, xx0x001000, xx0x0x1010, xx0x011000, 0x0x0xxxx0, 0x000xxxx0, xx010xxxx0}, x0xx0xxxx0 \ {
   x0x10xxx00, x0x00xxx10, x0xx001000, x0xx0x1010, x0xx011000, 001x0xxxx0, 00x00xxxx0}}

{x1100 \ {11100}}
{x101x \ {x1010, 01011, x1011}, 00xx1 \ {00001, 00101}}
{}

{0x1x1 \ {001x1, 01111, 0x101}}
{x0x0x \ {10001, 00100, x0100}, xx001 \ {x1001, 00001, 00001}}
{
   x0x010x101 \ {
   x0x0100101, x0x010x101, 100010x101}, xx0010x101 \ {
   xx00100101, xx0010x101, x10010x101, 000010x101, 000010x101}}

{1100x \ {11001, 11000}, x1x0x \ {x1001, 11101, 11001}}
{x001x \ {10010, x0010}, xx001 \ {x0001, 01001, 11001}, 1110x \ {11101, 11100, 11100}}
{
   xx00111001 \ {
   xx00111001, x000111001, 0100111001, 1100111001}, 1110x1100x \ {
   1110111000, 1110011001, 1110x11001, 1110x11000, 111011100x, 111001100x, 111001100x}, xx001x1x01 \ {
   xx001x1001, xx00111101, xx00111001, x0001x1x01, 01001x1x01, 11001x1x01}, 1110xx1x0x \ {
   11101x1x00, 11100x1x01, 1110xx1001, 1110x11101, 1110x11001, 11101x1x0x, 11100x1x0x, 11100x1x0x}}

{xxx00 \ {x1100, 00000, 10x00}, 01xxx \ {01101, 010x0, 01x0x}}
{01xxx \ {011x0, 01x0x}}
{
   01x00xxx00 \ {
   01x00x1100, 01x0000000, 01x0010x00, 01100xxx00, 01x00xxx00}, 01xxx01xxx \ {
   01xx101xx0, 01xx001xx1, 01x1x01x0x, 01x0x01x1x, 01xxx01101, 01xxx010x0, 01xxx01x0x, 011x001xxx, 01x0x01xxx}}

{}
{xx110 \ {11110, 01110, 00110}, 1xx00 \ {11x00, 10x00, 1x000}}
{}

{10xxx \ {1011x, 10x01, 101x1}, xx111 \ {01111, 0x111, x1111}}
{x0xx1 \ {x01x1, 10111, 00111}, xx1x1 \ {10111, 10101, x11x1}}
{
   x0xx110xx1 \ {
   x0x1110x01, x0x0110x11, x0xx110111, x0xx110x01, x0xx1101x1, x01x110xx1, 1011110xx1, 0011110xx1}, xx1x110xx1 \ {
   xx11110x01, xx10110x11, xx1x110111, xx1x110x01, xx1x1101x1, 1011110xx1, 1010110xx1, x11x110xx1}, x0x11xx111 \ {
   x0x1101111, x0x110x111, x0x11x1111, x0111xx111, 10111xx111, 00111xx111}, xx111xx111 \ {
   xx11101111, xx1110x111, xx111x1111, 10111xx111, x1111xx111}}

{xx1xx \ {1011x, 00100, 00100}, x1x01 \ {01101}}
{01x10 \ {01110}, xx011 \ {x0011, 01011}}
{
   01x10xx110 \ {
   01x1010110, 01110xx110}, xx011xx111 \ {
   xx01110111, x0011xx111, 01011xx111}}

{00xx0 \ {000x0, 00010, 00010}, 01xx1 \ {011x1, 01101, 01x11}}
{1x01x \ {1101x, 1x010}, 0x1x0 \ {00100, 001x0, 01100}}
{
   1x01000x10 \ {
   1x01000010, 1x01000010, 1x01000010, 1101000x10, 1x01000x10}, 0x1x000xx0 \ {
   0x11000x00, 0x10000x10, 0x1x0000x0, 0x1x000010, 0x1x000010, 0010000xx0, 001x000xx0, 0110000xx0}, 1x01101x11 \ {
   1x01101111, 1x01101x11, 1101101x11}}

{1x01x \ {11010, 1x010, 11011}}
{11xx1 \ {11111, 11101, 110x1}, 10x1x \ {1001x, 10010, 10x10}, x1x01 \ {01x01, x1101, x1001}}
{
   11x111x011 \ {
   11x1111011, 111111x011, 110111x011}, 10x1x1x01x \ {
   10x111x010, 10x101x011, 10x1x11010, 10x1x1x010, 10x1x11011, 1001x1x01x, 100101x01x, 10x101x01x}}

{x0x11 \ {10011, 00x11, 10111}, xx1xx \ {x0101, x111x, 11100}, x0x0x \ {00001, x000x, 00x0x}}
{1x111 \ {10111}, x1xxx \ {x1101, x1000, 01001}}
{
   1x111x0x11 \ {
   1x11110011, 1x11100x11, 1x11110111, 10111x0x11}, x1x11x0x11 \ {
   x1x1110011, x1x1100x11, x1x1110111}, 1x111xx111 \ {
   1x111x1111, 10111xx111}, x1xxxxx1xx \ {
   x1xx1xx1x0, x1xx0xx1x1, x1x1xxx10x, x1x0xxx11x, x1xxxx0101, x1xxxx111x, x1xxx11100, x1101xx1xx, x1000xx1xx, 01001xx1xx}, x1x0xx0x0x \ {
   x1x01x0x00, x1x00x0x01, x1x0x00001, x1x0xx000x, x1x0x00x0x, x1101x0x0x, x1000x0x0x, 01001x0x0x}}

{x0xxx \ {x00xx, x0x11, 10010}}
{xxx0x \ {0x10x, 11x01, 0x000}, xxx10 \ {x1x10, 1x010, xx110}}
{
   xxx0xx0x0x \ {
   xxx01x0x00, xxx00x0x01, xxx0xx000x, 0x10xx0x0x, 11x01x0x0x, 0x000x0x0x}, xxx10x0x10 \ {
   xxx10x0010, xxx1010010, x1x10x0x10, 1x010x0x10, xx110x0x10}}

{x1x10 \ {x1110, x1010}, xx100 \ {10100, 11100}}
{}
{}

{x0111 \ {00111, 10111}, x1x00 \ {11x00, 11000, x1000}, xxxx1 \ {11101, 100x1, 1x001}}
{x00x1 \ {00011, 000x1, 10001}, 1x01x \ {10011, 1x011, 11010}}
{
   x0011x0111 \ {
   x001100111, x001110111, 00011x0111, 00011x0111}, 1x011x0111 \ {
   1x01100111, 1x01110111, 10011x0111, 1x011x0111}, x00x1xxxx1 \ {
   x0011xxx01, x0001xxx11, x00x111101, x00x1100x1, x00x11x001, 00011xxxx1, 000x1xxxx1, 10001xxxx1}, 1x011xxx11 \ {
   1x01110011, 10011xxx11, 1x011xxx11}}

{x01xx \ {10100, 00110, 1011x}, x1111 \ {11111, 01111, 01111}}
{000x0 \ {00010, 00000, 00000}, x111x \ {11110, 01111, x1110}, 1xx10 \ {11x10, 10110, 10010}}
{
   000x0x01x0 \ {
   00010x0100, 00000x0110, 000x010100, 000x000110, 000x010110, 00010x01x0, 00000x01x0, 00000x01x0}, x111xx011x \ {
   x1111x0110, x1110x0111, x111x00110, x111x1011x, 11110x011x, 01111x011x, x1110x011x}, 1xx10x0110 \ {
   1xx1000110, 1xx1010110, 11x10x0110, 10110x0110, 10010x0110}, x1111x1111 \ {
   x111111111, x111101111, x111101111, 01111x1111}}

{0x0xx \ {0x01x, 000xx, 000x1}, 10x11 \ {10011, 10111}}
{010xx \ {01001, 010x0, 010x1}}
{
   010xx0x0xx \ {
   010x10x0x0, 010x00x0x1, 0101x0x00x, 0100x0x01x, 010xx0x01x, 010xx000xx, 010xx000x1, 010010x0xx, 010x00x0xx, 010x10x0xx}, 0101110x11 \ {
   0101110011, 0101110111, 0101110x11}}

{xx0xx \ {1x0xx, 10011, x10x0}, 10x1x \ {10011, 1001x, 10110}, 101x1 \ {10101}}
{}
{}

{001xx \ {00100, 001x1, 00101}, 1xxx1 \ {10xx1, 1x001, 11111}}
{0xx10 \ {01110, 01x10, 0x110}}
{
   0xx1000110 \ {
   0111000110, 01x1000110, 0x11000110}}

{}
{1110x \ {11100}}
{}

{1001x \ {10010}, 0100x \ {01001, 01000, 01000}}
{}
{}

{1x1x0 \ {10100, 10110, 11110}, 0010x \ {00100, 00101}}
{x110x \ {01100, x1101, 01101}, x1x01 \ {x1101, 01001, 01x01}}
{
   x11001x100 \ {
   x110010100, 011001x100}, x110x0010x \ {
   x110100100, x110000101, x110x00100, x110x00101, 011000010x, x11010010x, 011010010x}, x1x0100101 \ {
   x1x0100101, x110100101, 0100100101, 01x0100101}}

{11x1x \ {11x10, 11x11, 11111}}
{1xxx0 \ {1x0x0, 1x100, 100x0}}
{
   1xx1011x10 \ {
   1xx1011x10, 1x01011x10, 1001011x10}}

{01xx0 \ {01000, 01x10, 01x00}}
{x011x \ {10111, x0111, x0110}}
{
   x011001x10 \ {
   x011001x10, x011001x10}}

{0x0x1 \ {01001, 010x1, 0x001}}
{}
{}

{11x1x \ {11011, 1101x, 1101x}, 0001x \ {00011, 00010}, x0xx0 \ {x00x0, 10100, 00100}}
{10x1x \ {10111, 10110}, 10xx1 \ {10x01, 100x1, 101x1}}
{
   10x1x11x1x \ {
   10x1111x10, 10x1011x11, 10x1x11011, 10x1x1101x, 10x1x1101x, 1011111x1x, 1011011x1x}, 10x1111x11 \ {
   10x1111011, 10x1111011, 10x1111011, 1001111x11, 1011111x11}, 10x1x0001x \ {
   10x1100010, 10x1000011, 10x1x00011, 10x1x00010, 101110001x, 101100001x}, 10x1100011 \ {
   10x1100011, 1001100011, 1011100011}, 10x10x0x10 \ {
   10x10x0010, 10110x0x10}}

{1x01x \ {10011, 11011, 11011}, x1101 \ {01101, 11101}}
{x0xx0 \ {x0110, x0x00, 00100}}
{
   x0x101x010 \ {
   x01101x010}}

{xxxx1 \ {x1xx1, xx1x1, x1101}, 010x0 \ {01000}, x00x0 \ {10000, 000x0, 100x0}}
{xx011 \ {x1011, x0011}}
{
   xx011xxx11 \ {
   xx011x1x11, xx011xx111, x1011xxx11, x0011xxx11}}

{xxx11 \ {xx011, 1x111, 00011}, 11x0x \ {11100, 11x01, 1100x}, xx0x0 \ {010x0, xx010, x10x0}}
{x1x01 \ {x1101, 01x01, 01001}, xx010 \ {00010, x1010, 1x010}}
{
   x1x0111x01 \ {
   x1x0111x01, x1x0111001, x110111x01, 01x0111x01, 0100111x01}, xx010xx010 \ {
   xx01001010, xx010xx010, xx010x1010, 00010xx010, x1010xx010, 1x010xx010}}

{x0x00 \ {00000, 10x00}, 1110x \ {11100, 11101, 11101}, x01xx \ {001x0, 1011x, 00111}}
{1x10x \ {11100, 11101, 10100}, 11xx0 \ {11000, 11x00}, x11x0 \ {111x0, 01100, x1100}}
{
   1x100x0x00 \ {
   1x10000000, 1x10010x00, 11100x0x00, 10100x0x00}, 11x00x0x00 \ {
   11x0000000, 11x0010x00, 11000x0x00, 11x00x0x00}, x1100x0x00 \ {
   x110000000, x110010x00, 11100x0x00, 01100x0x00, x1100x0x00}, 1x10x1110x \ {
   1x10111100, 1x10011101, 1x10x11100, 1x10x11101, 1x10x11101, 111001110x, 111011110x, 101001110x}, 11x0011100 \ {
   11x0011100, 1100011100, 11x0011100}, x110011100 \ {
   x110011100, 1110011100, 0110011100, x110011100}, 1x10xx010x \ {
   1x101x0100, 1x100x0101, 1x10x00100, 11100x010x, 11101x010x, 10100x010x}, 11xx0x01x0 \ {
   11x10x0100, 11x00x0110, 11xx0001x0, 11xx010110, 11000x01x0, 11x00x01x0}, x11x0x01x0 \ {
   x1110x0100, x1100x0110, x11x0001x0, x11x010110, 111x0x01x0, 01100x01x0, x1100x01x0}}

{}
{1xxxx \ {110x0, 11xx1, 111x1}, x11xx \ {11101, 1111x, 11100}}
{}

{}
{1011x \ {10111}, x0xx1 \ {x0011, x0101, 00xx1}}
{}

{1001x \ {10011, 10010, 10010}}
{0x0x1 \ {010x1, 01001, 000x1}}
{
   0x01110011 \ {
   0x01110011, 0101110011, 0001110011}}

{01xxx \ {0110x, 01101, 010x1}, x10xx \ {11010, 010x1, 01001}}
{xx0xx \ {x00x1, 010x0, 11001}}
{
   xx0xx01xxx \ {
   xx0x101xx0, xx0x001xx1, xx01x01x0x, xx00x01x1x, xx0xx0110x, xx0xx01101, xx0xx010x1, x00x101xxx, 010x001xxx, 1100101xxx}, xx0xxx10xx \ {
   xx0x1x10x0, xx0x0x10x1, xx01xx100x, xx00xx101x, xx0xx11010, xx0xx010x1, xx0xx01001, x00x1x10xx, 010x0x10xx, 11001x10xx}}

{x0x0x \ {00x01, x010x, x0101}, xx0xx \ {xx0x1, 010xx, 11001}}
{0x1x1 \ {011x1, 01101, 001x1}, 1x01x \ {1x010, 10010, 10010}}
{
   0x101x0x01 \ {
   0x10100x01, 0x101x0101, 0x101x0101, 01101x0x01, 01101x0x01, 00101x0x01}, 0x1x1xx0x1 \ {
   0x111xx001, 0x101xx011, 0x1x1xx0x1, 0x1x1010x1, 0x1x111001, 011x1xx0x1, 01101xx0x1, 001x1xx0x1}, 1x01xxx01x \ {
   1x011xx010, 1x010xx011, 1x01xxx011, 1x01x0101x, 1x010xx01x, 10010xx01x, 10010xx01x}}

{111x1 \ {11111, 11101}}
{000xx \ {00000, 00010, 00010}}
{
   000x1111x1 \ {
   0001111101, 0000111111, 000x111111, 000x111101}}

{xx011 \ {0x011, x1011}, x0x0x \ {00x01, 10101, 1000x}}
{xxx11 \ {x1011, 1x111, x1111}, xxx0x \ {0x001, 11x00, x0x0x}}
{
   xxx11xx011 \ {
   xxx110x011, xxx11x1011, x1011xx011, 1x111xx011, x1111xx011}, xxx0xx0x0x \ {
   xxx01x0x00, xxx00x0x01, xxx0x00x01, xxx0x10101, xxx0x1000x, 0x001x0x0x, 11x00x0x0x, x0x0xx0x0x}}

{}
{0x01x \ {00010, 0101x, 0001x}}
{}

{x1xxx \ {01100, 11x11, x111x}, 0xx01 \ {01x01, 0x101}, 1xx1x \ {10011, 10x11, 1x011}}
{x00xx \ {0000x, 10011, 000x0}, 11x1x \ {11011, 1111x, 11x10}}
{
   x00xxx1xxx \ {
   x00x1x1xx0, x00x0x1xx1, x001xx1x0x, x000xx1x1x, x00xx01100, x00xx11x11, x00xxx111x, 0000xx1xxx, 10011x1xxx, 000x0x1xxx}, 11x1xx1x1x \ {
   11x11x1x10, 11x10x1x11, 11x1x11x11, 11x1xx111x, 11011x1x1x, 1111xx1x1x, 11x10x1x1x}, x00010xx01 \ {
   x000101x01, x00010x101, 000010xx01}, x001x1xx1x \ {
   x00111xx10, x00101xx11, x001x10011, x001x10x11, x001x1x011, 100111xx1x, 000101xx1x}, 11x1x1xx1x \ {
   11x111xx10, 11x101xx11, 11x1x10011, 11x1x10x11, 11x1x1x011, 110111xx1x, 1111x1xx1x, 11x101xx1x}}

{xx11x \ {0x110, 00111, 01110}, 11x11 \ {11011, 11111, 11111}}
{1x0x1 \ {11011, 10011, 1x011}, xx01x \ {0x01x, 10010, xx010}}
{
   1x011xx111 \ {
   1x01100111, 11011xx111, 10011xx111, 1x011xx111}, xx01xxx11x \ {
   xx011xx110, xx010xx111, xx01x0x110, xx01x00111, xx01x01110, 0x01xxx11x, 10010xx11x, xx010xx11x}, 1x01111x11 \ {
   1x01111011, 1x01111111, 1x01111111, 1101111x11, 1001111x11, 1x01111x11}, xx01111x11 \ {
   xx01111011, xx01111111, xx01111111, 0x01111x11}}

{xx10x \ {x0101, 00101, xx101}, x01x1 \ {10101, 10111, 00111}}
{xxx11 \ {1x011, 0x111, x1011}}
{
   xxx11x0111 \ {
   xxx1110111, xxx1100111, 1x011x0111, 0x111x0111, x1011x0111}}

{1001x \ {10011, 10010, 10010}, xx010 \ {1x010, 0x010}}
{00x00 \ {00100}}
{}

{xxxx1 \ {00001, xx111, x1111}, 0x01x \ {0x011, 01011, 00010}}
{1xx1x \ {11x11, 1x011, 10111}}
{
   1xx11xxx11 \ {
   1xx11xx111, 1xx11x1111, 11x11xxx11, 1x011xxx11, 10111xxx11}, 1xx1x0x01x \ {
   1xx110x010, 1xx100x011, 1xx1x0x011, 1xx1x01011, 1xx1x00010, 11x110x01x, 1x0110x01x, 101110x01x}}

{}
{1x0x1 \ {110x1, 100x1, 10001}}
{}

{0x001 \ {00001, 01001}}
{xx0xx \ {11010, x10x1, x10xx}, 0xxxx \ {01x1x, 0x101, 010x0}}
{
   xx0010x001 \ {
   xx00100001, xx00101001, x10010x001, x10010x001}, 0xx010x001 \ {
   0xx0100001, 0xx0101001, 0x1010x001}}

{x1xxx \ {11011, x1001, x111x}, xx001 \ {x0001, x1001, 11001}}
{0111x \ {01111, 01110, 01110}, xx11x \ {x111x, 1111x, 11110}}
{
   0111xx1x1x \ {
   01111x1x10, 01110x1x11, 0111x11011, 0111xx111x, 01111x1x1x, 01110x1x1x, 01110x1x1x}, xx11xx1x1x \ {
   xx111x1x10, xx110x1x11, xx11x11011, xx11xx111x, x111xx1x1x, 1111xx1x1x, 11110x1x1x}}

{11x0x \ {11100, 1100x, 1110x}, x1000 \ {01000}, x1x01 \ {11001, x1101}}
{xx111 \ {11111, 01111}}
{}

{x11xx \ {111x0, 1111x}}
{x0x00 \ {x0000, 00x00, 00000}, 101x1 \ {10111}, 0x11x \ {01110, 00111}}
{
   x0x00x1100 \ {
   x0x0011100, x0000x1100, 00x00x1100, 00000x1100}, 101x1x11x1 \ {
   10111x1101, 10101x1111, 101x111111, 10111x11x1}, 0x11xx111x \ {
   0x111x1110, 0x110x1111, 0x11x11110, 0x11x1111x, 01110x111x, 00111x111x}}

{xx1x0 \ {10100, 00100, 10110}, x10x0 \ {01010, 010x0, 01000}}
{xx00x \ {10000, 00001, xx001}}
{
   xx000xx100 \ {
   xx00010100, xx00000100, 10000xx100}, xx000x1000 \ {
   xx00001000, xx00001000, 10000x1000}}

{000x0 \ {00000}}
{01x0x \ {01x00, 01000, 01100}, x1xx0 \ {11x00, 01x00, 11000}}
{
   01x0000000 \ {
   01x0000000, 01x0000000, 0100000000, 0110000000}, x1xx0000x0 \ {
   x1x1000000, x1x0000010, x1xx000000, 11x00000x0, 01x00000x0, 11000000x0}}

{xx0xx \ {10011, 11001, x001x}, 1xx10 \ {11010, 10110, 1x110}}
{011x0 \ {01110}, x1xxx \ {010x1, 11010, x11x1}}
{
   011x0xx0x0 \ {
   01110xx000, 01100xx010, 011x0x0010, 01110xx0x0}, x1xxxxx0xx \ {
   x1xx1xx0x0, x1xx0xx0x1, x1x1xxx00x, x1x0xxx01x, x1xxx10011, x1xxx11001, x1xxxx001x, 010x1xx0xx, 11010xx0xx, x11x1xx0xx}, 011101xx10 \ {
   0111011010, 0111010110, 011101x110, 011101xx10}, x1x101xx10 \ {
   x1x1011010, x1x1010110, x1x101x110, 110101xx10}}

{0xxxx \ {0110x, 01111, 00xx1}, 000x0 \ {00000, 00010, 00010}}
{}
{}

{}
{}
{}

{x0001 \ {00001}}
{x11x1 \ {x1101, 01101, 01111}}
{
   x1101x0001 \ {
   x110100001, x1101x0001, 01101x0001}}

{x001x \ {1001x, x0010, 00011}, 001xx \ {00101, 00100}}
{0x000 \ {01000, 00000}}
{
   0x00000100 \ {
   0x00000100, 0100000100, 0000000100}}

{1x010 \ {11010, 10010}, 1x0xx \ {1x000, 1x0x0, 10000}, 000xx \ {00011, 00010}}
{11xxx \ {11111, 11x11, 11010}, 0x1x1 \ {0x111, 001x1, 00111}}
{
   11x101x010 \ {
   11x1011010, 11x1010010, 110101x010}, 11xxx1x0xx \ {
   11xx11x0x0, 11xx01x0x1, 11x1x1x00x, 11x0x1x01x, 11xxx1x000, 11xxx1x0x0, 11xxx10000, 111111x0xx, 11x111x0xx, 110101x0xx}, 0x1x11x0x1 \ {
   0x1111x001, 0x1011x011, 0x1111x0x1, 001x11x0x1, 001111x0x1}, 11xxx000xx \ {
   11xx1000x0, 11xx0000x1, 11x1x0000x, 11x0x0001x, 11xxx00011, 11xxx00010, 11111000xx, 11x11000xx, 11010000xx}, 0x1x1000x1 \ {
   0x11100001, 0x10100011, 0x1x100011, 0x111000x1, 001x1000x1, 00111000x1}}

{x11xx \ {111xx, 01111, x110x}, xx1x1 \ {x11x1, x1111, 0x111}}
{x10xx \ {1101x, x10x0, 010xx}, 1010x \ {10100}}
{
   x10xxx11xx \ {
   x10x1x11x0, x10x0x11x1, x101xx110x, x100xx111x, x10xx111xx, x10xx01111, x10xxx110x, 1101xx11xx, x10x0x11xx, 010xxx11xx}, 1010xx110x \ {
   10101x1100, 10100x1101, 1010x1110x, 1010xx110x, 10100x110x}, x10x1xx1x1 \ {
   x1011xx101, x1001xx111, x10x1x11x1, x10x1x1111, x10x10x111, 11011xx1x1, 010x1xx1x1}, 10101xx101 \ {
   10101x1101}}

{x0101 \ {10101}}
{}
{}

{0x1xx \ {01100, 00100, 0x1x0}, 00x11 \ {00111, 00011, 00011}}
{xx010 \ {x0010}, 1xx00 \ {10x00, 1x000, 1x000}}
{
   xx0100x110 \ {
   xx0100x110, x00100x110}, 1xx000x100 \ {
   1xx0001100, 1xx0000100, 1xx000x100, 10x000x100, 1x0000x100, 1x0000x100}}

{11xxx \ {11000, 11x10, 1111x}}
{x0xx0 \ {10110, 10xx0, x0110}}
{
   x0xx011xx0 \ {
   x0x1011x00, x0x0011x10, x0xx011000, x0xx011x10, x0xx011110, 1011011xx0, 10xx011xx0, x011011xx0}}

{001x0 \ {00100, 00110, 00110}, x01x0 \ {10110, 10100, x0100}}
{}
{}

{}
{xxx01 \ {x0x01, 0x101, 11101}}
{}

{0xx0x \ {00001, 0000x, 0110x}, 1xx1x \ {11010, 10x10, 10011}}
{xx0x1 \ {11011, x0011, x1011}, xx1xx \ {101xx, 1111x, x1110}}
{
   xx0010xx01 \ {
   xx00100001, xx00100001, xx00101101}, xx10x0xx0x \ {
   xx1010xx00, xx1000xx01, xx10x00001, xx10x0000x, xx10x0110x, 1010x0xx0x}, xx0111xx11 \ {
   xx01110011, 110111xx11, x00111xx11, x10111xx11}, xx11x1xx1x \ {
   xx1111xx10, xx1101xx11, xx11x11010, xx11x10x10, xx11x10011, 1011x1xx1x, 1111x1xx1x, x11101xx1x}}

{xxx01 \ {1xx01, 1x101, x1001}, x0xxx \ {1010x, x00x0, 00x11}}
{00x11 \ {00011, 00111}}
{
   00x11x0x11 \ {
   00x1100x11, 00011x0x11, 00111x0x11}}

{x111x \ {1111x, 0111x}, 10xx0 \ {10010, 10000}}
{11x0x \ {11001, 11x00, 11x01}}
{
   11x0010x00 \ {
   11x0010000, 11x0010x00}}

{xx0x0 \ {1x010, xx010, 0x0x0}, xx0xx \ {0001x, 0000x, 110x1}, 1x1x1 \ {10101, 111x1, 1x111}}
{001xx \ {0011x, 001x0, 0010x}, 00x1x \ {0011x, 0001x, 00010}}
{
   001x0xx0x0 \ {
   00110xx000, 00100xx010, 001x01x010, 001x0xx010, 001x00x0x0, 00110xx0x0, 001x0xx0x0, 00100xx0x0}, 00x10xx010 \ {
   00x101x010, 00x10xx010, 00x100x010, 00110xx010, 00010xx010, 00010xx010}, 001xxxx0xx \ {
   001x1xx0x0, 001x0xx0x1, 0011xxx00x, 0010xxx01x, 001xx0001x, 001xx0000x, 001xx110x1, 0011xxx0xx, 001x0xx0xx, 0010xxx0xx}, 00x1xxx01x \ {
   00x11xx010, 00x10xx011, 00x1x0001x, 00x1x11011, 0011xxx01x, 0001xxx01x, 00010xx01x}, 001x11x1x1 \ {
   001111x101, 001011x111, 001x110101, 001x1111x1, 001x11x111, 001111x1x1, 001011x1x1}, 00x111x111 \ {
   00x1111111, 00x111x111, 001111x111, 000111x111}}

{x01xx \ {00111, x01x1, 001x0}, 1x0xx \ {10000, 110xx, 1x001}}
{1xx1x \ {10111, 1xx10, 11111}}
{
   1xx1xx011x \ {
   1xx11x0110, 1xx10x0111, 1xx1x00111, 1xx1xx0111, 1xx1x00110, 10111x011x, 1xx10x011x, 11111x011x}, 1xx1x1x01x \ {
   1xx111x010, 1xx101x011, 1xx1x1101x, 101111x01x, 1xx101x01x, 111111x01x}}

{1x0xx \ {1x011, 10001, 1000x}}
{}
{}

{10x1x \ {10011, 1011x, 10x11}}
{}
{}

{xx0xx \ {0x00x, 11000, x0011}, 00x1x \ {00x11, 00110, 00111}}
{010xx \ {010x1, 0100x, 01010}}
{
   010xxxx0xx \ {
   010x1xx0x0, 010x0xx0x1, 0101xxx00x, 0100xxx01x, 010xx0x00x, 010xx11000, 010xxx0011, 010x1xx0xx, 0100xxx0xx, 01010xx0xx}, 0101x00x1x \ {
   0101100x10, 0101000x11, 0101x00x11, 0101x00110, 0101x00111, 0101100x1x, 0101000x1x}}

{10xx1 \ {10001, 10x11, 10x01}, 0xx00 \ {01100, 01x00, 01000}}
{0xx01 \ {0x001, 0x101, 00x01}, 1xxx1 \ {10011, 111x1, 11x01}}
{
   0xx0110x01 \ {
   0xx0110001, 0xx0110x01, 0x00110x01, 0x10110x01, 00x0110x01}, 1xxx110xx1 \ {
   1xx1110x01, 1xx0110x11, 1xxx110001, 1xxx110x11, 1xxx110x01, 1001110xx1, 111x110xx1, 11x0110xx1}}

{00xx1 \ {00x11, 001x1, 00101}}
{xxxx1 \ {x1xx1, 10xx1, 11101}, 1xxxx \ {10x0x, 11xx0, 1101x}}
{
   xxxx100xx1 \ {
   xxx1100x01, xxx0100x11, xxxx100x11, xxxx1001x1, xxxx100101, x1xx100xx1, 10xx100xx1, 1110100xx1}, 1xxx100xx1 \ {
   1xx1100x01, 1xx0100x11, 1xxx100x11, 1xxx1001x1, 1xxx100101, 10x0100xx1, 1101100xx1}}

{00x00 \ {00000, 00100, 00100}}
{1x100 \ {11100, 10100}, 0x0x1 \ {00011, 010x1, 00001}, 0xxx1 \ {00001, 00011, 01x01}}
{
   1x10000x00 \ {
   1x10000000, 1x10000100, 1x10000100, 1110000x00, 1010000x00}}

{xx010 \ {10010}}
{x000x \ {10001, 00001, 0000x}}
{}

{11x0x \ {11100, 11x01, 11001}, xx000 \ {x0000, x1000, 10000}}
{xxx0x \ {0xx00, x010x, 0x001}, 001x1 \ {00111, 00101, 00101}}
{
   xxx0x11x0x \ {
   xxx0111x00, xxx0011x01, xxx0x11100, xxx0x11x01, xxx0x11001, 0xx0011x0x, x010x11x0x, 0x00111x0x}, 0010111x01 \ {
   0010111x01, 0010111001, 0010111x01, 0010111x01}, xxx00xx000 \ {
   xxx00x0000, xxx00x1000, xxx0010000, 0xx00xx000, x0100xx000}}

{xxxx1 \ {0x0x1, xx011, 1x011}, 010xx \ {01000, 01010, 010x0}}
{0x1x1 \ {01111, 0x111, 00111}}
{
   0x1x1xxxx1 \ {
   0x111xxx01, 0x101xxx11, 0x1x10x0x1, 0x1x1xx011, 0x1x11x011, 01111xxxx1, 0x111xxxx1, 00111xxxx1}, 0x1x1010x1 \ {
   0x11101001, 0x10101011, 01111010x1, 0x111010x1, 00111010x1}}

{1x010 \ {11010, 10010, 10010}, xx0xx \ {x0011, 10011, 110x1}}
{0011x \ {00110, 00111}}
{
   001101x010 \ {
   0011011010, 0011010010, 0011010010, 001101x010}, 0011xxx01x \ {
   00111xx010, 00110xx011, 0011xx0011, 0011x10011, 0011x11011, 00110xx01x, 00111xx01x}}

{xx0xx \ {0x011, 0000x, 11000}, 001xx \ {0011x, 00101, 00100}, 11xx1 \ {11011, 11x01}}
{01x01 \ {01101}, 1xxx0 \ {10x10, 1x1x0, 1x010}}
{
   01x01xx001 \ {
   01x0100001, 01101xx001}, 1xxx0xx0x0 \ {
   1xx10xx000, 1xx00xx010, 1xxx000000, 1xxx011000, 10x10xx0x0, 1x1x0xx0x0, 1x010xx0x0}, 01x0100101 \ {
   01x0100101, 0110100101}, 1xxx0001x0 \ {
   1xx1000100, 1xx0000110, 1xxx000110, 1xxx000100, 10x10001x0, 1x1x0001x0, 1x010001x0}, 01x0111x01 \ {
   01x0111x01, 0110111x01}}

{1x1xx \ {1x1x1, 1x111, 1011x}}
{0xx1x \ {0011x, 0x01x, 00x11}}
{
   0xx1x1x11x \ {
   0xx111x110, 0xx101x111, 0xx1x1x111, 0xx1x1x111, 0xx1x1011x, 0011x1x11x, 0x01x1x11x, 00x111x11x}}

{x1xx0 \ {11xx0, x1010, 11110}}
{}
{}

{}
{x111x \ {01111, x1110, 11110}}
{}

{x0xx1 \ {00xx1, 00x01, 00x11}, x01x0 \ {101x0, 001x0}}
{x1010 \ {11010}, x0x00 \ {10000, 10x00, 10100}}
{
   x1010x0110 \ {
   x101010110, x101000110, 11010x0110}, x0x00x0100 \ {
   x0x0010100, x0x0000100, 10000x0100, 10x00x0100, 10100x0100}}

{0x00x \ {0100x, 0x001, 00001}, xx0xx \ {01000, 0001x, xx00x}}
{}
{}

{01x1x \ {01110, 0111x, 0101x}}
{x011x \ {x0111, 10110, 0011x}}
{
   x011x01x1x \ {
   x011101x10, x011001x11, x011x01110, x011x0111x, x011x0101x, x011101x1x, 1011001x1x, 0011x01x1x}}

{11xxx \ {11101, 11011, 11x11}}
{0x0xx \ {000x1, 0x00x}, xx1xx \ {11100, 00100, 1010x}, 0x00x \ {0000x, 00000, 00000}}
{
   0x0xx11xxx \ {
   0x0x111xx0, 0x0x011xx1, 0x01x11x0x, 0x00x11x1x, 0x0xx11101, 0x0xx11011, 0x0xx11x11, 000x111xxx, 0x00x11xxx}, xx1xx11xxx \ {
   xx1x111xx0, xx1x011xx1, xx11x11x0x, xx10x11x1x, xx1xx11101, xx1xx11011, xx1xx11x11, 1110011xxx, 0010011xxx, 1010x11xxx}, 0x00x11x0x \ {
   0x00111x00, 0x00011x01, 0x00x11101, 0000x11x0x, 0000011x0x, 0000011x0x}}

{1xx01 \ {10001, 10x01, 1x001}}
{00xxx \ {001x0, 00111, 00x00}}
{
   00x011xx01 \ {
   00x0110001, 00x0110x01, 00x011x001}}

{x0101 \ {10101, 00101}}
{1x010 \ {11010, 10010, 10010}, xx1xx \ {xx110, 1110x, x01xx}, 1xx11 \ {1x111, 1x011, 1x011}}
{
   xx101x0101 \ {
   xx10110101, xx10100101, 11101x0101, x0101x0101}}

{x0110 \ {10110}}
{1xx1x \ {11x11, 1011x, 1111x}, 1xx1x \ {1xx11, 11x10, 1111x}}
{
   1xx10x0110 \ {
   1xx1010110, 10110x0110, 11110x0110}, 1xx10x0110 \ {
   1xx1010110, 11x10x0110, 11110x0110}}

{}
{}
{}

{01x0x \ {01100, 01001, 01000}, 00x0x \ {00001, 00101}}
{xx101 \ {1x101, 00101}}
{
   xx10101x01 \ {
   xx10101001, 1x10101x01, 0010101x01}, xx10100x01 \ {
   xx10100001, xx10100101, 1x10100x01, 0010100x01}}

{111x1 \ {11101, 11111}}
{01x1x \ {0111x, 0101x, 01010}, x1x01 \ {01101}}
{
   01x1111111 \ {
   01x1111111, 0111111111, 0101111111}, x1x0111101 \ {
   x1x0111101, 0110111101}}

{xx110 \ {00110, x1110, 01110}, x10xx \ {01000, 01001, 110x0}}
{1x01x \ {10011, 1001x, 1x011}, xx1x0 \ {1x100, 11100, 001x0}}
{
   1x010xx110 \ {
   1x01000110, 1x010x1110, 1x01001110, 10010xx110}, xx110xx110 \ {
   xx11000110, xx110x1110, xx11001110, 00110xx110}, 1x01xx101x \ {
   1x011x1010, 1x010x1011, 1x01x11010, 10011x101x, 1001xx101x, 1x011x101x}, xx1x0x10x0 \ {
   xx110x1000, xx100x1010, xx1x001000, xx1x0110x0, 1x100x10x0, 11100x10x0, 001x0x10x0}}

{x1x11 \ {x1011, 11011, 01x11}, 1x01x \ {11010, 11011, 10011}}
{xx1x0 \ {11100, 01100, 0x100}}
{
   xx1101x010 \ {
   xx11011010}}

{0000x \ {00000, 00001}}
{1x110 \ {10110}, 000x1 \ {00001, 00011}, x1xx1 \ {11111, 01001, 01x01}}
{
   0000100001 \ {
   0000100001, 0000100001}, x1x0100001 \ {
   x1x0100001, 0100100001, 01x0100001}}

{1xx10 \ {10110, 11010, 10x10}, x1x01 \ {11001, x1101, 01101}}
{x11x1 \ {111x1, 11111, x1101}, 1x11x \ {1x111, 10110}}
{
   1x1101xx10 \ {
   1x11010110, 1x11011010, 1x11010x10, 101101xx10}, x1101x1x01 \ {
   x110111001, x1101x1101, x110101101, 11101x1x01, x1101x1x01}}

{0x000 \ {00000, 01000, 01000}}
{1x010 \ {11010, 10010}, xx111 \ {x1111, 0x111}}
{}

{0x1x1 \ {0x111, 01111, 00101}}
{xx10x \ {01100, 11100, x0100}}
{
   xx1010x101 \ {
   xx10100101}}

{0xxx0 \ {01x10, 0xx00, 000x0}}
{x1xx1 \ {01011, 11x01, 011x1}, 0x101 \ {00101, 01101}, 0xxxx \ {0xx1x, 0x0xx}}
{
   0xxx00xxx0 \ {
   0xx100xx00, 0xx000xx10, 0xxx001x10, 0xxx00xx00, 0xxx0000x0, 0xx100xxx0, 0x0x00xxx0}}

{x011x \ {10111, 10110, x0110}, 1x1xx \ {1x101, 101x1, 11100}}
{0000x \ {00001, 00000}, x0x1x \ {00x11, 1001x, x011x}}
{
   x0x1xx011x \ {
   x0x11x0110, x0x10x0111, x0x1x10111, x0x1x10110, x0x1xx0110, 00x11x011x, 1001xx011x, x011xx011x}, 0000x1x10x \ {
   000011x100, 000001x101, 0000x1x101, 0000x10101, 0000x11100, 000011x10x, 000001x10x}, x0x1x1x11x \ {
   x0x111x110, x0x101x111, x0x1x10111, 00x111x11x, 1001x1x11x, x011x1x11x}}

{1xx00 \ {10x00, 11x00, 10100}}
{x0x10 \ {10010, 10110, 00x10}, 1xx0x \ {1x000, 11000, 1x100}, xx101 \ {11101, 1x101}}
{
   1xx001xx00 \ {
   1xx0010x00, 1xx0011x00, 1xx0010100, 1x0001xx00, 110001xx00, 1x1001xx00}}

{x00xx \ {10011, x0010, 1001x}, x10x1 \ {01001, x1001, 110x1}, 01xx1 \ {01111, 010x1, 01101}}
{x0xxx \ {x0010, x01xx, 00100}, xxxx0 \ {00000, xxx00, 01x10}, 0x110 \ {01110, 00110}}
{
   x0xxxx00xx \ {
   x0xx1x00x0, x0xx0x00x1, x0x1xx000x, x0x0xx001x, x0xxx10011, x0xxxx0010, x0xxx1001x, x0010x00xx, x01xxx00xx, 00100x00xx}, xxxx0x00x0 \ {
   xxx10x0000, xxx00x0010, xxxx0x0010, xxxx010010, 00000x00x0, xxx00x00x0, 01x10x00x0}, 0x110x0010 \ {
   0x110x0010, 0x11010010, 01110x0010, 00110x0010}, x0xx1x10x1 \ {
   x0x11x1001, x0x01x1011, x0xx101001, x0xx1x1001, x0xx1110x1, x01x1x10x1}, x0xx101xx1 \ {
   x0x1101x01, x0x0101x11, x0xx101111, x0xx1010x1, x0xx101101, x01x101xx1}}

{x110x \ {1110x, 01101, 01101}}
{xx10x \ {1x100, xx101, x1101}}
{
   xx10xx110x \ {
   xx101x1100, xx100x1101, xx10x1110x, xx10x01101, xx10x01101, 1x100x110x, xx101x110x, x1101x110x}}

{xx010 \ {x0010, x1010, 00010}}
{1xxx1 \ {11101, 11xx1, 101x1}, 1xx01 \ {10x01, 11x01, 11101}}
{}

{1x0x1 \ {1x011, 1x001, 1x001}, 1x1xx \ {1110x, 1x111, 1x101}, 001xx \ {00111, 001x0}}
{x001x \ {10010, 0001x}, 1x110 \ {10110}}
{
   x00111x011 \ {
   x00111x011, 000111x011}, x001x1x11x \ {
   x00111x110, x00101x111, x001x1x111, 100101x11x, 0001x1x11x}, 1x1101x110 \ {
   101101x110}, x001x0011x \ {
   x001100110, x001000111, x001x00111, x001x00110, 100100011x, 0001x0011x}, 1x11000110 \ {
   1x11000110, 1011000110}}

{1001x \ {10010, 10011}, x0x0x \ {0000x, 00x0x}, x0000 \ {10000, 00000}}
{0x100 \ {01100}}
{
   0x100x0x00 \ {
   0x10000000, 0x10000x00, 01100x0x00}, 0x100x0000 \ {
   0x10010000, 0x10000000, 01100x0000}}

{xx0x1 \ {1x001, xx001, 01001}}
{0x111 \ {01111, 00111, 00111}}
{
   0x111xx011 \ {
   01111xx011, 00111xx011, 00111xx011}}

{}
{100xx \ {1001x, 1000x, 100x0}}
{}

{x0x1x \ {0001x, 00x10, 10011}, 1x0xx \ {110xx, 110x0, 1000x}}
{011xx \ {01110, 0111x, 01101}, xx1x1 \ {xx111, 00101, 01101}}
{
   0111xx0x1x \ {
   01111x0x10, 01110x0x11, 0111x0001x, 0111x00x10, 0111x10011, 01110x0x1x, 0111xx0x1x}, xx111x0x11 \ {
   xx11100011, xx11110011, xx111x0x11}, 011xx1x0xx \ {
   011x11x0x0, 011x01x0x1, 0111x1x00x, 0110x1x01x, 011xx110xx, 011xx110x0, 011xx1000x, 011101x0xx, 0111x1x0xx, 011011x0xx}, xx1x11x0x1 \ {
   xx1111x001, xx1011x011, xx1x1110x1, xx1x110001, xx1111x0x1, 001011x0x1, 011011x0x1}}

{x1x1x \ {x1x10, 11x10, x1010}, 0x11x \ {00111, 01110}}
{}
{}

{01x1x \ {01x11, 01110, 01x10}, xxxx0 \ {0x0x0, 01xx0, x00x0}}
{x000x \ {10000, 00000}, 1x100 \ {10100}}
{
   x0000xxx00 \ {
   x00000x000, x000001x00, x0000x0000, 10000xxx00, 00000xxx00}, 1x100xxx00 \ {
   1x1000x000, 1x10001x00, 1x100x0000, 10100xxx00}}

{xxx0x \ {0x000, 00001, 00x00}, 0xx11 \ {00x11, 00011, 0x011}}
{x1x11 \ {01x11, x1111}, 0x011 \ {00011}}
{
   x1x110xx11 \ {
   x1x1100x11, x1x1100011, x1x110x011, 01x110xx11, x11110xx11}, 0x0110xx11 \ {
   0x01100x11, 0x01100011, 0x0110x011, 000110xx11}}

{x0x00 \ {x0000, 00000, 00100}, x10xx \ {x10x0, 010x1, 01010}}
{xx101 \ {0x101, 11101, 01101}}
{
   xx101x1001 \ {
   xx10101001, 0x101x1001, 11101x1001, 01101x1001}}

{xxx00 \ {xx000, 10000, x0x00}, x0x01 \ {10001, x0001}, 0x1xx \ {01110, 001x1, 01111}}
{1xx11 \ {10011, 11111, 11011}, 00x11 \ {00011}}
{
   1xx110x111 \ {
   1xx1100111, 1xx1101111, 100110x111, 111110x111, 110110x111}, 00x110x111 \ {
   00x1100111, 00x1101111, 000110x111}}

{x1100 \ {11100, 01100}}
{0x0xx \ {00011, 01000}}
{
   0x000x1100 \ {
   0x00011100, 0x00001100, 01000x1100}}

{x0x10 \ {00x10, x0110, x0010}, x1x10 \ {11110, 01010, 01x10}}
{001x1 \ {00111}, 001xx \ {0010x, 00100, 0011x}, x1x0x \ {11000, 11100, 01101}}
{
   00110x0x10 \ {
   0011000x10, 00110x0110, 00110x0010, 00110x0x10}, 00110x1x10 \ {
   0011011110, 0011001010, 0011001x10, 00110x1x10}}

{x1xx0 \ {01xx0, 11100, x1110}, x100x \ {01001, 1100x, x1000}}
{xx010 \ {1x010, x0010}, xx1xx \ {x01x0, 011x0, x11xx}}
{
   xx010x1x10 \ {
   xx01001x10, xx010x1110, 1x010x1x10, x0010x1x10}, xx1x0x1xx0 \ {
   xx110x1x00, xx100x1x10, xx1x001xx0, xx1x011100, xx1x0x1110, x01x0x1xx0, 011x0x1xx0, x11x0x1xx0}, xx10xx100x \ {
   xx101x1000, xx100x1001, xx10x01001, xx10x1100x, xx10xx1000, x0100x100x, 01100x100x, x110xx100x}}

{0xxx0 \ {0x110, 00010, 01xx0}}
{x110x \ {11101, 11100, x1100}, x1x01 \ {11x01, 11001, x1001}}
{
   x11000xx00 \ {
   x110001x00, 111000xx00, x11000xx00}}

{00x00 \ {00100, 00000, 00000}, 00xx1 \ {00x01, 00111, 00101}}
{x111x \ {x1110, 11110, 01110}, x1001 \ {11001, 01001, 01001}, 1x100 \ {10100, 11100, 11100}}
{
   1x10000x00 \ {
   1x10000100, 1x10000000, 1x10000000, 1010000x00, 1110000x00, 1110000x00}, x111100x11 \ {
   x111100111}, x100100x01 \ {
   x100100x01, x100100101, 1100100x01, 0100100x01, 0100100x01}}

{}
{1xx1x \ {11011, 11x1x, 10010}, x00xx \ {10001, 10010, 00011}, 0x0x0 \ {000x0, 010x0}}
{}

{0x1x0 \ {0x110, 001x0, 01100}, x1000 \ {11000, 01000}, x1x0x \ {11101, 01x00, x110x}}
{xx0x0 \ {x1000, 1x000, 11010}, 1xx10 \ {11110, 1x110, 10x10}, x1x01 \ {11001, 01001, 01x01}}
{
   xx0x00x1x0 \ {
   xx0100x100, xx0000x110, xx0x00x110, xx0x0001x0, xx0x001100, x10000x1x0, 1x0000x1x0, 110100x1x0}, 1xx100x110 \ {
   1xx100x110, 1xx1000110, 111100x110, 1x1100x110, 10x100x110}, xx000x1000 \ {
   xx00011000, xx00001000, x1000x1000, 1x000x1000}, xx000x1x00 \ {
   xx00001x00, xx000x1100, x1000x1x00, 1x000x1x00}, x1x01x1x01 \ {
   x1x0111101, x1x01x1101, 11001x1x01, 01001x1x01, 01x01x1x01}}

{x1010 \ {11010}, xx111 \ {00111, 1x111, 10111}}
{x00xx \ {00000, 000x0, 0001x}, xx010 \ {00010, 0x010, x0010}}
{
   x0010x1010 \ {
   x001011010, 00010x1010, 00010x1010}, xx010x1010 \ {
   xx01011010, 00010x1010, 0x010x1010, x0010x1010}, x0011xx111 \ {
   x001100111, x00111x111, x001110111, 00011xx111}}

{1x1x0 \ {101x0, 10110, 1x100}}
{xx0x0 \ {1x000, x00x0, 01000}}
{
   xx0x01x1x0 \ {
   xx0101x100, xx0001x110, xx0x0101x0, xx0x010110, xx0x01x100, 1x0001x1x0, x00x01x1x0, 010001x1x0}}

{}
{xx111 \ {10111, x1111, 0x111}, xx001 \ {00001, 01001, x1001}}
{}

{11x1x \ {11x10, 11011, 11110}, 11xxx \ {110x1, 1110x, 11x1x}}
{xx10x \ {1x100, 0010x, 1x101}, x1xx0 \ {11xx0, 11x10, x10x0}}
{
   x1x1011x10 \ {
   x1x1011x10, x1x1011110, 11x1011x10, 11x1011x10, x101011x10}, xx10x11x0x \ {
   xx10111x00, xx10011x01, xx10x11001, xx10x1110x, 1x10011x0x, 0010x11x0x, 1x10111x0x}, x1xx011xx0 \ {
   x1x1011x00, x1x0011x10, x1xx011100, x1xx011x10, 11xx011xx0, 11x1011xx0, x10x011xx0}}

{101xx \ {101x1, 10100, 101x0}, 0x101 \ {00101, 01101}}
{x01xx \ {101x1, 1010x, 00110}, 110x1 \ {11001}}
{
   x01xx101xx \ {
   x01x1101x0, x01x0101x1, x011x1010x, x010x1011x, x01xx101x1, x01xx10100, x01xx101x0, 101x1101xx, 1010x101xx, 00110101xx}, 110x1101x1 \ {
   1101110101, 1100110111, 110x1101x1, 11001101x1}, x01010x101 \ {
   x010100101, x010101101, 101010x101, 101010x101}, 110010x101 \ {
   1100100101, 1100101101, 110010x101}}

{x1xxx \ {0111x, 11x01, 01x10}, 0100x \ {01001, 01000}}
{x10xx \ {010x1, x1011, 01001}, 11xxx \ {11010, 1101x, 110x0}}
{
   x10xxx1xxx \ {
   x10x1x1xx0, x10x0x1xx1, x101xx1x0x, x100xx1x1x, x10xx0111x, x10xx11x01, x10xx01x10, 010x1x1xxx, x1011x1xxx, 01001x1xxx}, 11xxxx1xxx \ {
   11xx1x1xx0, 11xx0x1xx1, 11x1xx1x0x, 11x0xx1x1x, 11xxx0111x, 11xxx11x01, 11xxx01x10, 11010x1xxx, 1101xx1xxx, 110x0x1xxx}, x100x0100x \ {
   x100101000, x100001001, x100x01001, x100x01000, 010010100x, 010010100x}, 11x0x0100x \ {
   11x0101000, 11x0001001, 11x0x01001, 11x0x01000, 110000100x}}

{x010x \ {10100, 00100, 1010x}, x1010 \ {11010, 01010, 01010}, xxx11 \ {11011, 0x011, 01x11}}
{1x11x \ {1x111, 10110}, x1101 \ {01101, 11101}, 0x1xx \ {001x0, 0x100, 00100}}
{
   x1101x0101 \ {
   x110110101, 01101x0101, 11101x0101}, 0x10xx010x \ {
   0x101x0100, 0x100x0101, 0x10x10100, 0x10x00100, 0x10x1010x, 00100x010x, 0x100x010x, 00100x010x}, 1x110x1010 \ {
   1x11011010, 1x11001010, 1x11001010, 10110x1010}, 0x110x1010 \ {
   0x11011010, 0x11001010, 0x11001010, 00110x1010}, 1x111xxx11 \ {
   1x11111011, 1x1110x011, 1x11101x11, 1x111xxx11}, 0x111xxx11 \ {
   0x11111011, 0x1110x011, 0x11101x11}}

{xx1x1 \ {01111, 111x1, 11101}}
{0001x \ {00011, 00010}, 1x1x0 \ {10100, 11110, 10110}, x0101 \ {00101}}
{
   00011xx111 \ {
   0001101111, 0001111111, 00011xx111}, x0101xx101 \ {
   x010111101, x010111101, 00101xx101}}

{}
{xxx0x \ {11101, x0x01, 00x01}, 1x011 \ {11011, 10011}}
{}

{0xx01 \ {01101, 00x01}}
{x001x \ {10010, x0010, 10011}, 1110x \ {11100, 11101}}
{
   111010xx01 \ {
   1110101101, 1110100x01, 111010xx01}}

{xx0x0 \ {x1000, 1x0x0, x10x0}, xxxx0 \ {11010, 0xx00, 01000}}
{1xxx0 \ {1x100, 11100, 11110}, 0x00x \ {01001, 01000}, 10x10 \ {10110, 10010, 10010}}
{
   1xxx0xx0x0 \ {
   1xx10xx000, 1xx00xx010, 1xxx0x1000, 1xxx01x0x0, 1xxx0x10x0, 1x100xx0x0, 11100xx0x0, 11110xx0x0}, 0x000xx000 \ {
   0x000x1000, 0x0001x000, 0x000x1000, 01000xx000}, 10x10xx010 \ {
   10x101x010, 10x10x1010, 10110xx010, 10010xx010, 10010xx010}, 1xxx0xxxx0 \ {
   1xx10xxx00, 1xx00xxx10, 1xxx011010, 1xxx00xx00, 1xxx001000, 1x100xxxx0, 11100xxxx0, 11110xxxx0}, 0x000xxx00 \ {
   0x0000xx00, 0x00001000, 01000xxx00}, 10x10xxx10 \ {
   10x1011010, 10110xxx10, 10010xxx10, 10010xxx10}}

{x101x \ {11011, x1010, 0101x}, 1xxx1 \ {10001, 10011, 11x01}}
{1xx0x \ {10000, 1xx01, 10001}}
{
   1xx011xx01 \ {
   1xx0110001, 1xx0111x01, 1xx011xx01, 100011xx01}}

{xxxx1 \ {0x111, 111x1, x0001}, 0x110 \ {01110, 00110}, xx001 \ {10001, x0001, 11001}}
{}
{}

{xx101 \ {x1101}, 1x0xx \ {10001, 1000x, 11000}}
{111xx \ {11101, 1110x, 11100}}
{
   11101xx101 \ {
   11101x1101, 11101xx101, 11101xx101}, 111xx1x0xx \ {
   111x11x0x0, 111x01x0x1, 1111x1x00x, 1110x1x01x, 111xx10001, 111xx1000x, 111xx11000, 111011x0xx, 1110x1x0xx, 111001x0xx}}

{x0x00 \ {10x00, x0100, 00000}, 1x0x1 \ {1x001, 11011, 100x1}, x0xxx \ {x00xx, 10x1x, 00xx0}}
{}
{}

{xxx00 \ {x1100, 0x100, xx100}, x10xx \ {010xx, 110x1, 110xx}}
{0xxxx \ {00x0x, 01x01}, 10xx1 \ {10111, 10x11, 10x01}, 01x0x \ {01100, 0100x, 01101}}
{
   0xx00xxx00 \ {
   0xx00x1100, 0xx000x100, 0xx00xx100, 00x00xxx00}, 01x00xxx00 \ {
   01x00x1100, 01x000x100, 01x00xx100, 01100xxx00, 01000xxx00}, 0xxxxx10xx \ {
   0xxx1x10x0, 0xxx0x10x1, 0xx1xx100x, 0xx0xx101x, 0xxxx010xx, 0xxxx110x1, 0xxxx110xx, 00x0xx10xx, 01x01x10xx}, 10xx1x10x1 \ {
   10x11x1001, 10x01x1011, 10xx1010x1, 10xx1110x1, 10xx1110x1, 10111x10x1, 10x11x10x1, 10x01x10x1}, 01x0xx100x \ {
   01x01x1000, 01x00x1001, 01x0x0100x, 01x0x11001, 01x0x1100x, 01100x100x, 0100xx100x, 01101x100x}}

{1x0x0 \ {100x0, 11010, 10010}}
{xx11x \ {x1111, x111x, xx111}, 100xx \ {1000x, 10001, 10010}}
{
   xx1101x010 \ {
   xx11010010, xx11011010, xx11010010, x11101x010}, 100x01x0x0 \ {
   100101x000, 100001x010, 100x0100x0, 100x011010, 100x010010, 100001x0x0, 100101x0x0}}

{x10x0 \ {x1000, 11010, 11000}, 10xx0 \ {100x0, 10x10, 10110}, 101x0 \ {10100, 10110, 10110}}
{x0x00 \ {00x00, x0000, 10100}}
{
   x0x00x1000 \ {
   x0x00x1000, x0x0011000, 00x00x1000, x0000x1000, 10100x1000}, x0x0010x00 \ {
   x0x0010000, 00x0010x00, x000010x00, 1010010x00}, x0x0010100 \ {
   x0x0010100, 00x0010100, x000010100, 1010010100}}

{0101x \ {01010, 01011, 01011}, xxxx1 \ {01001, 00011, x1011}}
{0x00x \ {00001, 00000, 00000}}
{
   0x001xxx01 \ {
   0x00101001, 00001xxx01}}

{x1011 \ {11011, 01011}, x001x \ {00010, 10011, 0001x}}
{0x001 \ {00001}}
{}

{x0xx1 \ {10x11, 10111, x00x1}, 11x0x \ {11x00, 1110x, 11101}, xx100 \ {01100, x0100, x0100}}
{}
{}

{0x1x0 \ {00100, 0x100, 0x100}}
{x0x10 \ {10x10, 00x10, 00x10}, 0000x \ {00001, 00000}, 1xx0x \ {10x00, 1110x, 1100x}}
{
   x0x100x110 \ {
   10x100x110, 00x100x110, 00x100x110}, 000000x100 \ {
   0000000100, 000000x100, 000000x100, 000000x100}, 1xx000x100 \ {
   1xx0000100, 1xx000x100, 1xx000x100, 10x000x100, 111000x100, 110000x100}}

{x1xxx \ {01xx1, 11x01, x101x}, x01xx \ {x0100, 101xx, 0011x}}
{0x001 \ {01001, 00001}, 011xx \ {011x1, 01100}}
{
   0x001x1x01 \ {
   0x00101x01, 0x00111x01, 01001x1x01, 00001x1x01}, 011xxx1xxx \ {
   011x1x1xx0, 011x0x1xx1, 0111xx1x0x, 0110xx1x1x, 011xx01xx1, 011xx11x01, 011xxx101x, 011x1x1xxx, 01100x1xxx}, 0x001x0101 \ {
   0x00110101, 01001x0101, 00001x0101}, 011xxx01xx \ {
   011x1x01x0, 011x0x01x1, 0111xx010x, 0110xx011x, 011xxx0100, 011xx101xx, 011xx0011x, 011x1x01xx, 01100x01xx}}

{1xxxx \ {1011x, 110x0, 1010x}, xx101 \ {00101, x0101, 11101}}
{1111x \ {11111, 11110}, xx000 \ {x0000, 11000, 01000}}
{
   1111x1xx1x \ {
   111111xx10, 111101xx11, 1111x1011x, 1111x11010, 111111xx1x, 111101xx1x}, xx0001xx00 \ {
   xx00011000, xx00010100, x00001xx00, 110001xx00, 010001xx00}}

{x1x00 \ {x1100, 11100, 01100}, xx0x0 \ {1x000, xx000, x0010}}
{xx01x \ {00011, 00010, x0010}}
{
   xx010xx010 \ {
   xx010x0010, 00010xx010, x0010xx010}}

{11xxx \ {1100x, 11x0x, 11x01}}
{}
{}

{xx111 \ {10111, 11111, 01111}, 1xxx0 \ {10x00, 100x0, 11000}}
{x10x0 \ {x1010, 11010, 01000}, 10xx1 \ {100x1, 10001}}
{
   10x11xx111 \ {
   10x1110111, 10x1111111, 10x1101111, 10011xx111}, x10x01xxx0 \ {
   x10101xx00, x10001xx10, x10x010x00, x10x0100x0, x10x011000, x10101xxx0, 110101xxx0, 010001xxx0}}

{x11x0 \ {01110, 11110, 11100}, x1xx1 \ {01001, x1x11, x1001}}
{10x1x \ {1011x, 10x10, 10110}, x11xx \ {x110x, 111xx, 011xx}}
{
   10x10x1110 \ {
   10x1001110, 10x1011110, 10110x1110, 10x10x1110, 10110x1110}, x11x0x11x0 \ {
   x1110x1100, x1100x1110, x11x001110, x11x011110, x11x011100, x1100x11x0, 111x0x11x0, 011x0x11x0}, 10x11x1x11 \ {
   10x11x1x11, 10111x1x11}, x11x1x1xx1 \ {
   x1111x1x01, x1101x1x11, x11x101001, x11x1x1x11, x11x1x1001, x1101x1xx1, 111x1x1xx1, 011x1x1xx1}}

{xx110 \ {00110, x0110, 1x110}, 1x01x \ {1x010, 10011}}
{00x0x \ {0000x, 00001, 00x01}}
{}

{xx1x1 \ {x1111, 10111, x0101}, 100x0 \ {10000, 10010}}
{x1x1x \ {01x10, x1010, x111x}, 1x00x \ {1000x, 1x001, 10001}, 0x00x \ {0x001, 0100x, 00001}}
{
   x1x11xx111 \ {
   x1x11x1111, x1x1110111, x1111xx111}, 1x001xx101 \ {
   1x001x0101, 10001xx101, 1x001xx101, 10001xx101}, 0x001xx101 \ {
   0x001x0101, 0x001xx101, 01001xx101, 00001xx101}, x1x1010010 \ {
   x1x1010010, 01x1010010, x101010010, x111010010}, 1x00010000 \ {
   1x00010000, 1000010000}, 0x00010000 \ {
   0x00010000, 0100010000}}

{x10x1 \ {01001, x1011, 11011}, 01x11 \ {01011, 01111}}
{xx100 \ {x1100, 11100}, xx00x \ {0100x, 00000, 1x000}}
{
   xx001x1001 \ {
   xx00101001, 01001x1001}}

{x0x11 \ {x0111, 10111, 00x11}}
{xx1xx \ {011x0, 001x0, 1111x}, xxxx1 \ {0x111, 110x1, x10x1}}
{
   xx111x0x11 \ {
   xx111x0111, xx11110111, xx11100x11, 11111x0x11}, xxx11x0x11 \ {
   xxx11x0111, xxx1110111, xxx1100x11, 0x111x0x11, 11011x0x11, x1011x0x11}}

{xxxx0 \ {01100, xx010, 1x010}}
{}
{}

{}
{1x1x0 \ {11110, 111x0, 111x0}, 01xxx \ {01x1x, 01xx1, 011x0}}
{}

{110x0 \ {11000}, x0100 \ {00100}}
{}
{}

{x1x0x \ {01101, 11101, x1101}}
{xxxxx \ {1xx11, 011x1, 01xx0}, 01x01 \ {01001}, x011x \ {10111, x0110, 00111}}
{
   xxx0xx1x0x \ {
   xxx01x1x00, xxx00x1x01, xxx0x01101, xxx0x11101, xxx0xx1101, 01101x1x0x, 01x00x1x0x}, 01x01x1x01 \ {
   01x0101101, 01x0111101, 01x01x1101, 01001x1x01}}

{xx0xx \ {x1010, xx00x, 1x011}}
{01x0x \ {01000, 01001, 01x00}}
{
   01x0xxx00x \ {
   01x01xx000, 01x00xx001, 01x0xxx00x, 01000xx00x, 01001xx00x, 01x00xx00x}}

{1x0xx \ {1101x, 1x010, 11011}}
{010xx \ {0101x, 01000, 010x0}, 101x1 \ {10111, 10101}}
{
   010xx1x0xx \ {
   010x11x0x0, 010x01x0x1, 0101x1x00x, 0100x1x01x, 010xx1101x, 010xx1x010, 010xx11011, 0101x1x0xx, 010001x0xx, 010x01x0xx}, 101x11x0x1 \ {
   101111x001, 101011x011, 101x111011, 101x111011, 101111x0x1, 101011x0x1}}

{10x01 \ {10101, 10001}, xx011 \ {01011, 10011}, xx0x1 \ {1x0x1, xx001, x1001}}
{0xx00 \ {01100, 01x00, 0x000}, 0x10x \ {00101, 0010x, 01100}}
{
   0x10110x01 \ {
   0x10110101, 0x10110001, 0010110x01, 0010110x01}, 0x101xx001 \ {
   0x1011x001, 0x101xx001, 0x101x1001, 00101xx001, 00101xx001}}

{0xx11 \ {00011, 0x011, 0x011}, 11x1x \ {11010, 1111x, 11110}, x0x1x \ {10111, x0011, x001x}}
{0xx11 \ {01x11, 00011, 00111}, 1x00x \ {1x000, 1x001, 10001}}
{
   0xx110xx11 \ {
   0xx1100011, 0xx110x011, 0xx110x011, 01x110xx11, 000110xx11, 001110xx11}, 0xx1111x11 \ {
   0xx1111111, 01x1111x11, 0001111x11, 0011111x11}, 0xx11x0x11 \ {
   0xx1110111, 0xx11x0011, 0xx11x0011, 01x11x0x11, 00011x0x11, 00111x0x11}}

{x001x \ {0001x, x0010, 10010}, 1xxxx \ {1x11x, 11111, 110xx}}
{x1x11 \ {x1111, 11011, 11x11}, xxxx1 \ {001x1, x0001, x1x01}}
{
   x1x11x0011 \ {
   x1x1100011, x1111x0011, 11011x0011, 11x11x0011}, xxx11x0011 \ {
   xxx1100011, 00111x0011}, x1x111xx11 \ {
   x1x111x111, x1x1111111, x1x1111011, x11111xx11, 110111xx11, 11x111xx11}, xxxx11xxx1 \ {
   xxx111xx01, xxx011xx11, xxxx11x111, xxxx111111, xxxx1110x1, 001x11xxx1, x00011xxx1, x1x011xxx1}}

{xx1xx \ {111xx, 10111, 0111x}, xxxx1 \ {01001, 10x01, 00x01}}
{}
{}

{0x01x \ {00011, 0001x, 0101x}, x011x \ {0011x, 10111}, x11x0 \ {011x0, 11110, 11100}}
{110x0 \ {11010, 11000}, 10xx1 \ {101x1, 10011}}
{
   110100x010 \ {
   1101000010, 1101001010, 110100x010}, 10x110x011 \ {
   10x1100011, 10x1100011, 10x1101011, 101110x011, 100110x011}, 11010x0110 \ {
   1101000110, 11010x0110}, 10x11x0111 \ {
   10x1100111, 10x1110111, 10111x0111, 10011x0111}, 110x0x11x0 \ {
   11010x1100, 11000x1110, 110x0011x0, 110x011110, 110x011100, 11010x11x0, 11000x11x0}}

{11x10 \ {11110, 11010}, x1x1x \ {11111, 01x1x, 01111}}
{000xx \ {00010, 0001x, 000x0}}
{
   0001011x10 \ {
   0001011110, 0001011010, 0001011x10, 0001011x10, 0001011x10}, 0001xx1x1x \ {
   00011x1x10, 00010x1x11, 0001x11111, 0001x01x1x, 0001x01111, 00010x1x1x, 0001xx1x1x, 00010x1x1x}}

{}
{x1x1x \ {01011, 1101x, 01111}, xx10x \ {11100, 1110x, x0101}}
{}

{x1010 \ {11010}, x110x \ {11100, x1100, 11101}}
{x001x \ {10011, 0001x, 00010}, x10x1 \ {11001, 110x1, 11011}}
{
   x0010x1010 \ {
   x001011010, 00010x1010, 00010x1010}, x1001x1101 \ {
   x100111101, 11001x1101, 11001x1101}}

{xxx0x \ {1100x, 0x10x, 0xx01}}
{111x0 \ {11100, 11110}}
{
   11100xxx00 \ {
   1110011000, 111000x100, 11100xxx00}}

{011xx \ {0111x, 0110x, 01110}, xxx10 \ {1x110, x1010, 01110}, 0x0x0 \ {00010, 01010}}
{x1100 \ {01100}, x1xxx \ {01100, 11x1x, x1xx1}}
{
   x110001100 \ {
   x110001100, 0110001100}, x1xxx011xx \ {
   x1xx1011x0, x1xx0011x1, x1x1x0110x, x1x0x0111x, x1xxx0111x, x1xxx0110x, x1xxx01110, 01100011xx, 11x1x011xx, x1xx1011xx}, x1x10xxx10 \ {
   x1x101x110, x1x10x1010, x1x1001110, 11x10xxx10}, x11000x000 \ {
   011000x000}, x1xx00x0x0 \ {
   x1x100x000, x1x000x010, x1xx000010, x1xx001010, 011000x0x0, 11x100x0x0}}

{01xxx \ {0110x, 01x0x, 01111}}
{0x1x0 \ {01100, 0x100, 001x0}, 0x0x0 \ {00000, 000x0}, 1xx11 \ {10x11, 1x111, 10011}}
{
   0x1x001xx0 \ {
   0x11001x00, 0x10001x10, 0x1x001100, 0x1x001x00, 0110001xx0, 0x10001xx0, 001x001xx0}, 0x0x001xx0 \ {
   0x01001x00, 0x00001x10, 0x0x001100, 0x0x001x00, 0000001xx0, 000x001xx0}, 1xx1101x11 \ {
   1xx1101111, 10x1101x11, 1x11101x11, 1001101x11}}

{x101x \ {01011, 1101x, 0101x}, x0xx1 \ {00101, 000x1, 10x01}}
{1xx0x \ {10100, 1x100, 1000x}}
{
   1xx01x0x01 \ {
   1xx0100101, 1xx0100001, 1xx0110x01, 10001x0x01}}

{x111x \ {0111x, 11110, 01111}, x0xx1 \ {x00x1, x0x01, 10001}, x0100 \ {00100, 10100}}
{x01xx \ {x011x, x0110, 10100}, 0001x \ {00010, 00011}}
{
   x011xx111x \ {
   x0111x1110, x0110x1111, x011x0111x, x011x11110, x011x01111, x011xx111x, x0110x111x}, 0001xx111x \ {
   00011x1110, 00010x1111, 0001x0111x, 0001x11110, 0001x01111, 00010x111x, 00011x111x}, x01x1x0xx1 \ {
   x0111x0x01, x0101x0x11, x01x1x00x1, x01x1x0x01, x01x110001, x0111x0xx1}, 00011x0x11 \ {
   00011x0011, 00011x0x11}, x0100x0100 \ {
   x010000100, x010010100, 10100x0100}}

{x0xx0 \ {100x0, 00x10, 00x10}}
{xxxx1 \ {x0xx1, x1001, 011x1}, x1100 \ {11100, 01100}, x0000 \ {00000}}
{
   x1100x0x00 \ {
   x110010000, 11100x0x00, 01100x0x00}, x0000x0x00 \ {
   x000010000, 00000x0x00}}

{1xx0x \ {10101, 11101, 1x10x}, x11xx \ {11111, 0110x, 111x0}, 0x10x \ {0x101, 00100, 00100}}
{000xx \ {0000x, 00001, 00011}, x00x1 \ {00011, 000x1, x0001}}
{
   0000x1xx0x \ {
   000011xx00, 000001xx01, 0000x10101, 0000x11101, 0000x1x10x, 0000x1xx0x, 000011xx0x}, x00011xx01 \ {
   x000110101, x000111101, x00011x101, 000011xx01, x00011xx01}, 000xxx11xx \ {
   000x1x11x0, 000x0x11x1, 0001xx110x, 0000xx111x, 000xx11111, 000xx0110x, 000xx111x0, 0000xx11xx, 00001x11xx, 00011x11xx}, x00x1x11x1 \ {
   x0011x1101, x0001x1111, x00x111111, x00x101101, 00011x11x1, 000x1x11x1, x0001x11x1}, 0000x0x10x \ {
   000010x100, 000000x101, 0000x0x101, 0000x00100, 0000x00100, 0000x0x10x, 000010x10x}, x00010x101 \ {
   x00010x101, 000010x101, x00010x101}}

{1x1xx \ {1010x, 1x110, 10100}, x11x1 \ {01101, x1101, 011x1}}
{00xx1 \ {00101, 00001, 00x11}}
{
   00xx11x1x1 \ {
   00x111x101, 00x011x111, 00xx110101, 001011x1x1, 000011x1x1, 00x111x1x1}, 00xx1x11x1 \ {
   00x11x1101, 00x01x1111, 00xx101101, 00xx1x1101, 00xx1011x1, 00101x11x1, 00001x11x1, 00x11x11x1}}

{0xx0x \ {00101, 0x101, 0xx00}}
{xxx1x \ {x1111, 00011}}
{}

{xx0x0 \ {10000, 1x010, 1x0x0}}
{x0x00 \ {10x00, x0000, 10000}}
{
   x0x00xx000 \ {
   x0x0010000, x0x001x000, 10x00xx000, x0000xx000, 10000xx000}}

{01x0x \ {0110x, 01000, 01101}}
{x011x \ {00110, 10111, 1011x}, xx1x1 \ {001x1, xx111, x01x1}}
{
   xx10101x01 \ {
   xx10101101, xx10101101, 0010101x01, x010101x01}}

{}
{x0xx1 \ {10101, 00011, 00xx1}, 0xx1x \ {0001x, 0xx10, 0x110}}
{}

{01xx1 \ {01001, 01111, 01011}}
{x00x1 \ {x0011, 00001, 000x1}, 0x1x1 \ {0x101, 01101}}
{
   x00x101xx1 \ {
   x001101x01, x000101x11, x00x101001, x00x101111, x00x101011, x001101xx1, 0000101xx1, 000x101xx1}, 0x1x101xx1 \ {
   0x11101x01, 0x10101x11, 0x1x101001, 0x1x101111, 0x1x101011, 0x10101xx1, 0110101xx1}}

{x0xx1 \ {10001, 10101, 101x1}, 000xx \ {00001, 00000}}
{x1x1x \ {11111, 01x1x, 01x1x}, x00xx \ {1001x, x0010, x0010}, 1xx01 \ {1x001, 10101}}
{
   x1x11x0x11 \ {
   x1x1110111, 11111x0x11, 01x11x0x11, 01x11x0x11}, x00x1x0xx1 \ {
   x0011x0x01, x0001x0x11, x00x110001, x00x110101, x00x1101x1, 10011x0xx1}, 1xx01x0x01 \ {
   1xx0110001, 1xx0110101, 1xx0110101, 1x001x0x01, 10101x0x01}, x1x1x0001x \ {
   x1x1100010, x1x1000011, 111110001x, 01x1x0001x, 01x1x0001x}, x00xx000xx \ {
   x00x1000x0, x00x0000x1, x001x0000x, x000x0001x, x00xx00001, x00xx00000, 1001x000xx, x0010000xx, x0010000xx}, 1xx0100001 \ {
   1xx0100001, 1x00100001, 1010100001}}

{1xxx1 \ {1x1x1, 11011}, x1xx0 \ {01x10, 11100, 111x0}}
{0x101 \ {00101}}
{
   0x1011xx01 \ {
   0x1011x101, 001011xx01}}

{1010x \ {10101, 10100, 10100}, x0x01 \ {10101, 00x01}}
{xxxxx \ {001x0, 11100, 1xx10}, xx0x1 \ {1x001, 01011, 00011}}
{
   xxx0x1010x \ {
   xxx0110100, xxx0010101, xxx0x10101, xxx0x10100, xxx0x10100, 001001010x, 111001010x}, xx00110101 \ {
   xx00110101, 1x00110101}, xxx01x0x01 \ {
   xxx0110101, xxx0100x01}, xx001x0x01 \ {
   xx00110101, xx00100x01, 1x001x0x01}}

{1xx00 \ {10100, 1x000, 11100}, 11xxx \ {11x11, 111x0, 11100}}
{xx011 \ {00011, 01011, x0011}, xx1x1 \ {x11x1, 10111, 11101}}
{
   xx01111x11 \ {
   xx01111x11, 0001111x11, 0101111x11, x001111x11}, xx1x111xx1 \ {
   xx11111x01, xx10111x11, xx1x111x11, x11x111xx1, 1011111xx1, 1110111xx1}}

{}
{0x100 \ {01100}, 10xx0 \ {101x0, 10x10}, 00xx1 \ {00111, 00x11, 00001}}
{}

{x00xx \ {100x0, x0000, x001x}, 11x00 \ {11000}}
{x10x0 \ {01010, 010x0, x1010}}
{
   x10x0x00x0 \ {
   x1010x0000, x1000x0010, x10x0100x0, x10x0x0000, x10x0x0010, 01010x00x0, 010x0x00x0, x1010x00x0}, x100011x00 \ {
   x100011000, 0100011x00}}

{x11x0 \ {11110, 011x0}}
{}
{}

{0xx11 \ {0x111, 00011, 00x11}, x1000 \ {01000, 11000}}
{001x1 \ {00111, 00101}, xx111 \ {0x111, x1111}}
{
   001110xx11 \ {
   001110x111, 0011100011, 0011100x11, 001110xx11}, xx1110xx11 \ {
   xx1110x111, xx11100011, xx11100x11, 0x1110xx11, x11110xx11}}

{0x1xx \ {0x110, 01101}, x1x1x \ {11x1x, 01x11, 11011}}
{x01x0 \ {10110, 00100, 101x0}, xx1x0 \ {1x1x0, 111x0, 1x110}}
{
   x01x00x1x0 \ {
   x01100x100, x01000x110, x01x00x110, 101100x1x0, 001000x1x0, 101x00x1x0}, xx1x00x1x0 \ {
   xx1100x100, xx1000x110, xx1x00x110, 1x1x00x1x0, 111x00x1x0, 1x1100x1x0}, x0110x1x10 \ {
   x011011x10, 10110x1x10, 10110x1x10}, xx110x1x10 \ {
   xx11011x10, 1x110x1x10, 11110x1x10, 1x110x1x10}}

{xxx10 \ {11x10, 00110, xx010}, 10x00 \ {10000}}
{xx111 \ {x0111, 01111, 00111}}
{}

{x11x0 \ {011x0, 11100, x1110}, x01xx \ {001x0, 10100, x0100}, 000xx \ {000x1, 0000x, 00000}}
{x100x \ {0100x, 01001}, 11x1x \ {11111, 11011, 11010}}
{
   x1000x1100 \ {
   x100001100, x100011100, 01000x1100}, 11x10x1110 \ {
   11x1001110, 11x10x1110, 11010x1110}, x100xx010x \ {
   x1001x0100, x1000x0101, x100x00100, x100x10100, x100xx0100, 0100xx010x, 01001x010x}, 11x1xx011x \ {
   11x11x0110, 11x10x0111, 11x1x00110, 11111x011x, 11011x011x, 11010x011x}, x100x0000x \ {
   x100100000, x100000001, x100x00001, x100x0000x, x100x00000, 0100x0000x, 010010000x}, 11x1x0001x \ {
   11x1100010, 11x1000011, 11x1x00011, 111110001x, 110110001x, 110100001x}}

{x0xx0 \ {000x0, 00x10, x0x10}, 1xx01 \ {1x001, 11x01, 1x101}}
{}
{}

{xx01x \ {00010, 1001x, xx011}}
{}
{}

{xx000 \ {x1000, 1x000, 00000}, x1xxx \ {0100x, 11x11, 11101}, 0x1xx \ {001x0, 0x110, 0x1x0}}
{xxx01 \ {10101, 00x01}}
{
   xxx01x1x01 \ {
   xxx0101001, xxx0111101, 10101x1x01, 00x01x1x01}, xxx010x101 \ {
   101010x101, 00x010x101}}

{x1xx1 \ {x1x11, x1101, 01x01}, 0x0xx \ {010x0, 0x01x, 00000}}
{0xxx0 \ {0x0x0, 011x0, 0xx00}}
{
   0xxx00x0x0 \ {
   0xx100x000, 0xx000x010, 0xxx0010x0, 0xxx00x010, 0xxx000000, 0x0x00x0x0, 011x00x0x0, 0xx000x0x0}}

{11x01 \ {11101, 11001}}
{0x0x0 \ {00000, 0x000, 000x0}}
{}

{1x10x \ {1x101, 1110x, 1110x}}
{0x1x0 \ {00100, 0x100, 0x110}}
{
   0x1001x100 \ {
   0x10011100, 0x10011100, 001001x100, 0x1001x100}}

{00x0x \ {00100, 00x00}}
{1100x \ {11001, 11000, 11000}}
{
   1100x00x0x \ {
   1100100x00, 1100000x01, 1100x00100, 1100x00x00, 1100100x0x, 1100000x0x, 1100000x0x}}

{000x0 \ {00000, 00010, 00010}}
{xx10x \ {xx101, 10101, 1x101}}
{
   xx10000000 \ {
   xx10000000}}

{0x0x0 \ {000x0, 0x000, 00010}}
{x1x10 \ {11x10, 11110, 11110}, 01xxx \ {0101x, 010x0, 01101}}
{
   x1x100x010 \ {
   x1x1000010, x1x1000010, 11x100x010, 111100x010, 111100x010}, 01xx00x0x0 \ {
   01x100x000, 01x000x010, 01xx0000x0, 01xx00x000, 01xx000010, 010100x0x0, 010x00x0x0}}

{00xx0 \ {00010, 000x0, 00100}, xx000 \ {00000}}
{00xx0 \ {001x0, 00x10, 00x10}, 0xx1x \ {01x11, 0111x, 01011}}
{
   00xx000xx0 \ {
   00x1000x00, 00x0000x10, 00xx000010, 00xx0000x0, 00xx000100, 001x000xx0, 00x1000xx0, 00x1000xx0}, 0xx1000x10 \ {
   0xx1000010, 0xx1000010, 0111000x10}, 00x00xx000 \ {
   00x0000000, 00100xx000}}

{1111x \ {11111, 11110, 11110}, 0x1x1 \ {011x1, 001x1, 01111}, 110x1 \ {11001, 11011}}
{001xx \ {001x1, 00111, 001x0}}
{
   0011x1111x \ {
   0011111110, 0011011111, 0011x11111, 0011x11110, 0011x11110, 001111111x, 001111111x, 001101111x}, 001x10x1x1 \ {
   001110x101, 001010x111, 001x1011x1, 001x1001x1, 001x101111, 001x10x1x1, 001110x1x1}, 001x1110x1 \ {
   0011111001, 0010111011, 001x111001, 001x111011, 001x1110x1, 00111110x1}}

{x1001 \ {11001, 01001}, 010x1 \ {01001}}
{xx1xx \ {01110, 01101, xx1x1}}
{
   xx101x1001 \ {
   xx10111001, xx10101001, 01101x1001, xx101x1001}, xx1x1010x1 \ {
   xx11101001, xx10101011, xx1x101001, 01101010x1, xx1x1010x1}}

{1x11x \ {11111, 11110, 1111x}, 11x11 \ {11011, 11111}}
{01xx1 \ {01011, 010x1}, 1xx0x \ {1xx00, 10100, 1x10x}}
{
   01x111x111 \ {
   01x1111111, 01x1111111, 010111x111, 010111x111}, 01x1111x11 \ {
   01x1111011, 01x1111111, 0101111x11, 0101111x11}}

{}
{x00xx \ {x0000, 1001x, 1001x}}
{}

{xx111 \ {10111, 00111}, xxx0x \ {0x00x, x0x00, 11x0x}, 11x11 \ {11011}}
{00x0x \ {00100, 00x01, 00000}, x10x0 \ {x1010, 11000, 11010}, 010x0 \ {01000, 01010}}
{
   00x0xxxx0x \ {
   00x01xxx00, 00x00xxx01, 00x0x0x00x, 00x0xx0x00, 00x0x11x0x, 00100xxx0x, 00x01xxx0x, 00000xxx0x}, x1000xxx00 \ {
   x10000x000, x1000x0x00, x100011x00, 11000xxx00}, 01000xxx00 \ {
   010000x000, 01000x0x00, 0100011x00, 01000xxx00}}

{xx01x \ {0001x, 1x010, xx010}}
{1xxx1 \ {10x01, 11001, 110x1}, 1xx1x \ {10011, 10010, 1x011}}
{
   1xx11xx011 \ {
   1xx1100011, 11011xx011}, 1xx1xxx01x \ {
   1xx11xx010, 1xx10xx011, 1xx1x0001x, 1xx1x1x010, 1xx1xxx010, 10011xx01x, 10010xx01x, 1x011xx01x}}

{10x10 \ {10110, 10010}, 00x1x \ {00010, 00011, 00110}, 10x11 \ {10011, 10111, 10111}}
{}
{}

{x1x10 \ {11110, 01x10, x1110}, xx0xx \ {010x0, 0001x, x001x}}
{x111x \ {01111, x1111, 1111x}, x1x10 \ {01010, 11010}, x0101 \ {00101}}
{
   x1110x1x10 \ {
   x111011110, x111001x10, x1110x1110, 11110x1x10}, x1x10x1x10 \ {
   x1x1011110, x1x1001x10, x1x10x1110, 01010x1x10, 11010x1x10}, x111xxx01x \ {
   x1111xx010, x1110xx011, x111x01010, x111x0001x, x111xx001x, 01111xx01x, x1111xx01x, 1111xxx01x}, x1x10xx010 \ {
   x1x1001010, x1x1000010, x1x10x0010, 01010xx010, 11010xx010}, x0101xx001 \ {
   00101xx001}}

{1xx11 \ {1x111, 10011}, 000x0 \ {00000}}
{xx1xx \ {0x10x, xx11x, 0111x}, 1x0x0 \ {11010, 110x0, 100x0}}
{
   xx1111xx11 \ {
   xx1111x111, xx11110011, xx1111xx11, 011111xx11}, xx1x0000x0 \ {
   xx11000000, xx10000010, xx1x000000, 0x100000x0, xx110000x0, 01110000x0}, 1x0x0000x0 \ {
   1x01000000, 1x00000010, 1x0x000000, 11010000x0, 110x0000x0, 100x0000x0}}

{10xx1 \ {10001, 100x1, 10111}, x11xx \ {x11x1, 01100, 11100}}
{1xx11 \ {1x011, 10x11, 11x11}, x11x1 \ {11111, 111x1, x1111}, xxx01 \ {xx001, 0x001, 0x001}}
{
   1xx1110x11 \ {
   1xx1110011, 1xx1110111, 1x01110x11, 10x1110x11, 11x1110x11}, x11x110xx1 \ {
   x111110x01, x110110x11, x11x110001, x11x1100x1, x11x110111, 1111110xx1, 111x110xx1, x111110xx1}, xxx0110x01 \ {
   xxx0110001, xxx0110001, xx00110x01, 0x00110x01, 0x00110x01}, 1xx11x1111 \ {
   1xx11x1111, 1x011x1111, 10x11x1111, 11x11x1111}, x11x1x11x1 \ {
   x1111x1101, x1101x1111, x11x1x11x1, 11111x11x1, 111x1x11x1, x1111x11x1}, xxx01x1101 \ {
   xxx01x1101, xx001x1101, 0x001x1101, 0x001x1101}}

{0xxx1 \ {000x1, 0xx01, 01x11}, 0x00x \ {01000, 0100x}, x111x \ {01111, x1110, 0111x}}
{}
{}

{x1x01 \ {11x01, 01001, 01x01}, 0x0x0 \ {000x0, 0x010, 01000}}
{00xxx \ {00100, 0010x, 000x0}, 011xx \ {0110x, 01110, 01100}, x10xx \ {01010, 11011, 110xx}}
{
   00x01x1x01 \ {
   00x0111x01, 00x0101001, 00x0101x01, 00101x1x01}, 01101x1x01 \ {
   0110111x01, 0110101001, 0110101x01, 01101x1x01}, x1001x1x01 \ {
   x100111x01, x100101001, x100101x01, 11001x1x01}, 00xx00x0x0 \ {
   00x100x000, 00x000x010, 00xx0000x0, 00xx00x010, 00xx001000, 001000x0x0, 001000x0x0, 000x00x0x0}, 011x00x0x0 \ {
   011100x000, 011000x010, 011x0000x0, 011x00x010, 011x001000, 011000x0x0, 011100x0x0, 011000x0x0}, x10x00x0x0 \ {
   x10100x000, x10000x010, x10x0000x0, x10x00x010, x10x001000, 010100x0x0, 110x00x0x0}}

{010xx \ {01010, 01000, 01011}}
{xx011 \ {x0011, 01011, 10011}, 0xx11 \ {0x111, 01011, 00111}, 11xxx \ {11x1x, 1101x, 11101}}
{
   xx01101011 \ {
   xx01101011, x001101011, 0101101011, 1001101011}, 0xx1101011 \ {
   0xx1101011, 0x11101011, 0101101011, 0011101011}, 11xxx010xx \ {
   11xx1010x0, 11xx0010x1, 11x1x0100x, 11x0x0101x, 11xxx01010, 11xxx01000, 11xxx01011, 11x1x010xx, 1101x010xx, 11101010xx}}

{010x0 \ {01000, 01010}, x10xx \ {01011, 010xx, 1100x}, xx11x \ {xx110, 1x11x, 0x110}}
{1x10x \ {11101, 1010x}}
{
   1x10001000 \ {
   1x10001000, 1010001000}, 1x10xx100x \ {
   1x101x1000, 1x100x1001, 1x10x0100x, 1x10x1100x, 11101x100x, 1010xx100x}}

{11xx1 \ {110x1, 111x1, 11101}, 0xxxx \ {01x0x, 001xx, 0101x}}
{10xx1 \ {10x11, 101x1, 10111}}
{
   10xx111xx1 \ {
   10x1111x01, 10x0111x11, 10xx1110x1, 10xx1111x1, 10xx111101, 10x1111xx1, 101x111xx1, 1011111xx1}, 10xx10xxx1 \ {
   10x110xx01, 10x010xx11, 10xx101x01, 10xx1001x1, 10xx101011, 10x110xxx1, 101x10xxx1, 101110xxx1}}

{1xxxx \ {10x11, 1x011, 1011x}, 1x1x0 \ {11110, 11100}}
{0x1xx \ {0x100, 01100, 0111x}}
{
   0x1xx1xxxx \ {
   0x1x11xxx0, 0x1x01xxx1, 0x11x1xx0x, 0x10x1xx1x, 0x1xx10x11, 0x1xx1x011, 0x1xx1011x, 0x1001xxxx, 011001xxxx, 0111x1xxxx}, 0x1x01x1x0 \ {
   0x1101x100, 0x1001x110, 0x1x011110, 0x1x011100, 0x1001x1x0, 011001x1x0, 011101x1x0}}

{1x11x \ {1x111, 1x110, 1x110}}
{}
{}

{xx0x1 \ {1x011, 01001, xx001}, 01x10 \ {01010}}
{1111x \ {11111, 11110}}
{
   11111xx011 \ {
   111111x011, 11111xx011}, 1111001x10 \ {
   1111001010, 1111001x10}}

{x110x \ {1110x, 0110x}, x1xxx \ {x10x0, 01x1x, 11011}, 0x010 \ {01010, 00010}}
{x10x1 \ {11001, x1011, x1011}}
{
   x1001x1101 \ {
   x100111101, x100101101, 11001x1101}, x10x1x1xx1 \ {
   x1011x1x01, x1001x1x11, x10x101x11, x10x111011, 11001x1xx1, x1011x1xx1, x1011x1xx1}}

{x01xx \ {x0100, x0101, 00101}}
{11x1x \ {1111x, 11x10}}
{
   11x1xx011x \ {
   11x11x0110, 11x10x0111, 1111xx011x, 11x10x011x}}

{x1xx1 \ {011x1, x1x11, 01101}}
{0x110 \ {00110, 01110}, xx100 \ {01100, 10100}, 10xx1 \ {10001, 10011, 10111}}
{
   10xx1x1xx1 \ {
   10x11x1x01, 10x01x1x11, 10xx1011x1, 10xx1x1x11, 10xx101101, 10001x1xx1, 10011x1xx1, 10111x1xx1}}

{}
{001xx \ {00110, 0010x, 00101}}
{}

{1x00x \ {1x000, 11001, 10001}, 1x111 \ {11111, 10111}}
{xxxx1 \ {0x111, 11x01, x1x01}, 101x1 \ {10111, 10101}, x00xx \ {000x0, x0001, 0001x}}
{
   xxx011x001 \ {
   xxx0111001, xxx0110001, 11x011x001, x1x011x001}, 101011x001 \ {
   1010111001, 1010110001, 101011x001}, x000x1x00x \ {
   x00011x000, x00001x001, x000x1x000, x000x11001, x000x10001, 000001x00x, x00011x00x}, xxx111x111 \ {
   xxx1111111, xxx1110111, 0x1111x111}, 101111x111 \ {
   1011111111, 1011110111, 101111x111}, x00111x111 \ {
   x001111111, x001110111, 000111x111}}

{}
{1x11x \ {1111x, 1x111, 1011x}, xx10x \ {0x10x, 11101, 11100}}
{}

{x0xx1 \ {x0x01, 100x1, 00x01}, x11xx \ {x1101, 0111x, 11100}}
{01x10 \ {01110, 01010}, 1xxxx \ {10100, 10x10, 10000}}
{
   1xxx1x0xx1 \ {
   1xx11x0x01, 1xx01x0x11, 1xxx1x0x01, 1xxx1100x1, 1xxx100x01}, 01x10x1110 \ {
   01x1001110, 01110x1110, 01010x1110}, 1xxxxx11xx \ {
   1xxx1x11x0, 1xxx0x11x1, 1xx1xx110x, 1xx0xx111x, 1xxxxx1101, 1xxxx0111x, 1xxxx11100, 10100x11xx, 10x10x11xx, 10000x11xx}}

{00xx0 \ {00100, 001x0, 000x0}}
{x10xx \ {110xx, 11011, x1011}, 000x0 \ {00000, 00010, 00010}}
{
   x10x000xx0 \ {
   x101000x00, x100000x10, x10x000100, x10x0001x0, x10x0000x0, 110x000xx0}, 000x000xx0 \ {
   0001000x00, 0000000x10, 000x000100, 000x0001x0, 000x0000x0, 0000000xx0, 0001000xx0, 0001000xx0}}

{0xxx1 \ {0xx11, 0x0x1, 0x1x1}}
{x101x \ {x1010, 1101x, 0101x}, x1xx1 \ {x11x1, 11001, 11x01}}
{
   x10110xx11 \ {
   x10110xx11, x10110x011, x10110x111, 110110xx11, 010110xx11}, x1xx10xxx1 \ {
   x1x110xx01, x1x010xx11, x1xx10xx11, x1xx10x0x1, x1xx10x1x1, x11x10xxx1, 110010xxx1, 11x010xxx1}}

{x0100 \ {00100, 10100, 10100}}
{}
{}

{0x10x \ {0x100, 00100, 00100}, xx010 \ {11010, 00010, x1010}, x0x10 \ {x0010, 00110, x0110}}
{xxx01 \ {01x01, 10101, 11101}, 0xx10 \ {0x110, 00010, 01110}}
{
   xxx010x101 \ {
   01x010x101, 101010x101, 111010x101}, 0xx10xx010 \ {
   0xx1011010, 0xx1000010, 0xx10x1010, 0x110xx010, 00010xx010, 01110xx010}, 0xx10x0x10 \ {
   0xx10x0010, 0xx1000110, 0xx10x0110, 0x110x0x10, 00010x0x10, 01110x0x10}}

{x0100 \ {00100, 10100}, x1001 \ {01001}}
{}
{}

{x10x0 \ {x1010, 11010, 01010}}
{00xx1 \ {00101, 001x1}}
{}

{00x1x \ {00x11, 00010, 00111}, x1xx1 \ {x1001, x1111, 01xx1}, 101xx \ {101x1, 101x0, 10100}}
{}
{}

{xxxxx \ {10110, xxx0x, x11x1}, x0x01 \ {10101, 10001, 00001}}
{0x0xx \ {01011, 00011, 010xx}, 01x0x \ {01001, 0100x, 01101}, xx0x1 \ {11011, 0x0x1, 1x011}}
{
   0x0xxxxxxx \ {
   0x0x1xxxx0, 0x0x0xxxx1, 0x01xxxx0x, 0x00xxxx1x, 0x0xx10110, 0x0xxxxx0x, 0x0xxx11x1, 01011xxxxx, 00011xxxxx, 010xxxxxxx}, 01x0xxxx0x \ {
   01x01xxx00, 01x00xxx01, 01x0xxxx0x, 01x0xx1101, 01001xxx0x, 0100xxxx0x, 01101xxx0x}, xx0x1xxxx1 \ {
   xx011xxx01, xx001xxx11, xx0x1xxx01, xx0x1x11x1, 11011xxxx1, 0x0x1xxxx1, 1x011xxxx1}, 0x001x0x01 \ {
   0x00110101, 0x00110001, 0x00100001, 01001x0x01}, 01x01x0x01 \ {
   01x0110101, 01x0110001, 01x0100001, 01001x0x01, 01001x0x01, 01101x0x01}, xx001x0x01 \ {
   xx00110101, xx00110001, xx00100001, 0x001x0x01}}

{xxxx0 \ {x0010, 0xxx0, 000x0}, xx1xx \ {00101, 0111x, 10101}}
{x0101 \ {00101, 10101}}
{
   x0101xx101 \ {
   x010100101, x010110101, 00101xx101, 10101xx101}}

{10xx1 \ {100x1, 10001, 10001}}
{}
{}

{0x111 \ {01111, 00111}, 00x1x \ {00111, 00x11, 00110}, xx1x1 \ {01111, xx111, 0x111}}
{1011x \ {10111, 10110}, xx1x1 \ {011x1, 11101, 10111}, x0x1x \ {10x1x, x0111, x011x}}
{
   101110x111 \ {
   1011101111, 1011100111, 101110x111}, xx1110x111 \ {
   xx11101111, xx11100111, 011110x111, 101110x111}, x0x110x111 \ {
   x0x1101111, x0x1100111, 10x110x111, x01110x111, x01110x111}, 1011x00x1x \ {
   1011100x10, 1011000x11, 1011x00111, 1011x00x11, 1011x00110, 1011100x1x, 1011000x1x}, xx11100x11 \ {
   xx11100111, xx11100x11, 0111100x11, 1011100x11}, x0x1x00x1x \ {
   x0x1100x10, x0x1000x11, x0x1x00111, x0x1x00x11, x0x1x00110, 10x1x00x1x, x011100x1x, x011x00x1x}, 10111xx111 \ {
   1011101111, 10111xx111, 101110x111, 10111xx111}, xx1x1xx1x1 \ {
   xx111xx101, xx101xx111, xx1x101111, xx1x1xx111, xx1x10x111, 011x1xx1x1, 11101xx1x1, 10111xx1x1}, x0x11xx111 \ {
   x0x1101111, x0x11xx111, x0x110x111, 10x11xx111, x0111xx111, x0111xx111}}

{0110x \ {01101, 01100}}
{xx0x1 \ {00011, 100x1, 110x1}, 01xx1 \ {011x1, 01001, 010x1}}
{
   xx00101101 \ {
   xx00101101, 1000101101, 1100101101}, 01x0101101 \ {
   01x0101101, 0110101101, 0100101101, 0100101101}}

{111x0 \ {11100, 11110}, xx101 \ {0x101, 00101, 11101}}
{xxx01 \ {10101, 10x01, 0x101}}
{
   xxx01xx101 \ {
   xxx010x101, xxx0100101, xxx0111101, 10101xx101, 10x01xx101, 0x101xx101}}

{}
{0xx0x \ {0xx01, 00001}}
{}

{1xx1x \ {11110, 1xx11, 1111x}, 00x10 \ {00010}, 0x1x0 \ {011x0, 00100, 00100}}
{x0011 \ {00011, 10011}, xxx0x \ {00x01, 0110x, 0100x}}
{
   x00111xx11 \ {
   x00111xx11, x001111111, 000111xx11, 100111xx11}, xxx000x100 \ {
   xxx0001100, xxx0000100, xxx0000100, 011000x100, 010000x100}}

{01x11 \ {01111}}
{0x0xx \ {00001, 000x1, 010x1}}
{
   0x01101x11 \ {
   0x01101111, 0001101x11, 0101101x11}}

{10x00 \ {10000, 10100, 10100}, 00x00 \ {00100, 00000}, x10xx \ {0101x, 11001, 010x0}}
{01x1x \ {01x11, 0111x, 01111}, 100x0 \ {10000, 10010}}
{
   1000010x00 \ {
   1000010000, 1000010100, 1000010100, 1000010x00}, 1000000x00 \ {
   1000000100, 1000000000, 1000000x00}, 01x1xx101x \ {
   01x11x1010, 01x10x1011, 01x1x0101x, 01x1x01010, 01x11x101x, 0111xx101x, 01111x101x}, 100x0x10x0 \ {
   10010x1000, 10000x1010, 100x001010, 100x0010x0, 10000x10x0, 10010x10x0}}

{01x00 \ {01100, 01000}, x1x0x \ {11101, 11x00, 01000}}
{01xx0 \ {010x0, 01110, 01x00}}
{
   01x0001x00 \ {
   01x0001100, 01x0001000, 0100001x00, 01x0001x00}, 01x00x1x00 \ {
   01x0011x00, 01x0001000, 01000x1x00, 01x00x1x00}}

{x11xx \ {011x1, x111x, x110x}, 01x11 \ {01111, 01011, 01011}}
{000x1 \ {00011, 00001, 00001}}
{
   000x1x11x1 \ {
   00011x1101, 00001x1111, 000x1011x1, 000x1x1111, 000x1x1101, 00011x11x1, 00001x11x1, 00001x11x1}, 0001101x11 \ {
   0001101111, 0001101011, 0001101011, 0001101x11}}

{1xx01 \ {11x01, 10x01, 10101}, 1x1x0 \ {1x100, 11100, 1x110}}
{}
{}

{xxx11 \ {10111, xx111}, 1x101 \ {11101, 10101, 10101}}
{x1x0x \ {x1x01, x110x, 11x00}}
{
   x1x011x101 \ {
   x1x0111101, x1x0110101, x1x0110101, x1x011x101, x11011x101}}

{010xx \ {010x1, 0101x, 01000}}
{0xx1x \ {01111, 01x10, 01x11}}
{
   0xx1x0101x \ {
   0xx1101010, 0xx1001011, 0xx1x01011, 0xx1x0101x, 011110101x, 01x100101x, 01x110101x}}

{}
{1xx1x \ {10x11, 1x010, 10011}, x1xx0 \ {01100, x1x00, 11xx0}}
{}

{00x1x \ {00x10, 00111, 00011}}
{x010x \ {00101, 0010x, 10101}}
{}

{1x1x0 \ {1x100, 101x0, 111x0}, 1xx11 \ {11x11, 1x011, 10111}}
{0xx00 \ {0x000, 01000, 01000}, 1x101 \ {11101}}
{
   0xx001x100 \ {
   0xx001x100, 0xx0010100, 0xx0011100, 0x0001x100, 010001x100, 010001x100}}

{1x11x \ {1x111, 10111, 1011x}, 0xxxx \ {00x0x, 0xx00, 00x10}}
{x1x11 \ {01x11, 11011, 11011}, xx0xx \ {010xx, xx001, x101x}}
{
   x1x111x111 \ {
   x1x111x111, x1x1110111, x1x1110111, 01x111x111, 110111x111, 110111x111}, xx01x1x11x \ {
   xx0111x110, xx0101x111, xx01x1x111, xx01x10111, xx01x1011x, 0101x1x11x, x101x1x11x}, x1x110xx11 \ {
   01x110xx11, 110110xx11, 110110xx11}, xx0xx0xxxx \ {
   xx0x10xxx0, xx0x00xxx1, xx01x0xx0x, xx00x0xx1x, xx0xx00x0x, xx0xx0xx00, xx0xx00x10, 010xx0xxxx, xx0010xxxx, x101x0xxxx}}

{xx110 \ {0x110, 1x110}, 10x10 \ {10010, 10110, 10110}}
{}
{}

{1xx11 \ {11011, 11111, 10x11}, x0111 \ {10111, 00111, 00111}}
{0xxxx \ {0x01x, 01101, 00x00}, 0x0x1 \ {010x1, 00011, 01011}, x1xxx \ {01110, 110x1, 11110}}
{
   0xx111xx11 \ {
   0xx1111011, 0xx1111111, 0xx1110x11, 0x0111xx11}, 0x0111xx11 \ {
   0x01111011, 0x01111111, 0x01110x11, 010111xx11, 000111xx11, 010111xx11}, x1x111xx11 \ {
   x1x1111011, x1x1111111, x1x1110x11, 110111xx11}, 0xx11x0111 \ {
   0xx1110111, 0xx1100111, 0xx1100111, 0x011x0111}, 0x011x0111 \ {
   0x01110111, 0x01100111, 0x01100111, 01011x0111, 00011x0111, 01011x0111}, x1x11x0111 \ {
   x1x1110111, x1x1100111, x1x1100111, 11011x0111}}

{1x1x1 \ {111x1, 11101, 11111}, 1100x \ {11001}, 0001x \ {00011, 00010, 00010}}
{10xx0 \ {10010, 100x0, 10x10}, xx01x \ {00010, xx011, xx011}}
{
   xx0111x111 \ {
   xx01111111, xx01111111, xx0111x111, xx0111x111}, 10x0011000 \ {
   1000011000}, 10x1000010 \ {
   10x1000010, 10x1000010, 1001000010, 1001000010, 10x1000010}, xx01x0001x \ {
   xx01100010, xx01000011, xx01x00011, xx01x00010, xx01x00010, 000100001x, xx0110001x, xx0110001x}}

{x01x1 \ {x0111, 10101, x0101}}
{0xx00 \ {01100, 01000, 01x00}, x100x \ {01001, x1001, 01000}, 0xxx0 \ {001x0, 0x0x0, 00110}}
{
   x1001x0101 \ {
   x100110101, x1001x0101, 01001x0101, x1001x0101}}

{xx001 \ {00001, 1x001}, x0x1x \ {00011, 10x1x, 10x10}, xx100 \ {1x100, 11100, 0x100}}
{x1001 \ {01001}, x00xx \ {10011, 00010, 0000x}}
{
   x1001xx001 \ {
   x100100001, x10011x001, 01001xx001}, x0001xx001 \ {
   x000100001, x00011x001, 00001xx001}, x001xx0x1x \ {
   x0011x0x10, x0010x0x11, x001x00011, x001x10x1x, x001x10x10, 10011x0x1x, 00010x0x1x}, x0000xx100 \ {
   x00001x100, x000011100, x00000x100, 00000xx100}}

{01xx1 \ {01011, 01111, 01x11}}
{1xx0x \ {11x0x, 1xx01}, x101x \ {x1011, 1101x, 1101x}}
{
   1xx0101x01 \ {
   11x0101x01, 1xx0101x01}, x101101x11 \ {
   x101101011, x101101111, x101101x11, x101101x11, 1101101x11, 1101101x11}}

{xxx0x \ {00101, 1x100, xx001}}
{}
{}

{00xx0 \ {00100, 00110, 00010}, xxx1x \ {1xx1x, 11010, 00110}}
{1x01x \ {1x011, 1x010, 10010}, xx0x0 \ {01000, x0010, 1x000}}
{
   1x01000x10 \ {
   1x01000110, 1x01000010, 1x01000x10, 1001000x10}, xx0x000xx0 \ {
   xx01000x00, xx00000x10, xx0x000100, xx0x000110, xx0x000010, 0100000xx0, x001000xx0, 1x00000xx0}, 1x01xxxx1x \ {
   1x011xxx10, 1x010xxx11, 1x01x1xx1x, 1x01x11010, 1x01x00110, 1x011xxx1x, 1x010xxx1x, 10010xxx1x}, xx010xxx10 \ {
   xx0101xx10, xx01011010, xx01000110, x0010xxx10}}

{xxx10 \ {0x110, 1x010, x1010}, 0x01x \ {00010, 01011, 0001x}}
{00xxx \ {000x0, 0001x, 001xx}}
{
   00x10xxx10 \ {
   00x100x110, 00x101x010, 00x10x1010, 00010xxx10, 00010xxx10, 00110xxx10}, 00x1x0x01x \ {
   00x110x010, 00x100x011, 00x1x00010, 00x1x01011, 00x1x0001x, 000100x01x, 0001x0x01x, 0011x0x01x}}

{10x10 \ {10010, 10110, 10110}}
{1xx1x \ {1xx10, 10x11, 1x01x}, 1xx0x \ {11000, 1x00x, 11001}, x1011 \ {01011}}
{
   1xx1010x10 \ {
   1xx1010010, 1xx1010110, 1xx1010110, 1xx1010x10, 1x01010x10}}

{0111x \ {01110, 01111}, xx1x0 \ {00100, 1x100, 1x110}}
{}
{}

{0x011 \ {01011}}
{xx100 \ {00100, 0x100, x0100}}
{}

{1xx01 \ {11x01, 10101, 10101}, xx00x \ {01001, x1000, 0100x}, xxx1x \ {x0011, 1011x, 10111}}
{1xx0x \ {1x101, 10000, 1x001}}
{
   1xx011xx01 \ {
   1xx0111x01, 1xx0110101, 1xx0110101, 1x1011xx01, 1x0011xx01}, 1xx0xxx00x \ {
   1xx01xx000, 1xx00xx001, 1xx0x01001, 1xx0xx1000, 1xx0x0100x, 1x101xx00x, 10000xx00x, 1x001xx00x}}

{0xxx1 \ {01111, 00x11, 010x1}}
{}
{}

{x0100 \ {10100, 00100}}
{x11x1 \ {111x1, x1101}, x1x00 \ {x1000, 11000, 01x00}}
{
   x1x00x0100 \ {
   x1x0010100, x1x0000100, x1000x0100, 11000x0100, 01x00x0100}}

{x1100 \ {11100, 01100, 01100}, x0x0x \ {10x00, x0100, 10x01}, 1xxx0 \ {110x0, 111x0, 1x110}}
{01xx1 \ {01011, 01101}, 0xx01 \ {01x01, 00x01, 00x01}}
{
   01x01x0x01 \ {
   01x0110x01, 01101x0x01}, 0xx01x0x01 \ {
   0xx0110x01, 01x01x0x01, 00x01x0x01, 00x01x0x01}}

{x001x \ {x0010, 00010, 1001x}, x0001 \ {10001, 00001}}
{011xx \ {011x0, 01111}, 11xxx \ {11x01, 110xx, 11xx1}}
{
   0111xx001x \ {
   01111x0010, 01110x0011, 0111xx0010, 0111x00010, 0111x1001x, 01110x001x, 01111x001x}, 11x1xx001x \ {
   11x11x0010, 11x10x0011, 11x1xx0010, 11x1x00010, 11x1x1001x, 1101xx001x, 11x11x001x}, 01101x0001 \ {
   0110110001, 0110100001}, 11x01x0001 \ {
   11x0110001, 11x0100001, 11x01x0001, 11001x0001, 11x01x0001}}

{11x01 \ {11101, 11001, 11001}}
{x1xxx \ {01xx0, 11x10, 01010}}
{
   x1x0111x01 \ {
   x1x0111101, x1x0111001, x1x0111001}}

{x1x10 \ {11110, x1110, 01x10}}
{0x11x \ {0x111, 00111, 0111x}}
{
   0x110x1x10 \ {
   0x11011110, 0x110x1110, 0x11001x10, 01110x1x10}}

{10x1x \ {10011, 10111, 1001x}}
{x10x0 \ {01010, 01000, 110x0}, xx1x1 \ {01101, x0101, 11111}}
{
   x101010x10 \ {
   x101010010, 0101010x10, 1101010x10}, xx11110x11 \ {
   xx11110011, xx11110111, xx11110011, 1111110x11}}

{0110x \ {01100, 01101, 01101}, 11x01 \ {11001, 11101}}
{xx01x \ {x101x, 10010, 01010}, 1x01x \ {11010, 1x010, 10011}, x1xxx \ {110x0, 11011, x11xx}}
{
   x1x0x0110x \ {
   x1x0101100, x1x0001101, x1x0x01100, x1x0x01101, x1x0x01101, 110000110x, x110x0110x}, x1x0111x01 \ {
   x1x0111001, x1x0111101, x110111x01}}

{x00xx \ {10001, x001x, 00011}, x1000 \ {11000, 01000, 01000}, 0x1x0 \ {01110, 0x110, 0x110}}
{0xx1x \ {0x110, 0x010, 0001x}, 0101x \ {01010, 01011}}
{
   0xx1xx001x \ {
   0xx11x0010, 0xx10x0011, 0xx1xx001x, 0xx1x00011, 0x110x001x, 0x010x001x, 0001xx001x}, 0101xx001x \ {
   01011x0010, 01010x0011, 0101xx001x, 0101x00011, 01010x001x, 01011x001x}, 0xx100x110 \ {
   0xx1001110, 0xx100x110, 0xx100x110, 0x1100x110, 0x0100x110, 000100x110}, 010100x110 \ {
   0101001110, 010100x110, 010100x110, 010100x110}}

{}
{}
{}

{x1x11 \ {01x11, 11011, 11111}}
{}
{}

{}
{10xxx \ {10x00, 101x0, 1010x}, xx100 \ {00100, 10100, 01100}}
{}

{00xx1 \ {00x11, 00111, 00111}, 11x00 \ {11100}}
{11xxx \ {110x0, 11110, 11x11}, x0x1x \ {x0111, 00011}}
{
   11xx100xx1 \ {
   11x1100x01, 11x0100x11, 11xx100x11, 11xx100111, 11xx100111, 11x1100xx1}, x0x1100x11 \ {
   x0x1100x11, x0x1100111, x0x1100111, x011100x11, 0001100x11}, 11x0011x00 \ {
   11x0011100, 1100011x00}}

{1xx0x \ {11001, 11000, 10x00}, x00x0 \ {00000, x0010, 10000}}
{1x1x1 \ {11111, 1x101, 10111}}
{
   1x1011xx01 \ {
   1x10111001, 1x1011xx01}}

{xxx0x \ {x0x01, 01101, 1000x}, xxx11 \ {x1111, x0x11, xx111}, 11xx0 \ {11x00, 111x0, 11x10}}
{xxx0x \ {1x101, 10001, 0x001}, 0x01x \ {01010, 01011}, 1110x \ {11101, 11100}}
{
   xxx0xxxx0x \ {
   xxx01xxx00, xxx00xxx01, xxx0xx0x01, xxx0x01101, xxx0x1000x, 1x101xxx0x, 10001xxx0x, 0x001xxx0x}, 1110xxxx0x \ {
   11101xxx00, 11100xxx01, 1110xx0x01, 1110x01101, 1110x1000x, 11101xxx0x, 11100xxx0x}, 0x011xxx11 \ {
   0x011x1111, 0x011x0x11, 0x011xx111, 01011xxx11}, xxx0011x00 \ {
   xxx0011x00, xxx0011100}, 0x01011x10 \ {
   0x01011110, 0x01011x10, 0101011x10}, 1110011x00 \ {
   1110011x00, 1110011100, 1110011x00}}

{xx001 \ {x1001, 00001, 01001}, 11xx1 \ {11x01, 11x11}}
{0000x \ {00001, 00000}}
{
   00001xx001 \ {
   00001x1001, 0000100001, 0000101001, 00001xx001}, 0000111x01 \ {
   0000111x01, 0000111x01}}

{x000x \ {x0000, 00001, 00000}, xx110 \ {01110, 0x110, x1110}}
{x10x0 \ {11010, 01010, 11000}}
{
   x1000x0000 \ {
   x1000x0000, x100000000, 11000x0000}, x1010xx110 \ {
   x101001110, x10100x110, x1010x1110, 11010xx110, 01010xx110}}

{xx110 \ {1x110, 00110}}
{xx0xx \ {11000, xx01x, 00010}}
{
   xx010xx110 \ {
   xx0101x110, xx01000110, xx010xx110, 00010xx110}}

{x0x10 \ {x0110, 00110, 00x10}, x0xxx \ {00x1x, 00101, 100x1}}
{x0xxx \ {00110, 10101, x00xx}, x1110 \ {01110}}
{
   x0x10x0x10 \ {
   x0x10x0110, x0x1000110, x0x1000x10, 00110x0x10, x0010x0x10}, x0xxxx0xxx \ {
   x0xx1x0xx0, x0xx0x0xx1, x0x1xx0x0x, x0x0xx0x1x, x0xxx00x1x, x0xxx00101, x0xxx100x1, 00110x0xxx, 10101x0xxx, x00xxx0xxx}, x1110x0x10 \ {
   x111000x10, 01110x0x10}}

{x1110 \ {11110, 01110}}
{x11x0 \ {011x0, 11110, 11100}}
{
   x1110x1110 \ {
   x111011110, x111001110, 01110x1110, 11110x1110}}

{100x1 \ {10001}, 0xxxx \ {01x01, 00x10, 0xxx1}}
{0x0x0 \ {00010, 0x010, 0x000}, 1xx0x \ {10001, 10101, 10000}}
{
   1xx0110001 \ {
   1xx0110001, 1000110001, 1010110001}, 0x0x00xxx0 \ {
   0x0100xx00, 0x0000xx10, 0x0x000x10, 000100xxx0, 0x0100xxx0, 0x0000xxx0}, 1xx0x0xx0x \ {
   1xx010xx00, 1xx000xx01, 1xx0x01x01, 1xx0x0xx01, 100010xx0x, 101010xx0x, 100000xx0x}}

{00x00 \ {00000, 00100}, 00x00 \ {00000, 00100}, 1xxx0 \ {10x10, 10000, 11x10}}
{01x1x \ {01010, 01x11, 01x11}}
{
   01x101xx10 \ {
   01x1010x10, 01x1011x10, 010101xx10}}

{00x0x \ {0000x, 00000, 00101}, x1101 \ {11101, 01101}}
{0x110 \ {01110, 00110, 00110}, 1x100 \ {11100, 10100}}
{
   1x10000x00 \ {
   1x10000000, 1x10000000, 1110000x00, 1010000x00}}

{1x0xx \ {1x001, 1100x, 11011}, x0x10 \ {10x10, 00110, x0110}}
{1101x \ {11010, 11011, 11011}, 00xxx \ {0000x, 00101, 00100}, x11x0 \ {01100, x1100, 111x0}}
{
   1101x1x01x \ {
   110111x010, 110101x011, 1101x11011, 110101x01x, 110111x01x, 110111x01x}, 00xxx1x0xx \ {
   00xx11x0x0, 00xx01x0x1, 00x1x1x00x, 00x0x1x01x, 00xxx1x001, 00xxx1100x, 00xxx11011, 0000x1x0xx, 001011x0xx, 001001x0xx}, x11x01x0x0 \ {
   x11101x000, x11001x010, x11x011000, 011001x0x0, x11001x0x0, 111x01x0x0}, 11010x0x10 \ {
   1101010x10, 1101000110, 11010x0110, 11010x0x10}, 00x10x0x10 \ {
   00x1010x10, 00x1000110, 00x10x0110}, x1110x0x10 \ {
   x111010x10, x111000110, x1110x0110, 11110x0x10}}

{xx111 \ {x1111, x0111, 01111}, 1xxxx \ {10111, 100x0, 11x00}}
{xx001 \ {00001, x1001, 01001}, 0x10x \ {00100, 0x100, 00101}}
{
   xx0011xx01 \ {
   000011xx01, x10011xx01, 010011xx01}, 0x10x1xx0x \ {
   0x1011xx00, 0x1001xx01, 0x10x10000, 0x10x11x00, 001001xx0x, 0x1001xx0x, 001011xx0x}}

{0xx11 \ {01011, 01111, 01x11}}
{x111x \ {x1111, 11111, 11110}}
{
   x11110xx11 \ {
   x111101011, x111101111, x111101x11, x11110xx11, 111110xx11}}

{x11x0 \ {011x0, 01110, x1110}, 01xx1 \ {01x01, 01011}}
{0xxxx \ {00001, 011x1, 0x011}, 1x0x0 \ {10010, 1x000, 110x0}}
{
   0xxx0x11x0 \ {
   0xx10x1100, 0xx00x1110, 0xxx0011x0, 0xxx001110, 0xxx0x1110}, 1x0x0x11x0 \ {
   1x010x1100, 1x000x1110, 1x0x0011x0, 1x0x001110, 1x0x0x1110, 10010x11x0, 1x000x11x0, 110x0x11x0}, 0xxx101xx1 \ {
   0xx1101x01, 0xx0101x11, 0xxx101x01, 0xxx101011, 0000101xx1, 011x101xx1, 0x01101xx1}}

{1x0xx \ {1x010, 11001, 10010}, 0x1x0 \ {0x110, 01110}}
{}
{}

{10x1x \ {10x11, 10010, 10010}}
{110x0 \ {11010, 11000}}
{
   1101010x10 \ {
   1101010010, 1101010010, 1101010x10}}

{01x1x \ {01x11, 01x10, 0101x}, 10xx1 \ {10001, 101x1}}
{xxx00 \ {10x00, 00000, 01000}, 110xx \ {1100x, 11001}}
{
   1101x01x1x \ {
   1101101x10, 1101001x11, 1101x01x11, 1101x01x10, 1101x0101x}, 110x110xx1 \ {
   1101110x01, 1100110x11, 110x110001, 110x1101x1, 1100110xx1, 1100110xx1}}

{}
{xx01x \ {11011, 1x010, 1x010}, 01x0x \ {01x00, 01000, 01x01}}
{}

{01x0x \ {01000, 01x01, 0100x}}
{01x10 \ {01010, 01110, 01110}, 1x1x1 \ {111x1, 1x101}}
{
   1x10101x01 \ {
   1x10101x01, 1x10101001, 1110101x01, 1x10101x01}}

{000xx \ {0000x, 00001, 000x0}}
{xx111 \ {0x111, 01111, 10111}, x1x1x \ {01011, 01x11, 11011}}
{
   xx11100011 \ {
   0x11100011, 0111100011, 1011100011}, x1x1x0001x \ {
   x1x1100010, x1x1000011, x1x1x00010, 010110001x, 01x110001x, 110110001x}}

{xx11x \ {00111, x1111, x0111}, x10xx \ {x10x0, 01001, 0101x}}
{x111x \ {11110, x1111, 01111}}
{
   x111xxx11x \ {
   x1111xx110, x1110xx111, x111x00111, x111xx1111, x111xx0111, 11110xx11x, x1111xx11x, 01111xx11x}, x111xx101x \ {
   x1111x1010, x1110x1011, x111xx1010, x111x0101x, 11110x101x, x1111x101x, 01111x101x}}

{}
{x1110 \ {01110, 11110, 11110}, x000x \ {10001, 1000x, 0000x}}
{}

{x0xx0 \ {100x0, x0x10, x0110}, 0x0xx \ {0101x, 00010, 0x011}}
{x00x1 \ {000x1, x0001, x0001}, 0x1xx \ {0x1x1, 0x11x, 0x1x0}, 10xxx \ {101x1, 10000, 10x01}}
{
   0x1x0x0xx0 \ {
   0x110x0x00, 0x100x0x10, 0x1x0100x0, 0x1x0x0x10, 0x1x0x0110, 0x110x0xx0, 0x1x0x0xx0}, 10xx0x0xx0 \ {
   10x10x0x00, 10x00x0x10, 10xx0100x0, 10xx0x0x10, 10xx0x0110, 10000x0xx0}, x00x10x0x1 \ {
   x00110x001, x00010x011, x00x101011, x00x10x011, 000x10x0x1, x00010x0x1, x00010x0x1}, 0x1xx0x0xx \ {
   0x1x10x0x0, 0x1x00x0x1, 0x11x0x00x, 0x10x0x01x, 0x1xx0101x, 0x1xx00010, 0x1xx0x011, 0x1x10x0xx, 0x11x0x0xx, 0x1x00x0xx}, 10xxx0x0xx \ {
   10xx10x0x0, 10xx00x0x1, 10x1x0x00x, 10x0x0x01x, 10xxx0101x, 10xxx00010, 10xxx0x011, 101x10x0xx, 100000x0xx, 10x010x0xx}}

{x000x \ {10001, 00000, 1000x}}
{}
{}

{0xxx0 \ {00x00, 00xx0, 0x0x0}}
{x1x0x \ {11x0x, 11101, x100x}, xxxxx \ {1xxx0, 0x101, 11000}, xxx10 \ {01010, 1xx10, 11x10}}
{
   x1x000xx00 \ {
   x1x0000x00, x1x0000x00, x1x000x000, 11x000xx00, x10000xx00}, xxxx00xxx0 \ {
   xxx100xx00, xxx000xx10, xxxx000x00, xxxx000xx0, xxxx00x0x0, 1xxx00xxx0, 110000xxx0}, xxx100xx10 \ {
   xxx1000x10, xxx100x010, 010100xx10, 1xx100xx10, 11x100xx10}}

{x0xx0 \ {00110, 101x0, x0010}, 1xx10 \ {11010, 10x10, 10010}}
{0x10x \ {01100, 0110x, 00100}, 0x11x \ {00111, 00110, 0x111}}
{
   0x100x0x00 \ {
   0x10010100, 01100x0x00, 01100x0x00, 00100x0x00}, 0x110x0x10 \ {
   0x11000110, 0x11010110, 0x110x0010, 00110x0x10}, 0x1101xx10 \ {
   0x11011010, 0x11010x10, 0x11010010, 001101xx10}}

{x1x10 \ {11x10, 11110, x1010}, x10xx \ {010xx, x100x, 01001}}
{}
{}

{0x1xx \ {001xx, 01100}, x110x \ {x1100, 1110x, 0110x}}
{10x00 \ {10100}}
{
   10x000x100 \ {
   10x0000100, 10x0001100, 101000x100}, 10x00x1100 \ {
   10x00x1100, 10x0011100, 10x0001100, 10100x1100}}

{x00xx \ {100x0, 00001, 10000}}
{xx00x \ {11001, 00000, xx000}}
{
   xx00xx000x \ {
   xx001x0000, xx000x0001, xx00x10000, xx00x00001, xx00x10000, 11001x000x, 00000x000x, xx000x000x}}

{x00xx \ {x00x0, x001x}, 0010x \ {00101, 00100}, 011xx \ {011x0, 01100, 01100}}
{01xxx \ {0111x, 0110x, 011x0}, x001x \ {10011, 00010}, xxx0x \ {00100, 01x01, 11x0x}}
{
   01xxxx00xx \ {
   01xx1x00x0, 01xx0x00x1, 01x1xx000x, 01x0xx001x, 01xxxx00x0, 01xxxx001x, 0111xx00xx, 0110xx00xx, 011x0x00xx}, x001xx001x \ {
   x0011x0010, x0010x0011, x001xx0010, x001xx001x, 10011x001x, 00010x001x}, xxx0xx000x \ {
   xxx01x0000, xxx00x0001, xxx0xx0000, 00100x000x, 01x01x000x, 11x0xx000x}, 01x0x0010x \ {
   01x0100100, 01x0000101, 01x0x00101, 01x0x00100, 0110x0010x, 011000010x}, xxx0x0010x \ {
   xxx0100100, xxx0000101, xxx0x00101, xxx0x00100, 001000010x, 01x010010x, 11x0x0010x}, 01xxx011xx \ {
   01xx1011x0, 01xx0011x1, 01x1x0110x, 01x0x0111x, 01xxx011x0, 01xxx01100, 01xxx01100, 0111x011xx, 0110x011xx, 011x0011xx}, x001x0111x \ {
   x001101110, x001001111, x001x01110, 100110111x, 000100111x}, xxx0x0110x \ {
   xxx0101100, xxx0001101, xxx0x01100, xxx0x01100, xxx0x01100, 001000110x, 01x010110x, 11x0x0110x}}

{10xx1 \ {10111, 10001, 101x1}, 0111x \ {01110, 01111, 01111}, 010xx \ {010x1, 01000, 01011}}
{1xx1x \ {11x10, 1x110}}
{
   1xx1110x11 \ {
   1xx1110111, 1xx1110111}, 1xx1x0111x \ {
   1xx1101110, 1xx1001111, 1xx1x01110, 1xx1x01111, 1xx1x01111, 11x100111x, 1x1100111x}, 1xx1x0101x \ {
   1xx1101010, 1xx1001011, 1xx1x01011, 1xx1x01011, 11x100101x, 1x1100101x}}

{x1xxx \ {x111x, 11000, 0111x}}
{0xx1x \ {0x111, 00111, 00010}}
{
   0xx1xx1x1x \ {
   0xx11x1x10, 0xx10x1x11, 0xx1xx111x, 0xx1x0111x, 0x111x1x1x, 00111x1x1x, 00010x1x1x}}

{00xxx \ {001x0, 0010x, 00x11}}
{}
{}

{1x11x \ {1x111, 1x110, 1111x}}
{0x0xx \ {0x00x, 0x0x1, 0100x}, x1000 \ {01000, 11000}}
{
   0x01x1x11x \ {
   0x0111x110, 0x0101x111, 0x01x1x111, 0x01x1x110, 0x01x1111x, 0x0111x11x}}

{111xx \ {11101, 11110, 11111}, xxx10 \ {01x10, 11010, 01110}}
{x1x10 \ {01x10, x1110, 01110}}
{
   x1x1011110 \ {
   x1x1011110, 01x1011110, x111011110, 0111011110}, x1x10xxx10 \ {
   x1x1001x10, x1x1011010, x1x1001110, 01x10xxx10, x1110xxx10, 01110xxx10}}

{x0xx1 \ {x01x1, 10011}, x00x1 \ {10001, x0001}}
{100xx \ {1000x, 10010, 10011}}
{
   100x1x0xx1 \ {
   10011x0x01, 10001x0x11, 100x1x01x1, 100x110011, 10001x0xx1, 10011x0xx1}, 100x1x00x1 \ {
   10011x0001, 10001x0011, 100x110001, 100x1x0001, 10001x00x1, 10011x00x1}}

{}
{}
{}

{11xxx \ {11101, 11x11, 11x10}}
{xxx1x \ {0011x, 11x10, x0x1x}}
{
   xxx1x11x1x \ {
   xxx1111x10, xxx1011x11, xxx1x11x11, xxx1x11x10, 0011x11x1x, 11x1011x1x, x0x1x11x1x}}

{xxx1x \ {xxx11, 01x1x, 11x10}}
{xxxx0 \ {10x10, 01x10, x11x0}, xx011 \ {x0011, 01011, x1011}}
{
   xxx10xxx10 \ {
   xxx1001x10, xxx1011x10, 10x10xxx10, 01x10xxx10, x1110xxx10}, xx011xxx11 \ {
   xx011xxx11, xx01101x11, x0011xxx11, 01011xxx11, x1011xxx11}}

{x101x \ {01011, 1101x, 0101x}, 0x11x \ {0x111, 0011x, 01111}}
{011x1 \ {01101, 01111}}
{
   01111x1011 \ {
   0111101011, 0111111011, 0111101011, 01111x1011}, 011110x111 \ {
   011110x111, 0111100111, 0111101111, 011110x111}}

{}
{1xxxx \ {110x0, 11011, 1001x}, x0001 \ {00001, 10001, 10001}}
{}

{11xxx \ {1111x, 11x1x, 110xx}, 1x11x \ {10111, 1111x}, 1xx10 \ {11x10, 1x010}}
{}
{}

{010xx \ {01000, 010x1}}
{0x01x \ {0x010, 0101x}}
{
   0x01x0101x \ {
   0x01101010, 0x01001011, 0x01x01011, 0x0100101x, 0101x0101x}}

{x1x0x \ {x100x, 01x0x, 01101}}
{0xxx0 \ {0x010, 001x0, 00000}, 101x0 \ {10110}}
{
   0xx00x1x00 \ {
   0xx00x1000, 0xx0001x00, 00100x1x00, 00000x1x00}, 10100x1x00 \ {
   10100x1000, 1010001x00}}

{0x1x0 \ {001x0, 0x110, 01100}}
{0x0x1 \ {01011, 000x1, 010x1}}
{}

{xx010 \ {0x010, 11010, 01010}, x1101 \ {11101, 01101}}
{x1x1x \ {x1010, 0111x, 01x1x}}
{
   x1x10xx010 \ {
   x1x100x010, x1x1011010, x1x1001010, x1010xx010, 01110xx010, 01x10xx010}}

{x10xx \ {11001, 0101x, 010xx}, x100x \ {0100x, 11000, 11000}}
{1x01x \ {1x011, 11011, 10011}, 111x1 \ {11111}}
{
   1x01xx101x \ {
   1x011x1010, 1x010x1011, 1x01x0101x, 1x01x0101x, 1x011x101x, 11011x101x, 10011x101x}, 111x1x10x1 \ {
   11111x1001, 11101x1011, 111x111001, 111x101011, 111x1010x1, 11111x10x1}, 11101x1001 \ {
   1110101001}}

{xx100 \ {x1100, x0100, x0100}}
{x11x1 \ {111x1, 011x1}, 1111x \ {11110, 11111}, 01x1x \ {0101x, 01111}}
{}

{00xx0 \ {00x10, 00x00, 00110}, xxx11 \ {x0011, x1011, xx011}}
{0xx00 \ {00x00, 0x000, 0x100}, 1x10x \ {10101, 11101, 11101}}
{
   0xx0000x00 \ {
   0xx0000x00, 00x0000x00, 0x00000x00, 0x10000x00}, 1x10000x00 \ {
   1x10000x00}}

{1xx10 \ {10x10, 10110, 10110}, 1xx00 \ {11100, 1x000, 1x100}}
{xx01x \ {00010, 11011, x001x}}
{
   xx0101xx10 \ {
   xx01010x10, xx01010110, xx01010110, 000101xx10, x00101xx10}}

{}
{1x00x \ {1x001, 11000, 11001}}
{}

{x0x0x \ {10101, 1000x, x0001}}
{1xxx1 \ {11111, 11001, 101x1}}
{
   1xx01x0x01 \ {
   1xx0110101, 1xx0110001, 1xx01x0001, 11001x0x01, 10101x0x01}}

{11x0x \ {11x00, 1100x, 11100}}
{xx110 \ {11110, 01110, 01110}}
{}

{x010x \ {10101, 0010x, x0101}, x1x0x \ {x1001, 01100, x1x01}}
{1010x \ {10100}, 000x1 \ {00011, 00001}}
{
   1010xx010x \ {
   10101x0100, 10100x0101, 1010x10101, 1010x0010x, 1010xx0101, 10100x010x}, 00001x0101 \ {
   0000110101, 0000100101, 00001x0101, 00001x0101}, 1010xx1x0x \ {
   10101x1x00, 10100x1x01, 1010xx1001, 1010x01100, 1010xx1x01, 10100x1x0x}, 00001x1x01 \ {
   00001x1001, 00001x1x01, 00001x1x01}}

{xx011 \ {0x011, 00011, 1x011}}
{0011x \ {00111}, 00xxx \ {00110, 00x0x, 00011}, x0x0x \ {00101, 10000, 10101}}
{
   00111xx011 \ {
   001110x011, 0011100011, 001111x011, 00111xx011}, 00x11xx011 \ {
   00x110x011, 00x1100011, 00x111x011, 00011xx011}}

{1x11x \ {1x111, 11110}, xx01x \ {1x010, 0001x, 11010}, x0x10 \ {00x10, 10110}}
{xx1x1 \ {x0111, 0x1x1, 10111}, xx0x1 \ {11011, 1x001, 01011}}
{
   xx1111x111 \ {
   xx1111x111, x01111x111, 0x1111x111, 101111x111}, xx0111x111 \ {
   xx0111x111, 110111x111, 010111x111}, xx111xx011 \ {
   xx11100011, x0111xx011, 0x111xx011, 10111xx011}, xx011xx011 \ {
   xx01100011, 11011xx011, 01011xx011}}

{xx0x0 \ {100x0, 11010, 0x010}}
{1x00x \ {1x000, 1000x, 11000}, 110x1 \ {11001}, 01xx1 \ {01001, 011x1, 01101}}
{
   1x000xx000 \ {
   1x00010000, 1x000xx000, 10000xx000, 11000xx000}}

{1x1x1 \ {101x1, 11101, 11101}}
{x0x11 \ {10011, 00x11, 10111}, 10xxx \ {10xx0, 10110, 10010}}
{
   x0x111x111 \ {
   x0x1110111, 100111x111, 00x111x111, 101111x111}, 10xx11x1x1 \ {
   10x111x101, 10x011x111, 10xx1101x1, 10xx111101, 10xx111101}}

{0xx00 \ {0x000, 00100, 01x00}, 0x00x \ {0x001, 01000, 01000}}
{10xxx \ {10001, 10x01, 10x00}}
{
   10x000xx00 \ {
   10x000x000, 10x0000100, 10x0001x00, 10x000xx00}, 10x0x0x00x \ {
   10x010x000, 10x000x001, 10x0x0x001, 10x0x01000, 10x0x01000, 100010x00x, 10x010x00x, 10x000x00x}}

{011xx \ {0111x, 011x1, 011x0}, 11xx0 \ {11010, 110x0, 11x10}}
{111xx \ {11100, 111x1}, 01xx0 \ {01x10, 011x0}, 0x1x0 \ {0x100, 00100, 01110}}
{
   111xx011xx \ {
   111x1011x0, 111x0011x1, 1111x0110x, 1110x0111x, 111xx0111x, 111xx011x1, 111xx011x0, 11100011xx, 111x1011xx}, 01xx0011x0 \ {
   01x1001100, 01x0001110, 01xx001110, 01xx0011x0, 01x10011x0, 011x0011x0}, 0x1x0011x0 \ {
   0x11001100, 0x10001110, 0x1x001110, 0x1x0011x0, 0x100011x0, 00100011x0, 01110011x0}, 111x011xx0 \ {
   1111011x00, 1110011x10, 111x011010, 111x0110x0, 111x011x10, 1110011xx0}, 01xx011xx0 \ {
   01x1011x00, 01x0011x10, 01xx011010, 01xx0110x0, 01xx011x10, 01x1011xx0, 011x011xx0}, 0x1x011xx0 \ {
   0x11011x00, 0x10011x10, 0x1x011010, 0x1x0110x0, 0x1x011x10, 0x10011xx0, 0010011xx0, 0111011xx0}}

{xx100 \ {x1100, 1x100, 11100}}
{x0x0x \ {00001, 00x01, 00x0x}}
{
   x0x00xx100 \ {
   x0x00x1100, x0x001x100, x0x0011100, 00x00xx100}}

{}
{x11xx \ {x111x, x110x, 1111x}}
{}

{xx0xx \ {xx01x, 10010, xx00x}, xx0xx \ {1x0x1, 01001, x00x0}}
{01xxx \ {01111, 010x1, 011x0}}
{
   01xxxxx0xx \ {
   01xx1xx0x0, 01xx0xx0x1, 01x1xxx00x, 01x0xxx01x, 01xxxxx01x, 01xxx10010, 01xxxxx00x, 01111xx0xx, 010x1xx0xx, 011x0xx0xx}, 01xxxxx0xx \ {
   01xx1xx0x0, 01xx0xx0x1, 01x1xxx00x, 01x0xxx01x, 01xxx1x0x1, 01xxx01001, 01xxxx00x0, 01111xx0xx, 010x1xx0xx, 011x0xx0xx}}

{1xxxx \ {1x00x, 1001x, 1000x}, 01xx1 \ {01001, 01011, 01x11}, 0xx0x \ {00x01, 0x00x, 01100}}
{0xx00 \ {01x00, 01100, 00000}, x0xx0 \ {10100, 00x10, x0010}, x1100 \ {01100, 11100, 11100}}
{
   0xx001xx00 \ {
   0xx001x000, 0xx0010000, 01x001xx00, 011001xx00, 000001xx00}, x0xx01xxx0 \ {
   x0x101xx00, x0x001xx10, x0xx01x000, x0xx010010, x0xx010000, 101001xxx0, 00x101xxx0, x00101xxx0}, x11001xx00 \ {
   x11001x000, x110010000, 011001xx00, 111001xx00, 111001xx00}, 0xx000xx00 \ {
   0xx000x000, 0xx0001100, 01x000xx00, 011000xx00, 000000xx00}, x0x000xx00 \ {
   x0x000x000, x0x0001100, 101000xx00}, x11000xx00 \ {
   x11000x000, x110001100, 011000xx00, 111000xx00, 111000xx00}}

{xx01x \ {1101x, 0x01x, x0010}, 1001x \ {10010, 10011}}
{10xxx \ {10010, 100x0, 10011}}
{
   10x1xxx01x \ {
   10x11xx010, 10x10xx011, 10x1x1101x, 10x1x0x01x, 10x1xx0010, 10010xx01x, 10010xx01x, 10011xx01x}, 10x1x1001x \ {
   10x1110010, 10x1010011, 10x1x10010, 10x1x10011, 100101001x, 100101001x, 100111001x}}

{10x01 \ {10101}}
{1xx1x \ {11011, 10111, 11x10}}
{}

{x0100 \ {10100}}
{x10xx \ {x10x0, 010x0, x1011}}
{
   x1000x0100 \ {
   x100010100, x1000x0100, 01000x0100}}

{x0xx0 \ {10x10, x0x10, 10xx0}}
{0x1x1 \ {01101, 0x111}, x01x0 \ {10100, 00110, 00110}}
{
   x01x0x0xx0 \ {
   x0110x0x00, x0100x0x10, x01x010x10, x01x0x0x10, x01x010xx0, 10100x0xx0, 00110x0xx0, 00110x0xx0}}

{1x1x0 \ {10100, 11110, 11100}, 111xx \ {11100, 11101, 1110x}}
{x01xx \ {00110, 001xx, 10100}}
{
   x01x01x1x0 \ {
   x01101x100, x01001x110, x01x010100, x01x011110, x01x011100, 001101x1x0, 001x01x1x0, 101001x1x0}, x01xx111xx \ {
   x01x1111x0, x01x0111x1, x011x1110x, x010x1111x, x01xx11100, x01xx11101, x01xx1110x, 00110111xx, 001xx111xx, 10100111xx}}

{0xx11 \ {0x011, 01111, 00x11}, x11xx \ {x1100, 111x1, 01101}}
{1100x \ {11000}, xx0x1 \ {xx001, 1x001, x0011}}
{
   xx0110xx11 \ {
   xx0110x011, xx01101111, xx01100x11, x00110xx11}, 1100xx110x \ {
   11001x1100, 11000x1101, 1100xx1100, 1100x11101, 1100x01101, 11000x110x}, xx0x1x11x1 \ {
   xx011x1101, xx001x1111, xx0x1111x1, xx0x101101, xx001x11x1, 1x001x11x1, x0011x11x1}}

{001xx \ {001x0, 00100, 00111}, 1xxxx \ {111x1, 10xx1, 11111}, 0x010 \ {01010, 00010, 00010}}
{1xx00 \ {1x000, 11100, 10x00}}
{
   1xx0000100 \ {
   1xx0000100, 1xx0000100, 1x00000100, 1110000100, 10x0000100}, 1xx001xx00 \ {
   1x0001xx00, 111001xx00, 10x001xx00}}

{}
{}
{}

{xx0x0 \ {x1010, 0x010, 00010}}
{1x0xx \ {10010, 11011, 1x011}}
{
   1x0x0xx0x0 \ {
   1x010xx000, 1x000xx010, 1x0x0x1010, 1x0x00x010, 1x0x000010, 10010xx0x0}}

{11xxx \ {1100x, 11001, 11001}, 1x011 \ {11011, 10011}, 00x0x \ {0010x, 00000, 00101}}
{1x0xx \ {10000, 11010}}
{
   1x0xx11xxx \ {
   1x0x111xx0, 1x0x011xx1, 1x01x11x0x, 1x00x11x1x, 1x0xx1100x, 1x0xx11001, 1x0xx11001, 1000011xxx, 1101011xxx}, 1x0111x011 \ {
   1x01111011, 1x01110011}, 1x00x00x0x \ {
   1x00100x00, 1x00000x01, 1x00x0010x, 1x00x00000, 1x00x00101, 1000000x0x}}

{x1111 \ {11111, 01111, 01111}, 11xx1 \ {11101, 11001}}
{x1xxx \ {11100, x100x, 11xx1}}
{
   x1x11x1111 \ {
   x1x1111111, x1x1101111, x1x1101111, 11x11x1111}, x1xx111xx1 \ {
   x1x1111x01, x1x0111x11, x1xx111101, x1xx111001, x100111xx1, 11xx111xx1}}

{x0xx1 \ {x0011, 00x01, 00x01}}
{}
{}

{000x1 \ {00011}, 01x0x \ {0100x, 01001, 0110x}}
{01x11 \ {01011, 01111, 01111}, xx111 \ {11111, x0111, 01111}}
{
   01x1100011 \ {
   01x1100011, 0101100011, 0111100011, 0111100011}, xx11100011 \ {
   xx11100011, 1111100011, x011100011, 0111100011}}

{11xx0 \ {11x10, 11x00, 110x0}}
{x1x1x \ {x1110, 0111x, x111x}, 10x0x \ {1000x, 10000, 10000}}
{
   x1x1011x10 \ {
   x1x1011x10, x1x1011010, x111011x10, 0111011x10, x111011x10}, 10x0011x00 \ {
   10x0011x00, 10x0011000, 1000011x00, 1000011x00, 1000011x00}}

{xx0x1 \ {01001, x0011, xx001}}
{0011x \ {00111, 00110, 00110}, 1xxx0 \ {10xx0, 10100, 10x00}}
{
   00111xx011 \ {
   00111x0011, 00111xx011}}

{xx0x0 \ {100x0, 1x000, x00x0}, x1000 \ {01000, 11000, 11000}}
{}
{}

{xx001 \ {0x001, x1001, 11001}}
{1x11x \ {1x111, 10110}}
{}

{010xx \ {01011, 01001, 01010}, 1xx01 \ {10001, 11x01, 11x01}}
{x10xx \ {x1011, x101x}}
{
   x10xx010xx \ {
   x10x1010x0, x10x0010x1, x101x0100x, x100x0101x, x10xx01011, x10xx01001, x10xx01010, x1011010xx, x101x010xx}, x10011xx01 \ {
   x100110001, x100111x01, x100111x01}}

{}
{1x0x0 \ {11010, 11000, 110x0}}
{}

{}
{0xx0x \ {01x0x, 00x0x, 01000}, x1000 \ {11000, 01000}}
{}

{}
{10x00 \ {10100, 10000}}
{}

{}
{x11xx \ {1111x, 111xx, 111xx}}
{}

{xxxxx \ {0xx0x, x0101, 0xxx0}, 01xxx \ {01111, 011x0, 01x01}}
{x110x \ {01100, 1110x}, 10x1x \ {10111, 10x10}}
{
   x110xxxx0x \ {
   x1101xxx00, x1100xxx01, x110x0xx0x, x110xx0101, x110x0xx00, 01100xxx0x, 1110xxxx0x}, 10x1xxxx1x \ {
   10x11xxx10, 10x10xxx11, 10x1x0xx10, 10111xxx1x, 10x10xxx1x}, x110x01x0x \ {
   x110101x00, x110001x01, x110x01100, x110x01x01, 0110001x0x, 1110x01x0x}, 10x1x01x1x \ {
   10x1101x10, 10x1001x11, 10x1x01111, 10x1x01110, 1011101x1x, 10x1001x1x}}

{}
{1x1x0 \ {111x0, 10100, 1x100}, 000x1 \ {00001, 00011, 00011}}
{}

{xx11x \ {xx111, 1x111, 11110}}
{x1x10 \ {01110, x1110}, 0001x \ {00010, 00011}}
{
   x1x10xx110 \ {
   x1x1011110, 01110xx110, x1110xx110}, 0001xxx11x \ {
   00011xx110, 00010xx111, 0001xxx111, 0001x1x111, 0001x11110, 00010xx11x, 00011xx11x}}

{}
{xx1x0 \ {101x0, 0x1x0, 111x0}}
{}

{0x010 \ {01010, 00010}, x110x \ {0110x, 01101}}
{0x1xx \ {00101, 0x111, 0x100}, x0x1x \ {x0x10, x0010, 10111}}
{
   0x1100x010 \ {
   0x11001010, 0x11000010}, x0x100x010 \ {
   x0x1001010, x0x1000010, x0x100x010, x00100x010}, 0x10xx110x \ {
   0x101x1100, 0x100x1101, 0x10x0110x, 0x10x01101, 00101x110x, 0x100x110x}}

{0101x \ {01010, 01011, 01011}}
{xx01x \ {01011, 0001x, 1001x}, xxxx1 \ {x10x1, 1x0x1, xx001}, 00xxx \ {000x0, 00011, 000x1}}
{
   xx01x0101x \ {
   xx01101010, xx01001011, xx01x01010, xx01x01011, xx01x01011, 010110101x, 0001x0101x, 1001x0101x}, xxx1101011 \ {
   xxx1101011, xxx1101011, x101101011, 1x01101011}, 00x1x0101x \ {
   00x1101010, 00x1001011, 00x1x01010, 00x1x01011, 00x1x01011, 000100101x, 000110101x, 000110101x}}

{x0x01 \ {00001, 10001, 10101}, x1010 \ {11010, 01010}}
{x0x1x \ {10x1x, 10010}, 010x0 \ {01010, 01000}, xxx00 \ {x0000, x0x00, 00100}}
{
   x0x10x1010 \ {
   x0x1011010, x0x1001010, 10x10x1010, 10010x1010}, 01010x1010 \ {
   0101011010, 0101001010, 01010x1010}}

{x0x0x \ {0010x, x000x, x0000}, 0xxxx \ {0xxx0, 0x0x0, 0011x}}
{101xx \ {101x0, 10110, 10100}}
{
   1010xx0x0x \ {
   10101x0x00, 10100x0x01, 1010x0010x, 1010xx000x, 1010xx0000, 10100x0x0x, 10100x0x0x}, 101xx0xxxx \ {
   101x10xxx0, 101x00xxx1, 1011x0xx0x, 1010x0xx1x, 101xx0xxx0, 101xx0x0x0, 101xx0011x, 101x00xxxx, 101100xxxx, 101000xxxx}}

{1xx00 \ {11x00, 1x000, 10000}, 0xx1x \ {0x011, 0x110, 00111}}
{xx010 \ {1x010, 00010, 0x010}, 1xxx0 \ {10010, 10110, 110x0}}
{
   1xx001xx00 \ {
   1xx0011x00, 1xx001x000, 1xx0010000, 110001xx00}, xx0100xx10 \ {
   xx0100x110, 1x0100xx10, 000100xx10, 0x0100xx10}, 1xx100xx10 \ {
   1xx100x110, 100100xx10, 101100xx10, 110100xx10}}

{x00xx \ {1000x, 10001, 00000}, x0x1x \ {1001x, 10110}, 1xx10 \ {11010, 11x10}}
{1xx10 \ {10x10, 10010}}
{
   1xx10x0010 \ {
   10x10x0010, 10010x0010}, 1xx10x0x10 \ {
   1xx1010010, 1xx1010110, 10x10x0x10, 10010x0x10}, 1xx101xx10 \ {
   1xx1011010, 1xx1011x10, 10x101xx10, 100101xx10}}

{0x010 \ {00010, 01010}}
{x100x \ {01000, 11000, 11000}, x100x \ {11000, 01001}}
{}

{}
{1x1x1 \ {10111, 11111}}
{}

{10x11 \ {10111, 10011}}
{1000x \ {10001, 10000}}
{}

{x00xx \ {10011, x00x0, 100x1}, xxxx1 \ {0x0x1, x1001, xx111}}
{xx010 \ {x0010, 1x010, 1x010}, xxx01 \ {11101, 11x01, 10001}}
{
   xx010x0010 \ {
   xx010x0010, x0010x0010, 1x010x0010, 1x010x0010}, xxx01x0001 \ {
   xxx0110001, 11101x0001, 11x01x0001, 10001x0001}, xxx01xxx01 \ {
   xxx010x001, xxx01x1001, 11101xxx01, 11x01xxx01, 10001xxx01}}

{1x0xx \ {1000x, 10011, 110x1}, xx011 \ {x0011, 00011, 1x011}}
{0x1xx \ {001x1, 00110, 0x1x0}}
{
   0x1xx1x0xx \ {
   0x1x11x0x0, 0x1x01x0x1, 0x11x1x00x, 0x10x1x01x, 0x1xx1000x, 0x1xx10011, 0x1xx110x1, 001x11x0xx, 001101x0xx, 0x1x01x0xx}, 0x111xx011 \ {
   0x111x0011, 0x11100011, 0x1111x011, 00111xx011}}

{xx101 \ {11101, 0x101, x0101}}
{x1xxx \ {11x0x, 0110x, 11xx0}, 10xxx \ {10xx1, 100x1, 10xx0}}
{
   x1x01xx101 \ {
   x1x0111101, x1x010x101, x1x01x0101, 11x01xx101, 01101xx101}, 10x01xx101 \ {
   10x0111101, 10x010x101, 10x01x0101, 10x01xx101, 10001xx101}}

{01x0x \ {0100x, 01001}}
{}
{}

{0x11x \ {0x111, 00111, 00111}}
{x01x0 \ {x0100, 00100, 001x0}}
{
   x01100x110 \ {
   001100x110}}

{10xx0 \ {10x10, 100x0, 10000}, xx0x1 \ {x0001, xx011, 1x011}}
{x1x0x \ {x1x01, 1100x, 11x01}, x1xxx \ {01x01, 01xx0, 01x10}, x1101 \ {01101, 11101}}
{
   x1x0010x00 \ {
   x1x0010000, x1x0010000, 1100010x00}, x1xx010xx0 \ {
   x1x1010x00, x1x0010x10, x1xx010x10, x1xx0100x0, x1xx010000, 01xx010xx0, 01x1010xx0}, x1x01xx001 \ {
   x1x01x0001, x1x01xx001, 11001xx001, 11x01xx001}, x1xx1xx0x1 \ {
   x1x11xx001, x1x01xx011, x1xx1x0001, x1xx1xx011, x1xx11x011, 01x01xx0x1}, x1101xx001 \ {
   x1101x0001, 01101xx001, 11101xx001}}

{x0001 \ {10001, 00001, 00001}}
{x10xx \ {110x1, 0100x, 110xx}, x1xx0 \ {110x0, 11x10, x10x0}, 0x010 \ {00010, 01010}}
{
   x1001x0001 \ {
   x100110001, x100100001, x100100001, 11001x0001, 01001x0001, 11001x0001}}

{00xxx \ {00001, 00x0x, 00x0x}, 00xx0 \ {00x00, 00010}, x0x10 \ {10010, 00110, 00110}}
{0x0xx \ {0100x, 0x01x, 0x00x}, 0x00x \ {0100x, 00000}}
{
   0x0xx00xxx \ {
   0x0x100xx0, 0x0x000xx1, 0x01x00x0x, 0x00x00x1x, 0x0xx00001, 0x0xx00x0x, 0x0xx00x0x, 0100x00xxx, 0x01x00xxx, 0x00x00xxx}, 0x00x00x0x \ {
   0x00100x00, 0x00000x01, 0x00x00001, 0x00x00x0x, 0x00x00x0x, 0100x00x0x, 0000000x0x}, 0x0x000xx0 \ {
   0x01000x00, 0x00000x10, 0x0x000x00, 0x0x000010, 0100000xx0, 0x01000xx0, 0x00000xx0}, 0x00000x00 \ {
   0x00000x00, 0100000x00, 0000000x00}, 0x010x0x10 \ {
   0x01010010, 0x01000110, 0x01000110, 0x010x0x10}}

{x10xx \ {x1011, 110x0, 01010}}
{xxx0x \ {11001, 0x101, 1110x}, x0010 \ {00010}, 0xxx0 \ {0x100, 011x0, 0x0x0}}
{
   xxx0xx100x \ {
   xxx01x1000, xxx00x1001, xxx0x11000, 11001x100x, 0x101x100x, 1110xx100x}, x0010x1010 \ {
   x001011010, x001001010, 00010x1010}, 0xxx0x10x0 \ {
   0xx10x1000, 0xx00x1010, 0xxx0110x0, 0xxx001010, 0x100x10x0, 011x0x10x0, 0x0x0x10x0}}

{00x10 \ {00010}}
{0xx11 \ {01x11, 01111, 01111}, 0xx1x \ {01x11, 0111x, 00110}, 011x0 \ {01100}}
{
   0xx1000x10 \ {
   0xx1000010, 0111000x10, 0011000x10}, 0111000x10 \ {
   0111000010}}

{x0x1x \ {0011x, x0110, 10x1x}}
{x01xx \ {x0100, 00101, 10100}}
{
   x011xx0x1x \ {
   x0111x0x10, x0110x0x11, x011x0011x, x011xx0110, x011x10x1x}}

{x0x00 \ {10000, x0100, 10x00}, 001xx \ {001x1, 00100}}
{00x0x \ {0010x}, xx111 \ {x1111}}
{
   00x00x0x00 \ {
   00x0010000, 00x00x0100, 00x0010x00, 00100x0x00}, 00x0x0010x \ {
   00x0100100, 00x0000101, 00x0x00101, 00x0x00100, 0010x0010x}, xx11100111 \ {
   xx11100111, x111100111}}

{xx01x \ {0x011, 0x010, 11010}}
{0xx1x \ {0001x, 0011x, 00111}}
{
   0xx1xxx01x \ {
   0xx11xx010, 0xx10xx011, 0xx1x0x011, 0xx1x0x010, 0xx1x11010, 0001xxx01x, 0011xxx01x, 00111xx01x}}

{0x01x \ {01011, 00010}, xx100 \ {1x100, x1100}}
{x1x00 \ {01100, x1100, 11x00}}
{
   x1x00xx100 \ {
   x1x001x100, x1x00x1100, 01100xx100, x1100xx100, 11x00xx100}}

{1x0xx \ {110x0, 1001x, 1x011}}
{1xx00 \ {10000, 11x00, 1x100}, 0x10x \ {00101, 0110x, 0x101}, 1xxx1 \ {1x111, 10011, 1xx01}}
{
   1xx001x000 \ {
   1xx0011000, 100001x000, 11x001x000, 1x1001x000}, 0x10x1x00x \ {
   0x1011x000, 0x1001x001, 0x10x11000, 001011x00x, 0110x1x00x, 0x1011x00x}, 1xxx11x0x1 \ {
   1xx111x001, 1xx011x011, 1xxx110011, 1xxx11x011, 1x1111x0x1, 100111x0x1, 1xx011x0x1}}

{x01x1 \ {001x1, 10101, 101x1}}
{xxxx1 \ {xx111, 1x0x1, x01x1}}
{
   xxxx1x01x1 \ {
   xxx11x0101, xxx01x0111, xxxx1001x1, xxxx110101, xxxx1101x1, xx111x01x1, 1x0x1x01x1, x01x1x01x1}}

{x1xx1 \ {11111, x1111, 11011}}
{0101x \ {01010, 01011}, xx010 \ {11010, 01010, 00010}}
{
   01011x1x11 \ {
   0101111111, 01011x1111, 0101111011, 01011x1x11}}

{x110x \ {x1101, 0110x, x1100}, 0x0x0 \ {01000, 010x0, 0x010}}
{1x0x0 \ {100x0, 110x0, 10010}}
{
   1x000x1100 \ {
   1x00001100, 1x000x1100, 10000x1100, 11000x1100}, 1x0x00x0x0 \ {
   1x0100x000, 1x0000x010, 1x0x001000, 1x0x0010x0, 1x0x00x010, 100x00x0x0, 110x00x0x0, 100100x0x0}}

{01x1x \ {01x11, 0101x, 01x10}}
{11x1x \ {11x10, 11x11}, 110x1 \ {11001}}
{
   11x1x01x1x \ {
   11x1101x10, 11x1001x11, 11x1x01x11, 11x1x0101x, 11x1x01x10, 11x1001x1x, 11x1101x1x}, 1101101x11 \ {
   1101101x11, 1101101011}}

{x10x0 \ {x1000, 11010, x1010}, x010x \ {x0100, 00100, x0101}}
{xx011 \ {01011, 0x011}}
{}

{x0x10 \ {00x10, 10x10, 10010}}
{xxx1x \ {x0111, 11111, x001x}, xx0x1 \ {11001, 110x1, xx001}, x001x \ {10011, 00010}}
{
   xxx10x0x10 \ {
   xxx1000x10, xxx1010x10, xxx1010010, x0010x0x10}, x0010x0x10 \ {
   x001000x10, x001010x10, x001010010, 00010x0x10}}

{0x110 \ {00110, 01110}, x11x0 \ {01110, 01100, x1100}}
{00xx1 \ {000x1, 00x11, 001x1}, 100x0 \ {10010, 10000}}
{
   100100x110 \ {
   1001000110, 1001001110, 100100x110}, 100x0x11x0 \ {
   10010x1100, 10000x1110, 100x001110, 100x001100, 100x0x1100, 10010x11x0, 10000x11x0}}

{1x10x \ {11100, 11101}, 0x1x0 \ {001x0, 0x100, 0x100}}
{}
{}

{xx0x1 \ {xx011, xx001, 110x1}, x1010 \ {01010, 11010}}
{x11xx \ {1111x, 11101, 11100}}
{
   x11x1xx0x1 \ {
   x1111xx001, x1101xx011, x11x1xx011, x11x1xx001, x11x1110x1, 11111xx0x1, 11101xx0x1}, x1110x1010 \ {
   x111001010, x111011010, 11110x1010}}

{x000x \ {00001, 10001}, 10xx1 \ {10x01, 10001, 10x11}}
{x10x0 \ {01000, 01010, 11000}, 0x110 \ {01110, 00110}}
{
   x1000x0000 \ {
   01000x0000, 11000x0000}}

{110xx \ {110x1, 11010}}
{0x110 \ {01110, 00110, 00110}, x1100 \ {11100, 01100}}
{
   0x11011010 \ {
   0x11011010, 0111011010, 0011011010, 0011011010}, x110011000 \ {
   1110011000, 0110011000}}

{1xx1x \ {11111, 1101x, 1x011}}
{}
{}

{1011x \ {10111}}
{0x1xx \ {011xx, 0011x}}
{
   0x11x1011x \ {
   0x11110110, 0x11010111, 0x11x10111, 0111x1011x, 0011x1011x}}

{110x1 \ {11011, 11001, 11001}}
{1xxx0 \ {10x00, 10000, 1xx00}}
{}

{x0x1x \ {00110, x0x10, x001x}}
{110xx \ {11010, 110x1, 1100x}, 1x11x \ {1x110, 1011x, 1011x}}
{
   1101xx0x1x \ {
   11011x0x10, 11010x0x11, 1101x00110, 1101xx0x10, 1101xx001x, 11010x0x1x, 11011x0x1x}, 1x11xx0x1x \ {
   1x111x0x10, 1x110x0x11, 1x11x00110, 1x11xx0x10, 1x11xx001x, 1x110x0x1x, 1011xx0x1x, 1011xx0x1x}}

{xx1x0 \ {0x1x0, 111x0, x0110}, 0x1x0 \ {001x0, 011x0, 01110}}
{x1111 \ {11111, 01111, 01111}}
{}

{}
{100x0 \ {10010, 10000, 10000}, x110x \ {01100, 01101, x1100}}
{}

{10xx1 \ {10101, 10011, 100x1}, 1x01x \ {10011, 1x010, 10010}}
{x0x10 \ {00x10, 10110, x0010}}
{
   x0x101x010 \ {
   x0x101x010, x0x1010010, 00x101x010, 101101x010, x00101x010}}

{x0xx1 \ {x0x01, 00011, 001x1}}
{x0x00 \ {10100, 00000, 00x00}}
{}

{0xxx1 \ {01x01, 010x1, 01011}}
{1x10x \ {1010x, 1x101, 11100}}
{
   1x1010xx01 \ {
   1x10101x01, 1x10101001, 101010xx01, 1x1010xx01}}

{x0xx0 \ {00100, 00xx0, 00000}}
{00x1x \ {00010, 0001x, 00x11}}
{
   00x10x0x10 \ {
   00x1000x10, 00010x0x10, 00010x0x10}}

{10xx0 \ {10110, 10x10, 10000}, x01x1 \ {001x1, 00111, 00111}}
{}
{}

{0x11x \ {00111}, 11xx0 \ {11000, 110x0, 11110}, xx100 \ {10100, 00100, 1x100}}
{}
{}

{x111x \ {0111x, x1110}, 00xx1 \ {00x11, 00111}, 1x001 \ {10001}}
{x00xx \ {000xx, x00x1, x0001}}
{
   x001xx111x \ {
   x0011x1110, x0010x1111, x001x0111x, x001xx1110, 0001xx111x, x0011x111x}, x00x100xx1 \ {
   x001100x01, x000100x11, x00x100x11, x00x100111, 000x100xx1, x00x100xx1, x000100xx1}, x00011x001 \ {
   x000110001, 000011x001, x00011x001, x00011x001}}

{xx0xx \ {xx000, 1x0x1, x0011}}
{xx000 \ {01000, 1x000, x0000}, x000x \ {1000x, 00001}}
{
   xx000xx000 \ {
   xx000xx000, 01000xx000, 1x000xx000, x0000xx000}, x000xxx00x \ {
   x0001xx000, x0000xx001, x000xxx000, x000x1x001, 1000xxx00x, 00001xx00x}}

{x10x0 \ {01000, 010x0}}
{x1101 \ {11101, 01101}}
{}

{}
{xx100 \ {01100, 00100, x0100}}
{}

{1x011 \ {10011, 11011, 11011}}
{1x1x1 \ {1x101, 11101}, 10xx1 \ {10011, 10001}}
{
   1x1111x011 \ {
   1x11110011, 1x11111011, 1x11111011}, 10x111x011 \ {
   10x1110011, 10x1111011, 10x1111011, 100111x011}}

{x1xxx \ {x1111, 11x10, 111x0}, 101x1 \ {10111, 10101}}
{x111x \ {1111x, x1111, x1110}}
{
   x111xx1x1x \ {
   x1111x1x10, x1110x1x11, x111xx1111, x111x11x10, x111x11110, 1111xx1x1x, x1111x1x1x, x1110x1x1x}, x111110111 \ {
   x111110111, 1111110111, x111110111}}

{0xxx1 \ {0x111, 01001, 01011}}
{xx001 \ {0x001, x0001}, x011x \ {0011x, x0110, 00110}}
{
   xx0010xx01 \ {
   xx00101001, 0x0010xx01, x00010xx01}, x01110xx11 \ {
   x01110x111, x011101011, 001110xx11}}

{1x10x \ {1110x, 1010x, 1010x}}
{x1xxx \ {01x01, 11x0x, x110x}, 110xx \ {1101x, 11000, 110x0}}
{
   x1x0x1x10x \ {
   x1x011x100, x1x001x101, x1x0x1110x, x1x0x1010x, x1x0x1010x, 01x011x10x, 11x0x1x10x, x110x1x10x}, 1100x1x10x \ {
   110011x100, 110001x101, 1100x1110x, 1100x1010x, 1100x1010x, 110001x10x, 110001x10x}}

{x1110 \ {01110, 11110, 11110}}
{11x10 \ {11010, 11110, 11110}}
{
   11x10x1110 \ {
   11x1001110, 11x1011110, 11x1011110, 11010x1110, 11110x1110, 11110x1110}}

{1011x \ {10111}, x1xx0 \ {01010, x1110, x11x0}, 1xx01 \ {10101, 11001, 10x01}}
{}
{}

{010xx \ {010x1, 01011, 010x0}, x1x01 \ {x1101, 11101}}
{x10x0 \ {x1010, 11000, 11010}}
{
   x10x0010x0 \ {
   x101001000, x100001010, x10x0010x0, x1010010x0, 11000010x0, 11010010x0}}

{x1111 \ {11111, 01111, 01111}}
{00x10 \ {00010, 00110, 00110}, xx010 \ {00010, x0010, 11010}}
{}

{x1x10 \ {01110, 11110}}
{xx1xx \ {111xx, x010x, 1x100}, 0x1x1 \ {00111, 001x1, 001x1}, 1xx1x \ {1x010, 10010, 1001x}}
{
   xx110x1x10 \ {
   xx11001110, xx11011110, 11110x1x10}, 1xx10x1x10 \ {
   1xx1001110, 1xx1011110, 1x010x1x10, 10010x1x10, 10010x1x10}}

{xx111 \ {1x111, 01111, x0111}}
{x0xx0 \ {00xx0, 10110, x0x00}, 0x0xx \ {00001, 0100x, 01001}}
{
   0x011xx111 \ {
   0x0111x111, 0x01101111, 0x011x0111}}

{1xx00 \ {11x00, 10x00}, 11xx0 \ {11x00, 11100}}
{1x111 \ {10111, 11111}, 10xx0 \ {10000, 10100, 10010}}
{
   10x001xx00 \ {
   10x0011x00, 10x0010x00, 100001xx00, 101001xx00}, 10xx011xx0 \ {
   10x1011x00, 10x0011x10, 10xx011x00, 10xx011100, 1000011xx0, 1010011xx0, 1001011xx0}}

{01xx1 \ {01001, 01101, 01x11}, 1xxx0 \ {11x00, 1xx00, 10x10}}
{0100x \ {01000, 01001}}
{
   0100101x01 \ {
   0100101001, 0100101101, 0100101x01}, 010001xx00 \ {
   0100011x00, 010001xx00, 010001xx00}}

{0x01x \ {0x011, 01011}}
{01xx1 \ {010x1, 01x01, 01x11}}
{
   01x110x011 \ {
   01x110x011, 01x1101011, 010110x011, 01x110x011}}

{1x1x1 \ {10101, 1x101}, 010xx \ {010x0, 01000, 01000}}
{x01x1 \ {x0101, 00111}, 11x0x \ {11100, 11x01, 1100x}, 1x10x \ {1110x, 1x101, 11101}}
{
   x01x11x1x1 \ {
   x01111x101, x01011x111, x01x110101, x01x11x101, x01011x1x1, 001111x1x1}, 11x011x101 \ {
   11x0110101, 11x011x101, 11x011x101, 110011x101}, 1x1011x101 \ {
   1x10110101, 1x1011x101, 111011x101, 1x1011x101, 111011x101}, x01x1010x1 \ {
   x011101001, x010101011, x0101010x1, 00111010x1}, 11x0x0100x \ {
   11x0101000, 11x0001001, 11x0x01000, 11x0x01000, 11x0x01000, 111000100x, 11x010100x, 1100x0100x}, 1x10x0100x \ {
   1x10101000, 1x10001001, 1x10x01000, 1x10x01000, 1x10x01000, 1110x0100x, 1x1010100x, 111010100x}}

{}
{x0111 \ {00111}}
{}

{xx011 \ {11011, 01011, 0x011}, 001x1 \ {00111}}
{x1x01 \ {11001, 01x01, 11101}, 10xx1 \ {10001, 10111, 10x01}}
{
   10x11xx011 \ {
   10x1111011, 10x1101011, 10x110x011, 10111xx011}, x1x0100101 \ {
   1100100101, 01x0100101, 1110100101}, 10xx1001x1 \ {
   10x1100101, 10x0100111, 10xx100111, 10001001x1, 10111001x1, 10x01001x1}}

{}
{xxxxx \ {011x1, x0x0x, 00x00}, x11x1 \ {01111}, 000x0 \ {00000}}
{}

{xx011 \ {00011, 11011, 01011}, x01xx \ {x01x1, x01x0, 101x0}}
{}
{}

{x0xx0 \ {x0100, 00xx0}, x11x0 \ {01110, 011x0, 011x0}}
{x0x10 \ {00010, 00110, x0110}, x1011 \ {11011, 01011, 01011}, 1111x \ {11110, 11111, 11111}}
{
   x0x10x0x10 \ {
   x0x1000x10, 00010x0x10, 00110x0x10, x0110x0x10}, 11110x0x10 \ {
   1111000x10, 11110x0x10}, x0x10x1110 \ {
   x0x1001110, x0x1001110, x0x1001110, 00010x1110, 00110x1110, x0110x1110}, 11110x1110 \ {
   1111001110, 1111001110, 1111001110, 11110x1110}}

{1xx1x \ {10x1x, 10x11, 1111x}, 0xx01 \ {01x01, 00101, 00001}}
{xxxx1 \ {10xx1, 1x0x1, x1x01}, x10xx \ {x100x, x10x1, 01011}, x0101 \ {10101, 00101}}
{
   xxx111xx11 \ {
   xxx1110x11, xxx1110x11, xxx1111111, 10x111xx11, 1x0111xx11}, x101x1xx1x \ {
   x10111xx10, x10101xx11, x101x10x1x, x101x10x11, x101x1111x, x10111xx1x, 010111xx1x}, xxx010xx01 \ {
   xxx0101x01, xxx0100101, xxx0100001, 10x010xx01, 1x0010xx01, x1x010xx01}, x10010xx01 \ {
   x100101x01, x100100101, x100100001, x10010xx01, x10010xx01}, x01010xx01 \ {
   x010101x01, x010100101, x010100001, 101010xx01, 001010xx01}}

{000xx \ {00011, 0000x, 00001}}
{1xxxx \ {1x110, 10x0x, 1xx01}, x11xx \ {111xx, 0110x, 11100}, 10xxx \ {1000x, 10000, 101xx}}
{
   1xxxx000xx \ {
   1xxx1000x0, 1xxx0000x1, 1xx1x0000x, 1xx0x0001x, 1xxxx00011, 1xxxx0000x, 1xxxx00001, 1x110000xx, 10x0x000xx, 1xx01000xx}, x11xx000xx \ {
   x11x1000x0, x11x0000x1, x111x0000x, x110x0001x, x11xx00011, x11xx0000x, x11xx00001, 111xx000xx, 0110x000xx, 11100000xx}, 10xxx000xx \ {
   10xx1000x0, 10xx0000x1, 10x1x0000x, 10x0x0001x, 10xxx00011, 10xxx0000x, 10xxx00001, 1000x000xx, 10000000xx, 101xx000xx}}

{}
{x010x \ {10100, 00101, 0010x}}
{}

{xxxx0 \ {100x0, 011x0, 11000}}
{xx0x0 \ {xx000, 1x010}, 0xxx1 \ {0xx01, 00xx1, 001x1}, 0x01x \ {0101x, 01010}}
{
   xx0x0xxxx0 \ {
   xx010xxx00, xx000xxx10, xx0x0100x0, xx0x0011x0, xx0x011000, xx000xxxx0, 1x010xxxx0}, 0x010xxx10 \ {
   0x01010010, 0x01001110, 01010xxx10, 01010xxx10}}

{1x111 \ {11111, 10111}}
{0x01x \ {01010, 01011}, 100xx \ {10010, 100x0, 1001x}, x11x0 \ {11110, 01110}}
{
   0x0111x111 \ {
   0x01111111, 0x01110111, 010111x111}, 100111x111 \ {
   1001111111, 1001110111, 100111x111}}

{x11x1 \ {111x1, 11101, 01101}}
{}
{}

{0x1x0 \ {011x0, 0x100, 0x100}, 1xxx0 \ {1x100, 1x0x0}}
{xx101 \ {1x101, 11101}, 1xx00 \ {10x00, 1x000, 11x00}, x110x \ {0110x, 01101, 11100}}
{
   1xx000x100 \ {
   1xx0001100, 1xx000x100, 1xx000x100, 10x000x100, 1x0000x100, 11x000x100}, x11000x100 \ {
   x110001100, x11000x100, x11000x100, 011000x100, 111000x100}, 1xx001xx00 \ {
   1xx001x100, 1xx001x000, 10x001xx00, 1x0001xx00, 11x001xx00}, x11001xx00 \ {
   x11001x100, x11001x000, 011001xx00, 111001xx00}}

{x0xx1 \ {x01x1, 00001, 00xx1}, 101xx \ {1010x, 101x0, 10111}}
{11x1x \ {1101x, 11111, 11011}, x11x1 \ {x1101, x1111}}
{
   11x11x0x11 \ {
   11x11x0111, 11x1100x11, 11011x0x11, 11111x0x11, 11011x0x11}, x11x1x0xx1 \ {
   x1111x0x01, x1101x0x11, x11x1x01x1, x11x100001, x11x100xx1, x1101x0xx1, x1111x0xx1}, 11x1x1011x \ {
   11x1110110, 11x1010111, 11x1x10110, 11x1x10111, 1101x1011x, 111111011x, 110111011x}, x11x1101x1 \ {
   x111110101, x110110111, x11x110101, x11x110111, x1101101x1, x1111101x1}}

{x0xx0 \ {000x0, 001x0, 00010}, x011x \ {00110, 1011x, 1011x}}
{}
{}

{x1100 \ {11100}, xx110 \ {x1110, 1x110}}
{x1xx0 \ {01010, 11010, x1110}, x111x \ {11110, x1111}}
{
   x1x00x1100 \ {
   x1x0011100}, x1x10xx110 \ {
   x1x10x1110, x1x101x110, 01010xx110, 11010xx110, x1110xx110}, x1110xx110 \ {
   x1110x1110, x11101x110, 11110xx110}}

{1x1x1 \ {10101, 11101, 101x1}}
{xx111 \ {0x111, 10111}, 0xxx1 \ {0x111, 001x1, 01101}, xxx01 \ {01x01, 0xx01, 11001}}
{
   xx1111x111 \ {
   xx11110111, 0x1111x111, 101111x111}, 0xxx11x1x1 \ {
   0xx111x101, 0xx011x111, 0xxx110101, 0xxx111101, 0xxx1101x1, 0x1111x1x1, 001x11x1x1, 011011x1x1}, xxx011x101 \ {
   xxx0110101, xxx0111101, xxx0110101, 01x011x101, 0xx011x101, 110011x101}}

{xxx10 \ {xx010, x1110, 11010}}
{xx1x0 \ {00110, x0110, x1110}}
{
   xx110xxx10 \ {
   xx110xx010, xx110x1110, xx11011010, 00110xxx10, x0110xxx10, x1110xxx10}}

{xxx01 \ {11001, 00x01, 10001}}
{00xxx \ {00x01, 0000x, 001x0}}
{
   00x01xxx01 \ {
   00x0111001, 00x0100x01, 00x0110001, 00x01xxx01, 00001xxx01}}

{x00x0 \ {00000, x0010, 00010}, xx110 \ {10110, 1x110, 00110}, 10xx0 \ {10100, 10x00, 10010}}
{}
{}

{10xx1 \ {10001, 10101, 10101}, 10x1x \ {10011, 10111, 10x10}, 10x1x \ {10010, 1011x}}
{01xx0 \ {011x0, 01x10}, 0x000 \ {00000, 01000, 01000}}
{
   01x1010x10 \ {
   01x1010x10, 0111010x10, 01x1010x10}}

{11xx0 \ {11x10, 11100, 11010}}
{}
{}

{}
{x0x01 \ {x0101, 00101, 10x01}, 11x1x \ {11011, 1101x, 11110}, 01xx1 \ {01011, 01111, 010x1}}
{}

{xx10x \ {1010x, 10100, 11100}, 101x0 \ {10110, 10100}, xx100 \ {10100, x1100, 00100}}
{xxxx1 \ {110x1, x1111, x1011}, xx100 \ {00100, x1100, x0100}}
{
   xxx01xx101 \ {
   xxx0110101, 11001xx101}, xx100xx100 \ {
   xx10010100, xx10010100, xx10011100, 00100xx100, x1100xx100, x0100xx100}, xx10010100 \ {
   xx10010100, 0010010100, x110010100, x010010100}}

{0xxx1 \ {010x1, 00xx1, 01x11}}
{x111x \ {11110, x1111, 01110}}
{
   x11110xx11 \ {
   x111101011, x111100x11, x111101x11, x11110xx11}}

{x001x \ {00011, 10011, x0011}}
{}
{}

{1001x \ {10011, 10010}, 01xxx \ {0101x, 011xx, 01x00}}
{x11x0 \ {01100, x1100, 01110}, x11x1 \ {011x1, 111x1, 111x1}}
{
   x111010010 \ {
   x111010010, 0111010010}, x111110011 \ {
   x111110011, 0111110011, 1111110011, 1111110011}, x11x001xx0 \ {
   x111001x00, x110001x10, x11x001010, x11x0011x0, x11x001x00, 0110001xx0, x110001xx0, 0111001xx0}, x11x101xx1 \ {
   x111101x01, x110101x11, x11x101011, x11x1011x1, 011x101xx1, 111x101xx1, 111x101xx1}}

{01x1x \ {01011, 01x11}, 1x00x \ {1x001, 1x000, 10001}}
{000x1 \ {00011}}
{
   0001101x11 \ {
   0001101011, 0001101x11, 0001101x11}, 000011x001 \ {
   000011x001, 0000110001}}

{00x1x \ {00011, 00110}, 0xx01 \ {0x001, 01101, 01101}}
{x011x \ {00110, x0110}}
{
   x011x00x1x \ {
   x011100x10, x011000x11, x011x00011, x011x00110, 0011000x1x, x011000x1x}}

{110xx \ {11010, 110x1, 110x0}, 10xx0 \ {10000, 10110, 101x0}}
{0x1x0 \ {01110, 011x0}}
{
   0x1x0110x0 \ {
   0x11011000, 0x10011010, 0x1x011010, 0x1x0110x0, 01110110x0, 011x0110x0}, 0x1x010xx0 \ {
   0x11010x00, 0x10010x10, 0x1x010000, 0x1x010110, 0x1x0101x0, 0111010xx0, 011x010xx0}}

{11x0x \ {11100, 1110x, 11001}, 10xx0 \ {101x0, 10110, 10100}, 000xx \ {000x0, 00010, 00000}}
{x0xx0 \ {00110, x00x0, x0x00}}
{
   x0x0011x00 \ {
   x0x0011100, x0x0011100, x000011x00, x0x0011x00}, x0xx010xx0 \ {
   x0x1010x00, x0x0010x10, x0xx0101x0, x0xx010110, x0xx010100, 0011010xx0, x00x010xx0, x0x0010xx0}, x0xx0000x0 \ {
   x0x1000000, x0x0000010, x0xx0000x0, x0xx000010, x0xx000000, 00110000x0, x00x0000x0, x0x00000x0}}

{x00x0 \ {100x0, 10000}, 0x0x1 \ {00001}}
{xx0xx \ {000xx, xx010, 1x010}, x00xx \ {x0000, x00x0, 00011}}
{
   xx0x0x00x0 \ {
   xx010x0000, xx000x0010, xx0x0100x0, xx0x010000, 000x0x00x0, xx010x00x0, 1x010x00x0}, x00x0x00x0 \ {
   x0010x0000, x0000x0010, x00x0100x0, x00x010000, x0000x00x0, x00x0x00x0}, xx0x10x0x1 \ {
   xx0110x001, xx0010x011, xx0x100001, 000x10x0x1}, x00x10x0x1 \ {
   x00110x001, x00010x011, x00x100001, 000110x0x1}}

{xxx01 \ {01001, 00001, 10001}}
{x01xx \ {10100, 0010x, 001x0}, x101x \ {x1010, 01010, 11011}}
{
   x0101xxx01 \ {
   x010101001, x010100001, x010110001, 00101xxx01}}

{100x1 \ {10001}}
{0x1x0 \ {001x0, 01100, 0x100}, x10x1 \ {11001, x1001, x1011}}
{
   x10x1100x1 \ {
   x101110001, x100110011, x10x110001, 11001100x1, x1001100x1, x1011100x1}}

{xx101 \ {1x101, 01101, x1101}, 0xx11 \ {00011, 01111}}
{00xx1 \ {00111, 00x11}, 011x1 \ {01111}}
{
   00x01xx101 \ {
   00x011x101, 00x0101101, 00x01x1101}, 01101xx101 \ {
   011011x101, 0110101101, 01101x1101}, 00x110xx11 \ {
   00x1100011, 00x1101111, 001110xx11, 00x110xx11}, 011110xx11 \ {
   0111100011, 0111101111, 011110xx11}}

{}
{1x100 \ {10100, 11100}, xx01x \ {11011, 10010, xx011}}
{}

{0001x \ {00011, 00010}}
{00xxx \ {00010, 0011x, 0011x}, xx1x1 \ {1x111, xx111, 1x1x1}}
{
   00x1x0001x \ {
   00x1100010, 00x1000011, 00x1x00011, 00x1x00010, 000100001x, 0011x0001x, 0011x0001x}, xx11100011 \ {
   xx11100011, 1x11100011, xx11100011, 1x11100011}}

{xx100 \ {11100, x0100, 0x100}, 00xxx \ {00100, 00000}}
{xxx11 \ {x1x11, x1111, 0xx11}, x110x \ {01101, x1101, 0110x}}
{
   x1100xx100 \ {
   x110011100, x1100x0100, x11000x100, 01100xx100}, xxx1100x11 \ {
   x1x1100x11, x111100x11, 0xx1100x11}, x110x00x0x \ {
   x110100x00, x110000x01, x110x00100, x110x00000, 0110100x0x, x110100x0x, 0110x00x0x}}

{x11x0 \ {01100, 111x0}, x1111 \ {11111, 01111}, xxx00 \ {1xx00, 01100}}
{1xx01 \ {10001, 11101, 1x101}}
{}

{x0100 \ {10100, 00100, 00100}}
{000x0 \ {00000, 00010}}
{
   00000x0100 \ {
   0000010100, 0000000100, 0000000100, 00000x0100}}

{0x0x1 \ {000x1, 0x011, 010x1}}
{1x0x1 \ {100x1, 11011, 1x011}, xx10x \ {x0101, x1100, 11101}}
{
   1x0x10x0x1 \ {
   1x0110x001, 1x0010x011, 1x0x1000x1, 1x0x10x011, 1x0x1010x1, 100x10x0x1, 110110x0x1, 1x0110x0x1}, xx1010x001 \ {
   xx10100001, xx10101001, x01010x001, 111010x001}}

{}
{0x11x \ {0011x, 00110, 00111}, 001x0 \ {00110, 00100, 00100}}
{}

{}
{xxx10 \ {01010, 1xx10}, 0x11x \ {0011x, 00111, 0111x}}
{}

{}
{1101x \ {11011}, 1xx10 \ {1x010, 1x110, 11010}}
{}

{}
{xxx11 \ {1xx11, 0x011, xx011}, 10x0x \ {1000x, 10100, 10001}, 00x1x \ {00x11, 00011, 00010}}
{}

{1x01x \ {11010, 1x011}, 1x0xx \ {1x001, 1x010, 1x0x1}}
{}
{}

{xx00x \ {0x000, 0x00x, 00000}}
{xx010 \ {00010, 0x010, 0x010}, 011xx \ {0110x, 01111, 0111x}}
{
   0110xxx00x \ {
   01101xx000, 01100xx001, 0110x0x000, 0110x0x00x, 0110x00000, 0110xxx00x}}

{xx1x1 \ {x1101, 1x111, 0x101}, xxx00 \ {x1000, x1100, 01x00}}
{1xx01 \ {11x01, 1x101, 11001}, 0x010 \ {01010, 00010}, 10x0x \ {10100, 10x01}}
{
   1xx01xx101 \ {
   1xx01x1101, 1xx010x101, 11x01xx101, 1x101xx101, 11001xx101}, 10x01xx101 \ {
   10x01x1101, 10x010x101, 10x01xx101}, 10x00xxx00 \ {
   10x00x1000, 10x00x1100, 10x0001x00, 10100xxx00}}

{0xx00 \ {01000, 00100, 0x100}}
{x1x01 \ {x1101, 01x01}}
{}

{1xx00 \ {10100, 11100, 10x00}, xx01x \ {1001x, x0011, 00010}}
{01xx0 \ {01100, 01010, 01x00}, 11x1x \ {1111x, 11011, 11010}}
{
   01x001xx00 \ {
   01x0010100, 01x0011100, 01x0010x00, 011001xx00, 01x001xx00}, 01x10xx010 \ {
   01x1010010, 01x1000010, 01010xx010}, 11x1xxx01x \ {
   11x11xx010, 11x10xx011, 11x1x1001x, 11x1xx0011, 11x1x00010, 1111xxx01x, 11011xx01x, 11010xx01x}}

{010x0 \ {01000, 01010, 01010}, xx10x \ {1010x, 0x10x, x110x}, x11xx \ {x110x, x11x0, x1110}}
{x1xx0 \ {011x0, 01010, 01010}}
{
   x1xx0010x0 \ {
   x1x1001000, x1x0001010, x1xx001000, x1xx001010, x1xx001010, 011x0010x0, 01010010x0, 01010010x0}, x1x00xx100 \ {
   x1x0010100, x1x000x100, x1x00x1100, 01100xx100}, x1xx0x11x0 \ {
   x1x10x1100, x1x00x1110, x1xx0x1100, x1xx0x11x0, x1xx0x1110, 011x0x11x0, 01010x11x0, 01010x11x0}}

{x10x0 \ {010x0, 110x0, 11000}, x0x1x \ {00x10, x001x, 00011}}
{xx0x0 \ {x10x0, xx000, 1x010}}
{
   xx0x0x10x0 \ {
   xx010x1000, xx000x1010, xx0x0010x0, xx0x0110x0, xx0x011000, x10x0x10x0, xx000x10x0, 1x010x10x0}, xx010x0x10 \ {
   xx01000x10, xx010x0010, x1010x0x10, 1x010x0x10}}

{xxx11 \ {01011, 10x11, 1x111}, 10xx1 \ {10x11, 101x1}, x00x1 \ {10011, 00011}}
{1x11x \ {10111, 1x111, 10110}, 1xx11 \ {10111, 11111, 1x111}}
{
   1x111xxx11 \ {
   1x11101011, 1x11110x11, 1x1111x111, 10111xxx11, 1x111xxx11}, 1xx11xxx11 \ {
   1xx1101011, 1xx1110x11, 1xx111x111, 10111xxx11, 11111xxx11, 1x111xxx11}, 1x11110x11 \ {
   1x11110x11, 1x11110111, 1011110x11, 1x11110x11}, 1xx1110x11 \ {
   1xx1110x11, 1xx1110111, 1011110x11, 1111110x11, 1x11110x11}, 1x111x0011 \ {
   1x11110011, 1x11100011, 10111x0011, 1x111x0011}, 1xx11x0011 \ {
   1xx1110011, 1xx1100011, 10111x0011, 11111x0011, 1x111x0011}}

{xx1x0 \ {1x110, x0100, xx100}}
{xx0x0 \ {x00x0, x1010, 110x0}}
{
   xx0x0xx1x0 \ {
   xx010xx100, xx000xx110, xx0x01x110, xx0x0x0100, xx0x0xx100, x00x0xx1x0, x1010xx1x0, 110x0xx1x0}}

{1xxx1 \ {10x11, 10111, 10x01}, 1110x \ {11101, 11100, 11100}}
{xx010 \ {x1010, 01010}}
{}

{}
{11x01 \ {11101, 11001, 11001}}
{}

{1xx0x \ {1x00x, 1110x, 11000}}
{}
{}

{xx10x \ {x110x, 00100, 0010x}, 11x0x \ {11000, 11100, 1100x}}
{01xxx \ {010xx, 01010, 0111x}}
{
   01x0xxx10x \ {
   01x01xx100, 01x00xx101, 01x0xx110x, 01x0x00100, 01x0x0010x, 0100xxx10x}, 01x0x11x0x \ {
   01x0111x00, 01x0011x01, 01x0x11000, 01x0x11100, 01x0x1100x, 0100x11x0x}}

{}
{0x0x0 \ {0x000, 00000, 010x0}, x0x00 \ {00x00, 10x00, 10x00}, xxxx0 \ {x0x10, 01110, 100x0}}
{}

{01x00 \ {01100}}
{xxx1x \ {x1x1x, xxx11, 00x10}}
{}

{0x1xx \ {0x11x, 0x110, 0x111}, 1xxx1 \ {11x11, 11x01, 10101}}
{10xxx \ {10111, 10x00, 10x01}, x10xx \ {1100x, x1011, 010xx}, 011x1 \ {01101}}
{
   10xxx0x1xx \ {
   10xx10x1x0, 10xx00x1x1, 10x1x0x10x, 10x0x0x11x, 10xxx0x11x, 10xxx0x110, 10xxx0x111, 101110x1xx, 10x000x1xx, 10x010x1xx}, x10xx0x1xx \ {
   x10x10x1x0, x10x00x1x1, x101x0x10x, x100x0x11x, x10xx0x11x, x10xx0x110, x10xx0x111, 1100x0x1xx, x10110x1xx, 010xx0x1xx}, 011x10x1x1 \ {
   011110x101, 011010x111, 011x10x111, 011x10x111, 011010x1x1}, 10xx11xxx1 \ {
   10x111xx01, 10x011xx11, 10xx111x11, 10xx111x01, 10xx110101, 101111xxx1, 10x011xxx1}, x10x11xxx1 \ {
   x10111xx01, x10011xx11, x10x111x11, x10x111x01, x10x110101, 110011xxx1, x10111xxx1, 010x11xxx1}, 011x11xxx1 \ {
   011111xx01, 011011xx11, 011x111x11, 011x111x01, 011x110101, 011011xxx1}}

{x1111 \ {11111, 01111}, 1x101 \ {10101}}
{1xx11 \ {10x11, 10011, 1x011}, x11x1 \ {01111, 111x1, 11101}, 10x0x \ {1010x, 10000, 10x01}}
{
   1xx11x1111 \ {
   1xx1111111, 1xx1101111, 10x11x1111, 10011x1111, 1x011x1111}, x1111x1111 \ {
   x111111111, x111101111, 01111x1111, 11111x1111}, x11011x101 \ {
   x110110101, 111011x101, 111011x101}, 10x011x101 \ {
   10x0110101, 101011x101, 10x011x101}}

{0xx0x \ {01101, 01x0x, 01x00}}
{x00x1 \ {00001, 000x1, x0011}, x01x0 \ {00100, x0110}}
{
   x00010xx01 \ {
   x000101101, x000101x01, 000010xx01, 000010xx01}, x01000xx00 \ {
   x010001x00, x010001x00, 001000xx00}}

{1x1xx \ {111x0, 10101, 11111}}
{x1xx1 \ {011x1, 01x11, x1x01}, x1x1x \ {01110, 11111, 0101x}, 1xxxx \ {1001x, 10010, 11x01}}
{
   x1xx11x1x1 \ {
   x1x111x101, x1x011x111, x1xx110101, x1xx111111, 011x11x1x1, 01x111x1x1, x1x011x1x1}, x1x1x1x11x \ {
   x1x111x110, x1x101x111, x1x1x11110, x1x1x11111, 011101x11x, 111111x11x, 0101x1x11x}, 1xxxx1x1xx \ {
   1xxx11x1x0, 1xxx01x1x1, 1xx1x1x10x, 1xx0x1x11x, 1xxxx111x0, 1xxxx10101, 1xxxx11111, 1001x1x1xx, 100101x1xx, 11x011x1xx}}

{1xxx1 \ {10111, 1x101, 1xx01}}
{110x1 \ {11011}, x0x01 \ {10101, 00001, 00001}}
{
   110x11xxx1 \ {
   110111xx01, 110011xx11, 110x110111, 110x11x101, 110x11xx01, 110111xxx1}, x0x011xx01 \ {
   x0x011x101, x0x011xx01, 101011xx01, 000011xx01, 000011xx01}}

{}
{0x100 \ {01100}, xx11x \ {11110, 0x110, xx111}}
{}

{x110x \ {01100, x1101, 1110x}}
{xxx0x \ {0010x, 0x001, 01100}}
{
   xxx0xx110x \ {
   xxx01x1100, xxx00x1101, xxx0x01100, xxx0xx1101, xxx0x1110x, 0010xx110x, 0x001x110x, 01100x110x}}

{xxx0x \ {0x101, 11x01, x0x0x}, 1xx00 \ {11000, 10000, 1x100}, x1010 \ {11010}}
{}
{}

{}
{10x0x \ {10100, 1000x, 10x01}}
{}

{10x0x \ {10100, 1010x}}
{x1xx1 \ {x1x11, 01111, x1111}, 00x11 \ {00011}}
{
   x1x0110x01 \ {
   x1x0110101}}

{0xxx1 \ {01x01, 000x1, 01x11}, xx11x \ {x1110, 10111, 1x11x}}
{1x11x \ {1x111, 11110, 1111x}, 110x0 \ {11010}}
{
   1x1110xx11 \ {
   1x11100011, 1x11101x11, 1x1110xx11, 111110xx11}, 1x11xxx11x \ {
   1x111xx110, 1x110xx111, 1x11xx1110, 1x11x10111, 1x11x1x11x, 1x111xx11x, 11110xx11x, 1111xxx11x}, 11010xx110 \ {
   11010x1110, 110101x110, 11010xx110}}

{xx0x0 \ {01010, 110x0, 000x0}, x1x0x \ {01x01, 01x00, x1000}, 10xx1 \ {10001, 10101, 10101}}
{001x0 \ {00110, 00100}}
{
   001x0xx0x0 \ {
   00110xx000, 00100xx010, 001x001010, 001x0110x0, 001x0000x0, 00110xx0x0, 00100xx0x0}, 00100x1x00 \ {
   0010001x00, 00100x1000, 00100x1x00}}

{}
{00xx1 \ {00001, 00x01, 00101}, x0xx1 \ {00xx1, x0x01}}
{}

{x11x1 \ {01101, 11111}}
{10xx1 \ {10101, 10x01, 10001}, 101x1 \ {10111, 10101}, x0x11 \ {x0111, x0011, x0011}}
{
   10xx1x11x1 \ {
   10x11x1101, 10x01x1111, 10xx101101, 10xx111111, 10101x11x1, 10x01x11x1, 10001x11x1}, 101x1x11x1 \ {
   10111x1101, 10101x1111, 101x101101, 101x111111, 10111x11x1, 10101x11x1}, x0x11x1111 \ {
   x0x1111111, x0111x1111, x0011x1111, x0011x1111}}

{1x1xx \ {111xx, 101x0, 1x11x}, x101x \ {0101x, x1010, 11010}, 0xxx0 \ {0xx10, 00000, 00x00}}
{10x11 \ {10011}, x010x \ {10100, 0010x}, 00xxx \ {00x01, 00xx1, 00101}}
{
   10x111x111 \ {
   10x1111111, 10x111x111, 100111x111}, x010x1x10x \ {
   x01011x100, x01001x101, x010x1110x, x010x10100, 101001x10x, 0010x1x10x}, 00xxx1x1xx \ {
   00xx11x1x0, 00xx01x1x1, 00x1x1x10x, 00x0x1x11x, 00xxx111xx, 00xxx101x0, 00xxx1x11x, 00x011x1xx, 00xx11x1xx, 001011x1xx}, 10x11x1011 \ {
   10x1101011, 10011x1011}, 00x1xx101x \ {
   00x11x1010, 00x10x1011, 00x1x0101x, 00x1xx1010, 00x1x11010, 00x11x101x}, x01000xx00 \ {
   x010000000, x010000x00, 101000xx00, 001000xx00}, 00xx00xxx0 \ {
   00x100xx00, 00x000xx10, 00xx00xx10, 00xx000000, 00xx000x00}}

{xxx1x \ {01x11, 00010, x0x1x}}
{x1110 \ {01110, 11110}}
{
   x1110xxx10 \ {
   x111000010, x1110x0x10, 01110xxx10, 11110xxx10}}

{x0x10 \ {10110, 00010, 10010}, x001x \ {x0010, 00011, 10010}, 0xx1x \ {0011x, 0xx10, 00010}}
{11x0x \ {11x00, 11100}, 01x1x \ {01011, 01010, 0111x}}
{
   01x10x0x10 \ {
   01x1010110, 01x1000010, 01x1010010, 01010x0x10, 01110x0x10}, 01x1xx001x \ {
   01x11x0010, 01x10x0011, 01x1xx0010, 01x1x00011, 01x1x10010, 01011x001x, 01010x001x, 0111xx001x}, 01x1x0xx1x \ {
   01x110xx10, 01x100xx11, 01x1x0011x, 01x1x0xx10, 01x1x00010, 010110xx1x, 010100xx1x, 0111x0xx1x}}

{}
{x0x01 \ {10x01, 00x01, x0101}, 01xx0 \ {01000, 010x0, 01110}}
{}

{0x1x0 \ {01100, 00100, 01110}, xxx11 \ {01111, x1x11, 0x011}}
{}
{}

{}
{}
{}

{0xx1x \ {01010, 0xx11, 01110}, 0x1xx \ {01110, 001x0, 0x110}}
{010x0 \ {01010}}
{
   010100xx10 \ {
   0101001010, 0101001110, 010100xx10}, 010x00x1x0 \ {
   010100x100, 010000x110, 010x001110, 010x0001x0, 010x00x110, 010100x1x0}}

{11xxx \ {111x1, 11101}}
{}
{}

{xx000 \ {01000, x0000, 10000}}
{x000x \ {00001, x0001, x0001}}
{
   x0000xx000 \ {
   x000001000, x0000x0000, x000010000}}

{00x1x \ {0001x, 00x11, 0011x}, xxx10 \ {0xx10, 0x010, 1xx10}}
{0xxx1 \ {010x1, 01111, 00xx1}, 1xx01 \ {11x01, 10101, 10001}, 00x1x \ {00111, 0001x, 00x10}}
{
   0xx1100x11 \ {
   0xx1100011, 0xx1100x11, 0xx1100111, 0101100x11, 0111100x11, 00x1100x11}, 00x1x00x1x \ {
   00x1100x10, 00x1000x11, 00x1x0001x, 00x1x00x11, 00x1x0011x, 0011100x1x, 0001x00x1x, 00x1000x1x}, 00x10xxx10 \ {
   00x100xx10, 00x100x010, 00x101xx10, 00010xxx10, 00x10xxx10}}

{1x1xx \ {10101, 1011x, 1x1x0}, 001xx \ {0010x, 0011x, 001x0}}
{01xxx \ {010x1, 011x1}, 10x11 \ {10011, 10111, 10111}}
{
   01xxx1x1xx \ {
   01xx11x1x0, 01xx01x1x1, 01x1x1x10x, 01x0x1x11x, 01xxx10101, 01xxx1011x, 01xxx1x1x0, 010x11x1xx, 011x11x1xx}, 10x111x111 \ {
   10x1110111, 100111x111, 101111x111, 101111x111}, 01xxx001xx \ {
   01xx1001x0, 01xx0001x1, 01x1x0010x, 01x0x0011x, 01xxx0010x, 01xxx0011x, 01xxx001x0, 010x1001xx, 011x1001xx}, 10x1100111 \ {
   10x1100111, 1001100111, 1011100111, 1011100111}}

{010xx \ {01011, 01010, 0100x}, x1xx0 \ {11010, 01010, x1000}, 1x110 \ {11110, 10110}}
{}
{}

{0x100 \ {01100}, 0x100 \ {01100, 00100}, 00x11 \ {00111, 00011}}
{101xx \ {10110, 10100, 10111}, xxx0x \ {1x101, x1001, x010x}, x10x0 \ {01000, 110x0, 010x0}}
{
   101000x100 \ {
   1010001100, 101000x100}, xxx000x100 \ {
   xxx0001100, x01000x100}, x10000x100 \ {
   x100001100, 010000x100, 110000x100, 010000x100}, 1011100x11 \ {
   1011100111, 1011100011, 1011100x11}}

{}
{0xx00 \ {00x00, 00100}, x01x1 \ {101x1, 10101, 001x1}}
{}

{1xx11 \ {11011, 10x11, 11111}}
{10x01 \ {10101, 10001}, xxx1x \ {10110, 00x11, 1x111}}
{
   xxx111xx11 \ {
   xxx1111011, xxx1110x11, xxx1111111, 00x111xx11, 1x1111xx11}}

{0x000 \ {01000, 00000}, 0x1x0 \ {0x110, 0x100, 01100}}
{}
{}

{xx0x1 \ {00011, 11011, 000x1}}
{xxx10 \ {11010, 0xx10, 0xx10}, 1x0x1 \ {11011, 110x1, 10001}, 0011x \ {00110, 00111}}
{
   1x0x1xx0x1 \ {
   1x011xx001, 1x001xx011, 1x0x100011, 1x0x111011, 1x0x1000x1, 11011xx0x1, 110x1xx0x1, 10001xx0x1}, 00111xx011 \ {
   0011100011, 0011111011, 0011100011, 00111xx011}}

{x0xxx \ {10011, x001x, x00x0}}
{1x010 \ {11010, 10010, 10010}, x1x1x \ {11010, x1110, x1110}}
{
   1x010x0x10 \ {
   1x010x0010, 1x010x0010, 11010x0x10, 10010x0x10, 10010x0x10}, x1x1xx0x1x \ {
   x1x11x0x10, x1x10x0x11, x1x1x10011, x1x1xx001x, x1x1xx0010, 11010x0x1x, x1110x0x1x, x1110x0x1x}}

{10xx1 \ {100x1, 10101, 10001}, 11x0x \ {11001, 11000, 1110x}, x111x \ {x1111, 11110}}
{0x1x0 \ {01100, 0x110, 011x0}, x10x1 \ {11011, 010x1, x1001}}
{
   x10x110xx1 \ {
   x101110x01, x100110x11, x10x1100x1, x10x110101, x10x110001, 1101110xx1, 010x110xx1, x100110xx1}, 0x10011x00 \ {
   0x10011000, 0x10011100, 0110011x00, 0110011x00}, x100111x01 \ {
   x100111001, x100111101, 0100111x01, x100111x01}, 0x110x1110 \ {
   0x11011110, 0x110x1110, 01110x1110}, x1011x1111 \ {
   x1011x1111, 11011x1111, 01011x1111}}

{1x1xx \ {111xx, 1x1x1, 10111}}
{xxxxx \ {x0x10, 001x0, x01x0}}
{
   xxxxx1x1xx \ {
   xxxx11x1x0, xxxx01x1x1, xxx1x1x10x, xxx0x1x11x, xxxxx111xx, xxxxx1x1x1, xxxxx10111, x0x101x1xx, 001x01x1xx, x01x01x1xx}}

{0xx10 \ {01010, 0x110}}
{xxxxx \ {01x0x, 111x0, 11000}}
{
   xxx100xx10 \ {
   xxx1001010, xxx100x110, 111100xx10}}

{100xx \ {10011, 1001x, 100x1}, x01x0 \ {x0100, 001x0, 00100}}
{1x10x \ {11100, 10100, 1010x}, x111x \ {x1111, 1111x, 01110}, x1x11 \ {01011, x1011, 11011}}
{
   1x10x1000x \ {
   1x10110000, 1x10010001, 1x10x10001, 111001000x, 101001000x, 1010x1000x}, x111x1001x \ {
   x111110010, x111010011, x111x10011, x111x1001x, x111x10011, x11111001x, 1111x1001x, 011101001x}, x1x1110011 \ {
   x1x1110011, x1x1110011, x1x1110011, 0101110011, x101110011, 1101110011}, 1x100x0100 \ {
   1x100x0100, 1x10000100, 1x10000100, 11100x0100, 10100x0100, 10100x0100}, x1110x0110 \ {
   x111000110, 11110x0110, 01110x0110}}

{xxx1x \ {11x1x, 00x11, 0x110}, 100xx \ {10010, 10001, 10000}}
{xxxx0 \ {11100, 11x00, 01xx0}, xxx0x \ {01x00, 1010x, x1000}}
{
   xxx10xxx10 \ {
   xxx1011x10, xxx100x110, 01x10xxx10}, xxxx0100x0 \ {
   xxx1010000, xxx0010010, xxxx010010, xxxx010000, 11100100x0, 11x00100x0, 01xx0100x0}, xxx0x1000x \ {
   xxx0110000, xxx0010001, xxx0x10001, xxx0x10000, 01x001000x, 1010x1000x, x10001000x}}

{}
{1x10x \ {11100, 1010x, 1010x}, 10x11 \ {10111}}
{}

{x01x1 \ {x0111, 101x1, 10101}, 1xxx0 \ {1x000, 1xx00, 11xx0}}
{0xxx0 \ {011x0, 0x0x0, 00000}}
{
   0xxx01xxx0 \ {
   0xx101xx00, 0xx001xx10, 0xxx01x000, 0xxx01xx00, 0xxx011xx0, 011x01xxx0, 0x0x01xxx0, 000001xxx0}}

{0011x \ {00111, 00110}, 11x0x \ {1100x, 11x00, 11x00}}
{1110x \ {11100, 11101, 11101}, 1x0xx \ {110x1, 1x000, 1x000}}
{
   1x01x0011x \ {
   1x01100110, 1x01000111, 1x01x00111, 1x01x00110, 110110011x}, 1110x11x0x \ {
   1110111x00, 1110011x01, 1110x1100x, 1110x11x00, 1110x11x00, 1110011x0x, 1110111x0x, 1110111x0x}, 1x00x11x0x \ {
   1x00111x00, 1x00011x01, 1x00x1100x, 1x00x11x00, 1x00x11x00, 1100111x0x, 1x00011x0x, 1x00011x0x}}

{1xx0x \ {11101, 10000, 10000}, 00x01 \ {00001, 00101}}
{0x11x \ {0x110, 0111x, 00110}}
{}

{}
{x111x \ {01111, 11111}, 0x0x0 \ {000x0, 010x0, 01000}, xx110 \ {0x110, 11110, 00110}}
{}

{01x0x \ {0100x, 01101, 01101}}
{101x0 \ {10110, 10100}}
{
   1010001x00 \ {
   1010001000, 1010001x00}}

{xx0xx \ {x100x, x1010, 0x000}}
{1xx1x \ {10x10, 11010, 1xx10}, 11x00 \ {11100, 11000, 11000}, 0x01x \ {01011, 00010, 01010}}
{
   1xx1xxx01x \ {
   1xx11xx010, 1xx10xx011, 1xx1xx1010, 10x10xx01x, 11010xx01x, 1xx10xx01x}, 11x00xx000 \ {
   11x00x1000, 11x000x000, 11100xx000, 11000xx000, 11000xx000}, 0x01xxx01x \ {
   0x011xx010, 0x010xx011, 0x01xx1010, 01011xx01x, 00010xx01x, 01010xx01x}}

{x100x \ {01000, x1000, 01001}, x0x11 \ {00011, x0111}}
{0111x \ {01111, 01110, 01110}, 0x01x \ {01010, 0001x, 0101x}}
{
   01111x0x11 \ {
   0111100011, 01111x0111, 01111x0x11}, 0x011x0x11 \ {
   0x01100011, 0x011x0111, 00011x0x11, 01011x0x11}}

{x1x1x \ {01x1x, 0111x, 1101x}}
{}
{}

{0xxx0 \ {0x0x0, 01010, 0x010}}
{xxx01 \ {10x01, 1x101, 0xx01}, 00x1x \ {00110, 00011, 0011x}}
{
   00x100xx10 \ {
   00x100x010, 00x1001010, 00x100x010, 001100xx10, 001100xx10}}

{0xxx0 \ {0x000, 000x0, 00xx0}, xx1xx \ {1x10x, 01111, 01111}}
{x1xx0 \ {110x0, x10x0, x1000}, x0xx0 \ {00100, 00000, 00110}}
{
   x1xx00xxx0 \ {
   x1x100xx00, x1x000xx10, x1xx00x000, x1xx0000x0, x1xx000xx0, 110x00xxx0, x10x00xxx0, x10000xxx0}, x0xx00xxx0 \ {
   x0x100xx00, x0x000xx10, x0xx00x000, x0xx0000x0, x0xx000xx0, 001000xxx0, 000000xxx0, 001100xxx0}, x1xx0xx1x0 \ {
   x1x10xx100, x1x00xx110, x1xx01x100, 110x0xx1x0, x10x0xx1x0, x1000xx1x0}, x0xx0xx1x0 \ {
   x0x10xx100, x0x00xx110, x0xx01x100, 00100xx1x0, 00000xx1x0, 00110xx1x0}}

{x0x0x \ {10101, 10x00, 00x00}, x1011 \ {11011, 01011}}
{11x00 \ {11000}, x11x0 \ {x1100, 01100, 01110}, 1x100 \ {10100}}
{
   11x00x0x00 \ {
   11x0010x00, 11x0000x00, 11000x0x00}, x1100x0x00 \ {
   x110010x00, x110000x00, x1100x0x00, 01100x0x00}, 1x100x0x00 \ {
   1x10010x00, 1x10000x00, 10100x0x00}}

{001xx \ {00101, 001x0, 00111}}
{01x0x \ {01000, 0110x, 01x01}, 100x0 \ {10000}}
{
   01x0x0010x \ {
   01x0100100, 01x0000101, 01x0x00101, 01x0x00100, 010000010x, 0110x0010x, 01x010010x}, 100x0001x0 \ {
   1001000100, 1000000110, 100x0001x0, 10000001x0}}

{110xx \ {110x1, 1101x}, 00xx1 \ {00001, 00x11}}
{11xxx \ {11101, 11110, 111x0}, x01x1 \ {10101, 001x1, 101x1}}
{
   11xxx110xx \ {
   11xx1110x0, 11xx0110x1, 11x1x1100x, 11x0x1101x, 11xxx110x1, 11xxx1101x, 11101110xx, 11110110xx, 111x0110xx}, x01x1110x1 \ {
   x011111001, x010111011, x01x1110x1, x01x111011, 10101110x1, 001x1110x1, 101x1110x1}, 11xx100xx1 \ {
   11x1100x01, 11x0100x11, 11xx100001, 11xx100x11, 1110100xx1}, x01x100xx1 \ {
   x011100x01, x010100x11, x01x100001, x01x100x11, 1010100xx1, 001x100xx1, 101x100xx1}}

{x01x0 \ {00100, 00110, 10110}}
{x11x0 \ {x1110, 01110}}
{
   x11x0x01x0 \ {
   x1110x0100, x1100x0110, x11x000100, x11x000110, x11x010110, x1110x01x0, 01110x01x0}}

{xx10x \ {11100, 10100, 1110x}, 1110x \ {11100, 11101}, 1110x \ {11101, 11100, 11100}}
{x1x10 \ {11x10, 11010, x1110}}
{}

{0x010 \ {00010}, 1x0x1 \ {10001, 110x1, 11011}}
{x101x \ {x1011, 01011, 11011}, x110x \ {1110x, 01101}}
{
   x10100x010 \ {
   x101000010}, x10111x011 \ {
   x101111011, x101111011, x10111x011, 010111x011, 110111x011}, x11011x001 \ {
   x110110001, x110111001, 111011x001, 011011x001}}

{01x1x \ {0111x, 01010, 01110}}
{}
{}

{00xxx \ {00x1x, 0000x}}
{x00x1 \ {00011, 00001}, x00x1 \ {000x1, 10011, 00001}}
{
   x00x100xx1 \ {
   x001100x01, x000100x11, x00x100x11, x00x100001, 0001100xx1, 0000100xx1}}

{1x101 \ {10101, 11101}}
{10xx1 \ {10111, 10001, 101x1}}
{
   10x011x101 \ {
   10x0110101, 10x0111101, 100011x101, 101011x101}}

{1x1xx \ {11100, 111xx, 10111}}
{xx0x1 \ {x0001, 110x1, x10x1}, 1x110 \ {11110}}
{
   xx0x11x1x1 \ {
   xx0111x101, xx0011x111, xx0x1111x1, xx0x110111, x00011x1x1, 110x11x1x1, x10x11x1x1}, 1x1101x110 \ {
   1x11011110, 111101x110}}

{xx0xx \ {110xx, x000x, 01010}}
{1x10x \ {1x101, 1010x, 1x100}}
{
   1x10xxx00x \ {
   1x101xx000, 1x100xx001, 1x10x1100x, 1x10xx000x, 1x101xx00x, 1010xxx00x, 1x100xx00x}}

{x111x \ {0111x, x1111, 01111}}
{xx1x0 \ {10100, 11100, 111x0}, xx0xx \ {010x1, 1001x, 10010}}
{
   xx110x1110 \ {
   xx11001110, 11110x1110}, xx01xx111x \ {
   xx011x1110, xx010x1111, xx01x0111x, xx01xx1111, xx01x01111, 01011x111x, 1001xx111x, 10010x111x}}

{1x10x \ {1110x, 1x100, 1010x}, xx0xx \ {01000, x10x0, x0011}}
{}
{}

{110x1 \ {11001, 11011, 11011}, 0xx10 \ {00110, 01110, 00x10}, 0x1x0 \ {011x0, 001x0, 00100}}
{1xx00 \ {10100, 11100, 11000}, xx10x \ {0x10x}}
{
   xx10111001 \ {
   xx10111001, 0x10111001}, 1xx000x100 \ {
   1xx0001100, 1xx0000100, 1xx0000100, 101000x100, 111000x100, 110000x100}, xx1000x100 \ {
   xx10001100, xx10000100, xx10000100, 0x1000x100}}

{xx011 \ {01011, x0011, 10011}}
{1xx11 \ {10x11, 11011, 11011}}
{
   1xx11xx011 \ {
   1xx1101011, 1xx11x0011, 1xx1110011, 10x11xx011, 11011xx011, 11011xx011}}

{xx110 \ {x0110, 01110, 11110}}
{00x01 \ {00101, 00001}}
{}

{x0xxx \ {10011, 001xx, 00xx0}}
{1xx0x \ {1000x, 1x000, 11x0x}}
{
   1xx0xx0x0x \ {
   1xx01x0x00, 1xx00x0x01, 1xx0x0010x, 1xx0x00x00, 1000xx0x0x, 1x000x0x0x, 11x0xx0x0x}}

{10xx1 \ {10101, 101x1}, 1010x \ {10100, 10101, 10101}}
{10xx0 \ {10x00, 10010, 10110}}
{
   10x0010100 \ {
   10x0010100, 10x0010100}}

{xxx1x \ {0xx1x, 10x1x, x0x1x}, 1xxx1 \ {1x111, 11x11, 11xx1}}
{01x1x \ {01110, 0111x, 01010}}
{
   01x1xxxx1x \ {
   01x11xxx10, 01x10xxx11, 01x1x0xx1x, 01x1x10x1x, 01x1xx0x1x, 01110xxx1x, 0111xxxx1x, 01010xxx1x}, 01x111xx11 \ {
   01x111x111, 01x1111x11, 01x1111x11, 011111xx11}}

{xx110 \ {x1110, 1x110, 00110}, 10xx0 \ {100x0, 10100, 10110}}
{x01xx \ {10111, 00101, x0110}}
{
   x0110xx110 \ {
   x0110x1110, x01101x110, x011000110, x0110xx110}, x01x010xx0 \ {
   x011010x00, x010010x10, x01x0100x0, x01x010100, x01x010110, x011010xx0}}

{0x10x \ {00101, 01101, 00100}, x011x \ {00111, x0110, 1011x}}
{0xxx0 \ {01000, 01xx0, 0x000}}
{
   0xx000x100 \ {
   0xx0000100, 010000x100, 01x000x100, 0x0000x100}, 0xx10x0110 \ {
   0xx10x0110, 0xx1010110, 01x10x0110}}

{xxx11 \ {00011, x0111, 1xx11}}
{x1x00 \ {01000}, x1xx1 \ {x10x1, 01111}}
{
   x1x11xxx11 \ {
   x1x1100011, x1x11x0111, x1x111xx11, x1011xxx11, 01111xxx11}}

{}
{111xx \ {111x1, 11111, 11110}}
{}

{xx0x1 \ {010x1, 11001, 000x1}, x11x0 \ {111x0, 11100, 01110}}
{00x1x \ {00x10, 00110, 00011}, 0xxx1 \ {01xx1, 0x111, 00001}}
{
   00x11xx011 \ {
   00x1101011, 00x1100011, 00011xx011}, 0xxx1xx0x1 \ {
   0xx11xx001, 0xx01xx011, 0xxx1010x1, 0xxx111001, 0xxx1000x1, 01xx1xx0x1, 0x111xx0x1, 00001xx0x1}, 00x10x1110 \ {
   00x1011110, 00x1001110, 00x10x1110, 00110x1110}}

{x1x01 \ {11101, 11001, x1001}, 1xxx0 \ {10100, 11xx0}}
{00xxx \ {000xx, 00xx1}, x100x \ {01000, x1001}}
{
   00x01x1x01 \ {
   00x0111101, 00x0111001, 00x01x1001, 00001x1x01, 00x01x1x01}, x1001x1x01 \ {
   x100111101, x100111001, x1001x1001, x1001x1x01}, 00xx01xxx0 \ {
   00x101xx00, 00x001xx10, 00xx010100, 00xx011xx0, 000x01xxx0}, x10001xx00 \ {
   x100010100, x100011x00, 010001xx00}}

{xx01x \ {00010, x001x, 11011}}
{10xx1 \ {101x1, 10101, 10111}, 1x11x \ {11111, 10111}}
{
   10x11xx011 \ {
   10x11x0011, 10x1111011, 10111xx011, 10111xx011}, 1x11xxx01x \ {
   1x111xx010, 1x110xx011, 1x11x00010, 1x11xx001x, 1x11x11011, 11111xx01x, 10111xx01x}}

{01x1x \ {0101x, 01010, 01111}, 10x0x \ {10000, 10101, 10001}}
{}
{}

{}
{xx01x \ {00010, 11010, 1x011}}
{}

{x1001 \ {11001, 01001}, xx100 \ {11100, 0x100, 01100}}
{x010x \ {10100, x0100, 10101}}
{
   x0101x1001 \ {
   x010111001, x010101001, 10101x1001}, x0100xx100 \ {
   x010011100, x01000x100, x010001100, 10100xx100, x0100xx100}}

{}
{x110x \ {01101, 0110x, 01100}, 11x0x \ {11101, 1100x}, xx10x \ {x010x, 1x100, x0100}}
{}

{0011x \ {00111}, x1x0x \ {01x0x, 01001, 01000}}
{110x0 \ {11010, 11000, 11000}, x1xx1 \ {11xx1, 01x01, 11001}, x1x01 \ {01001, x1101}}
{
   1101000110 \ {
   1101000110}, x1x1100111 \ {
   x1x1100111, 11x1100111}, 11000x1x00 \ {
   1100001x00, 1100001000, 11000x1x00, 11000x1x00}, x1x01x1x01 \ {
   x1x0101x01, x1x0101001, 11x01x1x01, 01x01x1x01, 11001x1x01}, x1x01x1x01 \ {
   x1x0101x01, x1x0101001, 01001x1x01, x1101x1x01}}

{x0xx1 \ {00x11, 00xx1, 10101}, 1xx11 \ {11011, 11x11, 11x11}}
{}
{}

{110xx \ {11000, 1101x}}
{xx1xx \ {001x1, 0x11x, 1x100}, 0x1xx \ {0x111, 0x10x, 01100}, 00xx1 \ {00x11, 00111, 00011}}
{
   xx1xx110xx \ {
   xx1x1110x0, xx1x0110x1, xx11x1100x, xx10x1101x, xx1xx11000, xx1xx1101x, 001x1110xx, 0x11x110xx, 1x100110xx}, 0x1xx110xx \ {
   0x1x1110x0, 0x1x0110x1, 0x11x1100x, 0x10x1101x, 0x1xx11000, 0x1xx1101x, 0x111110xx, 0x10x110xx, 01100110xx}, 00xx1110x1 \ {
   00x1111001, 00x0111011, 00xx111011, 00x11110x1, 00111110x1, 00011110x1}}

{x1x0x \ {11x01, x1000, x110x}, x010x \ {10100, x0100, 00101}, 01xxx \ {01011, 01x11, 0111x}}
{101xx \ {101x1, 1010x, 10110}, 11x1x \ {1101x, 11011}}
{
   1010xx1x0x \ {
   10101x1x00, 10100x1x01, 1010x11x01, 1010xx1000, 1010xx110x, 10101x1x0x, 1010xx1x0x}, 1010xx010x \ {
   10101x0100, 10100x0101, 1010x10100, 1010xx0100, 1010x00101, 10101x010x, 1010xx010x}, 101xx01xxx \ {
   101x101xx0, 101x001xx1, 1011x01x0x, 1010x01x1x, 101xx01011, 101xx01x11, 101xx0111x, 101x101xxx, 1010x01xxx, 1011001xxx}, 11x1x01x1x \ {
   11x1101x10, 11x1001x11, 11x1x01011, 11x1x01x11, 11x1x0111x, 1101x01x1x, 1101101x1x}}

{10x00 \ {10100, 10000}}
{x01xx \ {10101, 00111, 0011x}}
{
   x010010x00 \ {
   x010010100, x010010000}}

{10xxx \ {10111, 10001, 10x10}}
{x1111 \ {01111, 11111}}
{
   x111110x11 \ {
   x111110111, 0111110x11, 1111110x11}}

{1x000 \ {11000, 10000, 10000}}
{00x0x \ {0010x, 0000x, 0000x}}
{
   00x001x000 \ {
   00x0011000, 00x0010000, 00x0010000, 001001x000, 000001x000, 000001x000}}

{}
{xxx1x \ {01011, x0x11, 1x01x}, 0x10x \ {0110x, 0x100, 0010x}, 1x01x \ {1101x, 11010}}
{}

{x0x00 \ {00100, 10x00, x0000}, x01x1 \ {00101, 10101, 00111}}
{00x0x \ {0000x, 0010x}, 1x0x1 \ {10001, 1x001}}
{
   00x00x0x00 \ {
   00x0000100, 00x0010x00, 00x00x0000, 00000x0x00, 00100x0x00}, 00x01x0101 \ {
   00x0100101, 00x0110101, 00001x0101, 00101x0101}, 1x0x1x01x1 \ {
   1x011x0101, 1x001x0111, 1x0x100101, 1x0x110101, 1x0x100111, 10001x01x1, 1x001x01x1}}

{00xx1 \ {000x1, 00001}}
{x1100 \ {11100}}
{}

{1x10x \ {1x100, 10100, 1x101}, x1xx0 \ {01x10, x10x0, x1000}}
{xx00x \ {0100x, xx001, x100x}}
{
   xx00x1x10x \ {
   xx0011x100, xx0001x101, xx00x1x100, xx00x10100, xx00x1x101, 0100x1x10x, xx0011x10x, x100x1x10x}, xx000x1x00 \ {
   xx000x1000, xx000x1000, 01000x1x00, x1000x1x00}}

{}
{00x0x \ {00100, 00x00, 00x00}, x0x11 \ {x0011, 00111, 10011}}
{}

{x001x \ {00010, 10010, 00011}}
{xxxxx \ {x0010, 11x11, 1xx00}, xxx10 \ {1x010, x1110, 00110}}
{
   xxx1xx001x \ {
   xxx11x0010, xxx10x0011, xxx1x00010, xxx1x10010, xxx1x00011, x0010x001x, 11x11x001x}, xxx10x0010 \ {
   xxx1000010, xxx1010010, 1x010x0010, x1110x0010, 00110x0010}}

{xxx00 \ {x0x00, x1100, x1000}}
{xx1x1 \ {11101, 00111, 101x1}, x1x11 \ {11x11, 01x11}}
{}

{0110x \ {01100, 01101}}
{}
{}

{0x101 \ {01101}, 10x01 \ {10001, 10101}}
{01x1x \ {0111x, 01x11, 01111}}
{}

{xx0x1 \ {000x1, 10011}, 111xx \ {11101, 11111, 1111x}, x0x00 \ {00100, 10x00, 00000}}
{00x1x \ {00111, 0011x}}
{
   00x11xx011 \ {
   00x1100011, 00x1110011, 00111xx011, 00111xx011}, 00x1x1111x \ {
   00x1111110, 00x1011111, 00x1x11111, 00x1x1111x, 001111111x, 0011x1111x}}

{x1x10 \ {x1110, 11110, x1010}, x11x0 \ {01100, 01110}}
{0xx10 \ {0x110, 00x10, 00x10}}
{
   0xx10x1x10 \ {
   0xx10x1110, 0xx1011110, 0xx10x1010, 0x110x1x10, 00x10x1x10, 00x10x1x10}, 0xx10x1110 \ {
   0xx1001110, 0x110x1110, 00x10x1110, 00x10x1110}}

{x110x \ {11100, x1100, x1101}}
{1xx1x \ {10010, 1x011, 1x01x}}
{}

{0100x \ {01000, 01001, 01001}, 1x0xx \ {1000x, 1101x, 110x1}}
{x110x \ {11101, 0110x}, 11xxx \ {11x10, 11x11, 11011}}
{
   x110x0100x \ {
   x110101000, x110001001, x110x01000, x110x01001, x110x01001, 111010100x, 0110x0100x}, 11x0x0100x \ {
   11x0101000, 11x0001001, 11x0x01000, 11x0x01001, 11x0x01001}, x110x1x00x \ {
   x11011x000, x11001x001, x110x1000x, x110x11001, 111011x00x, 0110x1x00x}, 11xxx1x0xx \ {
   11xx11x0x0, 11xx01x0x1, 11x1x1x00x, 11x0x1x01x, 11xxx1000x, 11xxx1101x, 11xxx110x1, 11x101x0xx, 11x111x0xx, 110111x0xx}}

{01xxx \ {01010, 01x0x, 01111}}
{x00x1 \ {00011, 100x1, 00001}}
{
   x00x101xx1 \ {
   x001101x01, x000101x11, x00x101x01, x00x101111, 0001101xx1, 100x101xx1, 0000101xx1}}

{1x0x1 \ {10001, 1x011, 100x1}, x0110 \ {10110, 00110, 00110}}
{1xxxx \ {11100, 101xx, 101xx}, x1xx1 \ {111x1, 11001, 010x1}}
{
   1xxx11x0x1 \ {
   1xx111x001, 1xx011x011, 1xxx110001, 1xxx11x011, 1xxx1100x1, 101x11x0x1, 101x11x0x1}, x1xx11x0x1 \ {
   x1x111x001, x1x011x011, x1xx110001, x1xx11x011, x1xx1100x1, 111x11x0x1, 110011x0x1, 010x11x0x1}, 1xx10x0110 \ {
   1xx1010110, 1xx1000110, 1xx1000110, 10110x0110, 10110x0110}}

{xx111 \ {01111, 10111, 10111}, 0xx10 \ {00x10, 00010, 01110}, x0x0x \ {1010x, 10001, x000x}}
{101xx \ {1011x, 101x0, 10110}, x111x \ {11111, 01111, 01111}, x11x1 \ {x1111, x1101, x1101}}
{
   10111xx111 \ {
   1011101111, 1011110111, 1011110111, 10111xx111}, x1111xx111 \ {
   x111101111, x111110111, x111110111, 11111xx111, 01111xx111, 01111xx111}, 101100xx10 \ {
   1011000x10, 1011000010, 1011001110, 101100xx10, 101100xx10, 101100xx10}, x11100xx10 \ {
   x111000x10, x111000010, x111001110}, 1010xx0x0x \ {
   10101x0x00, 10100x0x01, 1010x1010x, 1010x10001, 1010xx000x, 10100x0x0x}, x1101x0x01 \ {
   x110110101, x110110001, x1101x0001, x1101x0x01, x1101x0x01}}

{}
{x0xx1 \ {100x1, 000x1, 00x01}, 100xx \ {100x0, 10001, 100x1}}
{}

{x11xx \ {x111x, 011x0, x11x1}, 1xxxx \ {11xxx, 1111x, 11111}, 00xx0 \ {00010, 00100, 00110}}
{01xxx \ {011x0, 01101, 010x1}, 11xx0 \ {11000, 11010}}
{
   01xxxx11xx \ {
   01xx1x11x0, 01xx0x11x1, 01x1xx110x, 01x0xx111x, 01xxxx111x, 01xxx011x0, 01xxxx11x1, 011x0x11xx, 01101x11xx, 010x1x11xx}, 11xx0x11x0 \ {
   11x10x1100, 11x00x1110, 11xx0x1110, 11xx0011x0, 11000x11x0, 11010x11x0}, 01xxx1xxxx \ {
   01xx11xxx0, 01xx01xxx1, 01x1x1xx0x, 01x0x1xx1x, 01xxx11xxx, 01xxx1111x, 01xxx11111, 011x01xxxx, 011011xxxx, 010x11xxxx}, 11xx01xxx0 \ {
   11x101xx00, 11x001xx10, 11xx011xx0, 11xx011110, 110001xxx0, 110101xxx0}, 01xx000xx0 \ {
   01x1000x00, 01x0000x10, 01xx000010, 01xx000100, 01xx000110, 011x000xx0}, 11xx000xx0 \ {
   11x1000x00, 11x0000x10, 11xx000010, 11xx000100, 11xx000110, 1100000xx0, 1101000xx0}}

{xxx01 \ {0x101, x0x01, 00001}, x01x0 \ {00100, 101x0}}
{xxx1x \ {x1x10, 01111, x0x10}}
{
   xxx10x0110 \ {
   xxx1010110, x1x10x0110, x0x10x0110}}

{x1xx0 \ {01x10, 11x10, x1x00}, x11x1 \ {011x1, 11101, 11101}}
{x010x \ {00101, x0101}, 01xxx \ {01011, 01x10, 0101x}, x00x1 \ {00001, 10011, 000x1}}
{
   x0100x1x00 \ {
   x0100x1x00}, 01xx0x1xx0 \ {
   01x10x1x00, 01x00x1x10, 01xx001x10, 01xx011x10, 01xx0x1x00, 01x10x1xx0, 01010x1xx0}, x0101x1101 \ {
   x010101101, x010111101, x010111101, 00101x1101, x0101x1101}, 01xx1x11x1 \ {
   01x11x1101, 01x01x1111, 01xx1011x1, 01xx111101, 01xx111101, 01011x11x1, 01011x11x1}, x00x1x11x1 \ {
   x0011x1101, x0001x1111, x00x1011x1, x00x111101, x00x111101, 00001x11x1, 10011x11x1, 000x1x11x1}}

{}
{x1x1x \ {x1110, 01010, 1101x}}
{}

{xx0x0 \ {x10x0, 10000, 01010}, 1x1x1 \ {11101, 11111, 10101}}
{x0xx0 \ {x0x00, 00x10}}
{
   x0xx0xx0x0 \ {
   x0x10xx000, x0x00xx010, x0xx0x10x0, x0xx010000, x0xx001010, x0x00xx0x0, 00x10xx0x0}}

{}
{xx0xx \ {x00x1, 11010, x1000}}
{}

{001xx \ {00100, 0010x, 0011x}, 01x0x \ {01100, 01x00, 01x00}}
{xx0xx \ {00001, 11011, 00010}}
{
   xx0xx001xx \ {
   xx0x1001x0, xx0x0001x1, xx01x0010x, xx00x0011x, xx0xx00100, xx0xx0010x, xx0xx0011x, 00001001xx, 11011001xx, 00010001xx}, xx00x01x0x \ {
   xx00101x00, xx00001x01, xx00x01100, xx00x01x00, xx00x01x00, 0000101x0x}}

{110x0 \ {11010, 11000}, x100x \ {01001, 1100x, 0100x}}
{1x001 \ {10001, 11001, 11001}, 1011x \ {10111, 10110, 10110}}
{
   1011011010 \ {
   1011011010, 1011011010, 1011011010}, 1x001x1001 \ {
   1x00101001, 1x00111001, 1x00101001, 10001x1001, 11001x1001, 11001x1001}}

{xx0x0 \ {x1000, 11010, 01010}}
{1x0xx \ {1x0x1, 1001x, 10000}, 011x1 \ {01101}, xx10x \ {xx101, 0110x, x010x}}
{
   1x0x0xx0x0 \ {
   1x010xx000, 1x000xx010, 1x0x0x1000, 1x0x011010, 1x0x001010, 10010xx0x0, 10000xx0x0}, xx100xx000 \ {
   xx100x1000, 01100xx000, x0100xx000}}

{x01x0 \ {x0110, 00100}}
{0x0xx \ {00000, 010x0, 01001}, 01x11 \ {01111, 01011}, 01xx0 \ {01100, 01010, 01010}}
{
   0x0x0x01x0 \ {
   0x010x0100, 0x000x0110, 0x0x0x0110, 0x0x000100, 00000x01x0, 010x0x01x0}, 01xx0x01x0 \ {
   01x10x0100, 01x00x0110, 01xx0x0110, 01xx000100, 01100x01x0, 01010x01x0, 01010x01x0}}

{1xx10 \ {10x10, 10110, 10110}, xxx1x \ {1001x, 0011x, x1010}, 1xx10 \ {10110, 1x110, 11010}}
{0x10x \ {01101, 00100, 01100}}
{}

{0x1x0 \ {01110, 011x0, 0x110}, x100x \ {11000, 0100x, 01001}, x11xx \ {011x0, 11111, x11x1}}
{011x0 \ {01110}, x1xxx \ {11x10, 01100, 110x0}}
{
   011x00x1x0 \ {
   011100x100, 011000x110, 011x001110, 011x0011x0, 011x00x110, 011100x1x0}, x1xx00x1x0 \ {
   x1x100x100, x1x000x110, x1xx001110, x1xx0011x0, x1xx00x110, 11x100x1x0, 011000x1x0, 110x00x1x0}, 01100x1000 \ {
   0110011000, 0110001000}, x1x0xx100x \ {
   x1x01x1000, x1x00x1001, x1x0x11000, x1x0x0100x, x1x0x01001, 01100x100x, 11000x100x}, 011x0x11x0 \ {
   01110x1100, 01100x1110, 011x0011x0, 01110x11x0}, x1xxxx11xx \ {
   x1xx1x11x0, x1xx0x11x1, x1x1xx110x, x1x0xx111x, x1xxx011x0, x1xxx11111, x1xxxx11x1, 11x10x11xx, 01100x11xx, 110x0x11xx}}

{0x10x \ {0010x, 01101, 00101}, x1000 \ {11000, 01000}}
{11xxx \ {11000, 11010, 11x00}, xx001 \ {00001, 1x001}}
{
   11x0x0x10x \ {
   11x010x100, 11x000x101, 11x0x0010x, 11x0x01101, 11x0x00101, 110000x10x, 11x000x10x}, xx0010x101 \ {
   xx00100101, xx00101101, xx00100101, 000010x101, 1x0010x101}, 11x00x1000 \ {
   11x0011000, 11x0001000, 11000x1000, 11x00x1000}}

{10x0x \ {10101, 10000}, 0xx0x \ {00x01, 01x00, 01100}}
{xx011 \ {01011, x1011}, x011x \ {x0110, 1011x, 10110}}
{}

{x0xx1 \ {10011, x01x1, 10101}, x1xxx \ {x10x1, 11011, 110x0}}
{xx0x0 \ {01010, 1x000, x1010}, 0xxx0 \ {01110, 00000, 001x0}, 10xx1 \ {10111, 101x1, 10101}}
{
   10xx1x0xx1 \ {
   10x11x0x01, 10x01x0x11, 10xx110011, 10xx1x01x1, 10xx110101, 10111x0xx1, 101x1x0xx1, 10101x0xx1}, xx0x0x1xx0 \ {
   xx010x1x00, xx000x1x10, xx0x0110x0, 01010x1xx0, 1x000x1xx0, x1010x1xx0}, 0xxx0x1xx0 \ {
   0xx10x1x00, 0xx00x1x10, 0xxx0110x0, 01110x1xx0, 00000x1xx0, 001x0x1xx0}, 10xx1x1xx1 \ {
   10x11x1x01, 10x01x1x11, 10xx1x10x1, 10xx111011, 10111x1xx1, 101x1x1xx1, 10101x1xx1}}

{x0x00 \ {10x00, 00x00, x0000}, 0xx00 \ {00000, 01000, 00100}}
{1000x \ {10001, 10000}}
{
   10000x0x00 \ {
   1000010x00, 1000000x00, 10000x0000, 10000x0x00}, 100000xx00 \ {
   1000000000, 1000001000, 1000000100, 100000xx00}}

{x101x \ {01010, 11011, 11011}, 10xxx \ {1001x, 100xx, 10000}}
{111xx \ {11110, 11111, 1111x}, 011xx \ {01110, 01101, 011x1}}
{
   1111xx101x \ {
   11111x1010, 11110x1011, 1111x01010, 1111x11011, 1111x11011, 11110x101x, 11111x101x, 1111xx101x}, 0111xx101x \ {
   01111x1010, 01110x1011, 0111x01010, 0111x11011, 0111x11011, 01110x101x, 01111x101x}, 111xx10xxx \ {
   111x110xx0, 111x010xx1, 1111x10x0x, 1110x10x1x, 111xx1001x, 111xx100xx, 111xx10000, 1111010xxx, 1111110xxx, 1111x10xxx}, 011xx10xxx \ {
   011x110xx0, 011x010xx1, 0111x10x0x, 0110x10x1x, 011xx1001x, 011xx100xx, 011xx10000, 0111010xxx, 0110110xxx, 011x110xxx}}

{x1x11 \ {01011, 01x11}, xxx01 \ {01x01, 00101, x0x01}}
{xx111 \ {10111, x1111, x1111}, x1xx1 \ {01x11, 11x11, x1x11}}
{
   xx111x1x11 \ {
   xx11101011, xx11101x11, 10111x1x11, x1111x1x11, x1111x1x11}, x1x11x1x11 \ {
   x1x1101011, x1x1101x11, 01x11x1x11, 11x11x1x11, x1x11x1x11}, x1x01xxx01 \ {
   x1x0101x01, x1x0100101, x1x01x0x01}}

{}
{x11xx \ {1110x, x11x0, 111x1}, 00x0x \ {00x01, 0010x, 00100}}
{}

{1xxx1 \ {1x001, 1xx01, 11x11}, x1xxx \ {01001, x100x, 11001}}
{xxx10 \ {x0010, x0x10, xx010}, 1xx10 \ {10110, 11110, 11110}}
{
   xxx10x1x10 \ {
   x0010x1x10, x0x10x1x10, xx010x1x10}, 1xx10x1x10 \ {
   10110x1x10, 11110x1x10, 11110x1x10}}

{x11x0 \ {01100, 011x0, 11110}, 0100x \ {01000, 01001}}
{010x0 \ {01000, 01010, 01010}, 0xx01 \ {0x001, 00101}}
{
   010x0x11x0 \ {
   01010x1100, 01000x1110, 010x001100, 010x0011x0, 010x011110, 01000x11x0, 01010x11x0, 01010x11x0}, 0100001000 \ {
   0100001000, 0100001000}, 0xx0101001 \ {
   0xx0101001, 0x00101001, 0010101001}}

{1x000 \ {10000, 11000}, x0x10 \ {00110, 10110}, 01xx0 \ {01000, 01010}}
{}
{}

{0xx1x \ {0001x, 00x10, 0x01x}, 1x1x1 \ {10111, 101x1, 10101}}
{x0xxx \ {10xx1, x0001, 101x1}, 00x1x \ {00x11, 00011, 00011}}
{
   x0x1x0xx1x \ {
   x0x110xx10, x0x100xx11, x0x1x0001x, x0x1x00x10, x0x1x0x01x, 10x110xx1x, 101110xx1x}, 00x1x0xx1x \ {
   00x110xx10, 00x100xx11, 00x1x0001x, 00x1x00x10, 00x1x0x01x, 00x110xx1x, 000110xx1x, 000110xx1x}, x0xx11x1x1 \ {
   x0x111x101, x0x011x111, x0xx110111, x0xx1101x1, x0xx110101, 10xx11x1x1, x00011x1x1, 101x11x1x1}, 00x111x111 \ {
   00x1110111, 00x1110111, 00x111x111, 000111x111, 000111x111}}

{x10x0 \ {11000, 010x0, 01000}, x11x0 \ {x1110, 01110, 11100}, x001x \ {x0011, 00011, 10010}}
{0x011 \ {01011}}
{
   0x011x0011 \ {
   0x011x0011, 0x01100011, 01011x0011}}

{111x1 \ {11111}}
{x111x \ {0111x, x1110, 11111}, 1xx10 \ {11010, 10x10, 1x110}}
{
   x111111111 \ {
   x111111111, 0111111111, 1111111111}}

{110x0 \ {11010, 11000}}
{x10xx \ {110x1, 010x0, x1000}}
{
   x10x0110x0 \ {
   x101011000, x100011010, x10x011010, x10x011000, 010x0110x0, x1000110x0}}

{x11xx \ {x1100, x1101}, x0xx1 \ {10001, 101x1, x0x11}, 11x0x \ {1110x, 11100, 11100}}
{x0xxx \ {00xx0, 000x0, 101x1}}
{
   x0xxxx11xx \ {
   x0xx1x11x0, x0xx0x11x1, x0x1xx110x, x0x0xx111x, x0xxxx1100, x0xxxx1101, 00xx0x11xx, 000x0x11xx, 101x1x11xx}, x0xx1x0xx1 \ {
   x0x11x0x01, x0x01x0x11, x0xx110001, x0xx1101x1, x0xx1x0x11, 101x1x0xx1}, x0x0x11x0x \ {
   x0x0111x00, x0x0011x01, x0x0x1110x, x0x0x11100, x0x0x11100, 00x0011x0x, 0000011x0x, 1010111x0x}}

{1000x \ {10001, 10000}}
{}
{}

{xx001 \ {x1001, 01001, 00001}, x1x11 \ {11x11, 01111}, 0xx00 \ {00000, 0x000, 00100}}
{x01xx \ {x0111, 00101, 10111}, 110xx \ {11001, 11011, 1101x}}
{
   x0101xx001 \ {
   x0101x1001, x010101001, x010100001, 00101xx001}, 11001xx001 \ {
   11001x1001, 1100101001, 1100100001, 11001xx001}, x0111x1x11 \ {
   x011111x11, x011101111, x0111x1x11, 10111x1x11}, 11011x1x11 \ {
   1101111x11, 1101101111, 11011x1x11, 11011x1x11}, x01000xx00 \ {
   x010000000, x01000x000, x010000100}, 110000xx00 \ {
   1100000000, 110000x000, 1100000100}}

{0xxx1 \ {010x1, 00x01, 000x1}, x0xxx \ {x0x00, 00101, 10x11}}
{00x00 \ {00100, 00000}, x11xx \ {11101, 011x1, 011xx}}
{
   x11x10xxx1 \ {
   x11110xx01, x11010xx11, x11x1010x1, x11x100x01, x11x1000x1, 111010xxx1, 011x10xxx1, 011x10xxx1}, 00x00x0x00 \ {
   00x00x0x00, 00100x0x00, 00000x0x00}, x11xxx0xxx \ {
   x11x1x0xx0, x11x0x0xx1, x111xx0x0x, x110xx0x1x, x11xxx0x00, x11xx00101, x11xx10x11, 11101x0xxx, 011x1x0xxx, 011xxx0xxx}}

{0xx01 \ {00001, 01001, 01001}, 10xx0 \ {10110, 10100}}
{11x01 \ {11001, 11101, 11101}}
{
   11x010xx01 \ {
   11x0100001, 11x0101001, 11x0101001, 110010xx01, 111010xx01, 111010xx01}}

{xxx1x \ {00x11, 1111x, 0001x}, xx0xx \ {x1001, 010x0, xx011}}
{}
{}

{xx1xx \ {00100, 011xx, x1101}, x1xxx \ {01xx0, 010x1, x11x1}, xxx10 \ {10010, 10110, 01010}}
{x01x1 \ {x0111, 101x1, 10111}}
{
   x01x1xx1x1 \ {
   x0111xx101, x0101xx111, x01x1011x1, x01x1x1101, x0111xx1x1, 101x1xx1x1, 10111xx1x1}, x01x1x1xx1 \ {
   x0111x1x01, x0101x1x11, x01x1010x1, x01x1x11x1, x0111x1xx1, 101x1x1xx1, 10111x1xx1}}

{11xx0 \ {110x0, 11000, 11x00}}
{x01xx \ {101x1, 0010x, 00101}}
{
   x01x011xx0 \ {
   x011011x00, x010011x10, x01x0110x0, x01x011000, x01x011x00, 0010011xx0}}

{0xx11 \ {01x11, 00x11, 00x11}, 011xx \ {01100, 011x0, 011x1}, 10xx1 \ {101x1, 10x01, 10101}}
{xx1x1 \ {111x1, 0x1x1, 0x1x1}, 0x1x0 \ {01100, 0x110}}
{
   xx1110xx11 \ {
   xx11101x11, xx11100x11, xx11100x11, 111110xx11, 0x1110xx11, 0x1110xx11}, xx1x1011x1 \ {
   xx11101101, xx10101111, xx1x1011x1, 111x1011x1, 0x1x1011x1, 0x1x1011x1}, 0x1x0011x0 \ {
   0x11001100, 0x10001110, 0x1x001100, 0x1x0011x0, 01100011x0, 0x110011x0}, xx1x110xx1 \ {
   xx11110x01, xx10110x11, xx1x1101x1, xx1x110x01, xx1x110101, 111x110xx1, 0x1x110xx1, 0x1x110xx1}}

{x1x00 \ {x1000, 11x00, x1100}}
{xx011 \ {0x011, x1011}, x11xx \ {01110, 01111, 111xx}}
{
   x1100x1x00 \ {
   x1100x1000, x110011x00, x1100x1100, 11100x1x00}}

{11xx0 \ {11x10, 11110, 11010}, 1x1x0 \ {10110, 1x100, 1x100}}
{x0x0x \ {00001, x000x, 00101}, xx1x1 \ {11111, xx111, 011x1}}
{
   x0x0011x00 \ {
   x000011x00}, x0x001x100 \ {
   x0x001x100, x0x001x100, x00001x100}}

{0xxx0 \ {0x010, 01010, 00110}}
{x101x \ {11010, 01011, 01010}}
{
   x10100xx10 \ {
   x10100x010, x101001010, x101000110, 110100xx10, 010100xx10}}

{1x00x \ {1100x, 10000, 11000}, 00x10 \ {00010, 00110}}
{xx1xx \ {x0101, 011xx, 101x1}, 101xx \ {10111, 10101, 101x1}, xx100 \ {01100, 1x100, 1x100}}
{
   xx10x1x00x \ {
   xx1011x000, xx1001x001, xx10x1100x, xx10x10000, xx10x11000, x01011x00x, 0110x1x00x, 101011x00x}, 1010x1x00x \ {
   101011x000, 101001x001, 1010x1100x, 1010x10000, 1010x11000, 101011x00x, 101011x00x}, xx1001x000 \ {
   xx10011000, xx10010000, xx10011000, 011001x000, 1x1001x000, 1x1001x000}, xx11000x10 \ {
   xx11000010, xx11000110, 0111000x10}, 1011000x10 \ {
   1011000010, 1011000110}}

{10xx1 \ {10011, 10111, 10001}}
{010x1 \ {01001, 01011}, 111x0 \ {11100, 11110}}
{
   010x110xx1 \ {
   0101110x01, 0100110x11, 010x110011, 010x110111, 010x110001, 0100110xx1, 0101110xx1}}

{1x1x1 \ {11111, 10111, 101x1}}
{1x11x \ {1011x, 10110, 1111x}}
{
   1x1111x111 \ {
   1x11111111, 1x11110111, 1x11110111, 101111x111, 111111x111}}

{x00x0 \ {00010, 10010, 100x0}}
{x00x1 \ {00011, 10011}, 00x0x \ {00000, 00x01, 00001}}
{
   00x00x0000 \ {
   00x0010000, 00000x0000}}

{x10x0 \ {11000, 11010, 01000}}
{1xxx1 \ {11111, 10101, 11x01}}
{}

{}
{0xx0x \ {00101, 0xx01, 00000}, 0x0x0 \ {0x010, 000x0, 00000}}
{}

{0xx01 \ {00101, 00001, 00x01}, 01x11 \ {01111, 01011}}
{}
{}

{x1xx1 \ {x1x01, 01011, x11x1}}
{0x1x0 \ {0x100, 01110, 01110}, x00x0 \ {10010, 100x0, 100x0}}
{}

{0xx10 \ {0x010, 00110, 01010}, 10x11 \ {10011, 10111}}
{}
{}

{xx011 \ {1x011, x0011}, 010x1 \ {01001, 01011}}
{xx0xx \ {100xx, 1x011, xx0x0}}
{
   xx011xx011 \ {
   xx0111x011, xx011x0011, 10011xx011, 1x011xx011}, xx0x1010x1 \ {
   xx01101001, xx00101011, xx0x101001, xx0x101011, 100x1010x1, 1x011010x1}}

{}
{xxxx0 \ {xx100, xx010, 10x10}}
{}

{xxxx0 \ {1x100, x1x10, x1110}}
{x010x \ {x0101, 10100}, x0011 \ {10011, 00011}, x11x0 \ {01100, 11100, x1100}}
{
   x0100xxx00 \ {
   x01001x100, 10100xxx00}, x11x0xxxx0 \ {
   x1110xxx00, x1100xxx10, x11x01x100, x11x0x1x10, x11x0x1110, 01100xxxx0, 11100xxxx0, x1100xxxx0}}

{x0x00 \ {x0000, 00x00, 00000}, 0x1xx \ {0x100, 0111x, 011x0}}
{1x1x1 \ {11101, 11111}, x1x10 \ {11010, 01x10, 01010}, x0x01 \ {00101, x0101}}
{
   1x1x10x1x1 \ {
   1x1110x101, 1x1010x111, 1x1x101111, 111010x1x1, 111110x1x1}, x1x100x110 \ {
   x1x1001110, x1x1001110, 110100x110, 01x100x110, 010100x110}, x0x010x101 \ {
   001010x101, x01010x101}}

{0x01x \ {00010, 0001x, 0001x}}
{0x0x1 \ {0x001, 010x1, 0x011}}
{
   0x0110x011 \ {
   0x01100011, 0x01100011, 010110x011, 0x0110x011}}

{}
{}
{}

{00xxx \ {000x1, 00101}, 01x0x \ {0110x, 01100}}
{01x10 \ {01010, 01110}, 1x00x \ {11001, 1100x, 10000}}
{
   01x1000x10 \ {
   0101000x10, 0111000x10}, 1x00x00x0x \ {
   1x00100x00, 1x00000x01, 1x00x00001, 1x00x00101, 1100100x0x, 1100x00x0x, 1000000x0x}, 1x00x01x0x \ {
   1x00101x00, 1x00001x01, 1x00x0110x, 1x00x01100, 1100101x0x, 1100x01x0x, 1000001x0x}}

{0x11x \ {0x111, 00111, 0x110}, 1xxx0 \ {10x10, 10x00, 1x0x0}, 0xxx1 \ {01001, 00x11, 0xx11}}
{1xx10 \ {10010, 1x110, 10x10}, 111xx \ {111x0, 11110, 111x1}}
{
   1xx100x110 \ {
   1xx100x110, 100100x110, 1x1100x110, 10x100x110}, 1111x0x11x \ {
   111110x110, 111100x111, 1111x0x111, 1111x00111, 1111x0x110, 111100x11x, 111100x11x, 111110x11x}, 1xx101xx10 \ {
   1xx1010x10, 1xx101x010, 100101xx10, 1x1101xx10, 10x101xx10}, 111x01xxx0 \ {
   111101xx00, 111001xx10, 111x010x10, 111x010x00, 111x01x0x0, 111x01xxx0, 111101xxx0}, 111x10xxx1 \ {
   111110xx01, 111010xx11, 111x101001, 111x100x11, 111x10xx11, 111x10xxx1}}

{x1x00 \ {01x00, 11x00, x1000}}
{01xxx \ {0111x, 011x1, 01x0x}}
{
   01x00x1x00 \ {
   01x0001x00, 01x0011x00, 01x00x1000, 01x00x1x00}}

{010xx \ {01000, 0101x, 01011}}
{1x110 \ {11110, 10110}, 0011x \ {00111, 00110}}
{
   1x11001010 \ {
   1x11001010, 1111001010, 1011001010}, 0011x0101x \ {
   0011101010, 0011001011, 0011x0101x, 0011x01011, 001110101x, 001100101x}}

{x01x0 \ {x0110, x0100}, 1x101 \ {10101}}
{x0x1x \ {x001x, 10x11, 00111}}
{
   x0x10x0110 \ {
   x0x10x0110, x0010x0110}}

{101x1 \ {10101, 10111, 10111}, 0010x \ {00101, 00100, 00100}}
{0x1x1 \ {01101, 00111}, xxx00 \ {xx100, 11000, 10000}}
{
   0x1x1101x1 \ {
   0x11110101, 0x10110111, 0x1x110101, 0x1x110111, 0x1x110111, 01101101x1, 00111101x1}, 0x10100101 \ {
   0x10100101, 0110100101}, xxx0000100 \ {
   xxx0000100, xxx0000100, xx10000100, 1100000100, 1000000100}}

{}
{01x10 \ {01110, 01010}}
{}

{11xxx \ {11x1x, 11001, 11x01}, 011x0 \ {01110, 01100}}
{0xx10 \ {00010, 01x10, 00110}}
{
   0xx1011x10 \ {
   0xx1011x10, 0001011x10, 01x1011x10, 0011011x10}, 0xx1001110 \ {
   0xx1001110, 0001001110, 01x1001110, 0011001110}}

{1x10x \ {11100, 1010x, 1x101}, 1xx1x \ {10011, 1xx10, 1101x}}
{10x10 \ {10110}, 01xxx \ {010xx, 01010, 01xx1}, xx1xx \ {0x1xx, x01xx, xx11x}}
{
   01x0x1x10x \ {
   01x011x100, 01x001x101, 01x0x11100, 01x0x1010x, 01x0x1x101, 0100x1x10x, 01x011x10x}, xx10x1x10x \ {
   xx1011x100, xx1001x101, xx10x11100, xx10x1010x, xx10x1x101, 0x10x1x10x, x010x1x10x}, 10x101xx10 \ {
   10x101xx10, 10x1011010, 101101xx10}, 01x1x1xx1x \ {
   01x111xx10, 01x101xx11, 01x1x10011, 01x1x1xx10, 01x1x1101x, 0101x1xx1x, 010101xx1x, 01x111xx1x}, xx11x1xx1x \ {
   xx1111xx10, xx1101xx11, xx11x10011, xx11x1xx10, xx11x1101x, 0x11x1xx1x, x011x1xx1x, xx11x1xx1x}}

{01x0x \ {01101, 0110x, 01x01}, 00x10 \ {00010, 00110, 00110}}
{001x1 \ {00101, 00111}, x0xx1 \ {00x01, x0011, 10x01}}
{
   0010101x01 \ {
   0010101101, 0010101101, 0010101x01, 0010101x01}, x0x0101x01 \ {
   x0x0101101, x0x0101101, x0x0101x01, 00x0101x01, 10x0101x01}}

{xx101 \ {01101, x1101, x0101}, 101x0 \ {10110, 10100}, 11x00 \ {11000}}
{}
{}

{10x11 \ {10111, 10011, 10011}, xx001 \ {x0001, 01001, 01001}}
{}
{}

{0xx0x \ {01x01, 0x10x}}
{}
{}

{10xx0 \ {10100, 10110, 10010}, xx0xx \ {000x1, 10001, x00xx}}
{}
{}

{0xxx0 \ {01x10, 00100, 0xx10}, 0110x \ {01100, 01101}}
{01x1x \ {0101x, 01110, 01x11}, 1x01x \ {1x011, 1001x, 1001x}}
{
   01x100xx10 \ {
   01x1001x10, 01x100xx10, 010100xx10, 011100xx10}, 1x0100xx10 \ {
   1x01001x10, 1x0100xx10, 100100xx10, 100100xx10}}

{0x0xx \ {010x0, 010x1, 01001}, 0x0xx \ {0x0x1, 01000, 0100x}, 11x10 \ {11110, 11010}}
{011x0 \ {01100}, 110x0 \ {11000}}
{
   011x00x0x0 \ {
   011100x000, 011000x010, 011x001000, 011x001000, 011000x0x0}, 110x00x0x0 \ {
   110100x000, 110000x010, 110x001000, 110x001000, 110000x0x0}, 0111011x10 \ {
   0111011110, 0111011010}, 1101011x10 \ {
   1101011110, 1101011010}}

{x11x0 \ {011x0, x1110, 111x0}, 0xx01 \ {00001, 01101, 00101}}
{x000x \ {10000, 10001, 00001}}
{
   x0000x1100 \ {
   x000001100, x000011100, 10000x1100}, x00010xx01 \ {
   x000100001, x000101101, x000100101, 100010xx01, 000010xx01}}

{10xxx \ {10001, 10x0x, 10100}, xx0x1 \ {0x0x1, xx001, x0011}}
{0xx1x \ {0x11x, 0x010, 0111x}, 000xx \ {0000x, 00001, 0001x}}
{
   0xx1x10x1x \ {
   0xx1110x10, 0xx1010x11, 0x11x10x1x, 0x01010x1x, 0111x10x1x}, 000xx10xxx \ {
   000x110xx0, 000x010xx1, 0001x10x0x, 0000x10x1x, 000xx10001, 000xx10x0x, 000xx10100, 0000x10xxx, 0000110xxx, 0001x10xxx}, 0xx11xx011 \ {
   0xx110x011, 0xx11x0011, 0x111xx011, 01111xx011}, 000x1xx0x1 \ {
   00011xx001, 00001xx011, 000x10x0x1, 000x1xx001, 000x1x0011, 00001xx0x1, 00001xx0x1, 00011xx0x1}}

{x00xx \ {1000x, x001x, 100xx}, xxx10 \ {01x10, 10x10, 00x10}}
{01xxx \ {01010, 01101, 01110}, x100x \ {01001, 01000, 11001}}
{
   01xxxx00xx \ {
   01xx1x00x0, 01xx0x00x1, 01x1xx000x, 01x0xx001x, 01xxx1000x, 01xxxx001x, 01xxx100xx, 01010x00xx, 01101x00xx, 01110x00xx}, x100xx000x \ {
   x1001x0000, x1000x0001, x100x1000x, x100x1000x, 01001x000x, 01000x000x, 11001x000x}, 01x10xxx10 \ {
   01x1001x10, 01x1010x10, 01x1000x10, 01010xxx10, 01110xxx10}}

{00x10 \ {00110, 00010}}
{00xxx \ {00101, 0010x, 001x0}}
{
   00x1000x10 \ {
   00x1000110, 00x1000010, 0011000x10}}

{111xx \ {111x0, 11100}}
{x101x \ {x1011, 01011}, x11xx \ {x11x0, 11100, x110x}}
{
   x101x1111x \ {
   x101111110, x101011111, x101x11110, x10111111x, 010111111x}, x11xx111xx \ {
   x11x1111x0, x11x0111x1, x111x1110x, x110x1111x, x11xx111x0, x11xx11100, x11x0111xx, 11100111xx, x110x111xx}}

{x00xx \ {10000, x0011, x00x0}, xx1x0 \ {0x1x0, xx110, xx100}}
{10x1x \ {10110, 10x11}, x110x \ {x1101, 0110x, 1110x}}
{
   10x1xx001x \ {
   10x11x0010, 10x10x0011, 10x1xx0011, 10x1xx0010, 10110x001x, 10x11x001x}, x110xx000x \ {
   x1101x0000, x1100x0001, x110x10000, x110xx0000, x1101x000x, 0110xx000x, 1110xx000x}, 10x10xx110 \ {
   10x100x110, 10x10xx110, 10110xx110}, x1100xx100 \ {
   x11000x100, x1100xx100, 01100xx100, 11100xx100}}

{x011x \ {10110, 00111, x0111}}
{0x1x1 \ {001x1, 00101, 011x1}, 000x1 \ {00001}}
{
   0x111x0111 \ {
   0x11100111, 0x111x0111, 00111x0111, 01111x0111}, 00011x0111 \ {
   0001100111, 00011x0111}}

{xxxxx \ {10101, x1xx1, xx1xx}, 0xx10 \ {0x110, 01110, 01010}}
{10x01 \ {10101}, x1x0x \ {x1100, 1110x, x110x}}
{
   10x01xxx01 \ {
   10x0110101, 10x01x1x01, 10x01xx101, 10101xxx01}, x1x0xxxx0x \ {
   x1x01xxx00, x1x00xxx01, x1x0x10101, x1x0xx1x01, x1x0xxx10x, x1100xxx0x, 1110xxxx0x, x110xxxx0x}}

{1x1x1 \ {11111, 11101, 10111}}
{x110x \ {0110x, 11101}}
{
   x11011x101 \ {
   x110111101, 011011x101, 111011x101}}

{}
{xx001 \ {1x001, 11001, 11001}}
{}

{00x0x \ {00x00, 00x01, 0010x}, 0110x \ {01101}, x01x0 \ {x0110, 10110, 10110}}
{}
{}

{1x0xx \ {100x1, 1x000}}
{xxx01 \ {11001, 10x01, 01101}, x0x0x \ {10000, 00101, x0101}, 0x10x \ {00100, 0010x, 0010x}}
{
   xxx011x001 \ {
   xxx0110001, 110011x001, 10x011x001, 011011x001}, x0x0x1x00x \ {
   x0x011x000, x0x001x001, x0x0x10001, x0x0x1x000, 100001x00x, 001011x00x, x01011x00x}, 0x10x1x00x \ {
   0x1011x000, 0x1001x001, 0x10x10001, 0x10x1x000, 001001x00x, 0010x1x00x, 0010x1x00x}}

{xx10x \ {x110x, 10101, 11100}}
{1011x \ {10111, 10110, 10110}, x0xxx \ {x0100, 00100, 00001}}
{
   x0x0xxx10x \ {
   x0x01xx100, x0x00xx101, x0x0xx110x, x0x0x10101, x0x0x11100, x0100xx10x, 00100xx10x, 00001xx10x}}

{x1x11 \ {x1011, 11011, 11x11}, xx10x \ {1110x, 1x100, 0x100}}
{xxx1x \ {x1110, 00111, 01x1x}}
{
   xxx11x1x11 \ {
   xxx11x1011, xxx1111011, xxx1111x11, 00111x1x11, 01x11x1x11}}

{x0x11 \ {10011, x0111, 00x11}}
{xxxx1 \ {0x101, 000x1, 00101}}
{
   xxx11x0x11 \ {
   xxx1110011, xxx11x0111, xxx1100x11, 00011x0x11}}

{01xxx \ {011x0, 01x00, 01x01}, x1xxx \ {11101, 11011, x1x11}}
{xx111 \ {x1111, 1x111, x0111}, x0xx1 \ {10001, 10111, 001x1}}
{
   xx11101x11 \ {
   x111101x11, 1x11101x11, x011101x11}, x0xx101xx1 \ {
   x0x1101x01, x0x0101x11, x0xx101x01, 1000101xx1, 1011101xx1, 001x101xx1}, xx111x1x11 \ {
   xx11111011, xx111x1x11, x1111x1x11, 1x111x1x11, x0111x1x11}, x0xx1x1xx1 \ {
   x0x11x1x01, x0x01x1x11, x0xx111101, x0xx111011, x0xx1x1x11, 10001x1xx1, 10111x1xx1, 001x1x1xx1}}

{xx001 \ {1x001, 0x001, 10001}, 011xx \ {0110x, 01101, 0111x}}
{100xx \ {10001, 100x1}}
{
   10001xx001 \ {
   100011x001, 100010x001, 1000110001, 10001xx001, 10001xx001}, 100xx011xx \ {
   100x1011x0, 100x0011x1, 1001x0110x, 1000x0111x, 100xx0110x, 100xx01101, 100xx0111x, 10001011xx, 100x1011xx}}

{01xx1 \ {01111, 01001}}
{x0xx1 \ {00001, x00x1, x0001}}
{
   x0xx101xx1 \ {
   x0x1101x01, x0x0101x11, x0xx101111, x0xx101001, 0000101xx1, x00x101xx1, x000101xx1}}

{x110x \ {1110x, 01101, x1101}, x11x0 \ {11100, 011x0}}
{x011x \ {00110, 0011x, 1011x}, 01xxx \ {010x1, 01100}}
{
   01x0xx110x \ {
   01x01x1100, 01x00x1101, 01x0x1110x, 01x0x01101, 01x0xx1101, 01001x110x, 01100x110x}, x0110x1110 \ {
   x011001110, 00110x1110, 00110x1110, 10110x1110}, 01xx0x11x0 \ {
   01x10x1100, 01x00x1110, 01xx011100, 01xx0011x0, 01100x11x0}}

{11xx1 \ {11101, 11111, 111x1}}
{1x001 \ {11001, 10001}, xxxx0 \ {101x0, 0xx10, 1x100}, 1xxx1 \ {10xx1, 10101, 1xx01}}
{
   1x00111x01 \ {
   1x00111101, 1x00111101, 1100111x01, 1000111x01}, 1xxx111xx1 \ {
   1xx1111x01, 1xx0111x11, 1xxx111101, 1xxx111111, 1xxx1111x1, 10xx111xx1, 1010111xx1, 1xx0111xx1}}

{x011x \ {x0111, 1011x, 00110}}
{x0010 \ {10010, 00010, 00010}, 00x1x \ {00010, 00011, 00110}}
{
   x0010x0110 \ {
   x001010110, x001000110, 10010x0110, 00010x0110, 00010x0110}, 00x1xx011x \ {
   00x11x0110, 00x10x0111, 00x1xx0111, 00x1x1011x, 00x1x00110, 00010x011x, 00011x011x, 00110x011x}}

{x010x \ {00100, x0100, 10100}, 01x10 \ {01110, 01010}}
{0xx0x \ {0xx01, 0000x, 0x100}}
{
   0xx0xx010x \ {
   0xx01x0100, 0xx00x0101, 0xx0x00100, 0xx0xx0100, 0xx0x10100, 0xx01x010x, 0000xx010x, 0x100x010x}}

{011xx \ {011x0, 01101, 0111x}, xx1xx \ {x110x, x01x0, 0111x}}
{00x01 \ {00101, 00001}, 0xxx1 \ {00111, 00001, 00011}}
{
   00x0101101 \ {
   00x0101101, 0010101101, 0000101101}, 0xxx1011x1 \ {
   0xx1101101, 0xx0101111, 0xxx101101, 0xxx101111, 00111011x1, 00001011x1, 00011011x1}, 00x01xx101 \ {
   00x01x1101, 00101xx101, 00001xx101}, 0xxx1xx1x1 \ {
   0xx11xx101, 0xx01xx111, 0xxx1x1101, 0xxx101111, 00111xx1x1, 00001xx1x1, 00011xx1x1}}

{111xx \ {111x1, 1111x, 1111x}, x011x \ {x0111, 00110}}
{xx11x \ {xx110, x1111, 01111}, x10xx \ {01001, 1101x, 11010}}
{
   xx11x1111x \ {
   xx11111110, xx11011111, xx11x11111, xx11x1111x, xx11x1111x, xx1101111x, x11111111x, 011111111x}, x10xx111xx \ {
   x10x1111x0, x10x0111x1, x101x1110x, x100x1111x, x10xx111x1, x10xx1111x, x10xx1111x, 01001111xx, 1101x111xx, 11010111xx}, xx11xx011x \ {
   xx111x0110, xx110x0111, xx11xx0111, xx11x00110, xx110x011x, x1111x011x, 01111x011x}, x101xx011x \ {
   x1011x0110, x1010x0111, x101xx0111, x101x00110, 1101xx011x, 11010x011x}}

{x1xx1 \ {010x1, 11x01, x1111}}
{0x10x \ {0x101, 00101, 00100}}
{
   0x101x1x01 \ {
   0x10101001, 0x10111x01, 0x101x1x01, 00101x1x01}}

{}
{11x1x \ {11010, 11x10, 1111x}}
{}

{1001x \ {10011, 10010}}
{x000x \ {10000, x0000, 1000x}, 1x001 \ {10001, 11001}, 0xxxx \ {0000x, 0x10x, 0x0xx}}
{
   0xx1x1001x \ {
   0xx1110010, 0xx1010011, 0xx1x10011, 0xx1x10010, 0x01x1001x}}

{xx0xx \ {x0001, 0x01x, x000x}, xx00x \ {x1000, x100x, 1x001}, xx1x0 \ {11110, 01100, 11100}}
{xx101 \ {1x101, 01101, 0x101}, 01xxx \ {011x1, 01001, 0101x}}
{
   xx101xx001 \ {
   xx101x0001, xx101x0001, 1x101xx001, 01101xx001, 0x101xx001}, 01xxxxx0xx \ {
   01xx1xx0x0, 01xx0xx0x1, 01x1xxx00x, 01x0xxx01x, 01xxxx0001, 01xxx0x01x, 01xxxx000x, 011x1xx0xx, 01001xx0xx, 0101xxx0xx}, xx101xx001 \ {
   xx101x1001, xx1011x001, 1x101xx001, 01101xx001, 0x101xx001}, 01x0xxx00x \ {
   01x01xx000, 01x00xx001, 01x0xx1000, 01x0xx100x, 01x0x1x001, 01101xx00x, 01001xx00x}, 01xx0xx1x0 \ {
   01x10xx100, 01x00xx110, 01xx011110, 01xx001100, 01xx011100, 01010xx1x0}}

{1xxx0 \ {10010, 10000, 110x0}, 0x001 \ {01001, 00001}}
{x1x11 \ {01011, 11x11, 11x11}}
{}

{111xx \ {11110, 11100, 11111}, x110x \ {01100, 1110x, x1100}}
{}
{}

{1x0x1 \ {10001, 110x1, 110x1}}
{10xx0 \ {100x0, 10x10}, xx11x \ {1x110, 0111x, 11110}, 01x00 \ {01100, 01000, 01000}}
{
   xx1111x011 \ {
   xx11111011, xx11111011, 011111x011}}

{1001x \ {10010, 10011}}
{}
{}

{101x0 \ {10100, 10110}, 1x1x1 \ {11111, 10101, 10111}}
{1x0xx \ {1x000, 1001x, 1000x}}
{
   1x0x0101x0 \ {
   1x01010100, 1x00010110, 1x0x010100, 1x0x010110, 1x000101x0, 10010101x0, 10000101x0}, 1x0x11x1x1 \ {
   1x0111x101, 1x0011x111, 1x0x111111, 1x0x110101, 1x0x110111, 100111x1x1, 100011x1x1}}

{x11x0 \ {11110, 111x0, x1100}, xx0xx \ {1000x, 0x00x, 00001}, 1xxxx \ {1x11x, 101xx, 10000}}
{1xx01 \ {10x01, 11x01, 10101}, 0x1xx \ {0110x, 001xx, 0x101}, x101x \ {11010, x1011, 01011}}
{
   0x1x0x11x0 \ {
   0x110x1100, 0x100x1110, 0x1x011110, 0x1x0111x0, 0x1x0x1100, 01100x11x0, 001x0x11x0}, x1010x1110 \ {
   x101011110, x101011110, 11010x1110}, 1xx01xx001 \ {
   1xx0110001, 1xx010x001, 1xx0100001, 10x01xx001, 11x01xx001, 10101xx001}, 0x1xxxx0xx \ {
   0x1x1xx0x0, 0x1x0xx0x1, 0x11xxx00x, 0x10xxx01x, 0x1xx1000x, 0x1xx0x00x, 0x1xx00001, 0110xxx0xx, 001xxxx0xx, 0x101xx0xx}, x101xxx01x \ {
   x1011xx010, x1010xx011, 11010xx01x, x1011xx01x, 01011xx01x}, 1xx011xx01 \ {
   1xx0110101, 10x011xx01, 11x011xx01, 101011xx01}, 0x1xx1xxxx \ {
   0x1x11xxx0, 0x1x01xxx1, 0x11x1xx0x, 0x10x1xx1x, 0x1xx1x11x, 0x1xx101xx, 0x1xx10000, 0110x1xxxx, 001xx1xxxx, 0x1011xxxx}, x101x1xx1x \ {
   x10111xx10, x10101xx11, x101x1x11x, x101x1011x, 110101xx1x, x10111xx1x, 010111xx1x}}

{0111x \ {01111, 01110}}
{0x00x \ {00000, 0x001, 0100x}, x1x0x \ {01101, 01001, x100x}, x0xxx \ {00100, 001x1, 00x01}}
{
   x0x1x0111x \ {
   x0x1101110, x0x1001111, x0x1x01111, x0x1x01110, 001110111x}}

{x11x0 \ {011x0, 11100}, xxx0x \ {xx001, x000x, xxx00}, x1x1x \ {x1111, 1101x, x1110}}
{01x0x \ {0100x, 01001, 01101}}
{
   01x00x1100 \ {
   01x0001100, 01x0011100, 01000x1100}, 01x0xxxx0x \ {
   01x01xxx00, 01x00xxx01, 01x0xxx001, 01x0xx000x, 01x0xxxx00, 0100xxxx0x, 01001xxx0x, 01101xxx0x}}

{}
{xx1xx \ {0x101, 101xx, 0x110}, 0xx00 \ {0x100, 01000, 01000}}
{}

{}
{00x1x \ {00010, 0011x, 00110}, x0x1x \ {x0110, 10111, 10x10}}
{}

{}
{10xxx \ {10001, 10011, 10xx0}, x1xxx \ {1101x, x1001, 11xx0}, x1xx1 \ {01111, 11101, 11x11}}
{}

{x1x11 \ {11x11, 11011, 11111}, xxx10 \ {x0110, 00x10, 11x10}}
{xx100 \ {11100, x1100, 1x100}, 1x01x \ {11011, 10010, 1001x}}
{
   1x011x1x11 \ {
   1x01111x11, 1x01111011, 1x01111111, 11011x1x11, 10011x1x11}, 1x010xxx10 \ {
   1x010x0110, 1x01000x10, 1x01011x10, 10010xxx10, 10010xxx10}}

{10xx1 \ {10011, 10001, 10x01}}
{01x1x \ {0101x, 01110}}
{
   01x1110x11 \ {
   01x1110011, 0101110x11}}

{xx010 \ {1x010, 10010, 11010}, xx10x \ {11101, 0x100, 11100}}
{x0x10 \ {x0010, x0110, 00110}, 00xx1 \ {00101, 001x1, 000x1}}
{
   x0x10xx010 \ {
   x0x101x010, x0x1010010, x0x1011010, x0010xx010, x0110xx010, 00110xx010}, 00x01xx101 \ {
   00x0111101, 00101xx101, 00101xx101, 00001xx101}}

{x1xxx \ {01000, x1xx1, 01x00}, 00x01 \ {00001, 00101}}
{x110x \ {11100, 11101, x1100}, 1xx1x \ {11x11, 1x010, 1x011}}
{
   x110xx1x0x \ {
   x1101x1x00, x1100x1x01, x110x01000, x110xx1x01, x110x01x00, 11100x1x0x, 11101x1x0x, x1100x1x0x}, 1xx1xx1x1x \ {
   1xx11x1x10, 1xx10x1x11, 1xx1xx1x11, 11x11x1x1x, 1x010x1x1x, 1x011x1x1x}, x110100x01 \ {
   x110100001, x110100101, 1110100x01}}

{1x00x \ {11000, 10001, 11001}, 10xx1 \ {101x1, 10111}, 10x1x \ {10x10, 10x11, 10111}}
{00xx0 \ {001x0, 00000, 00110}}
{
   00x001x000 \ {
   00x0011000, 001001x000, 000001x000}, 00x1010x10 \ {
   00x1010x10, 0011010x10, 0011010x10}}

{x0x1x \ {00x10, 00x1x}, 11x1x \ {1111x}}
{01xx0 \ {01x00, 010x0}, xx111 \ {11111, 0x111, 1x111}}
{
   01x10x0x10 \ {
   01x1000x10, 01x1000x10, 01010x0x10}, xx111x0x11 \ {
   xx11100x11, 11111x0x11, 0x111x0x11, 1x111x0x11}, 01x1011x10 \ {
   01x1011110, 0101011x10}, xx11111x11 \ {
   xx11111111, 1111111x11, 0x11111x11, 1x11111x11}}

{x1xx1 \ {010x1, 01011, x1x01}}
{0x0x0 \ {0x010, 01000, 0x000}, 011xx \ {01100, 01110, 01110}}
{
   011x1x1xx1 \ {
   01111x1x01, 01101x1x11, 011x1010x1, 011x101011, 011x1x1x01}}

{0xx10 \ {00110, 01110, 0x010}, 01x0x \ {0100x, 01000, 01000}}
{xx1xx \ {x010x, 0110x, 101xx}, 00xx1 \ {00x01, 00011}}
{
   xx1100xx10 \ {
   xx11000110, xx11001110, xx1100x010, 101100xx10}, xx10x01x0x \ {
   xx10101x00, xx10001x01, xx10x0100x, xx10x01000, xx10x01000, x010x01x0x, 0110x01x0x, 1010x01x0x}, 00x0101x01 \ {
   00x0101001, 00x0101x01}}

{x0x1x \ {00x11, 10011, 00x10}, x1xxx \ {x1100, 11011, x1x01}}
{010xx \ {010x0, 01010, 01011}, xx100 \ {00100, 1x100, 11100}}
{
   0101xx0x1x \ {
   01011x0x10, 01010x0x11, 0101x00x11, 0101x10011, 0101x00x10, 01010x0x1x, 01010x0x1x, 01011x0x1x}, 010xxx1xxx \ {
   010x1x1xx0, 010x0x1xx1, 0101xx1x0x, 0100xx1x1x, 010xxx1100, 010xx11011, 010xxx1x01, 010x0x1xxx, 01010x1xxx, 01011x1xxx}, xx100x1x00 \ {
   xx100x1100, 00100x1x00, 1x100x1x00, 11100x1x00}}

{1x0x0 \ {100x0, 11010, 11000}, 00x0x \ {00101, 00x00, 0010x}, x1x11 \ {01111, 01011, 01011}}
{0111x \ {01110, 01111}}
{
   011101x010 \ {
   0111010010, 0111011010, 011101x010}, 01111x1x11 \ {
   0111101111, 0111101011, 0111101011, 01111x1x11}}

{xx1x1 \ {x1101, x01x1, 00101}}
{0011x \ {00110, 00111}}
{
   00111xx111 \ {
   00111x0111, 00111xx111}}

{}
{x1x0x \ {x1101, x100x, 11x01}}
{}

{xx011 \ {x0011, 10011, 0x011}, xx00x \ {1x000, 01000, 01000}}
{}
{}

{1x001 \ {11001, 10001}, 10xx0 \ {10x00, 10100, 100x0}}
{1x011 \ {11011, 10011, 10011}}
{}

{xxx1x \ {x1x11, xx11x, 1011x}, x1x11 \ {11111, 11011, 01111}}
{x01x0 \ {x0100, x0110, 10110}}
{
   x0110xxx10 \ {
   x0110xx110, x011010110, x0110xxx10, 10110xxx10}}

{x0xx0 \ {10000, 00100, x0x00}}
{00xx1 \ {00001, 001x1, 00011}, 1101x \ {11010}, 01x0x \ {01001, 01x01, 0100x}}
{
   11010x0x10 \ {
   11010x0x10}, 01x00x0x00 \ {
   01x0010000, 01x0000100, 01x00x0x00, 01000x0x00}}

{x1x10 \ {11x10, x1110, 01x10}, 110xx \ {1101x, 11000, 11010}}
{1011x \ {10110}}
{
   10110x1x10 \ {
   1011011x10, 10110x1110, 1011001x10, 10110x1x10}, 1011x1101x \ {
   1011111010, 1011011011, 1011x1101x, 1011x11010, 101101101x}}

{1xxx1 \ {11111, 1x011, 10xx1}, 110xx \ {11000, 1101x, 110x1}}
{1xx0x \ {11x00, 10x0x, 10x01}}
{
   1xx011xx01 \ {
   1xx0110x01, 10x011xx01, 10x011xx01}, 1xx0x1100x \ {
   1xx0111000, 1xx0011001, 1xx0x11000, 1xx0x11001, 11x001100x, 10x0x1100x, 10x011100x}}

{x1xxx \ {11x10, 11100, 010xx}}
{}
{}

{01x00 \ {01100, 01000}}
{1xx1x \ {11x10, 11010, 1x111}, 10x10 \ {10110}}
{}

{}
{0x010 \ {01010}, xx101 \ {11101, 00101, 01101}}
{}

{000xx \ {000x0, 0001x, 00011}}
{x11xx \ {x1110, 111xx, x11x0}, x101x \ {x1011, 11011}}
{
   x11xx000xx \ {
   x11x1000x0, x11x0000x1, x111x0000x, x110x0001x, x11xx000x0, x11xx0001x, x11xx00011, x1110000xx, 111xx000xx, x11x0000xx}, x101x0001x \ {
   x101100010, x101000011, x101x00010, x101x0001x, x101x00011, x10110001x, 110110001x}}

{01x1x \ {0111x, 01011}}
{0xxx0 \ {00100, 01110, 0x010}, xx000 \ {0x000, 10000, 10000}}
{
   0xx1001x10 \ {
   0xx1001110, 0111001x10, 0x01001x10}}

{x100x \ {01000, 0100x, 11001}}
{11xx1 \ {11111, 111x1}, x1xx0 \ {11x00, 11100, x1110}}
{
   11x01x1001 \ {
   11x0101001, 11x0111001, 11101x1001}, x1x00x1000 \ {
   x1x0001000, x1x0001000, 11x00x1000, 11100x1000}}

{x1xxx \ {11xxx, 1101x, 0111x}, 1xxx1 \ {1x0x1, 10001, 11x01}}
{x00x1 \ {000x1, 00001, x0001}, xx11x \ {x111x, 0x11x, 0x111}}
{
   x00x1x1xx1 \ {
   x0011x1x01, x0001x1x11, x00x111xx1, x00x111011, x00x101111, 000x1x1xx1, 00001x1xx1, x0001x1xx1}, xx11xx1x1x \ {
   xx111x1x10, xx110x1x11, xx11x11x1x, xx11x1101x, xx11x0111x, x111xx1x1x, 0x11xx1x1x, 0x111x1x1x}, x00x11xxx1 \ {
   x00111xx01, x00011xx11, x00x11x0x1, x00x110001, x00x111x01, 000x11xxx1, 000011xxx1, x00011xxx1}, xx1111xx11 \ {
   xx1111x011, x11111xx11, 0x1111xx11, 0x1111xx11}}

{11xx0 \ {11x10, 11110}, x0010 \ {00010, 10010}}
{x0xx0 \ {x0000, x0100, 10110}, x0xx0 \ {10000, x0100, 10x00}}
{
   x0xx011xx0 \ {
   x0x1011x00, x0x0011x10, x0xx011x10, x0xx011110, x000011xx0, x010011xx0, 1011011xx0}, x0xx011xx0 \ {
   x0x1011x00, x0x0011x10, x0xx011x10, x0xx011110, 1000011xx0, x010011xx0, 10x0011xx0}, x0x10x0010 \ {
   x0x1000010, x0x1010010}}

{x110x \ {x1100, 11100, 0110x}, xxx01 \ {xx101, 00001, 1xx01}}
{xx101 \ {x0101, x1101, 11101}, x101x \ {11010, x1010}}
{
   xx101x1101 \ {
   xx10101101, x0101x1101, x1101x1101, 11101x1101}, xx101xxx01 \ {
   xx101xx101, xx10100001, xx1011xx01, x0101xxx01, x1101xxx01, 11101xxx01}}

{x000x \ {x0001, 1000x, 0000x}, x0xxx \ {00101, 00x0x, x000x}}
{10xx0 \ {10010, 101x0, 101x0}}
{
   10x00x0000 \ {
   10x0010000, 10x0000000, 10100x0000, 10100x0000}, 10xx0x0xx0 \ {
   10x10x0x00, 10x00x0x10, 10xx000x00, 10xx0x0000, 10010x0xx0, 101x0x0xx0, 101x0x0xx0}}

{01xxx \ {01x00, 01x0x, 01000}, x11xx \ {01101, 0111x, 1110x}}
{1xxx1 \ {10x01, 100x1, 1x101}}
{
   1xxx101xx1 \ {
   1xx1101x01, 1xx0101x11, 1xxx101x01, 10x0101xx1, 100x101xx1, 1x10101xx1}, 1xxx1x11x1 \ {
   1xx11x1101, 1xx01x1111, 1xxx101101, 1xxx101111, 1xxx111101, 10x01x11x1, 100x1x11x1, 1x101x11x1}}

{}
{x001x \ {00010, 10011, 0001x}, 0x0x1 \ {0x011, 0x001, 01001}}
{}

{01xx1 \ {011x1, 010x1}, 0xxx0 \ {01110, 00100, 01000}}
{}
{}

{1xxx0 \ {100x0, 10010, 110x0}}
{x0110 \ {00110}}
{
   x01101xx10 \ {
   x011010010, x011010010, x011011010, 001101xx10}}

{10x1x \ {10x11, 10011, 10111}, 0xx0x \ {0xx01, 0x001, 0x000}}
{x0x11 \ {10x11, 10011, x0011}}
{
   x0x1110x11 \ {
   x0x1110x11, x0x1110011, x0x1110111, 10x1110x11, 1001110x11, x001110x11}}

{10x00 \ {10000, 10100}, 11xxx \ {11001, 11111, 111xx}}
{1x1x1 \ {11111, 11101, 10101}}
{
   1x1x111xx1 \ {
   1x11111x01, 1x10111x11, 1x1x111001, 1x1x111111, 1x1x1111x1, 1111111xx1, 1110111xx1, 1010111xx1}}

{0x01x \ {00011, 0101x, 0101x}, 0xx01 \ {01001, 0x001}}
{10xxx \ {10111, 100xx, 10x01}}
{
   10x1x0x01x \ {
   10x110x010, 10x100x011, 10x1x00011, 10x1x0101x, 10x1x0101x, 101110x01x, 1001x0x01x}, 10x010xx01 \ {
   10x0101001, 10x010x001, 100010xx01, 10x010xx01}}

{}
{11xxx \ {11110, 1110x, 11x1x}, x101x \ {x1011, 0101x, 11011}, 01x1x \ {01x10, 0101x, 0111x}}
{}

{01x0x \ {0100x, 01101, 01101}}
{11xx0 \ {11100, 11010, 11110}, xx1x0 \ {00100, 00110, 00110}, 110xx \ {11010, 110x1, 1101x}}
{
   11x0001x00 \ {
   11x0001000, 1110001x00}, xx10001x00 \ {
   xx10001000, 0010001x00}, 1100x01x0x \ {
   1100101x00, 1100001x01, 1100x0100x, 1100x01101, 1100x01101, 1100101x0x}}

{1001x \ {10010, 10011}, x110x \ {01100, x1101}, xx1xx \ {0x10x, 1x11x, 0x101}}
{}
{}

{xx10x \ {00100, 10101, xx101}}
{1x01x \ {1x011, 1001x}}
{}

{xx0x0 \ {01010, 010x0, xx010}}
{1x1x0 \ {1x100, 111x0}}
{
   1x1x0xx0x0 \ {
   1x110xx000, 1x100xx010, 1x1x001010, 1x1x0010x0, 1x1x0xx010, 1x100xx0x0, 111x0xx0x0}}

{00xx0 \ {000x0}}
{}
{}

{}
{xxx11 \ {01111, 10111, 11x11}, x00x1 \ {000x1, 10001, 00011}, x0xx0 \ {00000, x0x10, 10x00}}
{}

{}
{xxx01 \ {0x001, x1x01, 11x01}, 11x0x \ {11000, 11101, 11x00}}
{}

{1x001 \ {10001, 11001}, 011x1 \ {01111}}
{}
{}

{01x0x \ {01x01, 01000}}
{xxx10 \ {xx110, 01010, 01010}}
{}

{0x000 \ {01000, 00000}}
{0x1x0 \ {00100, 01110, 00110}, xx11x \ {x1111, 10110, 0x111}}
{
   0x1000x000 \ {
   0x10001000, 0x10000000, 001000x000}}

{11x0x \ {1110x, 11101, 11000}, 0xx11 \ {01x11, 0x111}}
{10x00 \ {10100}, x0xx0 \ {00x00, x0110, 00000}}
{
   10x0011x00 \ {
   10x0011100, 10x0011000, 1010011x00}, x0x0011x00 \ {
   x0x0011100, x0x0011000, 00x0011x00, 0000011x00}}

{}
{x1x10 \ {11x10, x1110}, 0xx01 \ {00101, 0x101, 01001}, x001x \ {10010, 1001x, x0010}}
{}

{0xx1x \ {00010, 01x10, 0xx10}, 00xx1 \ {00101, 001x1, 00x01}}
{x1x01 \ {11101, 11001, x1001}, xx1xx \ {111x0, 01111, 0x100}}
{
   xx11x0xx1x \ {
   xx1110xx10, xx1100xx11, xx11x00010, xx11x01x10, xx11x0xx10, 111100xx1x, 011110xx1x}, x1x0100x01 \ {
   x1x0100101, x1x0100101, x1x0100x01, 1110100x01, 1100100x01, x100100x01}, xx1x100xx1 \ {
   xx11100x01, xx10100x11, xx1x100101, xx1x1001x1, xx1x100x01, 0111100xx1}}

{xxxxx \ {x1xxx, 1x111, 010x1}, xx0xx \ {11010, 1x01x, 0x0xx}, 01xx1 \ {01101, 01011, 01x01}}
{10x0x \ {10001, 1010x}, 01x0x \ {01100, 01101}}
{
   10x0xxxx0x \ {
   10x01xxx00, 10x00xxx01, 10x0xx1x0x, 10x0x01001, 10001xxx0x, 1010xxxx0x}, 01x0xxxx0x \ {
   01x01xxx00, 01x00xxx01, 01x0xx1x0x, 01x0x01001, 01100xxx0x, 01101xxx0x}, 10x0xxx00x \ {
   10x01xx000, 10x00xx001, 10x0x0x00x, 10001xx00x, 1010xxx00x}, 01x0xxx00x \ {
   01x01xx000, 01x00xx001, 01x0x0x00x, 01100xx00x, 01101xx00x}, 10x0101x01 \ {
   10x0101101, 10x0101x01, 1000101x01, 1010101x01}, 01x0101x01 \ {
   01x0101101, 01x0101x01, 0110101x01}}

{}
{}
{}

{}
{10x10 \ {10110, 10010, 10010}, x10xx \ {110xx, x1000, 11011}}
{}

{00x1x \ {00x10, 0011x, 00011}, 01x01 \ {01001, 01101}, xxxx0 \ {11010, 01x00, 1xx00}}
{xx11x \ {1x110, 0x11x, x0110}, x1x10 \ {11010, x1010, x1010}}
{
   xx11x00x1x \ {
   xx11100x10, xx11000x11, xx11x00x10, xx11x0011x, xx11x00011, 1x11000x1x, 0x11x00x1x, x011000x1x}, x1x1000x10 \ {
   x1x1000x10, x1x1000110, 1101000x10, x101000x10, x101000x10}, xx110xxx10 \ {
   xx11011010, 1x110xxx10, 0x110xxx10, x0110xxx10}, x1x10xxx10 \ {
   x1x1011010, 11010xxx10, x1010xxx10, x1010xxx10}}

{x10x1 \ {01011, 01001, 010x1}, xx110 \ {00110, x1110, 11110}}
{x0x0x \ {00001, 00x0x, 0010x}, xxx11 \ {1xx11, x1111}}
{
   x0x01x1001 \ {
   x0x0101001, x0x0101001, 00001x1001, 00x01x1001, 00101x1001}, xxx11x1011 \ {
   xxx1101011, xxx1101011, 1xx11x1011, x1111x1011}}

{x001x \ {1001x, 00011}, 1x0x0 \ {11010, 10010, 10010}}
{x1xxx \ {01110, 010x0, 01x0x}, 00x01 \ {00101, 00001}, 0xx01 \ {00001}}
{
   x1x1xx001x \ {
   x1x11x0010, x1x10x0011, x1x1x1001x, x1x1x00011, 01110x001x, 01010x001x}, x1xx01x0x0 \ {
   x1x101x000, x1x001x010, x1xx011010, x1xx010010, x1xx010010, 011101x0x0, 010x01x0x0, 01x001x0x0}}

{xx110 \ {11110, x0110}, x101x \ {0101x, x1011, 1101x}}
{xx00x \ {1x000, 11001, 10001}}
{}

{110xx \ {11000, 110x0}, 1xxx0 \ {1x110, 1x100, 1x0x0}}
{0x0x0 \ {0x000, 01010, 010x0}, xx010 \ {1x010, 11010}}
{
   0x0x0110x0 \ {
   0x01011000, 0x00011010, 0x0x011000, 0x0x0110x0, 0x000110x0, 01010110x0, 010x0110x0}, xx01011010 \ {
   xx01011010, 1x01011010, 1101011010}, 0x0x01xxx0 \ {
   0x0101xx00, 0x0001xx10, 0x0x01x110, 0x0x01x100, 0x0x01x0x0, 0x0001xxx0, 010101xxx0, 010x01xxx0}, xx0101xx10 \ {
   xx0101x110, xx0101x010, 1x0101xx10, 110101xx10}}

{x0010 \ {10010}, 011xx \ {01110, 011x1, 011x1}}
{}
{}

{xx100 \ {11100, x0100, 10100}}
{1xx01 \ {11x01, 11001, 1x101}, x0000 \ {10000}}
{
   x0000xx100 \ {
   x000011100, x0000x0100, x000010100, 10000xx100}}

{01xx1 \ {01101, 01111, 01111}, 0x0xx \ {00010, 010x0, 00001}, 10x0x \ {10x01, 1000x, 1000x}}
{xxx00 \ {01x00, 11100, 01000}, 1xxxx \ {1xx01, 1xxx0, 1x101}}
{
   1xxx101xx1 \ {
   1xx1101x01, 1xx0101x11, 1xxx101101, 1xxx101111, 1xxx101111, 1xx0101xx1, 1x10101xx1}, xxx000x000 \ {
   xxx0001000, 01x000x000, 111000x000, 010000x000}, 1xxxx0x0xx \ {
   1xxx10x0x0, 1xxx00x0x1, 1xx1x0x00x, 1xx0x0x01x, 1xxxx00010, 1xxxx010x0, 1xxxx00001, 1xx010x0xx, 1xxx00x0xx, 1x1010x0xx}, xxx0010x00 \ {
   xxx0010000, xxx0010000, 01x0010x00, 1110010x00, 0100010x00}, 1xx0x10x0x \ {
   1xx0110x00, 1xx0010x01, 1xx0x10x01, 1xx0x1000x, 1xx0x1000x, 1xx0110x0x, 1xx0010x0x, 1x10110x0x}}

{1xxxx \ {10001, 11001, 1x101}}
{0x100 \ {01100}}
{
   0x1001xx00 \ {
   011001xx00}}

{00xx1 \ {000x1, 00001, 00111}}
{}
{}

{x1x00 \ {01000, 11100, 11000}}
{0x1x0 \ {01110, 011x0}}
{
   0x100x1x00 \ {
   0x10001000, 0x10011100, 0x10011000, 01100x1x00}}

{0xx10 \ {01010, 00010, 00x10}, 1x00x \ {1100x, 10000, 1000x}}
{xxxx1 \ {00011, 010x1, 1x1x1}}
{
   xxx011x001 \ {
   xxx0111001, xxx0110001, 010011x001, 1x1011x001}}

{xxxxx \ {x1xx0, 11x01, xx1x0}}
{111xx \ {1110x, 111x0, 111x0}}
{
   111xxxxxxx \ {
   111x1xxxx0, 111x0xxxx1, 1111xxxx0x, 1110xxxx1x, 111xxx1xx0, 111xx11x01, 111xxxx1x0, 1110xxxxxx, 111x0xxxxx, 111x0xxxxx}}

{xx00x \ {1x000, 0x000, 1000x}}
{xx10x \ {0110x, x110x, 00101}, xxxxx \ {x11x0, 0x111, xx1xx}}
{
   xx10xxx00x \ {
   xx101xx000, xx100xx001, xx10x1x000, xx10x0x000, xx10x1000x, 0110xxx00x, x110xxx00x, 00101xx00x}, xxx0xxx00x \ {
   xxx01xx000, xxx00xx001, xxx0x1x000, xxx0x0x000, xxx0x1000x, x1100xx00x, xx10xxx00x}}

{1x011 \ {11011, 10011}, 1x0xx \ {110x1, 1x00x, 1x011}}
{x1xxx \ {x1111, x1xx0, 01110}}
{
   x1x111x011 \ {
   x1x1111011, x1x1110011, x11111x011}, x1xxx1x0xx \ {
   x1xx11x0x0, x1xx01x0x1, x1x1x1x00x, x1x0x1x01x, x1xxx110x1, x1xxx1x00x, x1xxx1x011, x11111x0xx, x1xx01x0xx, 011101x0xx}}

{x00x0 \ {00000, x0010}, 0xxx1 \ {00x11, 00011, 01011}}
{x100x \ {1100x, 0100x, x1000}}
{
   x1000x0000 \ {
   x100000000, 11000x0000, 01000x0000, x1000x0000}, x10010xx01 \ {
   110010xx01, 010010xx01}}

{x011x \ {10111, 0011x, 10110}, xx100 \ {1x100, x1100, 11100}}
{x0100 \ {10100, 00100, 00100}}
{
   x0100xx100 \ {
   x01001x100, x0100x1100, x010011100, 10100xx100, 00100xx100, 00100xx100}}

{1x010 \ {11010, 10010, 10010}, xxxxx \ {0x0xx, x1xx1, x0001}}
{xxx01 \ {00x01, x0x01, x1x01}}
{
   xxx01xxx01 \ {
   xxx010x001, xxx01x1x01, xxx01x0001, 00x01xxx01, x0x01xxx01, x1x01xxx01}}

{}
{1xx0x \ {1x10x, 11000, 1xx00}, x0x00 \ {10x00, x0000}}
{}

{xxx01 \ {0xx01, 00101, 01101}}
{xx0x0 \ {x1010, 10000, 1x000}, 0x11x \ {0x110, 01111, 01111}}
{}

{11x10 \ {11010, 11110}, 0010x \ {00101, 00100, 00100}, 11x11 \ {11011}}
{xxx10 \ {10x10, 0xx10, 11010}, x11xx \ {01110, x11x1, 1111x}, xx1xx \ {1x11x, 1x101, x0100}}
{
   xxx1011x10 \ {
   xxx1011010, xxx1011110, 10x1011x10, 0xx1011x10, 1101011x10}, x111011x10 \ {
   x111011010, x111011110, 0111011x10, 1111011x10}, xx11011x10 \ {
   xx11011010, xx11011110, 1x11011x10}, x110x0010x \ {
   x110100100, x110000101, x110x00101, x110x00100, x110x00100, x11010010x}, xx10x0010x \ {
   xx10100100, xx10000101, xx10x00101, xx10x00100, xx10x00100, 1x1010010x, x01000010x}, x111111x11 \ {
   x111111011, x111111x11, 1111111x11}, xx11111x11 \ {
   xx11111011, 1x11111x11}}

{1xx10 \ {1x110, 11110, 11x10}, xx10x \ {x0101, 01101, 0010x}}
{01xxx \ {01x0x, 01100, 0101x}}
{
   01x101xx10 \ {
   01x101x110, 01x1011110, 01x1011x10, 010101xx10}, 01x0xxx10x \ {
   01x01xx100, 01x00xx101, 01x0xx0101, 01x0x01101, 01x0x0010x, 01x0xxx10x, 01100xx10x}}

{}
{10xxx \ {10001, 100x1}}
{}

{11x1x \ {11111, 11011, 11010}, xx000 \ {00000, 10000}}
{xx101 \ {00101, 11101}, 0x100 \ {00100}, x0x1x \ {0011x, x001x, x0010}}
{
   x0x1x11x1x \ {
   x0x1111x10, x0x1011x11, x0x1x11111, x0x1x11011, x0x1x11010, 0011x11x1x, x001x11x1x, x001011x1x}, 0x100xx000 \ {
   0x10000000, 0x10010000, 00100xx000}}

{xxx00 \ {01100, 00x00, 00000}}
{x10x1 \ {11001, x1001, 11011}}
{}

{000xx \ {0000x, 000x1, 000x0}, 11xxx \ {1100x, 11001, 11x00}}
{1xxxx \ {10xxx, 110x0, 111x0}}
{
   1xxxx000xx \ {
   1xxx1000x0, 1xxx0000x1, 1xx1x0000x, 1xx0x0001x, 1xxxx0000x, 1xxxx000x1, 1xxxx000x0, 10xxx000xx, 110x0000xx, 111x0000xx}, 1xxxx11xxx \ {
   1xxx111xx0, 1xxx011xx1, 1xx1x11x0x, 1xx0x11x1x, 1xxxx1100x, 1xxxx11001, 1xxxx11x00, 10xxx11xxx, 110x011xxx, 111x011xxx}}

{0x10x \ {01100, 00101, 0x101}, 1xx10 \ {11110, 1x010, 1x010}}
{1x11x \ {1111x, 10111, 10110}}
{
   1x1101xx10 \ {
   1x11011110, 1x1101x010, 1x1101x010, 111101xx10, 101101xx10}}

{0xx0x \ {01100, 00x01, 00x00}, x01xx \ {10101, 10110, 1010x}}
{011xx \ {0111x, 0110x, 011x1}}
{
   0110x0xx0x \ {
   011010xx00, 011000xx01, 0110x01100, 0110x00x01, 0110x00x00, 0110x0xx0x, 011010xx0x}, 011xxx01xx \ {
   011x1x01x0, 011x0x01x1, 0111xx010x, 0110xx011x, 011xx10101, 011xx10110, 011xx1010x, 0111xx01xx, 0110xx01xx, 011x1x01xx}}

{001x0 \ {00100, 00110}, 1x0xx \ {10011, 11000, 1000x}}
{x011x \ {0011x, 00111}}
{
   x011000110 \ {
   x011000110, 0011000110}, x011x1x01x \ {
   x01111x010, x01101x011, x011x10011, 0011x1x01x, 001111x01x}}

{01xxx \ {01xx1, 01110, 01110}, 0xxx1 \ {01x01, 000x1, 001x1}}
{00xx1 \ {001x1, 00001}}
{
   00xx101xx1 \ {
   00x1101x01, 00x0101x11, 00xx101xx1, 001x101xx1, 0000101xx1}, 00xx10xxx1 \ {
   00x110xx01, 00x010xx11, 00xx101x01, 00xx1000x1, 00xx1001x1, 001x10xxx1, 000010xxx1}}

{0x10x \ {0110x, 00100, 00101}}
{1x00x \ {10000, 11000, 10001}, x1x0x \ {01101, 11000, 01x0x}}
{
   1x00x0x10x \ {
   1x0010x100, 1x0000x101, 1x00x0110x, 1x00x00100, 1x00x00101, 100000x10x, 110000x10x, 100010x10x}, x1x0x0x10x \ {
   x1x010x100, x1x000x101, x1x0x0110x, x1x0x00100, x1x0x00101, 011010x10x, 110000x10x, 01x0x0x10x}}

{xxxx0 \ {0xx10, 01x00, x0xx0}, x1x0x \ {01101, 11001, 01000}}
{0xx10 \ {01010, 01110, 00110}, xx110 \ {01110, 11110, 10110}}
{
   0xx10xxx10 \ {
   0xx100xx10, 0xx10x0x10, 01010xxx10, 01110xxx10, 00110xxx10}, xx110xxx10 \ {
   xx1100xx10, xx110x0x10, 01110xxx10, 11110xxx10, 10110xxx10}}

{xxxxx \ {1xxxx, x0111, 0x0x1}, 0x01x \ {0001x, 01010, 01010}}
{x0x11 \ {10x11, 00111, 10011}}
{
   x0x11xxx11 \ {
   x0x111xx11, x0x11x0111, x0x110x011, 10x11xxx11, 00111xxx11, 10011xxx11}, x0x110x011 \ {
   x0x1100011, 10x110x011, 001110x011, 100110x011}}

{11xx1 \ {11x11, 110x1}}
{00x1x \ {00x10, 0011x, 00111}}
{
   00x1111x11 \ {
   00x1111x11, 00x1111011, 0011111x11, 0011111x11}}

{110x1 \ {11011}, 001x0 \ {00110, 00100, 00100}}
{xx01x \ {x1010, x101x, xx010}, 1x01x \ {1x011, 1x010, 10010}, xxx0x \ {11001, 01000, 01x00}}
{
   xx01111011 \ {
   xx01111011, x101111011}, 1x01111011 \ {
   1x01111011, 1x01111011}, xxx0111001 \ {
   1100111001}, xx01000110 \ {
   xx01000110, x101000110, x101000110, xx01000110}, 1x01000110 \ {
   1x01000110, 1x01000110, 1001000110}, xxx0000100 \ {
   xxx0000100, xxx0000100, 0100000100, 01x0000100}}

{x1xx0 \ {11x00, 01x00}, xx101 \ {0x101, 10101, 00101}}
{001x0 \ {00100, 00110, 00110}, x1x10 \ {01010, 11110}}
{
   001x0x1xx0 \ {
   00110x1x00, 00100x1x10, 001x011x00, 001x001x00, 00100x1xx0, 00110x1xx0, 00110x1xx0}, x1x10x1x10 \ {
   01010x1x10, 11110x1x10}}

{x1x01 \ {11x01, 11001, 11001}, 11xx0 \ {11x00, 11000, 110x0}, xx10x \ {11101, 01100, 00100}}
{xxxx1 \ {1x1x1, 011x1, xxx11}, x11x1 \ {11101, 01101, 11111}}
{
   xxx01x1x01 \ {
   xxx0111x01, xxx0111001, xxx0111001, 1x101x1x01, 01101x1x01}, x1101x1x01 \ {
   x110111x01, x110111001, x110111001, 11101x1x01, 01101x1x01}, xxx01xx101 \ {
   xxx0111101, 1x101xx101, 01101xx101}, x1101xx101 \ {
   x110111101, 11101xx101, 01101xx101}}

{xx1x0 \ {111x0, 1x100, 0x1x0}, 1x0xx \ {1100x, 1x0x0, 11011}, xxxx1 \ {01011, 10111, 01xx1}}
{1xxxx \ {1x1xx, 1111x, 10x00}}
{
   1xxx0xx1x0 \ {
   1xx10xx100, 1xx00xx110, 1xxx0111x0, 1xxx01x100, 1xxx00x1x0, 1x1x0xx1x0, 11110xx1x0, 10x00xx1x0}, 1xxxx1x0xx \ {
   1xxx11x0x0, 1xxx01x0x1, 1xx1x1x00x, 1xx0x1x01x, 1xxxx1100x, 1xxxx1x0x0, 1xxxx11011, 1x1xx1x0xx, 1111x1x0xx, 10x001x0xx}, 1xxx1xxxx1 \ {
   1xx11xxx01, 1xx01xxx11, 1xxx101011, 1xxx110111, 1xxx101xx1, 1x1x1xxxx1, 11111xxxx1}}

{xx011 \ {01011, x1011, 00011}, x01xx \ {001xx, 0011x, 1010x}}
{x11xx \ {x11x1, 111xx, 011x0}, x0x1x \ {10x11, 10010}}
{
   x1111xx011 \ {
   x111101011, x1111x1011, x111100011, x1111xx011, 11111xx011}, x0x11xx011 \ {
   x0x1101011, x0x11x1011, x0x1100011, 10x11xx011}, x11xxx01xx \ {
   x11x1x01x0, x11x0x01x1, x111xx010x, x110xx011x, x11xx001xx, x11xx0011x, x11xx1010x, x11x1x01xx, 111xxx01xx, 011x0x01xx}, x0x1xx011x \ {
   x0x11x0110, x0x10x0111, x0x1x0011x, x0x1x0011x, 10x11x011x, 10010x011x}}

{x000x \ {0000x, 00001, x0000}, 0000x \ {00000}}
{00x1x \ {00011, 00111}}
{}

{x111x \ {11111}}
{011xx \ {011x0, 0111x, 0111x}, x1xx1 \ {x1x11, x1111, 11111}}
{
   0111xx111x \ {
   01111x1110, 01110x1111, 0111x11111, 01110x111x, 0111xx111x, 0111xx111x}, x1x11x1111 \ {
   x1x1111111, x1x11x1111, x1111x1111, 11111x1111}}

{1xx1x \ {11x1x, 10111}, x011x \ {0011x, 1011x, 10111}, x110x \ {x1100, x1101, 01100}}
{0xx11 \ {01x11, 01111, 00111}, x1001 \ {11001, 01001}}
{
   0xx111xx11 \ {
   0xx1111x11, 0xx1110111, 01x111xx11, 011111xx11, 001111xx11}, 0xx11x0111 \ {
   0xx1100111, 0xx1110111, 0xx1110111, 01x11x0111, 01111x0111, 00111x0111}, x1001x1101 \ {
   x1001x1101, 11001x1101, 01001x1101}}

{1x10x \ {10101, 10100, 11100}, 00xx0 \ {00100, 00x00, 00x00}}
{xx110 \ {11110, 1x110, 00110}, 0x0xx \ {01000, 010xx, 010x1}, x01x0 \ {001x0, 101x0}}
{
   0x00x1x10x \ {
   0x0011x100, 0x0001x101, 0x00x10101, 0x00x10100, 0x00x11100, 010001x10x, 0100x1x10x, 010011x10x}, x01001x100 \ {
   x010010100, x010011100, 001001x100, 101001x100}, xx11000x10 \ {
   1111000x10, 1x11000x10, 0011000x10}, 0x0x000xx0 \ {
   0x01000x00, 0x00000x10, 0x0x000100, 0x0x000x00, 0x0x000x00, 0100000xx0, 010x000xx0}, x01x000xx0 \ {
   x011000x00, x010000x10, x01x000100, x01x000x00, x01x000x00, 001x000xx0, 101x000xx0}}

{xxx10 \ {11x10, 10110, x0010}}
{01x00 \ {01000}}
{}

{}
{xx111 \ {x1111, 1x111, 11111}}
{}

{x0101 \ {00101, 10101}, x1x01 \ {01101, x1101, x1101}}
{xxx1x \ {1xx1x, xxx10, x0x1x}, 0xx10 \ {01110, 00110, 00110}}
{}

{0x11x \ {0111x, 0x111, 0011x}, 0xx0x \ {0010x, 00000, 01100}}
{}
{}

{1xxx1 \ {10x11, 1xx11, 100x1}, x0011 \ {10011, 00011}}
{}
{}

{}
{01x11 \ {01111, 01011}, 0x11x \ {0111x}}
{}

{1xx10 \ {1x010, 1x110, 10010}, xx00x \ {0x00x, 10000, 0x000}}
{x1x0x \ {01000, x1001, x100x}}
{
   x1x0xxx00x \ {
   x1x01xx000, x1x00xx001, x1x0x0x00x, x1x0x10000, x1x0x0x000, 01000xx00x, x1001xx00x, x100xxx00x}}

{0xx11 \ {00111, 01011, 01x11}, 0x1xx \ {00110, 00100, 001x1}}
{01xx1 \ {01111, 01011, 01x11}, xxx10 \ {11x10, 0x110, x1110}}
{
   01x110xx11 \ {
   01x1100111, 01x1101011, 01x1101x11, 011110xx11, 010110xx11, 01x110xx11}, 01xx10x1x1 \ {
   01x110x101, 01x010x111, 01xx1001x1, 011110x1x1, 010110x1x1, 01x110x1x1}, xxx100x110 \ {
   xxx1000110, 11x100x110, 0x1100x110, x11100x110}}

{1x000 \ {11000, 10000, 10000}, 00xxx \ {00100, 0000x}}
{xxx1x \ {x0011, 10x11, x001x}, x1xx1 \ {x1111, x11x1, 01101}}
{
   xxx1x00x1x \ {
   xxx1100x10, xxx1000x11, x001100x1x, 10x1100x1x, x001x00x1x}, x1xx100xx1 \ {
   x1x1100x01, x1x0100x11, x1xx100001, x111100xx1, x11x100xx1, 0110100xx1}}

{1100x \ {11001, 11000}, 0x1x1 \ {01111, 001x1, 00111}}
{xx01x \ {x101x, 11011, x0010}, xx1x0 \ {1x110, 0x110}}
{
   xx10011000 \ {
   xx10011000}, xx0110x111 \ {
   xx01101111, xx01100111, xx01100111, x10110x111, 110110x111}}

{1110x \ {11101, 11100, 11100}}
{010x1 \ {01011, 01001}, 1xx1x \ {11110, 11011, 1x110}}
{
   0100111101 \ {
   0100111101, 0100111101}}

{10x01 \ {10001}}
{x00xx \ {x0010, 000xx, 10011}, x1x00 \ {11100, 01x00}}
{
   x000110x01 \ {
   x000110001, 0000110x01}}

{001x0 \ {00100, 00110}}
{11xxx \ {11100, 1101x}, xx101 \ {x1101, 1x101, 10101}, 10x10 \ {10110}}
{
   11xx0001x0 \ {
   11x1000100, 11x0000110, 11xx000100, 11xx000110, 11100001x0, 11010001x0}, 10x1000110 \ {
   10x1000110, 1011000110}}

{}
{01x01 \ {01001}}
{}

{x0xx1 \ {x01x1, x0001, 00xx1}, xx1x1 \ {00111, 10111, 1x1x1}}
{x11xx \ {x1111, 0111x, 0110x}, 11x0x \ {1100x, 11101}}
{
   x11x1x0xx1 \ {
   x1111x0x01, x1101x0x11, x11x1x01x1, x11x1x0001, x11x100xx1, x1111x0xx1, 01111x0xx1, 01101x0xx1}, 11x01x0x01 \ {
   11x01x0101, 11x01x0001, 11x0100x01, 11001x0x01, 11101x0x01}, x11x1xx1x1 \ {
   x1111xx101, x1101xx111, x11x100111, x11x110111, x11x11x1x1, x1111xx1x1, 01111xx1x1, 01101xx1x1}, 11x01xx101 \ {
   11x011x101, 11001xx101, 11101xx101}}

{00xx1 \ {00001, 00x01, 00111}}
{100xx \ {10010, 1000x, 10000}, 0xx00 \ {00000, 00100, 01000}, xxxx1 \ {x1x01, 00101, 11xx1}}
{
   100x100xx1 \ {
   1001100x01, 1000100x11, 100x100001, 100x100x01, 100x100111, 1000100xx1}, xxxx100xx1 \ {
   xxx1100x01, xxx0100x11, xxxx100001, xxxx100x01, xxxx100111, x1x0100xx1, 0010100xx1, 11xx100xx1}}

{x00xx \ {x0010, 1001x, x0000}, 010x1 \ {01011, 01001}}
{x0x1x \ {10x1x, x0010, x001x}, 0111x \ {01110, 01111}}
{
   x0x1xx001x \ {
   x0x11x0010, x0x10x0011, x0x1xx0010, x0x1x1001x, 10x1xx001x, x0010x001x, x001xx001x}, 0111xx001x \ {
   01111x0010, 01110x0011, 0111xx0010, 0111x1001x, 01110x001x, 01111x001x}, x0x1101011 \ {
   x0x1101011, 10x1101011, x001101011}, 0111101011 \ {
   0111101011, 0111101011}}

{1xxx1 \ {10101, 100x1, 11xx1}, x0101 \ {10101, 00101}}
{0x00x \ {01000, 0x001, 0100x}}
{
   0x0011xx01 \ {
   0x00110101, 0x00110001, 0x00111x01, 0x0011xx01, 010011xx01}, 0x001x0101 \ {
   0x00110101, 0x00100101, 0x001x0101, 01001x0101}}

{10x0x \ {10x01, 10001}}
{0x1x1 \ {01101, 0x101, 0x101}}
{
   0x10110x01 \ {
   0x10110x01, 0x10110001, 0110110x01, 0x10110x01, 0x10110x01}}

{11xx1 \ {11001, 11011}, xx0x0 \ {1x0x0, x0010, x00x0}}
{1xx01 \ {11x01, 10x01, 10101}, x0xxx \ {10101, x000x, 10xx1}, xx10x \ {01100, 01101, 0110x}}
{
   1xx0111x01 \ {
   1xx0111001, 11x0111x01, 10x0111x01, 1010111x01}, x0xx111xx1 \ {
   x0x1111x01, x0x0111x11, x0xx111001, x0xx111011, 1010111xx1, x000111xx1, 10xx111xx1}, xx10111x01 \ {
   xx10111001, 0110111x01, 0110111x01}, x0xx0xx0x0 \ {
   x0x10xx000, x0x00xx010, x0xx01x0x0, x0xx0x0010, x0xx0x00x0, x0000xx0x0}, xx100xx000 \ {
   xx1001x000, xx100x0000, 01100xx000, 01100xx000}}

{xxx1x \ {00110, xx111, x001x}}
{00x11 \ {00111, 00011}, 0xxx0 \ {01x10, 00100}, x010x \ {10101, x0100, 00100}}
{
   00x11xxx11 \ {
   00x11xx111, 00x11x0011, 00111xxx11, 00011xxx11}, 0xx10xxx10 \ {
   0xx1000110, 0xx10x0010, 01x10xxx10}}

{0xxx0 \ {00000, 0x110, 00110}}
{x11x0 \ {x1110, 01110, x1100}, x00x1 \ {00001, 10001}}
{
   x11x00xxx0 \ {
   x11100xx00, x11000xx10, x11x000000, x11x00x110, x11x000110, x11100xxx0, 011100xxx0, x11000xxx0}}

{}
{0x1x0 \ {011x0, 01110, 00100}}
{}

{1x0x1 \ {110x1, 100x1, 10001}}
{00x10 \ {00010, 00110}, x10xx \ {x1011, 11001, 01010}}
{
   x10x11x0x1 \ {
   x10111x001, x10011x011, x10x1110x1, x10x1100x1, x10x110001, x10111x0x1, 110011x0x1}}

{111x0 \ {11100}, 0x1xx \ {0010x, 01101, 011x0}}
{xx0x0 \ {x0000, 0x010, x1000}}
{
   xx0x0111x0 \ {
   xx01011100, xx00011110, xx0x011100, x0000111x0, 0x010111x0, x1000111x0}, xx0x00x1x0 \ {
   xx0100x100, xx0000x110, xx0x000100, xx0x0011x0, x00000x1x0, 0x0100x1x0, x10000x1x0}}

{x0x1x \ {x0111, 0001x, 1011x}, 111x0 \ {11110, 11100, 11100}}
{}
{}

{x0x00 \ {00x00, x0000, x0100}, 0x101 \ {01101}}
{1xxxx \ {10x11, 1x101, 10x1x}, 0x1x0 \ {011x0, 0x110}}
{
   1xx00x0x00 \ {
   1xx0000x00, 1xx00x0000, 1xx00x0100}, 0x100x0x00 \ {
   0x10000x00, 0x100x0000, 0x100x0100, 01100x0x00}, 1xx010x101 \ {
   1xx0101101, 1x1010x101}}

{xx110 \ {10110, 01110, 0x110}}
{1111x \ {11110, 11111}}
{
   11110xx110 \ {
   1111010110, 1111001110, 111100x110, 11110xx110}}

{x10xx \ {110xx, 1100x, 110x0}, xx0xx \ {x00x1, xx010, x10x1}}
{0011x \ {00111}, xx0x0 \ {100x0, 01000, 1x010}, 0xx0x \ {0x101, 01100, 00001}}
{
   0011xx101x \ {
   00111x1010, 00110x1011, 0011x1101x, 0011x11010, 00111x101x}, xx0x0x10x0 \ {
   xx010x1000, xx000x1010, xx0x0110x0, xx0x011000, xx0x0110x0, 100x0x10x0, 01000x10x0, 1x010x10x0}, 0xx0xx100x \ {
   0xx01x1000, 0xx00x1001, 0xx0x1100x, 0xx0x1100x, 0xx0x11000, 0x101x100x, 01100x100x, 00001x100x}, 0011xxx01x \ {
   00111xx010, 00110xx011, 0011xx0011, 0011xxx010, 0011xx1011, 00111xx01x}, xx0x0xx0x0 \ {
   xx010xx000, xx000xx010, xx0x0xx010, 100x0xx0x0, 01000xx0x0, 1x010xx0x0}, 0xx0xxx00x \ {
   0xx01xx000, 0xx00xx001, 0xx0xx0001, 0xx0xx1001, 0x101xx00x, 01100xx00x, 00001xx00x}}

{x1x10 \ {01110, 11110, x1010}, x1xxx \ {1111x, x1xx0, x1011}}
{x1011 \ {11011, 01011}, 10x0x \ {1000x, 10001, 10x00}, 10x1x \ {10x11, 10x10, 10111}}
{
   10x10x1x10 \ {
   10x1001110, 10x1011110, 10x10x1010, 10x10x1x10}, x1011x1x11 \ {
   x101111111, x1011x1011, 11011x1x11, 01011x1x11}, 10x0xx1x0x \ {
   10x01x1x00, 10x00x1x01, 10x0xx1x00, 1000xx1x0x, 10001x1x0x, 10x00x1x0x}, 10x1xx1x1x \ {
   10x11x1x10, 10x10x1x11, 10x1x1111x, 10x1xx1x10, 10x1xx1011, 10x11x1x1x, 10x10x1x1x, 10111x1x1x}}

{0110x \ {01100, 01101}, x1x00 \ {x1100, 01000}}
{00xx0 \ {001x0, 00010, 00x00}, 00xx1 \ {00x11, 00111, 00001}}
{
   00x0001100 \ {
   00x0001100, 0010001100, 00x0001100}, 00x0101101 \ {
   00x0101101, 0000101101}, 00x00x1x00 \ {
   00x00x1100, 00x0001000, 00100x1x00, 00x00x1x00}}

{x11xx \ {1110x, 111xx, x11x0}, 1x1x1 \ {11101, 11111, 10111}}
{x011x \ {00110, 0011x, x0111}, 011x1 \ {01101}}
{
   x011xx111x \ {
   x0111x1110, x0110x1111, x011x1111x, x011xx1110, 00110x111x, 0011xx111x, x0111x111x}, 011x1x11x1 \ {
   01111x1101, 01101x1111, 011x111101, 011x1111x1, 01101x11x1}, x01111x111 \ {
   x011111111, x011110111, 001111x111, x01111x111}, 011x11x1x1 \ {
   011111x101, 011011x111, 011x111101, 011x111111, 011x110111, 011011x1x1}}

{1x0x1 \ {11001, 1x011, 1x011}, x001x \ {10010, 0001x}}
{0001x \ {00011, 00010}, 00x10 \ {00010, 00110}}
{
   000111x011 \ {
   000111x011, 000111x011, 000111x011}, 0001xx001x \ {
   00011x0010, 00010x0011, 0001x10010, 0001x0001x, 00011x001x, 00010x001x}, 00x10x0010 \ {
   00x1010010, 00x1000010, 00010x0010, 00110x0010}}

{01x01 \ {01001, 01101}}
{01x0x \ {01101, 0100x}}
{
   01x0101x01 \ {
   01x0101001, 01x0101101, 0110101x01, 0100101x01}}

{xx11x \ {x1111, 1x11x, x0111}, x00x1 \ {x0001, 10011, 00001}, x10xx \ {0100x, x100x, x1010}}
{xx0xx \ {10010, 0x00x, x100x}, 0x00x \ {0x000, 0x001, 01000}, 11xx0 \ {11010, 111x0, 11110}}
{
   xx01xxx11x \ {
   xx011xx110, xx010xx111, xx01xx1111, xx01x1x11x, xx01xx0111, 10010xx11x}, 11x10xx110 \ {
   11x101x110, 11010xx110, 11110xx110, 11110xx110}, xx0x1x00x1 \ {
   xx011x0001, xx001x0011, xx0x1x0001, xx0x110011, xx0x100001, 0x001x00x1, x1001x00x1}, 0x001x0001 \ {
   0x001x0001, 0x00100001, 0x001x0001}, xx0xxx10xx \ {
   xx0x1x10x0, xx0x0x10x1, xx01xx100x, xx00xx101x, xx0xx0100x, xx0xxx100x, xx0xxx1010, 10010x10xx, 0x00xx10xx, x100xx10xx}, 0x00xx100x \ {
   0x001x1000, 0x000x1001, 0x00x0100x, 0x00xx100x, 0x000x100x, 0x001x100x, 01000x100x}, 11xx0x10x0 \ {
   11x10x1000, 11x00x1010, 11xx001000, 11xx0x1000, 11xx0x1010, 11010x10x0, 111x0x10x0, 11110x10x0}}

{}
{100xx \ {10011, 10001, 1001x}}
{}

{10x1x \ {10010, 10x11, 10011}, 010x1 \ {01011, 01001}}
{10x10 \ {10110, 10010}}
{
   10x1010x10 \ {
   10x1010010, 1011010x10, 1001010x10}}

{}
{0x0x0 \ {00010, 01000, 010x0}}
{}

{x1001 \ {01001, 11001, 11001}, xx001 \ {01001, x0001, 1x001}}
{0x01x \ {0x011, 01010}}
{}

{x1x1x \ {1111x, 11110, 01011}}
{0x1x0 \ {01100, 01110, 011x0}, x0xxx \ {x00x1, 10010, 000xx}}
{
   0x110x1x10 \ {
   0x11011110, 0x11011110, 01110x1x10, 01110x1x10}, x0x1xx1x1x \ {
   x0x11x1x10, x0x10x1x11, x0x1x1111x, x0x1x11110, x0x1x01011, x0011x1x1x, 10010x1x1x, 0001xx1x1x}}

{xx0x0 \ {0x0x0, 01000, xx010}}
{1x001 \ {11001, 10001, 10001}}
{}

{x000x \ {x0000, x0001, x0001}, 1x0x1 \ {10001, 11001, 1x001}}
{0xx01 \ {01x01, 00001, 01101}, x1xx0 \ {11x10, 01100, x11x0}, xx10x \ {0x101, 1x10x, 11101}}
{
   0xx01x0001 \ {
   0xx01x0001, 0xx01x0001, 01x01x0001, 00001x0001, 01101x0001}, x1x00x0000 \ {
   x1x00x0000, 01100x0000, x1100x0000}, xx10xx000x \ {
   xx101x0000, xx100x0001, xx10xx0000, xx10xx0001, xx10xx0001, 0x101x000x, 1x10xx000x, 11101x000x}, 0xx011x001 \ {
   0xx0110001, 0xx0111001, 0xx011x001, 01x011x001, 000011x001, 011011x001}, xx1011x001 \ {
   xx10110001, xx10111001, xx1011x001, 0x1011x001, 1x1011x001, 111011x001}}

{00xx0 \ {00110, 00x00}}
{00xx0 \ {001x0, 00100, 000x0}, 1010x \ {10100, 10101}, x10xx \ {x1000, x10x0, 110x0}}
{
   00xx000xx0 \ {
   00x1000x00, 00x0000x10, 00xx000110, 00xx000x00, 001x000xx0, 0010000xx0, 000x000xx0}, 1010000x00 \ {
   1010000x00, 1010000x00}, x10x000xx0 \ {
   x101000x00, x100000x10, x10x000110, x10x000x00, x100000xx0, x10x000xx0, 110x000xx0}}

{x00xx \ {1000x, 100x0, 0001x}, x1xx1 \ {111x1, x1011, 11xx1}, 00xx1 \ {00101, 000x1, 001x1}}
{0x10x \ {0110x, 0010x, 00100}, x0101 \ {10101, 00101}, x10xx \ {11011, 11010, x10x0}}
{
   0x10xx000x \ {
   0x101x0000, 0x100x0001, 0x10x1000x, 0x10x10000, 0110xx000x, 0010xx000x, 00100x000x}, x0101x0001 \ {
   x010110001, 10101x0001, 00101x0001}, x10xxx00xx \ {
   x10x1x00x0, x10x0x00x1, x101xx000x, x100xx001x, x10xx1000x, x10xx100x0, x10xx0001x, 11011x00xx, 11010x00xx, x10x0x00xx}, 0x101x1x01 \ {
   0x10111101, 0x10111x01, 01101x1x01, 00101x1x01}, x0101x1x01 \ {
   x010111101, x010111x01, 10101x1x01, 00101x1x01}, x10x1x1xx1 \ {
   x1011x1x01, x1001x1x11, x10x1111x1, x10x1x1011, x10x111xx1, 11011x1xx1}, 0x10100x01 \ {
   0x10100101, 0x10100001, 0x10100101, 0110100x01, 0010100x01}, x010100x01 \ {
   x010100101, x010100001, x010100101, 1010100x01, 0010100x01}, x10x100xx1 \ {
   x101100x01, x100100x11, x10x100101, x10x1000x1, x10x1001x1, 1101100xx1}}

{}
{x0x10 \ {00110, x0110}, 0xx11 \ {00011, 01x11}}
{}

{}
{x10x1 \ {01001, x1011, 01011}, 0xx01 \ {0x001, 00101, 01101}}
{}

{1x110 \ {10110, 11110, 11110}}
{x11x1 \ {11101, x1101, x1101}}
{}

{1x11x \ {11110, 10111, 11111}}
{1xxx0 \ {1x000, 10x00, 110x0}}
{
   1xx101x110 \ {
   1xx1011110, 110101x110}}

{}
{x0xx1 \ {10101, 100x1, x0101}, 1x0xx \ {1001x, 11010}}
{}

{xxxx1 \ {01101, 01001, xx0x1}, 00x10 \ {00110, 00010, 00010}}
{0xx10 \ {00010, 01x10, 01010}, 1x010 \ {11010, 10010}}
{
   0xx1000x10 \ {
   0xx1000110, 0xx1000010, 0xx1000010, 0001000x10, 01x1000x10, 0101000x10}, 1x01000x10 \ {
   1x01000110, 1x01000010, 1x01000010, 1101000x10, 1001000x10}}

{01x1x \ {01x11, 01011}}
{00xx1 \ {001x1, 00101, 00111}, x101x \ {11010, 11011}}
{
   00x1101x11 \ {
   00x1101x11, 00x1101011, 0011101x11, 0011101x11}, x101x01x1x \ {
   x101101x10, x101001x11, x101x01x11, x101x01011, 1101001x1x, 1101101x1x}}

{}
{}
{}

{}
{x000x \ {10001, 1000x, 10000}}
{}

{00xxx \ {00111, 00011, 00x1x}, 010x1 \ {01001, 01011}}
{xxx11 \ {x1111, x0x11, 0x011}, 1x0x1 \ {100x1, 110x1, 10001}}
{
   xxx1100x11 \ {
   xxx1100111, xxx1100011, xxx1100x11, x111100x11, x0x1100x11, 0x01100x11}, 1x0x100xx1 \ {
   1x01100x01, 1x00100x11, 1x0x100111, 1x0x100011, 1x0x100x11, 100x100xx1, 110x100xx1, 1000100xx1}, xxx1101011 \ {
   xxx1101011, x111101011, x0x1101011, 0x01101011}, 1x0x1010x1 \ {
   1x01101001, 1x00101011, 1x0x101001, 1x0x101011, 100x1010x1, 110x1010x1, 10001010x1}}

{x0x1x \ {00110, 1011x, x0011}}
{}
{}

{01x1x \ {01x10, 01111, 01111}, x0x01 \ {10001, 10101, x0101}}
{x110x \ {11101, 01100}, xxx01 \ {11001, 0x101, 01101}}
{
   x1101x0x01 \ {
   x110110001, x110110101, x1101x0101, 11101x0x01}, xxx01x0x01 \ {
   xxx0110001, xxx0110101, xxx01x0101, 11001x0x01, 0x101x0x01, 01101x0x01}}

{1xx0x \ {1x000, 11100, 10000}, 1x01x \ {10011, 1001x}}
{x11xx \ {111xx, x110x, x11x0}}
{
   x110x1xx0x \ {
   x11011xx00, x11001xx01, x110x1x000, x110x11100, x110x10000, 1110x1xx0x, x110x1xx0x, x11001xx0x}, x111x1x01x \ {
   x11111x010, x11101x011, x111x10011, x111x1001x, 1111x1x01x, x11101x01x}}

{}
{}
{}

{xx010 \ {11010, 0x010}}
{xxx10 \ {10110, 10x10, x1010}, 1x011 \ {11011, 10011}}
{
   xxx10xx010 \ {
   xxx1011010, xxx100x010, 10110xx010, 10x10xx010, x1010xx010}}

{0x0xx \ {0101x, 01011, 010x0}, 1x001 \ {10001, 11001, 11001}}
{xx0x1 \ {x10x1, 010x1, 01001}}
{
   xx0x10x0x1 \ {
   xx0110x001, xx0010x011, xx0x101011, xx0x101011, x10x10x0x1, 010x10x0x1, 010010x0x1}, xx0011x001 \ {
   xx00110001, xx00111001, xx00111001, x10011x001, 010011x001, 010011x001}}

{x0010 \ {10010, 00010}, 10x00 \ {10100, 10000}}
{x1x1x \ {0111x, 01011}, x1xx0 \ {x11x0, 01000, 01110}}
{
   x1x10x0010 \ {
   x1x1010010, x1x1000010, 01110x0010}, x1x0010x00 \ {
   x1x0010100, x1x0010000, x110010x00, 0100010x00}}

{x11x1 \ {111x1, 011x1, 11101}, x0x01 \ {10101, 10x01, x0001}}
{xx10x \ {x010x, x1101, 1x10x}, x11x0 \ {011x0, 11100}}
{
   xx101x1101 \ {
   xx10111101, xx10101101, xx10111101, x0101x1101, x1101x1101, 1x101x1101}, xx101x0x01 \ {
   xx10110101, xx10110x01, xx101x0001, x0101x0x01, x1101x0x01, 1x101x0x01}}

{x1x11 \ {11111, x1111, 11x11}, x1x01 \ {01101, x1101, 01x01}}
{10xx1 \ {10011, 10001, 101x1}}
{
   10x11x1x11 \ {
   10x1111111, 10x11x1111, 10x1111x11, 10011x1x11, 10111x1x11}, 10x01x1x01 \ {
   10x0101101, 10x01x1101, 10x0101x01, 10001x1x01, 10101x1x01}}

{xxxx1 \ {0x1x1, 0xxx1, xx0x1}, 1xxxx \ {11xxx, 1x101, 110xx}, 10xx1 \ {10x11, 101x1, 101x1}}
{1101x \ {11011, 11010, 11010}}
{
   11011xxx11 \ {
   110110x111, 110110xx11, 11011xx011, 11011xxx11}, 1101x1xx1x \ {
   110111xx10, 110101xx11, 1101x11x1x, 1101x1101x, 110111xx1x, 110101xx1x, 110101xx1x}, 1101110x11 \ {
   1101110x11, 1101110111, 1101110111, 1101110x11}}

{xxxx0 \ {xxx00, 00010, 01110}, 0x0x0 \ {01000, 00010, 010x0}}
{x1xx0 \ {x1100, 01100, 11x00}, x1010 \ {11010}}
{
   x1xx0xxxx0 \ {
   x1x10xxx00, x1x00xxx10, x1xx0xxx00, x1xx000010, x1xx001110, x1100xxxx0, 01100xxxx0, 11x00xxxx0}, x1010xxx10 \ {
   x101000010, x101001110, 11010xxx10}, x1xx00x0x0 \ {
   x1x100x000, x1x000x010, x1xx001000, x1xx000010, x1xx0010x0, x11000x0x0, 011000x0x0, 11x000x0x0}, x10100x010 \ {
   x101000010, x101001010, 110100x010}}

{}
{x0100 \ {00100}, 00xxx \ {00011, 0011x, 000x1}}
{}

{x10xx \ {010xx, 11010, x1010}, xx100 \ {x0100, 01100}}
{x000x \ {00001, 1000x}, x10x0 \ {11010, x1010, 01010}, xx11x \ {1x11x, 0x110, 1x110}}
{
   x000xx100x \ {
   x0001x1000, x0000x1001, x000x0100x, 00001x100x, 1000xx100x}, x10x0x10x0 \ {
   x1010x1000, x1000x1010, x10x0010x0, x10x011010, x10x0x1010, 11010x10x0, x1010x10x0, 01010x10x0}, xx11xx101x \ {
   xx111x1010, xx110x1011, xx11x0101x, xx11x11010, xx11xx1010, 1x11xx101x, 0x110x101x, 1x110x101x}, x0000xx100 \ {
   x0000x0100, x000001100, 10000xx100}, x1000xx100 \ {
   x1000x0100, x100001100}}

{10xx1 \ {10101, 10x01, 10001}}
{x0xx0 \ {x0110, x0000, 10100}}
{}

{11xxx \ {1110x, 11111, 11100}, 1011x \ {10111, 10110}}
{0x101 \ {00101, 01101}, 10x1x \ {10110, 10010, 10x10}}
{
   0x10111x01 \ {
   0x10111101, 0010111x01, 0110111x01}, 10x1x11x1x \ {
   10x1111x10, 10x1011x11, 10x1x11111, 1011011x1x, 1001011x1x, 10x1011x1x}, 10x1x1011x \ {
   10x1110110, 10x1010111, 10x1x10111, 10x1x10110, 101101011x, 100101011x, 10x101011x}}

{x0xx0 \ {00010, 10000, 00100}, xx0x0 \ {00000, xx000, 010x0}}
{}
{}

{xx1xx \ {10111, x0110, 111x0}}
{00xxx \ {00xx0, 00010}, xxx01 \ {1x001, 01001, 1xx01}}
{
   00xxxxx1xx \ {
   00xx1xx1x0, 00xx0xx1x1, 00x1xxx10x, 00x0xxx11x, 00xxx10111, 00xxxx0110, 00xxx111x0, 00xx0xx1xx, 00010xx1xx}, xxx01xx101 \ {
   1x001xx101, 01001xx101, 1xx01xx101}}

{x1x11 \ {x1011, 01111, 11011}, xx01x \ {10010, 0001x, 0x01x}}
{0x1x1 \ {0x111, 01111, 011x1}, 0xxxx \ {01x0x, 0x10x, 01x00}}
{
   0x111x1x11 \ {
   0x111x1011, 0x11101111, 0x11111011, 0x111x1x11, 01111x1x11, 01111x1x11}, 0xx11x1x11 \ {
   0xx11x1011, 0xx1101111, 0xx1111011}, 0x111xx011 \ {
   0x11100011, 0x1110x011, 0x111xx011, 01111xx011, 01111xx011}, 0xx1xxx01x \ {
   0xx11xx010, 0xx10xx011, 0xx1x10010, 0xx1x0001x, 0xx1x0x01x}}

{xxx00 \ {0xx00, 00000, 10x00}}
{0010x \ {00101, 00100}}
{
   00100xxx00 \ {
   001000xx00, 0010000000, 0010010x00, 00100xxx00}}

{}
{0xx1x \ {0xx10, 00111, 00x1x}, 10x1x \ {1001x}}
{}

{xx100 \ {00100, 0x100, 01100}, 1x011 \ {10011, 11011}}
{11x1x \ {11011, 1111x}}
{
   11x111x011 \ {
   11x1110011, 11x1111011, 110111x011, 111111x011}}

{1x01x \ {10011, 1101x, 1101x}, 0100x \ {01001, 01000}}
{x0xx1 \ {10001, x0011, x0111}, 0xx00 \ {01x00, 00000, 0x000}}
{
   x0x111x011 \ {
   x0x1110011, x0x1111011, x0x1111011, x00111x011, x01111x011}, x0x0101001 \ {
   x0x0101001, 1000101001}, 0xx0001000 \ {
   0xx0001000, 01x0001000, 0000001000, 0x00001000}}

{xxx11 \ {0x011, 00011, xx011}, 1xxx1 \ {1xx11, 10xx1, 11111}}
{x1000 \ {11000, 01000}}
{}

{00xxx \ {0001x, 00110, 001x1}, 1x010 \ {11010, 10010}}
{0110x \ {01100, 01101, 01101}, x1x00 \ {01x00, 01100, 11000}}
{
   0110x00x0x \ {
   0110100x00, 0110000x01, 0110x00101, 0110000x0x, 0110100x0x, 0110100x0x}, x1x0000x00 \ {
   01x0000x00, 0110000x00, 1100000x00}}

{10x1x \ {10x10, 10010, 1011x}, xx00x \ {0x00x, 11001, 01001}, 010x1 \ {01001, 01011, 01011}}
{x010x \ {x0101, 00101}, 110xx \ {11000, 11011}}
{
   1101x10x1x \ {
   1101110x10, 1101010x11, 1101x10x10, 1101x10010, 1101x1011x, 1101110x1x}, x010xxx00x \ {
   x0101xx000, x0100xx001, x010x0x00x, x010x11001, x010x01001, x0101xx00x, 00101xx00x}, 1100xxx00x \ {
   11001xx000, 11000xx001, 1100x0x00x, 1100x11001, 1100x01001, 11000xx00x}, x010101001 \ {
   x010101001, x010101001, 0010101001}, 110x1010x1 \ {
   1101101001, 1100101011, 110x101001, 110x101011, 110x101011, 11011010x1}}

{0x0x0 \ {01010, 00010, 0x010}, 000xx \ {00011, 00000, 0001x}, 1x100 \ {10100, 11100}}
{x1x11 \ {01x11, x1011, 11011}, x111x \ {11110, x1111, 01111}}
{
   x11100x010 \ {
   x111001010, x111000010, x11100x010, 111100x010}, x1x1100011 \ {
   x1x1100011, x1x1100011, 01x1100011, x101100011, 1101100011}, x111x0001x \ {
   x111100010, x111000011, x111x00011, x111x0001x, 111100001x, x11110001x, 011110001x}}

{x1x1x \ {01110, x1110, x1011}}
{x01x0 \ {10110, x0100, 10100}}
{
   x0110x1x10 \ {
   x011001110, x0110x1110, 10110x1x10}}

{}
{}
{}

{1xxx0 \ {1x000, 10110, 10000}}
{1xx10 \ {10x10, 10010, 10010}, x10x0 \ {01000, 110x0, 01010}, x1xx0 \ {111x0, 01000, x1000}}
{
   1xx101xx10 \ {
   1xx1010110, 10x101xx10, 100101xx10, 100101xx10}, x10x01xxx0 \ {
   x10101xx00, x10001xx10, x10x01x000, x10x010110, x10x010000, 010001xxx0, 110x01xxx0, 010101xxx0}, x1xx01xxx0 \ {
   x1x101xx00, x1x001xx10, x1xx01x000, x1xx010110, x1xx010000, 111x01xxx0, 010001xxx0, x10001xxx0}}

{x10xx \ {0101x, 11000, x1000}, 00xxx \ {000x0, 001x1, 001x1}}
{0x1xx \ {00111, 0110x, 0x101}}
{
   0x1xxx10xx \ {
   0x1x1x10x0, 0x1x0x10x1, 0x11xx100x, 0x10xx101x, 0x1xx0101x, 0x1xx11000, 0x1xxx1000, 00111x10xx, 0110xx10xx, 0x101x10xx}, 0x1xx00xxx \ {
   0x1x100xx0, 0x1x000xx1, 0x11x00x0x, 0x10x00x1x, 0x1xx000x0, 0x1xx001x1, 0x1xx001x1, 0011100xxx, 0110x00xxx, 0x10100xxx}}

{x0000 \ {10000, 00000, 00000}, 0x10x \ {01101, 0110x, 0110x}}
{x1xxx \ {01111, 11x1x, 1110x}}
{
   x1x00x0000 \ {
   x1x0010000, x1x0000000, x1x0000000, 11100x0000}, x1x0x0x10x \ {
   x1x010x100, x1x000x101, x1x0x01101, x1x0x0110x, x1x0x0110x, 1110x0x10x}}

{01x1x \ {01x10, 01110, 01110}}
{0100x \ {01000, 01001, 01001}, 1x000 \ {11000, 10000}, 0x110 \ {00110}}
{
   0x11001x10 \ {
   0x11001x10, 0x11001110, 0x11001110, 0011001x10}}

{x00x0 \ {100x0, 00000, x0010}, 1x110 \ {11110}}
{001xx \ {00110, 001x0}, xxx01 \ {0xx01, 11x01, 11001}}
{
   001x0x00x0 \ {
   00110x0000, 00100x0010, 001x0100x0, 001x000000, 001x0x0010, 00110x00x0, 001x0x00x0}, 001101x110 \ {
   0011011110, 001101x110, 001101x110}}

{xxx1x \ {1x11x, 1xx1x, 01010}, 0x0xx \ {00010, 0x00x, 00011}}
{x1xx0 \ {01xx0, x1000, 111x0}}
{
   x1x10xxx10 \ {
   x1x101x110, x1x101xx10, x1x1001010, 01x10xxx10, 11110xxx10}, x1xx00x0x0 \ {
   x1x100x000, x1x000x010, x1xx000010, x1xx00x000, 01xx00x0x0, x10000x0x0, 111x00x0x0}}

{xxx01 \ {x0001, 0xx01, 1x101}, 00x10 \ {00110, 00010}}
{1x1x1 \ {10101, 101x1, 10111}}
{
   1x101xxx01 \ {
   1x101x0001, 1x1010xx01, 1x1011x101, 10101xxx01, 10101xxx01}}

{1x1x1 \ {10111, 10101, 11111}}
{0xx01 \ {01001, 0x001, 01x01}}
{
   0xx011x101 \ {
   0xx0110101, 010011x101, 0x0011x101, 01x011x101}}

{1x1x1 \ {10101, 10111, 10111}, x0xx1 \ {00101, 00x11, 10111}}
{x11x1 \ {x1111, 01111, 01101}}
{
   x11x11x1x1 \ {
   x11111x101, x11011x111, x11x110101, x11x110111, x11x110111, x11111x1x1, 011111x1x1, 011011x1x1}, x11x1x0xx1 \ {
   x1111x0x01, x1101x0x11, x11x100101, x11x100x11, x11x110111, x1111x0xx1, 01111x0xx1, 01101x0xx1}}

{10x1x \ {10010, 10x11, 10x10}, xxxx1 \ {0xxx1, 10xx1, 1x011}}
{110xx \ {11010, 11001}}
{
   1101x10x1x \ {
   1101110x10, 1101010x11, 1101x10010, 1101x10x11, 1101x10x10, 1101010x1x}, 110x1xxxx1 \ {
   11011xxx01, 11001xxx11, 110x10xxx1, 110x110xx1, 110x11x011, 11001xxxx1}}

{}
{10xx0 \ {10000, 10110}, xxx11 \ {01x11, 01011, x0011}, 0xxx0 \ {01xx0, 0xx10, 0x1x0}}
{}

{00xx1 \ {001x1, 00x01, 000x1}, 0x00x \ {0000x, 01000, 0100x}}
{00x0x \ {00001, 00100}, 01xx1 \ {01101, 01x11, 01x11}}
{
   00x0100x01 \ {
   00x0100101, 00x0100x01, 00x0100001, 0000100x01}, 01xx100xx1 \ {
   01x1100x01, 01x0100x11, 01xx1001x1, 01xx100x01, 01xx1000x1, 0110100xx1, 01x1100xx1, 01x1100xx1}, 00x0x0x00x \ {
   00x010x000, 00x000x001, 00x0x0000x, 00x0x01000, 00x0x0100x, 000010x00x, 001000x00x}, 01x010x001 \ {
   01x0100001, 01x0101001, 011010x001}}

{x1x0x \ {01x01, 11x0x, 11x0x}, x1001 \ {01001}}
{00xx1 \ {00111, 00001, 00011}}
{
   00x01x1x01 \ {
   00x0101x01, 00x0111x01, 00x0111x01, 00001x1x01}, 00x01x1001 \ {
   00x0101001, 00001x1001}}

{x1101 \ {01101, 11101}, 101xx \ {101x0, 10110, 10100}}
{001x0 \ {00100}}
{
   001x0101x0 \ {
   0011010100, 0010010110, 001x0101x0, 001x010110, 001x010100, 00100101x0}}

{xx101 \ {11101, x0101, 00101}}
{1011x \ {10111}, x0x10 \ {x0110, x0010, 10x10}}
{}

{0xx10 \ {01110, 00x10, 01010}}
{100xx \ {1000x, 1001x, 10000}, 0x0x1 \ {00001, 010x1, 00011}, 00xxx \ {0010x, 00xx0, 00001}}
{
   100100xx10 \ {
   1001001110, 1001000x10, 1001001010, 100100xx10}, 00x100xx10 \ {
   00x1001110, 00x1000x10, 00x1001010, 00x100xx10}}

{x01x1 \ {101x1, 001x1, 001x1}}
{xx01x \ {x101x, 1x011, 10011}, 0001x \ {00010, 00011, 00011}}
{
   xx011x0111 \ {
   xx01110111, xx01100111, xx01100111, x1011x0111, 1x011x0111, 10011x0111}, 00011x0111 \ {
   0001110111, 0001100111, 0001100111, 00011x0111, 00011x0111}}

{xx011 \ {11011, 0x011, 01011}}
{x10xx \ {110x1, 01010}}
{
   x1011xx011 \ {
   x101111011, x10110x011, x101101011, 11011xx011}}

{x0x01 \ {00001, 00101, 10101}, 1x011 \ {11011, 10011, 10011}, 11xxx \ {11x1x, 11100, 11011}}
{}
{}

{11x0x \ {1110x, 11x00, 11x01}}
{11x00 \ {11100}}
{
   11x0011x00 \ {
   11x0011100, 11x0011x00, 1110011x00}}

{x0xx0 \ {x00x0, x0010, 00000}}
{xx111 \ {01111, 10111, 00111}}
{}

{xxx10 \ {11110, 1x110, 01010}}
{}
{}

{010xx \ {01010, 0101x}, xxxx0 \ {x1010, 10x10, 01x10}}
{}
{}

{1x1x0 \ {11110, 111x0, 10110}, 000xx \ {000x0, 00001}, x0xx0 \ {10110, 10x10, 101x0}}
{1xxx0 \ {11000, 100x0, 11110}}
{
   1xxx01x1x0 \ {
   1xx101x100, 1xx001x110, 1xxx011110, 1xxx0111x0, 1xxx010110, 110001x1x0, 100x01x1x0, 111101x1x0}, 1xxx0000x0 \ {
   1xx1000000, 1xx0000010, 1xxx0000x0, 11000000x0, 100x0000x0, 11110000x0}, 1xxx0x0xx0 \ {
   1xx10x0x00, 1xx00x0x10, 1xxx010110, 1xxx010x10, 1xxx0101x0, 11000x0xx0, 100x0x0xx0, 11110x0xx0}}

{}
{x10xx \ {x10x1, 110x0, 010x1}, x001x \ {x0011, 10010, 10010}}
{}

{xxx1x \ {x111x, 10111, 1x11x}, 01x11 \ {01011}}
{xxx10 \ {0x010, xx110, xx010}, 010x0 \ {01000, 01010}}
{
   xxx10xxx10 \ {
   xxx10x1110, xxx101x110, 0x010xxx10, xx110xxx10, xx010xxx10}, 01010xxx10 \ {
   01010x1110, 010101x110, 01010xxx10}}

{1xx01 \ {10x01, 10101}}
{1011x \ {10110, 10111, 10111}, x1x1x \ {1101x, x111x, 01x10}}
{}

{}
{0x1x0 \ {001x0, 01110, 0x100}, 0xx11 \ {00x11, 00111, 0x011}}
{}

{xxx1x \ {1011x, 1xx1x, 0x110}, x0x11 \ {x0111, 10x11, 00111}}
{0x10x \ {0010x, 01100, 00101}}
{}

{1xx00 \ {10100, 1x100, 11100}}
{1x0xx \ {10010, 100xx, 110xx}, x00x1 \ {x0011, 00001, 00011}}
{
   1x0001xx00 \ {
   1x00010100, 1x0001x100, 1x00011100, 100001xx00, 110001xx00}}

{001x0 \ {00110, 00100, 00100}}
{0xx11 \ {00x11, 01111, 00111}, xx01x \ {x101x, 10011, 1001x}}
{
   xx01000110 \ {
   xx01000110, x101000110, 1001000110}}

{xxx00 \ {1xx00, 00x00, 00100}}
{111xx \ {111x0, 11101, 11101}, 01x0x \ {01000, 0110x, 0100x}}
{
   11100xxx00 \ {
   111001xx00, 1110000x00, 1110000100, 11100xxx00}, 01x00xxx00 \ {
   01x001xx00, 01x0000x00, 01x0000100, 01000xxx00, 01100xxx00, 01000xxx00}}

{xx10x \ {x010x, x0101, 0010x}}
{1x0xx \ {1101x, 10001, 10010}, x1xx1 \ {01x11, 01xx1, 11101}}
{
   1x00xxx10x \ {
   1x001xx100, 1x000xx101, 1x00xx010x, 1x00xx0101, 1x00x0010x, 10001xx10x}, x1x01xx101 \ {
   x1x01x0101, x1x01x0101, x1x0100101, 01x01xx101, 11101xx101}}

{1x11x \ {10111, 11111, 1x110}}
{1x011 \ {10011, 11011}, 1xxxx \ {10xx0, 101x0, 10011}}
{
   1x0111x111 \ {
   1x01110111, 1x01111111, 100111x111, 110111x111}, 1xx1x1x11x \ {
   1xx111x110, 1xx101x111, 1xx1x10111, 1xx1x11111, 1xx1x1x110, 10x101x11x, 101101x11x, 100111x11x}}

{01xx0 \ {011x0, 01x00, 01100}, x00x1 \ {00001, 10011}}
{0x10x \ {0010x, 0x100, 00100}, 1000x \ {10000, 10001, 10001}}
{
   0x10001x00 \ {
   0x10001100, 0x10001x00, 0x10001100, 0010001x00, 0x10001x00, 0010001x00}, 1000001x00 \ {
   1000001100, 1000001x00, 1000001100, 1000001x00}, 0x101x0001 \ {
   0x10100001, 00101x0001}, 10001x0001 \ {
   1000100001, 10001x0001, 10001x0001}}

{00x0x \ {00101, 00x00, 0000x}, 10x01 \ {10101, 10001}}
{1xx01 \ {11101, 1x001}}
{
   1xx0100x01 \ {
   1xx0100101, 1xx0100001, 1110100x01, 1x00100x01}, 1xx0110x01 \ {
   1xx0110101, 1xx0110001, 1110110x01, 1x00110x01}}

{}
{xx00x \ {xx001, x000x, 1000x}}
{}

{111x1 \ {11111}, 1x010 \ {11010, 10010}}
{x1x00 \ {01000, 11100, x1000}, 100xx \ {1001x, 10001, 10001}}
{
   100x1111x1 \ {
   1001111101, 1000111111, 100x111111, 10011111x1, 10001111x1, 10001111x1}, 100101x010 \ {
   1001011010, 1001010010, 100101x010}}

{111xx \ {1110x, 11110, 111x1}, 0xx11 \ {00111, 01011, 00011}, xx00x \ {0x001, x0001, 0100x}}
{x10xx \ {0101x, 1100x}}
{
   x10xx111xx \ {
   x10x1111x0, x10x0111x1, x101x1110x, x100x1111x, x10xx1110x, x10xx11110, x10xx111x1, 0101x111xx, 1100x111xx}, x10110xx11 \ {
   x101100111, x101101011, x101100011, 010110xx11}, x100xxx00x \ {
   x1001xx000, x1000xx001, x100x0x001, x100xx0001, x100x0100x, 1100xxx00x}}

{xxx10 \ {10x10, 0xx10, 00010}}
{x1101 \ {01101, 11101}}
{}

{
   11000110000000000001}

{
   00000000000100011011}

{
   00000000000100011011}

{
   11000110000000000001}

{
   00000000000100011011}

{
   11000000000001000110}

empty
{
   }

false
full
{
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}

true
{
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \ {
   xxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxx, 
   xxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxx, 
   xxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxx, 
   xxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxx, 
   xxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxx, 
   xxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxx, 
   xxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxx, 
   xxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxx, 
   xxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxx, 
   xxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxx, 
   xxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxx, 
   xxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxx}}

{
   }

{
   }

project
{
   xxxxxxxxxxxxxxxxxx}

{
   }

{
   000000111000000110000000000001, 
   000000100000010000000000001000, 
   000000000100010000000000100000}

{
   000000111000000110, 
   000000100000010000, 
   000000000100010000}

t1 before:{
   000000000100010000000000100000}

t1 after:{
   000000000100010000000000100000, 
   000000111000000110000000000001, 
   000000100000010000000000001000}

delta:{
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}

{
   001001001000001001, 
   010001001000001001}

{
   001001001000001001}

filter: (= (:var 0) (:var 1)) {xxx \ {x01, x10}}

filter: (or (= (:var 0) (:var 1)) (= (:var 0) (:var 2))) {xxx \ {001, 110}}

filter: (or (= (:var 0) (:var 1)) (= (:var 0) (:var 2))) {xxx \ {001, 110}}

filter interpreted
filter: true {
   xxxxxxxxxxxxxxxxxx}

filter: false {
   }

filter: (= (:var 0) (:var 2)) {
   xxxxxxxxxxxxxxxxxx \ {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}}

filter: (not (= (:var 0) (:var 2))) {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}

filter: (= (:var 0) #b010) {
   xxxxxxxxxxxxxxx010}

filter: (= ((_ extract 2 1) (:var 0)) #b11) {
   xxxxxxxxxxxxxxx11x}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11) (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xxxxxxxxxxxx, 
   xx1xx0xxxxxxxxxxxx, 
   x0xx1xxxxxxxxxxxxx, 
   x1xx0xxxxxxxxxxxxx, 
   0xx1xxxxxxxxxxxxxx, 
   1xx0xxxxxxxxxxxxxx}, 
   1xx0xxxxxxxxxxx11x \ {
   1x00x1xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x, 
   10x01xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   0xx1xxxxxxxxxxx11x \ {
   0x01x1xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   01x10xxxxxxxxxx11x}, 
   x1xx0xxxxxxxxxx11x \ {
   x10x01xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   01x10xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   11x00xxxxxxxxxx11x \ {
   110001xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   01x10xxxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x0xx1xxxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   10x01xxxxxxxxxx11x}, 
   10x01xxxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   00x11xxxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   001110xxxxxxxxx11x}, 
   xx1xx0xxxxxxxxx11x \ {
   x01x10xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x}, 
   1x10x0xxxxxxxxx11x \ {
   101010xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   0x11x0xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x11x00xxxxxxxxx11x \ {
   011100xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   111000xxxxxxxxx11x, 
   011100xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   101010xxxxxxxxx11x, 
   001110xxxxxxxxx11x, 
   xx0xx1xxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x10x01xxxxxxxxx11x, 
   0x01x1xxxxxxxxx11x, 
   1x00x1xxxxxxxxx11x}, 
   1x00x1xxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   0x01x1xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   010101xxxxxxxxx11x}, 
   x10x01xxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   110001xxxxxxxxx11x, 
   010101xxxxxxxxx11x, 
   x00x11xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   100011xxxxxxxxx11x}, 
   100011xxxxxxxxx11x, 
   000111xxxxxxxxx11x}

filter: (= ((_ extract 2 1) (:var 3)) ((_ extract 1 0) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0x1xxxxxxxxxxxxx, 
   xx1x0xxxxxxxxxxxxx, 
   x0x1xxxxxxxxxxxxxx, 
   x1x0xxxxxxxxxxxxxx}}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11)
    (= ((_ extract 2 1) (:var 3)) ((_ extract 1 0) (:var 4)))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0x1xxxxxxxxxxxxx, 
   xx1x0xxxxxxxxxxxxx, 
   x0x1xxxxxxxxxxxxxx, 
   x1x0xxxxxxxxxxxxxx}, 
   x1x0xxxxxxxxxxx11x \ {
   x1001xxxxxxxxxx11x, 
   x1100xxxxxxxxxx11x}, 
   x0x1xxxxxxxxxxx11x \ {
   x0011xxxxxxxxxx11x, 
   x0110xxxxxxxxxx11x}, 
   xx1x0xxxxxxxxxx11x \ {
   x0110xxxxxxxxxx11x, 
   x1100xxxxxxxxxx11x}, 
   x1100xxxxxxxxxx11x, 
   x0110xxxxxxxxxx11x, 
   xx0x1xxxxxxxxxx11x \ {
   x0011xxxxxxxxxx11x, 
   x1001xxxxxxxxxx11x}, 
   x1001xxxxxxxxxx11x, 
   x0011xxxxxxxxxx11x}

filter: (or (= (:var 0) (:var 2)) (= (:var 0) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xxxxx0xxxxxxxx1, 
   x0xxxxxx0xxxxxxx11, 
   x1xxxxxx0xxxxxxx01, 
   0xxxxxxx0xxxxxx1x1, 
   1xxxxxxx0xxxxxx0x1, 
   xx1xxxxx1xxxxxxxx0, 
   x0xxxxxx1xxxxxxx10, 
   x1xxxxxx1xxxxxxx00, 
   0xxxxxxx1xxxxxx1x0, 
   1xxxxxxx1xxxxxx0x0, 
   xx0xxxx0xxxxxxxx11, 
   xx1xxxx0xxxxxxxx10, 
   x0xxxxx0xxxxxxxx1x, 
   0xxxxxx0xxxxxxx11x, 
   1xxxxxx0xxxxxxx01x, 
   xx0xxxx1xxxxxxxx01, 
   xx1xxxx1xxxxxxxx00, 
   x1xxxxx1xxxxxxxx0x, 
   0xxxxxx1xxxxxxx10x, 
   1xxxxxx1xxxxxxx00x, 
   xx0xxx0xxxxxxxx1x1, 
   xx1xxx0xxxxxxxx1x0, 
   x0xxxx0xxxxxxxx11x, 
   x1xxxx0xxxxxxxx10x, 
   0xxxxx0xxxxxxxx1xx, 
   xx0xxx1xxxxxxxx0x1, 
   xx1xxx1xxxxxxxx0x0, 
   x0xxxx1xxxxxxxx01x, 
   x1xxxx1xxxxxxxx00x, 
   1xxxxx1xxxxxxxx0xx}}

filter: (or (= (:var 0) (:var 2)) (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xx0xxxxxxxx1, 
   xx1xx0xx0xxxxxxxx1, 
   x0xx1xxx0xxxxxxxx1, 
   x1xx0xxx0xxxxxxxx1, 
   0xx1xxxx0xxxxxxxx1, 
   1xx0xxxx0xxxxxxxx1, 
   xx0xx1xx1xxxxxxxx0, 
   xx1xx0xx1xxxxxxxx0, 
   x0xx1xxx1xxxxxxxx0, 
   x1xx0xxx1xxxxxxxx0, 
   0xx1xxxx1xxxxxxxx0, 
   1xx0xxxx1xxxxxxxx0, 
   xx0xx1x0xxxxxxxx1x, 
   xx1xx0x0xxxxxxxx1x, 
   x0xx1xx0xxxxxxxx1x, 
   x1xx0xx0xxxxxxxx1x, 
   0xx1xxx0xxxxxxxx1x, 
   1xx0xxx0xxxxxxxx1x, 
   xx0xx1x1xxxxxxxx0x, 
   xx1xx0x1xxxxxxxx0x, 
   x0xx1xx1xxxxxxxx0x, 
   x1xx0xx1xxxxxxxx0x, 
   0xx1xxx1xxxxxxxx0x, 
   1xx0xxx1xxxxxxxx0x, 
   xx0xx10xxxxxxxx1xx, 
   xx1xx00xxxxxxxx1xx, 
   x0xx1x0xxxxxxxx1xx, 
   x1xx0x0xxxxxxxx1xx, 
   0xx1xx0xxxxxxxx1xx, 
   1xx0xx0xxxxxxxx1xx, 
   xx0xx11xxxxxxxx0xx, 
   xx1xx01xxxxxxxx0xx, 
   x0xx1x1xxxxxxxx0xx, 
   x1xx0x1xxxxxxxx0xx, 
   0xx1xx1xxxxxxxx0xx, 
   1xx0xx1xxxxxxxx0xx}}

filter: (or (= ((_ extract 2 1) (:var 0)) ((_ extract 1 0) (:var 2)))
    (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xx0xxxxxxx1x, 
   xx1xx0xx0xxxxxxx1x, 
   x0xx1xxx0xxxxxxx1x, 
   x1xx0xxx0xxxxxxx1x, 
   0xx1xxxx0xxxxxxx1x, 
   1xx0xxxx0xxxxxxx1x, 
   xx0xx1xx1xxxxxxx0x, 
   xx1xx0xx1xxxxxxx0x, 
   x0xx1xxx1xxxxxxx0x, 
   x1xx0xxx1xxxxxxx0x, 
   0xx1xxxx1xxxxxxx0x, 
   1xx0xxxx1xxxxxxx0x, 
   xx0xx1x0xxxxxxx1xx, 
   xx1xx0x0xxxxxxx1xx, 
   x0xx1xx0xxxxxxx1xx, 
   x1xx0xx0xxxxxxx1xx, 
   0xx1xxx0xxxxxxx1xx, 
   1xx0xxx0xxxxxxx1xx, 
   xx0xx1x1xxxxxxx0xx, 
   xx1xx0x1xxxxxxx0xx, 
   x0xx1xx1xxxxxxx0xx, 
   x1xx0xx1xxxxxxx0xx, 
   0xx1xxx1xxxxxxx0xx, 
   1xx0xxx1xxxxxxx0xx}}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11) (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xxxxxxxxxxxx, 
   xx1xx0xxxxxxxxxxxx, 
   x0xx1xxxxxxxxxxxxx, 
   x1xx0xxxxxxxxxxxxx, 
   0xx1xxxxxxxxxxxxxx, 
   1xx0xxxxxxxxxxxxxx}, 
   1xx0xxxxxxxxxxx11x \ {
   1x00x1xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x, 
   10x01xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   0xx1xxxxxxxxxxx11x \ {
   0x01x1xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   01x10xxxxxxxxxx11x}, 
   x1xx0xxxxxxxxxx11x \ {
   x10x01xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   01x10xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   11x00xxxxxxxxxx11x \ {
   110001xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   01x10xxxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x0xx1xxxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   10x01xxxxxxxxxx11x}, 
   10x01xxxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   00x11xxxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   001110xxxxxxxxx11x}, 
   xx1xx0xxxxxxxxx11x \ {
   x01x10xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x}, 
   1x10x0xxxxxxxxx11x \ {
   101010xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   0x11x0xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x11x00xxxxxxxxx11x \ {
   011100xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   111000xxxxxxxxx11x, 
   011100xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   101010xxxxxxxxx11x, 
   001110xxxxxxxxx11x, 
   xx0xx1xxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x10x01xxxxxxxxx11x, 
   0x01x1xxxxxxxxx11x, 
   1x00x1xxxxxxxxx11x}, 
   1x00x1xxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   0x01x1xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   010101xxxxxxxxx11x}, 
   x10x01xxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   110001xxxxxxxxx11x, 
   010101xxxxxxxxx11x, 
   x00x11xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   100011xxxxxxxxx11x}, 
   100011xxxxxxxxx11x, 
   000111xxxxxxxxx11x}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11) (= (:var 3) #b011)) {
   xxxxxxxxxxxxxxx11x, 
   xxx011xxxxxxxxxxxx}

filter: (or (= (:var 0) #b101) (= (:var 3) #b101)) {
   xxxxxxxxxxxxxxx101, 
   xxx101xxxxxxxxxxxx}

filter: (or (= (:var 0) #b111) (= (:var 3) #b111)) {
   xxxxxxxxxxxxxxx111, 
   xxx111xxxxxxxxxxxx}

filter: (not (or (= (:var 0) (:var 2)) (= (:var 3) (:var 4)))) {
   xx0xx1xx0xxxxxxxx1, 
   xx0xx1xx1xxxxxxxx0, 
   xx0xx1x0xxxxxxxx1x, 
   xx0xx1x1xxxxxxxx0x, 
   xx0xx10xxxxxxxx1xx, 
   xx0xx11xxxxxxxx0xx, 
   xx1xx0xx0xxxxxxxx1, 
   xx1xx0xx1xxxxxxxx0, 
   xx1xx0x0xxxxxxxx1x, 
   xx1xx0x1xxxxxxxx0x, 
   xx1xx00xxxxxxxx1xx, 
   xx1xx01xxxxxxxx0xx, 
   x0xx1xxx0xxxxxxxx1, 
   x0xx1xxx1xxxxxxxx0, 
   x0xx1xx0xxxxxxxx1x, 
   x0xx1xx1xxxxxxxx0x, 
   x0xx1x0xxxxxxxx1xx, 
   x0xx1x1xxxxxxxx0xx, 
   x1xx0xxx0xxxxxxxx1, 
   x1xx0xxx1xxxxxxxx0, 
   x1xx0xx0xxxxxxxx1x, 
   x1xx0xx1xxxxxxxx0x, 
   x1xx0x0xxxxxxxx1xx, 
   x1xx0x1xxxxxxxx0xx, 
   0xx1xxxx0xxxxxxxx1, 
   0xx1xxxx1xxxxxxxx0, 
   0xx1xxx0xxxxxxxx1x, 
   0xx1xxx1xxxxxxxx0x, 
   0xx1xx0xxxxxxxx1xx, 
   0xx1xx1xxxxxxxx0xx, 
   1xx0xxxx0xxxxxxxx1, 
   1xx0xxxx1xxxxxxxx0, 
   1xx0xxx0xxxxxxxx1x, 
   1xx0xxx1xxxxxxxx0x, 
   1xx0xx0xxxxxxxx1xx, 
   1xx0xx1xxxxxxxx0xx}

filter: (= (:var 0) (:var 2)) {
   xxxxxxxxxxxxxxxxxx \ {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}}

filter: (not (= (:var 0) (:var 2))) {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}

PASS
(test udoc_relation :time 14.20 :before-memory 0.03 :after-memory 0.05)
{xxx \ {0x1}}
{xxx \ {0x0, 1x1}}
{0xxx \ {00xx, 0101, 0111}}
{}
{}
{0x01 \ {0001, 0101, 0101}}
{}
{}
{x1xx \ {01xx, 0101, x100}, x1x1 \ {x111, 1101}}
{}
{}
{}
{}
{}
{}
{x1xx \ {x10x, 11x1, 0100}}
{}
{1xx1 \ {1001, 1x11, 1011}}
{1xx0 \ {1000, 1x00, 1100}, 1xxx \ {11x1, 1x11, 1111}}
{x1x1 \ {1101, 0111, x111, 11x1}}
{xxx0 \ {x110, 0010, x000}}
{}
{}
{xx00 \ {0000, x000}, 0x00 \ {0000, 0100, 0100}}
{10xx \ {1001, 1000, 1010}}
{0000 \ {0000}}
{1x1x \ {1x10, 1x11}}
{x11x \ {0111, x111}}
{1x1x \ {1110, 1011, 1x10, 1x11, 111x}}
{}
{1x0x \ {1x01, 1000, 1000}}
{}
{0xx0 \ {0000, 00x0, 0100}}
{}
{}
{x1x1 \ {0101, 11x1, 1111}, 0x11 \ {0011}}
{10x0 \ {1000, 1010}}
{}
{xxxx \ {011x, 1x01}, 0xx1 \ {0x01, 00x1, 0011}, 1xxx \ {11xx, 11x0, 100x}}
{x10x \ {110x, 0101, 0100}, 1x01 \ {1101}}
{0x0x \ {0100, 0001, 010x, 000x}, 0101}
{0xx0 \ {0000, 0110, 0x00}}
{}
{}
{10xx \ {10x1, 10x0, 1000}}
{1xx0 \ {1x10, 11x0, 1010}, xxx1 \ {x1x1, 0011, x101}}
{x0x0 \ {x0x0}, x1x1 \ {x1x1}}
{x1x1 \ {1101, x101}, 0x0x \ {0001, 0101, 010x}}
{}
{}
{01xx \ {011x, 010x, 0110}, x000 \ {1000, 0000}}
{xx1x \ {xx10, 101x, 101x}, 0x10 \ {0010, 0110, 0110}}
{1x1x \ {1x1x}, 1010 \ {1010}}
{x0x0 \ {x010, x000, 10x0}}
{0xx1 \ {0101, 0111, 0011}, 0x00 \ {0000}}
{0000 \ {0000}}
{x1x0 \ {1100, 1110, 0110}}
{100x \ {1001, 1000}}
{0000 \ {0000}}
{1xx1 \ {1111, 11x1, 1101}, x0xx \ {x001, x000, x0x0}}
{0x00 \ {0000}, xx1x \ {001x, 1x11, 1x11}}
{1111, 0000 \ {0000}, 1x1x \ {1110, 1011, 1x10}}
{1x1x \ {1111, 101x, 1010}}
{xx1x \ {111x, 001x, xx10}}
{1x1x \ {1110, 1011, 101x, 1x11}}
{}
{0xx0 \ {0x00, 0110, 0100}}
{}
{0x1x \ {0111, 001x, 0x11}}
{00x0 \ {0010, 0000}}
{1010 \ {1010}}
{100x \ {1000}, xx10 \ {0110, x010, 0x10}, xx0x \ {1101, 1100, 100x}}
{0x0x \ {000x, 0001, 0100}}
{0x0x \ {0100, 0001, 000x}}
{x0xx \ {x001, 10x1, x01x}}
{x0xx \ {1011, 0000}, 110x \ {1101, 1100, 1100}}
{xxxx \ {x1x0, x0x1, 1x0x, 0x1x, xx01, xx1x}, 0x0x \ {0100, 0001, 0x01, 010x, 000x, 000x}}
{x001 \ {1001, 0001}}
{xx0x \ {1100, 0x0x, x10x}, 000x \ {0001}}
{0101 \ {0101}}
{x001 \ {1001, 0001, 0001}}
{10xx \ {1011, 1001, 10x0}}
{0101 \ {0101}}
{}
{0x00 \ {0000, 0100}}
{}
{x1xx \ {01x1, 010x, x1x0}}
{011x \ {0111, 0110}, x00x \ {x001, 1000}, xxxx \ {0000, 00xx, 0111}}
{1x1x \ {1110, 1011, 1x10, 111x, 101x}, 0x0x \ {0100, 0001, 0x00, 010x}, xxxx \ {x1x0, x0x1, 1x0x, 0x1x, xxx0}}
{01xx \ {01x1, 0110}}
{}
{}
{x111 \ {0111, 1111}, 101x \ {1010, 1011}}
{}
{}
{x101 \ {1101}}
{x1xx \ {1101, 01xx, x101}, 1x0x \ {1x01, 1x00}}
{0101 \ {0101}}
{001x \ {0010}, 1x1x \ {1111, 1010, 1x10}}
{0x0x \ {0000, 0x01, 000x}, 10xx \ {100x, 10x0, 1011}}
{1x1x \ {1110, 1011, 1x10, 101x, 111x}}
{}
{1x00 \ {1000}}
{}
{xx11 \ {0011, 1111, 1111}}
{xxx1 \ {1101, 1111, 0111}}
{1111}
{00xx \ {00x0, 00x1, 0001}}
{10x0 \ {1000}, x10x \ {0100, x101, x100}}
{x0x0 \ {x0x0}, 0x0x \ {
   0100, 0001, 0x00, 0x01, 0x01, 010x, 000x}}
{xx01 \ {1001, 0x01, 0101}}
{011x \ {0111, 0110}}
{}
{}
{x1xx \ {x10x, 1101, 0111}, xx11 \ {0111, 1111, 1x11}}
{}
{xx00 \ {0000, 0x00, 0100}}
{x11x \ {0111, 111x, x111}, x01x \ {x011, x010, x010}}
{}
{11x1 \ {1101}}
{1x1x \ {1011, 1110, 1x10}}
{1111}
{0x00 \ {0000, 0100}}
{0xxx \ {0x00, 0101, 0001}}
{0000 \ {0000}}
{x0x0 \ {10x0, 1000}, 0x0x \ {0x00, 0000, 010x}}
{xxx1 \ {xx11, xx01, x0x1}, 0xx0 \ {0100, 01x0}}
{x0x0 \ {1000, 0010}, 0101 \ {0101}, 0000 \ {0000}}
{x1x0 \ {01x0, 0110}}
{x010 \ {1010, 0010}}
{1010 \ {1010}}
{x1x0 \ {1110, 1100, x100}}
{1xx1 \ {1011, 1111}}
{}
{0xx0 \ {0000, 0x00, 01x0}}
{x0x1 \ {x001, 1001, 0011}, 01xx \ {0111, 0110, 010x}, 0xx1 \ {0101, 0111, 0111}}
{x0x0 \ {1000, 0010, x000, 10x0, 00x0, x000}}
{1x0x \ {1x00, 1100}, x0xx \ {x00x, 1000, x001}, 100x \ {1001, 1000}}
{xx0x \ {xx01, 1100, 010x}}
{0x0x \ {0100, 0001, 0x00, 010x}}
{1x1x \ {111x, 1010}, x001 \ {1001, 0001}}
{xx0x \ {0000, x000, 1101}}
{0101 \ {0101}}
{xx11 \ {0111, 0011, 0011}, 00x0 \ {0010, 0000}}
{0xxx \ {0x1x, 011x, 011x}}
{1111 \ {1111}, x0x0 \ {1000, 0010, x010, x000, 10x0}}
{}
{11x1 \ {1101, 1111}, xxx1 \ {0x11, xx11, 1x01}}
{}
{0xx1 \ {0x01, 00x1, 0111}, xx01 \ {1001, x001, x101}, 1xx0 \ {1x10, 1000, 1100}}
{01xx \ {011x, 01x0, 01x1}}
{x1x1 \ {x1x1}, 0101 \ {0101}, x0x0 \ {x0x0}}
{x0xx \ {0000, 10x1, 10x1}}
{x010 \ {1010, 0010}}
{1010 \ {1010}}
{xx00 \ {1000, 0x00, x000}, 00x0 \ {0000, 0010}}
{x100 \ {0100, 1100, 1100}, xx00 \ {x100, x000, 1000}}
{0000 \ {0000}}
{x010 \ {1010, 0010, 0010}, 000x \ {0001}}
{10xx \ {10x1, 101x}}
{1010 \ {1010}, 0x0x \ {0100, 0001, 0x01, 010x}}
{x1xx \ {11x1, x10x, 1100}, 0x11 \ {0111, 0011}}
{}
{}
{0x10 \ {0110}}
{}
{}
{}
{xx11 \ {1x11, x011}, 111x \ {1110}}
{}
{xx1x \ {0x10, x011, 111x}}
{0xx0 \ {0100, 01x0, 00x0}, 10xx \ {10x1, 1010}}
{1010 \ {1010}, 1x1x \ {1110, 1011, 111x, 101x}}
{}
{011x \ {0111, 0110}, 01x1 \ {0111, 0101}}
{}
{x1x0 \ {1100, 01x0, 1110}, 1x0x \ {1000, 110x}}
{10xx \ {1000, 100x, 1011}, 0xx0 \ {0100, 0x10, 0x00}, 00xx \ {001x, 00x1, 0011}}
{x0x0 \ {1000, 0010, 00x0, 00x0, x000, x010}, x0x0 \ {1000, 0010, 10x0, x000, x010}, 0000 \ {0000}, 0x0x \ {0100, 0001, 010x, 0x00}}
{11x0 \ {1110, 1100, 1100}}
{1x1x \ {111x, 1x11, 1111}, x110 \ {0110, 1110, 1110}, 00xx \ {00x0, 000x, 0011}}
{1010 \ {1010}, x0x0 \ {x0x0}}
{0x11 \ {0111, 0011, 0011}, x1xx \ {110x, 111x, 0100}}
{xxxx \ {110x, xx10, 11x0}}
{1111 \ {1111}, xxxx \ {x1x0, x0x1, 1x0x, 0x1x, 10xx, xx00}}
{}
{xx0x \ {xx00, 0000, x001}, 0x01 \ {0101}, xx0x \ {xx01, 1001, x100}}
{}
{0xxx \ {0010, 0x00, 0xx0}}
{xx00 \ {x100, 1x00, 1000}}
{0000 \ {0000}}
{xxx0 \ {1100, 0010, 1x10}, xx01 \ {1001, 0101}}
{x010 \ {0010, 1010}}
{1010 \ {1010}}
{x111 \ {1111, 0111}, x00x \ {1001, 0001, 0001}}
{010x \ {0100}}
{0x0x \ {0100, 0001, 000x, 0x01, 0x01}}
{xx11 \ {0011, x111, 0x11}, 1x00 \ {1000, 1100}}
{1xx1 \ {1x01, 1101, 1101}, 010x \ {0101, 0100}}
{1111, 0000 \ {0000}}
{00xx \ {00x1, 001x, 0001}}
{x11x \ {0111, 0110, 011x}}
{1x1x \ {1x1x}}
{0xxx \ {010x, 0x01}}
{1x11 \ {1111, 1011, 1011}}
{1111 \ {1111}}
{x1x0 \ {0110, 0100}, x01x \ {x010, 001x, 0010}}
{}
{}
{1xxx \ {1101, 10x0, 1x11}, x1x1 \ {01x1, 1111}}
{00x1 \ {0001, 0011}}
{x1x1 \ {1101, 0111, x111, 01x1, 11x1}}
{0x01 \ {0001}, xxx1 \ {1x01, 0001, 10x1}}
{1x1x \ {1x11, 1011, 1011}, 00xx \ {000x, 001x, 00x1}}
{0101 \ {0101}, 1111 \ {1111}, x1x1 \ {x1x1}}
{1xxx \ {1xx0, 111x, 1x1x}, x0x1 \ {0011, 10x1}, x01x \ {101x, 001x}}
{10x0 \ {1010, 1000}, 11x1 \ {1111, 1101, 1101}}
{x0x0 \ {x0x0}, x1x1 \ {1101, 0111, x111, 11x1, 01x1, 01x1}, 1010 \ {1010}, 1111 \ {1111}}
{x01x \ {1010, x010, 0011}}
{1x11 \ {1111, 1011}}
{1111 \ {1111}}
{}
{010x \ {0100, 0101}, xx00 \ {x000, 0100}}
{}
{xxx0 \ {x100, x010, 1x00}, xxx1 \ {0001, 1011, 1x01}}
{x010 \ {1010, 0010}, xx0x \ {x101, x10x, 1000}}
{1010 \ {1010}, 0000, 0101}
{x0xx \ {1000, 1010, 00x0}, xx00 \ {0100, 1x00, 0x00}}
{01xx \ {0101, 01x0, 0100}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, 01xx, x0xx, 00xx, xx00, xx10}, 0000 \ {0000}}
{x0x1 \ {0001, 1011}, 010x \ {0101}}
{x110 \ {1110, 0110, 0110}, 0x00 \ {0000}, 10xx \ {1001, 101x, 1010}}
{x1x1 \ {1101, 0111, 01x1, 11x1}, 0000, 0x0x \ {0100, 0001, 0x01, 010x}}
{00xx \ {00x0, 000x, 0001}}
{101x \ {1011, 1010, 1010}}
{1x1x \ {1110, 1011, 1x10, 111x, 101x, 101x}}
{01xx \ {0100, 0101}, 10xx \ {10x1, 1001, 1011}}
{xx01 \ {1001, x001, 0001}, 0xx1 \ {0111, 0001, 0101}}
{0101 \ {0101}, x1x1 \ {1101, 0111, x101, 01x1}}
{11x1 \ {1111, 1101, 1101}, x0x1 \ {10x1, 00x1}}
{xxxx \ {0x11, 0x1x, 00x0}, x111 \ {0111, 1111}, x10x \ {0101, 110x, 1101}}
{x1x1 \ {1101, 0111, x111, x101, x101}, 1111 \ {1111}, 0101 \ {0101}}
{000x \ {0001, 0000, 0000}, xx10 \ {0110, x010, 1x10}}
{01xx \ {01x1, 011x, 0101}}
{0x0x \ {
   0100, 0001, 0x01, 0x00, 0x00, 010x, 010x}, 1010 \ {1010}}
{10xx \ {101x, 10x0, 10x0}, 1x0x \ {1x01, 1000, 110x}}
{x011 \ {0011, 1011}, xxx1 \ {1011, 0x01, 1x11}}
{1111 \ {1111}, x1x1 \ {1101, 0111, x111}, 0101 \ {0101}}
{xx01 \ {x001, 0001, 0001}, xxxx \ {x10x, 1011, 10x1}, xx00 \ {0x00, 1x00, x000}}
{0xx0 \ {0x00, 0110, 0000}, x1x0 \ {x110, 0100, x100}}
{x0x0 \ {1000, 0010, 00x0}, 0000 \ {0000}}
{0xx0 \ {01x0, 0010, 0110}, 111x \ {1111, 1110, 1110}}
{xx1x \ {001x, 0010, 011x}}
{1010 \ {1010}, 1x1x \ {1110, 1011, 1x11, 1x10, 1x10}}
{11xx \ {111x, 110x}}
{x10x \ {x100, 1101, 0101}}
{0x0x \ {0x0x}}
{x10x \ {010x, 1100}}
{}
{}
{10x1 \ {1001, 1011}, xx0x \ {0100, 000x, 1x0x}}
{x00x \ {1001, 000x, 0000}}
{0101 \ {0101}, 0x0x \ {0100, 0001, 010x, 0x00}}
{x1x1 \ {1101, x101}}
{001x \ {0011, 0010}}
{1111 \ {1111}}
{xx00 \ {0100, 1000, x000}}
{0x10 \ {0010, 0110}, xx1x \ {0x10, x111, x110}}
{}
{x1x0 \ {0100, x100, 0110}, x0x1 \ {1011, 10x1, x011}}
{0x1x \ {011x, 001x, 0x10}}
{1010 \ {1010}, 1111 \ {1111}}
{000x \ {0001, 0000, 0000}, 0x1x \ {001x, 0x10, 011x}}
{01xx \ {01x1, 010x, 0110}}
{0x0x \ {0x0x}, 1x1x \ {1x1x}}
{0x0x \ {0100, 010x, 000x}}
{x101 \ {0101}}
{0101 \ {0101}}
{x10x \ {x100, 0101, 1100}, 1x0x \ {1x01, 1100}, xx1x \ {111x, 1011, 0010}}
{}
{}
{1xxx \ {101x, 10x1, 1110}}
{1x00 \ {1100, 1000}}
{0000 \ {0000}}
{01xx \ {011x, 01x1}, x11x \ {0110, x110, 0111}}
{x1xx \ {11xx, 01x1, 1101}, 01xx \ {01x0, 0100, 010x}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx1x, xxx1, x1xx, 01xx}, xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx1x, xxx1, x0xx, 00xx, 0xxx}, 1x1x \ {1110, 1011, 1x10, 111x}, 1x1x \ {1110, 1011, 1x10, 101x}}
{011x \ {0111, 0110}}
{x110 \ {1110, 0110}, xx00 \ {0x00, 1x00, x100}}
{1010 \ {1010}}
{10xx \ {1001, 1011, 101x}}
{xxxx \ {x10x, 1000, 00xx}, 0x0x \ {0100, 0x01, 0000}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx01, xx11, xx1x, 00xx}, 0x0x \ {0100, 0001, 0x01, 010x, 000x}}
{x10x \ {010x, x101, 0101}, 0x0x \ {000x, 0100, 0x01}, x0x0 \ {10x0}}
{11xx \ {11x0}}
{0x0x \ {0100, 0001, 0x01, 000x}, x0x0 \ {x0x0}}
{}
{00xx \ {000x, 00x1, 0011}, 0x1x \ {0110, 001x, 011x}}
{}
{xx01 \ {1x01, 1101, 1101}}
{x11x \ {0111, 1111, 011x}, xx00 \ {x000, 1000, x100}, 0x10 \ {0110, 0010, 0010}}
{}
{0x0x \ {0100, 000x, 010x}, 1x0x \ {1101, 1x01, 1001}}
{}
{}
{}
{x001 \ {1001, 0001}}
{}
{xxx1 \ {0xx1, 0x11, x1x1}, x00x \ {1001, 000x, 000x}}
{xx01 \ {0101, 1001, x101}, x01x \ {0010, 1010, 001x}}
{0101, 1111}
{xx01 \ {0x01, 1101}}
{x11x \ {x111, 0110, x110}}
{}
{001x \ {0010}, 0xxx \ {011x, 0x00}}
{}
{}
{x01x \ {x010, 101x, 101x}, 100x \ {1001, 1000, 1000}}
{}
{}
{1x0x \ {1101, 110x, 110x}, x100 \ {0100}}
{111x \ {1111, 1110}}
{}
{x1xx \ {01x0, 11x1, x11x}, 100x \ {1001, 1000}, x011 \ {1011, 0011}}
{x1x0 \ {1100, 0100}}
{x0x0 \ {1000, 0010, x010, 00x0}, 0000 \ {0000}}
{x1x1 \ {1111, 0111, 01x1}, xxxx \ {0010, 00x1, 1010}}
{}
{}
{xx00 \ {1000, 0000, 0100}}
{}
{}
{11xx \ {1101, 11x1, 11x0}}
{10x1 \ {1011, 1001, 1001}}
{x1x1 \ {x1x1}}
{01xx \ {01x0, 0100, 011x}}
{1xx0 \ {1010, 1100, 11x0}, 01xx \ {0110, 010x, 0100}}
{x0x0 \ {x0x0}, xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xxx0, xx00, xx1x, 10xx, 0xxx, 00xx}}
{00x0 \ {0010, 0000, 0000}, 10x0 \ {1010}}
{x110 \ {1110}, x010 \ {1010, 0010}}
{1010 \ {1010}}
{}
{xxxx \ {000x, 010x, x11x}}
{}
{}
{xxx0 \ {x010, x100, x0x0}}
{}
{x100 \ {0100}, x0xx \ {x000, 00x0}}
{xxx0 \ {0110, x100, x0x0}}
{0000 \ {0000}, x0x0 \ {1000, 0010, x000, 00x0}}
{}
{x0xx \ {1001, 0001, 0011}, x0xx \ {x000, 0000, x001}}
{}
{0xx0 \ {00x0, 0000, 01x0}, 1x01 \ {1001, 1101, 1101}}
{1xxx \ {101x, 10x1, 1100}, 000x \ {0001, 0000, 0000}, 1x0x \ {1x01, 100x, 1001}}
{x0x0 \ {x0x0}, 0000 \ {0000}, 0101 \ {0101}}
{1xxx \ {1xx0, 10x0, 1001}, 0x10 \ {0110, 0010}}
{x00x \ {1001, x001}}
{0x0x \ {0100, 0001, 0x00, 010x}}
{001x \ {0011, 0010, 0010}}
{xxx0 \ {x000, 1010, 0000}, x0xx \ {000x, 00x0, 10x1}}
{1010 \ {1010}, 1x1x \ {1110, 1011, 1x11, 1x10, 1x10}}
{0x00 \ {0000, 0100}}
{11x0 \ {1110, 1100, 1100}, 11x0 \ {1100, 1110, 1110}, 101x \ {1010, 1011, 1011}}
{0000 \ {0000}}
{}
{}
{}
{00xx \ {000x, 001x, 00x1}}
{}
{}
{x011 \ {1011, 0011}, x01x \ {0010, 001x, x010}}
{}
{}
{010x \ {0101, 0100, 0100}, xxx0 \ {0110, 1xx0, 1100}, x00x \ {000x, 1001}}
{01xx \ {0110, 0111, 0100}}
{x0x0 \ {1000, 0010, 10x0, 00x0}, 0x0x \ {0100, 0001, 000x, 0x01}}
{x0x0 \ {1000, 0010, x000}}
{100x \ {1001}, 1xx0 \ {1000, 11x0, 1x10}}
{0000 \ {0000}, x0x0 \ {1000, 0010, x000, 10x0, 00x0}}
{1x10 \ {1010, 1110}}
{}
{}
{x1xx \ {x10x, 11x1, 11x0}, 00x0 \ {0000}}
{x1xx \ {0100, 0101, 111x}, 0xxx \ {0001, 0110, 0010}}
{xxxx \ {x1x0, x0x1, 1x0x, 0x1x, xx0x}, x0x0 \ {1000, 0010, x000}}
{x0x1 \ {x001, 0001, 0011}}
{101x \ {1010, 1011}}
{1111 \ {1111}}
{}
{}
{}
{x1x0 \ {0110, 0100}}
{x1x1 \ {0101, 1101, 1111}}
{}
{}
{01xx \ {01x1, 011x, 0110}}
{}
{0xxx \ {0011, 0xx1, 0111}, xx11 \ {0011, x011}, x1xx \ {111x, x10x}}
{000x \ {0000, 0001, 0001}, 0x10 \ {0110, 0010, 0010}}
{0x0x \ {0100, 0001, 0x01, 000x, 010x, 010x}, 1010 \ {1010}}
{x1x0 \ {0110, x100, 01x0}}
{1x0x \ {1x01, 1001, 1x00}, x00x \ {0000, 0001, 100x}}
{0000 \ {0000}}
{}
{x0x1 \ {10x1, 00x1, 00x1}}
{}
{}
{x0x1 \ {0001, x011, 1011}, xxx1 \ {x011, 1xx1, 10x1}}
{}
{xx11 \ {1111, 1x11}}
{11x1 \ {1111, 1101}}
{1111 \ {1111}}
{0xx1 \ {00x1, 01x1, 0x01}}
{x1x0 \ {1110, 01x0, 1100}, xx0x \ {100x, 1000, 1100}}
{0101 \ {0101}}
{xx0x \ {110x, 000x, x001}, x11x \ {111x, x111, 0110}}
{01x0 \ {0100, 0110}}
{0000 \ {0000}, 1010 \ {1010}}
{10xx \ {1001, 1010, 100x}}
{x001 \ {1001, 0001}}
{0101 \ {0101}}
{0x00 \ {0100}}
{xx0x \ {0000, 1x0x, xx01}}
{0000}
{1x0x \ {1100, 110x, 1x01}, x00x \ {1001, 0001, 0001}}
{1x1x \ {1110, 101x, 1010}, xx01 \ {x001, 1101, 0x01}}
{0101 \ {0101}}
{}
{}
{}
{x110 \ {0110, 1110}}
{xx00 \ {0000, x100, x000}, xx00 \ {0000, x100}}
{}
{}
{xx10 \ {0110, x110, x110}}
{}
{xx01 \ {0001, 1001}, 0xxx \ {0101, 0110, 0x1x}}
{x01x \ {0011, 1011, x011}}
{1x1x \ {1x1x}}
{xxx1 \ {01x1, x011, 1011}, 1xx1 \ {1101, 1111, 1011}, 11xx \ {110x, 1110, 11x1}}
{0x1x \ {011x, 0x11}}
{1111 \ {1111}, 1x1x \ {1110, 1011, 1x10, 1x11, 111x}}
{xxxx \ {x101, 0010, 110x}, 111x \ {1111, 1110}}
{x0x0 \ {1000, 0010, 10x0}, x0x1 \ {1001, 0011}}
{x0x0 \ {1000, 0010, 10x0}, x1x1 \ {1101, 0111}, 1010 \ {1010}, 1111 \ {1111}}
{}
{11x0 \ {1110, 1100}}
{}
{10xx \ {1001, 1011, 100x}}
{00x1 \ {0001}, 11x1 \ {1111, 1101}}
{x1x1 \ {1101, 0111, x101, x111, x101, 01x1}}
{}
{0xx1 \ {0011, 0111}}
{}
{11xx \ {1101, 11x0, 1110}}
{x1xx \ {01x0, x10x, 110x}}
{xxxx \ {
   x1x0, x0x1, 1x0x, 0x1x, xx01, xxx0, xx10, 0xxx, 00xx}}
{1xx1 \ {1101, 1111}}
{}
{}
{x101 \ {0101, 1101}}
{0xx1 \ {0x01, 0001, 0111}, xxxx \ {0111, 1xx1, 001x}, x10x \ {1100, 110x, 0101}}
{0101 \ {0101}}
{01xx \ {0101, 011x, 0100}, x0x0 \ {00x0, x000, x010}, 0xxx \ {010x, 00x0, 00x1}}
{10x1 \ {1001, 1011}, xx10 \ {1x10, x110, 1110}}
{x1x1 \ {1101, 0111, 01x1, 11x1, x101}, 1010}
{010x \ {0101, 0100}}
{x11x \ {1111, 0111, 111x}, 0x00 \ {0100}}
{0000 \ {0000}}
{x0x0 \ {x010}}
{1x0x \ {100x, 110x}}
{0000 \ {0000}}
{xx10 \ {0x10, x110, 0010}, 01x0 \ {0100, 0110, 0110}}
{1x0x \ {1101, 100x, 1001}, 0xxx \ {0100, 0x10, 0010}}
{1010 \ {1010}, 0000 \ {0000}, x0x0 \ {1000, 0010, x000, x010, x010, 10x0}}
{1x0x \ {1100, 110x, 1000}, 1xx0 \ {1x10, 1x00, 10x0}, 1x1x \ {101x, 1111, 1x10}}
{1x10 \ {1010, 1110, 1110}}
{1010 \ {1010}}
{}
{0x0x \ {0x01, 0001, 0x00}}
{}
{}
{x11x \ {1110, 0110, x111}}
{}
{0x00 \ {0000, 0100, 0100}}
{xxx1 \ {x011, 0101, 1x01}}
{}
{x1x1 \ {01x1, 0111, 1111}}
{01xx \ {0110, 0101, 01x1}}
{x1x1 \ {x1x1}}
{1x1x \ {1010, 111x, 1x10}}
{}
{}
{}
{10x0 \ {1000, 1010, 1010}}
{}
{}
{x0x1 \ {1001, x001}, x01x \ {x010, 1011}}
{}
{0x1x \ {011x, 001x}, x0xx \ {x00x, 0011, 1001}}
{xx00 \ {1100, x100}}
{0000 \ {0000}}
{xx00 \ {0100, 1100, 1100}, x11x \ {x110, x111, 0111}}
{0xx1 \ {00x1, 0011, 0x01}}
{1111 \ {1111}}
{x0x1 \ {0011, 1001, 00x1}, 0x0x \ {0000, 0101, 000x}}
{x100 \ {0100}}
{0000}
{}
{}
{}
{xx10 \ {0110, 0x10}}
{x0xx \ {x000, 10x1, 0001}}
{1010}
{}
{x0x1 \ {00x1, 1011, 1011}}
{}
{}
{01xx \ {010x, 011x}}
{}
{}
{x1xx \ {11xx, 01xx, 010x}, xxx1 \ {00x1, 1101, 0001}}
{}
{xxxx \ {00x1, 010x, x111}, x101 \ {0101, 1101}}
{0xx0 \ {0110, 0000, 0010}, 1x01 \ {1101, 1001}, 0x0x \ {0101, 0100, 0000}}
{x0x0 \ {1000, 0010, 10x0}, 0101 \ {0101}, 0x0x \ {0100, 0001, 000x}}
{x01x \ {0011, 101x, 101x}}
{x101 \ {1101, 0101, 0101}}
{}
{xx10 \ {1x10, x110, 0x10}}
{1x01 \ {1001, 1101, 1101}, 1xx1 \ {11x1, 1x01, 1111}}
{}
{0xx0 \ {0x00, 0010, 0010}}
{x0xx \ {00x1, 10x0, 00x0}}
{x0x0 \ {x0x0}}
{x001 \ {0001, 1001}, 1x00 \ {1000, 1100, 1100}}
{10xx \ {101x, 1011, 100x}, 1xxx \ {1011, 1xx0, 1111}}
{0101 \ {0101}, 0000 \ {0000}}
{x0x0 \ {0000, x010, 1000}, xx0x \ {1x0x, 0001, 1101}, xxx0 \ {11x0, 0xx0, 1xx0}}
{001x \ {0010, 0011}}
{1010 \ {1010}}
{xx1x \ {x110, 1x10, 101x}, xx01 \ {0001, 0101, 1x01}, 0xx0 \ {0x00, 0010, 0100}}
{xxxx \ {1010, xxx1, 100x}, xxx1 \ {01x1, 0011, 00x1}}
{1x1x \ {1110, 1011, 111x}, 1111, 0101 \ {0101}, x0x0 \ {1000, 0010, x000}}
{xx1x \ {001x, 1x10, 111x}}
{x101 \ {0101}, x1xx \ {11x1, 0101, x1x0}}
{1x1x \ {1110, 1011, 101x}}
{01xx \ {01x0, 01x1, 0110}}
{}
{}
{xxxx \ {101x, 0xx1, xx0x}, xx0x \ {0001, 1101}}
{0xx0 \ {0110, 00x0}, 1xx0 \ {11x0, 1010, 1100}}
{x0x0 \ {1000, 0010, x000, 10x0}, 0000}
{0xxx \ {01xx, 00x1, 00x0}, xxx1 \ {1101, 0101, 0x01}}
{0xx1 \ {01x1, 0011, 0011}, x00x \ {100x, 1001, x000}, xxx0 \ {x0x0, 1100, 1110}}
{0x0x \ {0100, 0001, 000x, 0x01, 0x00}, x0x0 \ {x0x0}, x1x1 \ {1101, 0111, 11x1, 11x1}, 0101}
{xxxx \ {01xx, 0xx0, 1xxx}}
{}
{}
{xxx0 \ {x010, 0100}}
{11xx \ {1100, 11x1, 11x1}}
{x0x0 \ {1000, 0010, 00x0}}
{00x0 \ {0010, 0000}}
{1x0x \ {110x, 1100, 1001}}
{0000 \ {0000}}
{xxx1 \ {xx11, 00x1, 1x01}}
{}
{}
{xx10 \ {x010, x110, 0110}}
{00x1 \ {0011, 0001}, xx0x \ {x101, 0x01, 0x0x}, x11x \ {0111, 111x}}
{1010 \ {1010}}
{}
{xx0x \ {100x, 0x00, x000}}
{}
{}
{}
{}
{x011 \ {1011, 0011, 0011}, x0x0 \ {00x0, 1000, 1010}}
{}
{}
{}
{0xx1 \ {0x01, 0011, 0x11}}
{}
{x010 \ {0010, 1010}, xxx0 \ {1010, xx00, 00x0}}
{xx10 \ {0x10, x110, x010}}
{1010 \ {1010}}
{x01x \ {x010, 001x}}
{xxx0 \ {0000, 01x0, 1x00}, xxx1 \ {0x11, 0111, 1xx1}}
{1010 \ {1010}, 1111 \ {1111}}
{100x \ {1001, 1000, 1000}}
{0x1x \ {0111, 0010, 0011}, xxx1 \ {11x1, 1011, 0011}}
{0101 \ {0101}}
{1x0x \ {1101, 1x00, 1001}}
{0xx0 \ {0010, 00x0, 0x00}, 1x00 \ {1100, 1000}}
{0000 \ {0000}}
{0xxx \ {01x0, 000x, 00x1}, xx1x \ {0111, 1011, 0x11}}
{}
{}
{xx1x \ {1110, 1111}}
{xx1x \ {111x, x010, x011}, xx1x \ {0x1x, 1010, 011x}}
{1x1x \ {1110, 1011}}
t1:{0111}
t2:{1100, 1101}
t:{1101}
{x0000 \ {10000, 00000}}
{0x01x \ {00010, 0x011, 0101x}}
{}

{00xx1 \ {00101, 000x1, 00111}, 1xx10 \ {10010, 11010}}
{x0111 \ {10111}, 0101x \ {01011}}
{
   x011100x11 \ {
   x011100011, x011100111, 1011100x11}, 0101100x11 \ {
   0101100011, 0101100111, 0101100x11}, 010101xx10 \ {
   0101010010, 0101011010}}

{01x11 \ {01011, 01111}, 1x0xx \ {10011, 11011, 110x1}}
{}
{}

{1x110 \ {10110}, 10x10 \ {10110, 10010}}
{110xx \ {1101x, 110x1, 110x0}}
{
   110101x110 \ {
   1101010110, 110101x110, 110101x110}, 1101010x10 \ {
   1101010110, 1101010010, 1101010x10, 1101010x10}}

{xx01x \ {01010, x101x, 0101x}, 0xx01 \ {01001, 01101}, xx110 \ {11110, 01110, 00110}}
{0xx0x \ {0000x, 00x01, 0100x}}
{
   0xx010xx01 \ {
   0xx0101001, 0xx0101101, 000010xx01, 00x010xx01, 010010xx01}}

{x0100 \ {00100}, 0x11x \ {0011x, 0x110, 00111}, xx001 \ {11001, 01001}}
{0x1x1 \ {001x1, 01111, 0x101}, x1xxx \ {11x1x, 01011, 11001}, 00xxx \ {000x0, 00xx0, 001x1}}
{
   x1x00x0100 \ {
   x1x0000100}, 00x00x0100 \ {
   00x0000100, 00000x0100, 00x00x0100}, 0x1110x111 \ {
   0x11100111, 0x11100111, 001110x111, 011110x111}, x1x1x0x11x \ {
   x1x110x110, x1x100x111, x1x1x0011x, x1x1x0x110, x1x1x00111, 11x1x0x11x, 010110x11x}, 00x1x0x11x \ {
   00x110x110, 00x100x111, 00x1x0011x, 00x1x0x110, 00x1x00111, 000100x11x, 00x100x11x, 001110x11x}, 0x101xx001 \ {
   0x10111001, 0x10101001, 00101xx001, 0x101xx001}, x1x01xx001 \ {
   x1x0111001, x1x0101001, 11001xx001}, 00x01xx001 \ {
   00x0111001, 00x0101001, 00101xx001}}

{xxxx0 \ {x11x0, 0xx00, 111x0}}
{xx00x \ {11001, x0000}}
{
   xx000xxx00 \ {
   xx000x1100, xx0000xx00, xx00011100, x0000xxx00}}

{xxx01 \ {00001, 01001, 11x01}}
{xxxx1 \ {x1101, 10x01, 0x011}}
{
   xxx01xxx01 \ {
   xxx0100001, xxx0101001, xxx0111x01, x1101xxx01, 10x01xxx01}}

{}
{xx001 \ {x1001, 0x001}}
{}

{xx1xx \ {xx101, 1x10x, 0111x}}
{00xx1 \ {00001, 00111, 00011}}
{
   00xx1xx1x1 \ {
   00x11xx101, 00x01xx111, 00xx1xx101, 00xx11x101, 00xx101111, 00001xx1x1, 00111xx1x1, 00011xx1x1}}

{01x0x \ {01100, 01001, 01x01}, 0xxxx \ {00xx0, 0x0xx, 0xx00}}
{xx00x \ {xx001, x000x, 0000x}}
{
   xx00x01x0x \ {
   xx00101x00, xx00001x01, xx00x01100, xx00x01001, xx00x01x01, xx00101x0x, x000x01x0x, 0000x01x0x}, xx00x0xx0x \ {
   xx0010xx00, xx0000xx01, xx00x00x00, xx00x0x00x, xx00x0xx00, xx0010xx0x, x000x0xx0x, 0000x0xx0x}}

{11x1x \ {11010, 11011, 11011}, 01xxx \ {01010, 010xx, 01x1x}}
{}
{}

{1xx0x \ {1000x, 10x0x, 11101}, 1x1x1 \ {10111, 111x1, 11111}}
{0xxxx \ {00111, 0x100, 01xx1}, xx01x \ {0x011, 11010, x101x}}
{
   0xx0x1xx0x \ {
   0xx011xx00, 0xx001xx01, 0xx0x1000x, 0xx0x10x0x, 0xx0x11101, 0x1001xx0x, 01x011xx0x}, 0xxx11x1x1 \ {
   0xx111x101, 0xx011x111, 0xxx110111, 0xxx1111x1, 0xxx111111, 001111x1x1, 01xx11x1x1}, xx0111x111 \ {
   xx01110111, xx01111111, xx01111111, 0x0111x111, x10111x111}}

{110xx \ {11000, 110x1, 11010}}
{x0111 \ {10111}, 11xxx \ {11110, 11x1x, 110x0}}
{
   x011111011 \ {
   x011111011, 1011111011}, 11xxx110xx \ {
   11xx1110x0, 11xx0110x1, 11x1x1100x, 11x0x1101x, 11xxx11000, 11xxx110x1, 11xxx11010, 11110110xx, 11x1x110xx, 110x0110xx}}

{x0110 \ {10110, 00110, 00110}}
{xx00x \ {x0000, 1x000, 0000x}, 1x0x1 \ {10011, 1x001, 1x001}}
{}

{0x11x \ {00110, 01111, 0x110}}
{x01x0 \ {00100, 10100, x0100}}
{
   x01100x110 \ {
   x011000110, x01100x110}}

{0xxxx \ {00111, 00xxx, 0x1x1}, 00x10 \ {00110, 00010}}
{x10xx \ {x10x0, 11000, 010x1}, x1xx0 \ {x11x0, x10x0, 011x0}}
{
   x10xx0xxxx \ {
   x10x10xxx0, x10x00xxx1, x101x0xx0x, x100x0xx1x, x10xx00111, x10xx00xxx, x10xx0x1x1, x10x00xxxx, 110000xxxx, 010x10xxxx}, x1xx00xxx0 \ {
   x1x100xx00, x1x000xx10, x1xx000xx0, x11x00xxx0, x10x00xxx0, 011x00xxx0}, x101000x10 \ {
   x101000110, x101000010, x101000x10}, x1x1000x10 \ {
   x1x1000110, x1x1000010, x111000x10, x101000x10, 0111000x10}}

{0xxx0 \ {01010, 00110, 01100}, xxx10 \ {01110, x0010, x1110}}
{00xxx \ {00010, 0010x, 00111}, x11xx \ {1111x, x110x, 11100}}
{
   00xx00xxx0 \ {
   00x100xx00, 00x000xx10, 00xx001010, 00xx000110, 00xx001100, 000100xxx0, 001000xxx0}, x11x00xxx0 \ {
   x11100xx00, x11000xx10, x11x001010, x11x000110, x11x001100, 111100xxx0, x11000xxx0, 111000xxx0}, 00x10xxx10 \ {
   00x1001110, 00x10x0010, 00x10x1110, 00010xxx10}, x1110xxx10 \ {
   x111001110, x1110x0010, x1110x1110, 11110xxx10}}

{0x0x0 \ {000x0, 01010, 01000}}
{xx1xx \ {x1100, xx101, 0x1x1}, 0x01x \ {00011, 0x010}}
{
   xx1x00x0x0 \ {
   xx1100x000, xx1000x010, xx1x0000x0, xx1x001010, xx1x001000, x11000x0x0}, 0x0100x010 \ {
   0x01000010, 0x01001010, 0x0100x010}}

{xx110 \ {01110, x0110, x0110}, 10x11 \ {10111, 10011}, 0x1xx \ {01111, 011xx, 01100}}
{x100x \ {0100x, x1000, 11000}, x100x \ {0100x, 01000, x1000}}
{
   x100x0x10x \ {
   x10010x100, x10000x101, x100x0110x, x100x01100, 0100x0x10x, x10000x10x, 110000x10x}}

{100x1 \ {10011}, xx111 \ {00111, 01111, x1111}}
{xxx0x \ {0xx0x, xx001, x000x}}
{
   xxx0110001 \ {
   0xx0110001, xx00110001, x000110001}}

{000xx \ {00000, 000x0, 0000x}}
{1100x \ {11001, 11000}, x011x \ {0011x, x0110, 00110}, xxx00 \ {1x000, x1100, 01x00}}
{
   1100x0000x \ {
   1100100000, 1100000001, 1100x00000, 1100x00000, 1100x0000x, 110010000x, 110000000x}, x011x0001x \ {
   x011100010, x011000011, x011x00010, 0011x0001x, x01100001x, 001100001x}, xxx0000000 \ {
   xxx0000000, xxx0000000, xxx0000000, 1x00000000, x110000000, 01x0000000}}

{0xxx1 \ {00x01, 0x1x1, 01x01}, x1x01 \ {01x01, 11101}}
{xx110 \ {x1110, 11110, 1x110}, 01x00 \ {01100, 01000}}
{}

{}
{x100x \ {1100x, x1001, 01001}, 00xx1 \ {00x01, 00001}, 111x0 \ {11100, 11110}}
{}

{1111x \ {11111}, x11x1 \ {11111, 011x1, 011x1}, 0x1xx \ {0x10x, 0x1x0, 001x0}}
{0x111 \ {01111, 00111}, 0111x \ {01110}}
{
   0x11111111 \ {
   0x11111111, 0111111111, 0011111111}, 0111x1111x \ {
   0111111110, 0111011111, 0111x11111, 011101111x}, 0x111x1111 \ {
   0x11111111, 0x11101111, 0x11101111, 01111x1111, 00111x1111}, 01111x1111 \ {
   0111111111, 0111101111, 0111101111}, 0x1110x111 \ {
   011110x111, 001110x111}, 0111x0x11x \ {
   011110x110, 011100x111, 0111x0x110, 0111x00110, 011100x11x}}

{11xxx \ {11xx1, 11111, 110x1}, 00x10 \ {00110, 00010}}
{x0011 \ {00011, 10011}, 0001x \ {00010, 00011}}
{
   x001111x11 \ {
   x001111x11, x001111111, x001111011, 0001111x11, 1001111x11}, 0001x11x1x \ {
   0001111x10, 0001011x11, 0001x11x11, 0001x11111, 0001x11011, 0001011x1x, 0001111x1x}, 0001000x10 \ {
   0001000110, 0001000010, 0001000x10}}

{1xx00 \ {11x00, 11100, 1x100}, 0x10x \ {00100, 01101, 01100}}
{1010x \ {10101, 10100}}
{
   101001xx00 \ {
   1010011x00, 1010011100, 101001x100, 101001xx00}, 1010x0x10x \ {
   101010x100, 101000x101, 1010x00100, 1010x01101, 1010x01100, 101010x10x, 101000x10x}}

{0x0xx \ {010xx, 000xx, 01011}}
{0110x \ {01100, 01101}}
{
   0110x0x00x \ {
   011010x000, 011000x001, 0110x0100x, 0110x0000x, 011000x00x, 011010x00x}}

{1x00x \ {1x001, 1100x, 10000}, 111xx \ {11110, 11101, 111x0}}
{01xx0 \ {01x10, 01000, 01010}, x1x10 \ {11010, 01110, 11110}, x11x0 \ {01100, x1110, 011x0}}
{
   01x001x000 \ {
   01x0011000, 01x0010000, 010001x000}, x11001x000 \ {
   x110011000, x110010000, 011001x000, 011001x000}, 01xx0111x0 \ {
   01x1011100, 01x0011110, 01xx011110, 01xx0111x0, 01x10111x0, 01000111x0, 01010111x0}, x1x1011110 \ {
   x1x1011110, x1x1011110, 1101011110, 0111011110, 1111011110}, x11x0111x0 \ {
   x111011100, x110011110, x11x011110, x11x0111x0, 01100111x0, x1110111x0, 011x0111x0}}

{xx1x0 \ {01110, x01x0, 101x0}, xx01x \ {1001x, 11010, x1010}}
{0xxx1 \ {01001, 00x11, 00001}, x00x0 \ {000x0, x0010, x0010}}
{
   x00x0xx1x0 \ {
   x0010xx100, x0000xx110, x00x001110, x00x0x01x0, x00x0101x0, 000x0xx1x0, x0010xx1x0, x0010xx1x0}, 0xx11xx011 \ {
   0xx1110011, 00x11xx011}, x0010xx010 \ {
   x001010010, x001011010, x0010x1010, 00010xx010, x0010xx010, x0010xx010}}

{}
{x0x1x \ {1001x, 10011, 10111}}
{}

{00x11 \ {00111, 00011, 00011}, 1xx0x \ {10x0x, 10001, 1x10x}}
{1xx01 \ {1x001, 10101, 11x01}, x1001 \ {11001, 01001}}
{
   1xx011xx01 \ {
   1xx0110x01, 1xx0110001, 1xx011x101, 1x0011xx01, 101011xx01, 11x011xx01}, x10011xx01 \ {
   x100110x01, x100110001, x10011x101, 110011xx01, 010011xx01}}

{xxxxx \ {1x001, xx011, 1x10x}, 000x1 \ {00011, 00001, 00001}, xx100 \ {10100, 1x100}}
{1100x \ {11001, 11000, 11000}, 0x10x \ {01100, 01101}}
{
   1100xxxx0x \ {
   11001xxx00, 11000xxx01, 1100x1x001, 1100x1x10x, 11001xxx0x, 11000xxx0x, 11000xxx0x}, 0x10xxxx0x \ {
   0x101xxx00, 0x100xxx01, 0x10x1x001, 0x10x1x10x, 01100xxx0x, 01101xxx0x}, 1100100001 \ {
   1100100001, 1100100001, 1100100001}, 0x10100001 \ {
   0x10100001, 0x10100001, 0110100001}, 11000xx100 \ {
   1100010100, 110001x100, 11000xx100, 11000xx100}, 0x100xx100 \ {
   0x10010100, 0x1001x100, 01100xx100}}

{xxx01 \ {10101, 1x001, 0x101}}
{1xx10 \ {11110, 10x10}}
{}

{xxx0x \ {x1x00, 1x001, 01000}}
{01xx0 \ {01000, 01110, 010x0}, 000xx \ {000x1, 00010, 00010}, 0x11x \ {0x111, 00111, 00111}}
{
   01x00xxx00 \ {
   01x00x1x00, 01x0001000, 01000xxx00, 01000xxx00}, 0000xxxx0x \ {
   00001xxx00, 00000xxx01, 0000xx1x00, 0000x1x001, 0000x01000, 00001xxx0x}}

{}
{xxxx1 \ {0x111, 101x1, 01xx1}, 10xxx \ {10101, 10xx0, 100x1}}
{}

{x1001 \ {01001, 11001}, 0xx10 \ {00x10, 01110, 0x010}}
{xxxx1 \ {1xx01, 0xx01, 110x1}, 11xx1 \ {11x11, 111x1, 111x1}, x0x1x \ {1011x, 1001x, 0011x}}
{
   xxx01x1001 \ {
   xxx0101001, xxx0111001, 1xx01x1001, 0xx01x1001, 11001x1001}, 11x01x1001 \ {
   11x0101001, 11x0111001, 11101x1001, 11101x1001}, x0x100xx10 \ {
   x0x1000x10, x0x1001110, x0x100x010, 101100xx10, 100100xx10, 001100xx10}}

{x0x11 \ {10111, x0011, 10x11}}
{0xx11 \ {01011, 01111, 01111}, x0xx1 \ {00111, x0101, 00011}, 0x00x \ {0x001, 01001, 0x000}}
{
   0xx11x0x11 \ {
   0xx1110111, 0xx11x0011, 0xx1110x11, 01011x0x11, 01111x0x11, 01111x0x11}, x0x11x0x11 \ {
   x0x1110111, x0x11x0011, x0x1110x11, 00111x0x11, 00011x0x11}}

{11x1x \ {11011, 11x11}}
{x0110 \ {10110}}
{
   x011011x10 \ {
   1011011x10}}

{010xx \ {0101x, 01010, 010x1}, x1x11 \ {11x11, x1111}}
{}
{}

{0xxx1 \ {0x101, 0x011, 010x1}, 00x1x \ {00x10, 00011}}
{0x11x \ {0x110, 0x111, 01110}}
{
   0x1110xx11 \ {
   0x1110x011, 0x11101011, 0x1110xx11}, 0x11x00x1x \ {
   0x11100x10, 0x11000x11, 0x11x00x10, 0x11x00011, 0x11000x1x, 0x11100x1x, 0111000x1x}}

{x0101 \ {00101, 10101, 10101}, 1x1xx \ {11111, 1110x, 111x0}}
{}
{}

{1xxxx \ {11xxx, 1xx01, 11001}, 01x01 \ {01101, 01001, 01001}}
{xx1x0 \ {0x1x0, x01x0, 001x0}, x1000 \ {11000}}
{
   xx1x01xxx0 \ {
   xx1101xx00, xx1001xx10, xx1x011xx0, 0x1x01xxx0, x01x01xxx0, 001x01xxx0}, x10001xx00 \ {
   x100011x00, 110001xx00}}

{x0111 \ {00111, 10111}, 1101x \ {11010, 11011}}
{0xx00 \ {01100, 01000, 00100}}
{}

{}
{x0x1x \ {0001x, 10x10, x0x11}}
{}

{}
{}
{}

{11xx1 \ {11011, 110x1, 111x1}, xx00x \ {xx001, x000x}}
{0x0xx \ {00001, 0001x, 000x1}}
{
   0x0x111xx1 \ {
   0x01111x01, 0x00111x11, 0x0x111011, 0x0x1110x1, 0x0x1111x1, 0000111xx1, 0001111xx1, 000x111xx1}, 0x00xxx00x \ {
   0x001xx000, 0x000xx001, 0x00xxx001, 0x00xx000x, 00001xx00x, 00001xx00x}}

{xx010 \ {00010, 11010, x0010}}
{0x11x \ {0x111, 01111}}
{
   0x110xx010 \ {
   0x11000010, 0x11011010, 0x110x0010}}

{000xx \ {000x0, 0000x, 000x1}}
{0x11x \ {01111, 00110, 00111}, x11x1 \ {11101, 111x1}}
{
   0x11x0001x \ {
   0x11100010, 0x11000011, 0x11x00010, 0x11x00011, 011110001x, 001100001x, 001110001x}, x11x1000x1 \ {
   x111100001, x110100011, x11x100001, x11x1000x1, 11101000x1, 111x1000x1}}

{xxx10 \ {00010, 11110, 10x10}, 0x110 \ {01110, 00110}, 1x1x0 \ {111x0, 101x0}}
{011xx \ {01111, 0110x}, 1xx00 \ {11x00, 10x00, 1x100}, 1x0x1 \ {10011, 110x1}}
{
   01110xxx10 \ {
   0111000010, 0111011110, 0111010x10}, 011100x110 \ {
   0111001110, 0111000110}, 011x01x1x0 \ {
   011101x100, 011001x110, 011x0111x0, 011x0101x0, 011001x1x0}, 1xx001x100 \ {
   1xx0011100, 1xx0010100, 11x001x100, 10x001x100, 1x1001x100}}

{x11x1 \ {x1101, 11101, 011x1}, xx1x0 \ {01110, 1x1x0, xx110}}
{x111x \ {01111, 01110, 11111}, 001x0 \ {00110, 00100, 00100}}
{
   x1111x1111 \ {
   x111101111, 01111x1111, 11111x1111}, x1110xx110 \ {
   x111001110, x11101x110, x1110xx110, 01110xx110}, 001x0xx1x0 \ {
   00110xx100, 00100xx110, 001x001110, 001x01x1x0, 001x0xx110, 00110xx1x0, 00100xx1x0, 00100xx1x0}}

{1xxxx \ {1xx00, 1100x, 1x111}, 10x10 \ {10110, 10010, 10010}}
{x001x \ {00010, 0001x}, 11xxx \ {11x00, 111xx, 1110x}}
{
   x001x1xx1x \ {
   x00111xx10, x00101xx11, x001x1x111, 000101xx1x, 0001x1xx1x}, 11xxx1xxxx \ {
   11xx11xxx0, 11xx01xxx1, 11x1x1xx0x, 11x0x1xx1x, 11xxx1xx00, 11xxx1100x, 11xxx1x111, 11x001xxxx, 111xx1xxxx, 1110x1xxxx}, x001010x10 \ {
   x001010110, x001010010, x001010010, 0001010x10, 0001010x10}, 11x1010x10 \ {
   11x1010110, 11x1010010, 11x1010010, 1111010x10}}

{00x1x \ {00010, 00110, 00x10}}
{1x1x0 \ {1x100, 11110, 101x0}, 100x0 \ {10000}, x101x \ {x1010, 11010, 11010}}
{
   1x11000x10 \ {
   1x11000010, 1x11000110, 1x11000x10, 1111000x10, 1011000x10}, 1001000x10 \ {
   1001000010, 1001000110, 1001000x10}, x101x00x1x \ {
   x101100x10, x101000x11, x101x00010, x101x00110, x101x00x10, x101000x1x, 1101000x1x, 1101000x1x}}

{00x1x \ {00x11, 00011, 00x10}}
{1x0xx \ {11000, 100x0, 100xx}, 0x11x \ {0x111, 00110, 0111x}}
{
   1x01x00x1x \ {
   1x01100x10, 1x01000x11, 1x01x00x11, 1x01x00011, 1x01x00x10, 1001000x1x, 1001x00x1x}, 0x11x00x1x \ {
   0x11100x10, 0x11000x11, 0x11x00x11, 0x11x00011, 0x11x00x10, 0x11100x1x, 0011000x1x, 0111x00x1x}}

{11xx0 \ {11000, 11100, 11x00}, 1x101 \ {10101, 11101, 11101}}
{0xxx1 \ {01xx1, 0x011, 01011}, xxx11 \ {xx011, 0xx11, 01011}}
{
   0xx011x101 \ {
   0xx0110101, 0xx0111101, 0xx0111101, 01x011x101}}

{}
{xx1x0 \ {x1100, 11100, 111x0}, xx110 \ {01110, 10110, 11110}}
{}

{}
{xxxx0 \ {xx100, x0110, 11100}, 000x1 \ {00011}}
{}

{x0xx0 \ {00100, x0x10, 00110}, 1x10x \ {10101, 1x100, 1x100}}
{00x10 \ {00110}}
{
   00x10x0x10 \ {
   00x10x0x10, 00x1000110, 00110x0x10}}

{011xx \ {0111x, 0110x, 0110x}}
{xx1x1 \ {01101, 0x111, 10101}}
{
   xx1x1011x1 \ {
   xx11101101, xx10101111, xx1x101111, xx1x101101, xx1x101101, 01101011x1, 0x111011x1, 10101011x1}}

{xx11x \ {00111, 01111, 1111x}}
{}
{}

{0x0x1 \ {000x1, 0x011, 01001}, 10x0x \ {10001, 1010x, 10100}, 1x001 \ {11001}}
{x11x1 \ {x1111, 111x1, 011x1}}
{
   x11x10x0x1 \ {
   x11110x001, x11010x011, x11x1000x1, x11x10x011, x11x101001, x11110x0x1, 111x10x0x1, 011x10x0x1}, x110110x01 \ {
   x110110001, x110110101, 1110110x01, 0110110x01}, x11011x001 \ {
   x110111001, 111011x001, 011011x001}}

{x1x1x \ {1101x, 11110, 0111x}, xxxxx \ {0x101, x1x1x, 011x0}, 1xx01 \ {1x001, 10x01, 10x01}}
{x1x01 \ {11101, 01001, 01001}}
{
   x1x01xxx01 \ {
   x1x010x101, 11101xxx01, 01001xxx01, 01001xxx01}, x1x011xx01 \ {
   x1x011x001, x1x0110x01, x1x0110x01, 111011xx01, 010011xx01, 010011xx01}}

{11xx0 \ {11110, 110x0}}
{x0x1x \ {10x10, 00x10, 00x1x}}
{
   x0x1011x10 \ {
   x0x1011110, x0x1011010, 10x1011x10, 00x1011x10, 00x1011x10}}

{x1xxx \ {110xx, x1111, 01x11}}
{0xx11 \ {0x011, 01x11, 01x11}, 00x1x \ {00x10, 00x11, 0001x}}
{
   0xx11x1x11 \ {
   0xx1111011, 0xx11x1111, 0xx1101x11, 0x011x1x11, 01x11x1x11, 01x11x1x11}, 00x1xx1x1x \ {
   00x11x1x10, 00x10x1x11, 00x1x1101x, 00x1xx1111, 00x1x01x11, 00x10x1x1x, 00x11x1x1x, 0001xx1x1x}}

{01x01 \ {01001, 01101}, xxxx0 \ {xxx10, x00x0, x0010}}
{x1xx1 \ {11101, 11x11, x1001}, xx1xx \ {x01x1, xx1x1, x111x}, xxx1x \ {0101x, 11010, x0110}}
{
   x1x0101x01 \ {
   x1x0101001, x1x0101101, 1110101x01, x100101x01}, xx10101x01 \ {
   xx10101001, xx10101101, x010101x01, xx10101x01}, xx1x0xxxx0 \ {
   xx110xxx00, xx100xxx10, xx1x0xxx10, xx1x0x00x0, xx1x0x0010, x1110xxxx0}, xxx10xxx10 \ {
   xxx10xxx10, xxx10x0010, xxx10x0010, 01010xxx10, 11010xxx10, x0110xxx10}}

{01x1x \ {01011, 0111x, 0111x}, 01x01 \ {01001, 01101}}
{11x1x \ {11011, 11111}, 1x1x1 \ {11111, 111x1, 11101}}
{
   11x1x01x1x \ {
   11x1101x10, 11x1001x11, 11x1x01011, 11x1x0111x, 11x1x0111x, 1101101x1x, 1111101x1x}, 1x11101x11 \ {
   1x11101011, 1x11101111, 1x11101111, 1111101x11, 1111101x11}, 1x10101x01 \ {
   1x10101001, 1x10101101, 1110101x01, 1110101x01}}

{0xxx0 \ {01110, 0x110}}
{xxx0x \ {1110x, 0x000, x0x00}, 0xx0x \ {01x00, 01x0x}}
{
   xxx000xx00 \ {
   111000xx00, 0x0000xx00, x0x000xx00}, 0xx000xx00 \ {
   01x000xx00, 01x000xx00}}

{}
{1101x \ {11010, 11011}}
{}

{x1x11 \ {11x11, x1011, 01x11}}
{}
{}

{1xx00 \ {1x100, 1x000}}
{x000x \ {00000, x0001}, 01xxx \ {01x0x, 01000, 01xx0}}
{
   x00001xx00 \ {
   x00001x100, x00001x000, 000001xx00}, 01x001xx00 \ {
   01x001x100, 01x001x000, 01x001xx00, 010001xx00, 01x001xx00}}

{0x11x \ {01111, 00110, 00111}, 100xx \ {100x0, 100x1, 10001}}
{}
{}

{010xx \ {01001, 01011, 01000}, 01xx0 \ {01110, 01100}, 111x0 \ {11100}}
{}
{}

{xxx11 \ {10011, x0011, x0x11}, 1x00x \ {11000, 10001, 10001}, 0xxx0 \ {0x110, 01x00, 0xx00}}
{}
{}

{xxx1x \ {xx111, 01011, 0001x}, 00x0x \ {0010x, 0000x, 00001}}
{}
{}

{00x0x \ {00101, 00100}, x0100 \ {10100, 00100}}
{0x00x \ {01001}}
{
   0x00x00x0x \ {
   0x00100x00, 0x00000x01, 0x00x00101, 0x00x00100, 0100100x0x}, 0x000x0100 \ {
   0x00010100, 0x00000100}}

{00x1x \ {00110, 0001x}, 001xx \ {00110, 001x0, 0011x}}
{xx001 \ {01001, x0001, 11001}}
{
   xx00100101 \ {
   0100100101, x000100101, 1100100101}}

{x00xx \ {x00x1, 10000, 1001x}, 11x11 \ {11011, 11111}, x11xx \ {01101, 01111, x1101}}
{}
{}

{xx0x1 \ {xx011, 00011, x0011}, xxxx0 \ {10110, 010x0, 010x0}, x10x0 \ {x1010, 110x0, 01010}}
{0x10x \ {00101, 01100, 0010x}}
{
   0x101xx001 \ {
   00101xx001, 00101xx001}, 0x100xxx00 \ {
   0x10001000, 0x10001000, 01100xxx00, 00100xxx00}, 0x100x1000 \ {
   0x10011000, 01100x1000, 00100x1000}}

{}
{0x1x1 \ {0x101, 01111, 01111}, x1x10 \ {x1110, 01110, 01110}, xx000 \ {11000, 00000}}
{}

{x10xx \ {x1000, 01011, 11010}, 1xx1x \ {1xx11, 10x1x, 10x11}}
{xxx00 \ {01100, 01x00, 01x00}}
{
   xxx00x1000 \ {
   xxx00x1000, 01100x1000, 01x00x1000, 01x00x1000}}

{}
{x11x1 \ {01111, 11101, 111x1}}
{}

{x1x1x \ {11x1x, x111x, 01011}, 1100x \ {11001, 11000}}
{0x001 \ {01001, 00001}}
{
   0x00111001 \ {
   0x00111001, 0100111001, 0000111001}}

{1xx00 \ {11000, 10000}, x1x01 \ {x1001, 01x01, 01x01}}
{x0x1x \ {x0011, 10x10, 00011}, x00x1 \ {x0001, 00011, 100x1}}
{
   x0001x1x01 \ {
   x0001x1001, x000101x01, x000101x01, x0001x1x01, 10001x1x01}}

{xxxx0 \ {01000, x1010, 11000}}
{10x1x \ {10010, 1011x, 10x10}, xx0x0 \ {0x0x0, 0x000, xx010}, x0xxx \ {10101, 001xx, 00x00}}
{
   10x10xxx10 \ {
   10x10x1010, 10010xxx10, 10110xxx10, 10x10xxx10}, xx0x0xxxx0 \ {
   xx010xxx00, xx000xxx10, xx0x001000, xx0x0x1010, xx0x011000, 0x0x0xxxx0, 0x000xxxx0, xx010xxxx0}, x0xx0xxxx0 \ {
   x0x10xxx00, x0x00xxx10, x0xx001000, x0xx0x1010, x0xx011000, 001x0xxxx0, 00x00xxxx0}}

{x1100 \ {11100}}
{x101x \ {x1010, 01011, x1011}, 00xx1 \ {00001, 00101}}
{}

{0x1x1 \ {001x1, 01111, 0x101}}
{x0x0x \ {10001, 00100, x0100}, xx001 \ {x1001, 00001, 00001}}
{
   x0x010x101 \ {
   x0x0100101, x0x010x101, 100010x101}, xx0010x101 \ {
   xx00100101, xx0010x101, x10010x101, 000010x101, 000010x101}}

{1100x \ {11001, 11000}, x1x0x \ {x1001, 11101, 11001}}
{x001x \ {10010, x0010}, xx001 \ {x0001, 01001, 11001}, 1110x \ {11101, 11100, 11100}}
{
   xx00111001 \ {
   xx00111001, x000111001, 0100111001, 1100111001}, 1110x1100x \ {
   1110111000, 1110011001, 1110x11001, 1110x11000, 111011100x, 111001100x, 111001100x}, xx001x1x01 \ {
   xx001x1001, xx00111101, xx00111001, x0001x1x01, 01001x1x01, 11001x1x01}, 1110xx1x0x \ {
   11101x1x00, 11100x1x01, 1110xx1001, 1110x11101, 1110x11001, 11101x1x0x, 11100x1x0x, 11100x1x0x}}

{xxx00 \ {x1100, 00000, 10x00}, 01xxx \ {01101, 010x0, 01x0x}}
{01xxx \ {011x0, 01x0x}}
{
   01x00xxx00 \ {
   01x00x1100, 01x0000000, 01x0010x00, 01100xxx00, 01x00xxx00}, 01xxx01xxx \ {
   01xx101xx0, 01xx001xx1, 01x1x01x0x, 01x0x01x1x, 01xxx01101, 01xxx010x0, 01xxx01x0x, 011x001xxx, 01x0x01xxx}}

{}
{xx110 \ {11110, 01110, 00110}, 1xx00 \ {11x00, 10x00, 1x000}}
{}

{10xxx \ {1011x, 10x01, 101x1}, xx111 \ {01111, 0x111, x1111}}
{x0xx1 \ {x01x1, 10111, 00111}, xx1x1 \ {10111, 10101, x11x1}}
{
   x0xx110xx1 \ {
   x0x1110x01, x0x0110x11, x0xx110111, x0xx110x01, x0xx1101x1, x01x110xx1, 1011110xx1, 0011110xx1}, xx1x110xx1 \ {
   xx11110x01, xx10110x11, xx1x110111, xx1x110x01, xx1x1101x1, 1011110xx1, 1010110xx1, x11x110xx1}, x0x11xx111 \ {
   x0x1101111, x0x110x111, x0x11x1111, x0111xx111, 10111xx111, 00111xx111}, xx111xx111 \ {
   xx11101111, xx1110x111, xx111x1111, 10111xx111, x1111xx111}}

{xx1xx \ {1011x, 00100, 00100}, x1x01 \ {01101}}
{01x10 \ {01110}, xx011 \ {x0011, 01011}}
{
   01x10xx110 \ {
   01x1010110, 01110xx110}, xx011xx111 \ {
   xx01110111, x0011xx111, 01011xx111}}

{00xx0 \ {000x0, 00010, 00010}, 01xx1 \ {011x1, 01101, 01x11}}
{1x01x \ {1101x, 1x010}, 0x1x0 \ {00100, 001x0, 01100}}
{
   1x01000x10 \ {
   1x01000010, 1x01000010, 1x01000010, 1101000x10, 1x01000x10}, 0x1x000xx0 \ {
   0x11000x00, 0x10000x10, 0x1x0000x0, 0x1x000010, 0x1x000010, 0010000xx0, 001x000xx0, 0110000xx0}, 1x01101x11 \ {
   1x01101111, 1x01101x11, 1101101x11}}

{1x01x \ {11010, 1x010, 11011}}
{11xx1 \ {11111, 11101, 110x1}, 10x1x \ {1001x, 10010, 10x10}, x1x01 \ {01x01, x1101, x1001}}
{
   11x111x011 \ {
   11x1111011, 111111x011, 110111x011}, 10x1x1x01x \ {
   10x111x010, 10x101x011, 10x1x11010, 10x1x1x010, 10x1x11011, 1001x1x01x, 100101x01x, 10x101x01x}}

{x0x11 \ {10011, 00x11, 10111}, xx1xx \ {x0101, x111x, 11100}, x0x0x \ {00001, x000x, 00x0x}}
{1x111 \ {10111}, x1xxx \ {x1101, x1000, 01001}}
{
   1x111x0x11 \ {
   1x11110011, 1x11100x11, 1x11110111, 10111x0x11}, x1x11x0x11 \ {
   x1x1110011, x1x1100x11, x1x1110111}, 1x111xx111 \ {
   1x111x1111, 10111xx111}, x1xxxxx1xx \ {
   x1xx1xx1x0, x1xx0xx1x1, x1x1xxx10x, x1x0xxx11x, x1xxxx0101, x1xxxx111x, x1xxx11100, x1101xx1xx, x1000xx1xx, 01001xx1xx}, x1x0xx0x0x \ {
   x1x01x0x00, x1x00x0x01, x1x0x00001, x1x0xx000x, x1x0x00x0x, x1101x0x0x, x1000x0x0x, 01001x0x0x}}

{x0xxx \ {x00xx, x0x11, 10010}}
{xxx0x \ {0x10x, 11x01, 0x000}, xxx10 \ {x1x10, 1x010, xx110}}
{
   xxx0xx0x0x \ {
   xxx01x0x00, xxx00x0x01, xxx0xx000x, 0x10xx0x0x, 11x01x0x0x, 0x000x0x0x}, xxx10x0x10 \ {
   xxx10x0010, xxx1010010, x1x10x0x10, 1x010x0x10, xx110x0x10}}

{x1x10 \ {x1110, x1010}, xx100 \ {10100, 11100}}
{}
{}

{x0111 \ {00111, 10111}, x1x00 \ {11x00, 11000, x1000}, xxxx1 \ {11101, 100x1, 1x001}}
{x00x1 \ {00011, 000x1, 10001}, 1x01x \ {10011, 1x011, 11010}}
{
   x0011x0111 \ {
   x001100111, x001110111, 00011x0111, 00011x0111}, 1x011x0111 \ {
   1x01100111, 1x01110111, 10011x0111, 1x011x0111}, x00x1xxxx1 \ {
   x0011xxx01, x0001xxx11, x00x111101, x00x1100x1, x00x11x001, 00011xxxx1, 000x1xxxx1, 10001xxxx1}, 1x011xxx11 \ {
   1x01110011, 10011xxx11, 1x011xxx11}}

{x01xx \ {10100, 00110, 1011x}, x1111 \ {11111, 01111, 01111}}
{000x0 \ {00010, 00000, 00000}, x111x \ {11110, 01111, x1110}, 1xx10 \ {11x10, 10110, 10010}}
{
   000x0x01x0 \ {
   00010x0100, 00000x0110, 000x010100, 000x000110, 000x010110, 00010x01x0, 00000x01x0, 00000x01x0}, x111xx011x \ {
   x1111x0110, x1110x0111, x111x00110, x111x1011x, 11110x011x, 01111x011x, x1110x011x}, 1xx10x0110 \ {
   1xx1000110, 1xx1010110, 11x10x0110, 10110x0110, 10010x0110}, x1111x1111 \ {
   x111111111, x111101111, x111101111, 01111x1111}}

{0x0xx \ {0x01x, 000xx, 000x1}, 10x11 \ {10011, 10111}}
{010xx \ {01001, 010x0, 010x1}}
{
   010xx0x0xx \ {
   010x10x0x0, 010x00x0x1, 0101x0x00x, 0100x0x01x, 010xx0x01x, 010xx000xx, 010xx000x1, 010010x0xx, 010x00x0xx, 010x10x0xx}, 0101110x11 \ {
   0101110011, 0101110111, 0101110x11}}

{xx0xx \ {1x0xx, 10011, x10x0}, 10x1x \ {10011, 1001x, 10110}, 101x1 \ {10101}}
{}
{}

{001xx \ {00100, 001x1, 00101}, 1xxx1 \ {10xx1, 1x001, 11111}}
{0xx10 \ {01110, 01x10, 0x110}}
{
   0xx1000110 \ {
   0111000110, 01x1000110, 0x11000110}}

{}
{1110x \ {11100}}
{}

{1001x \ {10010}, 0100x \ {01001, 01000, 01000}}
{}
{}

{1x1x0 \ {10100, 10110, 11110}, 0010x \ {00100, 00101}}
{x110x \ {01100, x1101, 01101}, x1x01 \ {x1101, 01001, 01x01}}
{
   x11001x100 \ {
   x110010100, 011001x100}, x110x0010x \ {
   x110100100, x110000101, x110x00100, x110x00101, 011000010x, x11010010x, 011010010x}, x1x0100101 \ {
   x1x0100101, x110100101, 0100100101, 01x0100101}}

{11x1x \ {11x10, 11x11, 11111}}
{1xxx0 \ {1x0x0, 1x100, 100x0}}
{
   1xx1011x10 \ {
   1xx1011x10, 1x01011x10, 1001011x10}}

{01xx0 \ {01000, 01x10, 01x00}}
{x011x \ {10111, x0111, x0110}}
{
   x011001x10 \ {
   x011001x10, x011001x10}}

{0x0x1 \ {01001, 010x1, 0x001}}
{}
{}

{11x1x \ {11011, 1101x, 1101x}, 0001x \ {00011, 00010}, x0xx0 \ {x00x0, 10100, 00100}}
{10x1x \ {10111, 10110}, 10xx1 \ {10x01, 100x1, 101x1}}
{
   10x1x11x1x \ {
   10x1111x10, 10x1011x11, 10x1x11011, 10x1x1101x, 10x1x1101x, 1011111x1x, 1011011x1x}, 10x1111x11 \ {
   10x1111011, 10x1111011, 10x1111011, 1001111x11, 1011111x11}, 10x1x0001x \ {
   10x1100010, 10x1000011, 10x1x00011, 10x1x00010, 101110001x, 101100001x}, 10x1100011 \ {
   10x1100011, 1001100011, 1011100011}, 10x10x0x10 \ {
   10x10x0010, 10110x0x10}}

{1x01x \ {10011, 11011, 11011}, x1101 \ {01101, 11101}}
{x0xx0 \ {x0110, x0x00, 00100}}
{
   x0x101x010 \ {
   x01101x010}}

{xxxx1 \ {x1xx1, xx1x1, x1101}, 010x0 \ {01000}, x00x0 \ {10000, 000x0, 100x0}}
{xx011 \ {x1011, x0011}}
{
   xx011xxx11 \ {
   xx011x1x11, xx011xx111, x1011xxx11, x0011xxx11}}

{xxx11 \ {xx011, 1x111, 00011}, 11x0x \ {11100, 11x01, 1100x}, xx0x0 \ {010x0, xx010, x10x0}}
{x1x01 \ {x1101, 01x01, 01001}, xx010 \ {00010, x1010, 1x010}}
{
   x1x0111x01 \ {
   x1x0111x01, x1x0111001, x110111x01, 01x0111x01, 0100111x01}, xx010xx010 \ {
   xx01001010, xx010xx010, xx010x1010, 00010xx010, x1010xx010, 1x010xx010}}

{x0x00 \ {00000, 10x00}, 1110x \ {11100, 11101, 11101}, x01xx \ {001x0, 1011x, 00111}}
{1x10x \ {11100, 11101, 10100}, 11xx0 \ {11000, 11x00}, x11x0 \ {111x0, 01100, x1100}}
{
   1x100x0x00 \ {
   1x10000000, 1x10010x00, 11100x0x00, 10100x0x00}, 11x00x0x00 \ {
   11x0000000, 11x0010x00, 11000x0x00, 11x00x0x00}, x1100x0x00 \ {
   x110000000, x110010x00, 11100x0x00, 01100x0x00, x1100x0x00}, 1x10x1110x \ {
   1x10111100, 1x10011101, 1x10x11100, 1x10x11101, 1x10x11101, 111001110x, 111011110x, 101001110x}, 11x0011100 \ {
   11x0011100, 1100011100, 11x0011100}, x110011100 \ {
   x110011100, 1110011100, 0110011100, x110011100}, 1x10xx010x \ {
   1x101x0100, 1x100x0101, 1x10x00100, 11100x010x, 11101x010x, 10100x010x}, 11xx0x01x0 \ {
   11x10x0100, 11x00x0110, 11xx0001x0, 11xx010110, 11000x01x0, 11x00x01x0}, x11x0x01x0 \ {
   x1110x0100, x1100x0110, x11x0001x0, x11x010110, 111x0x01x0, 01100x01x0, x1100x01x0}}

{}
{1xxxx \ {110x0, 11xx1, 111x1}, x11xx \ {11101, 1111x, 11100}}
{}

{}
{1011x \ {10111}, x0xx1 \ {x0011, x0101, 00xx1}}
{}

{1001x \ {10011, 10010, 10010}}
{0x0x1 \ {010x1, 01001, 000x1}}
{
   0x01110011 \ {
   0x01110011, 0101110011, 0001110011}}

{01xxx \ {0110x, 01101, 010x1}, x10xx \ {11010, 010x1, 01001}}
{xx0xx \ {x00x1, 010x0, 11001}}
{
   xx0xx01xxx \ {
   xx0x101xx0, xx0x001xx1, xx01x01x0x, xx00x01x1x, xx0xx0110x, xx0xx01101, xx0xx010x1, x00x101xxx, 010x001xxx, 1100101xxx}, xx0xxx10xx \ {
   xx0x1x10x0, xx0x0x10x1, xx01xx100x, xx00xx101x, xx0xx11010, xx0xx010x1, xx0xx01001, x00x1x10xx, 010x0x10xx, 11001x10xx}}

{x0x0x \ {00x01, x010x, x0101}, xx0xx \ {xx0x1, 010xx, 11001}}
{0x1x1 \ {011x1, 01101, 001x1}, 1x01x \ {1x010, 10010, 10010}}
{
   0x101x0x01 \ {
   0x10100x01, 0x101x0101, 0x101x0101, 01101x0x01, 01101x0x01, 00101x0x01}, 0x1x1xx0x1 \ {
   0x111xx001, 0x101xx011, 0x1x1xx0x1, 0x1x1010x1, 0x1x111001, 011x1xx0x1, 01101xx0x1, 001x1xx0x1}, 1x01xxx01x \ {
   1x011xx010, 1x010xx011, 1x01xxx011, 1x01x0101x, 1x010xx01x, 10010xx01x, 10010xx01x}}

{111x1 \ {11111, 11101}}
{000xx \ {00000, 00010, 00010}}
{
   000x1111x1 \ {
   0001111101, 0000111111, 000x111111, 000x111101}}

{xx011 \ {0x011, x1011}, x0x0x \ {00x01, 10101, 1000x}}
{xxx11 \ {x1011, 1x111, x1111}, xxx0x \ {0x001, 11x00, x0x0x}}
{
   xxx11xx011 \ {
   xxx110x011, xxx11x1011, x1011xx011, 1x111xx011, x1111xx011}, xxx0xx0x0x \ {
   xxx01x0x00, xxx00x0x01, xxx0x00x01, xxx0x10101, xxx0x1000x, 0x001x0x0x, 11x00x0x0x, x0x0xx0x0x}}

{}
{0x01x \ {00010, 0101x, 0001x}}
{}

{x1xxx \ {01100, 11x11, x111x}, 0xx01 \ {01x01, 0x101}, 1xx1x \ {10011, 10x11, 1x011}}
{x00xx \ {0000x, 10011, 000x0}, 11x1x \ {11011, 1111x, 11x10}}
{
   x00xxx1xxx \ {
   x00x1x1xx0, x00x0x1xx1, x001xx1x0x, x000xx1x1x, x00xx01100, x00xx11x11, x00xxx111x, 0000xx1xxx, 10011x1xxx, 000x0x1xxx}, 11x1xx1x1x \ {
   11x11x1x10, 11x10x1x11, 11x1x11x11, 11x1xx111x, 11011x1x1x, 1111xx1x1x, 11x10x1x1x}, x00010xx01 \ {
   x000101x01, x00010x101, 000010xx01}, x001x1xx1x \ {
   x00111xx10, x00101xx11, x001x10011, x001x10x11, x001x1x011, 100111xx1x, 000101xx1x}, 11x1x1xx1x \ {
   11x111xx10, 11x101xx11, 11x1x10011, 11x1x10x11, 11x1x1x011, 110111xx1x, 1111x1xx1x, 11x101xx1x}}

{xx11x \ {0x110, 00111, 01110}, 11x11 \ {11011, 11111, 11111}}
{1x0x1 \ {11011, 10011, 1x011}, xx01x \ {0x01x, 10010, xx010}}
{
   1x011xx111 \ {
   1x01100111, 11011xx111, 10011xx111, 1x011xx111}, xx01xxx11x \ {
   xx011xx110, xx010xx111, xx01x0x110, xx01x00111, xx01x01110, 0x01xxx11x, 10010xx11x, xx010xx11x}, 1x01111x11 \ {
   1x01111011, 1x01111111, 1x01111111, 1101111x11, 1001111x11, 1x01111x11}, xx01111x11 \ {
   xx01111011, xx01111111, xx01111111, 0x01111x11}}

{xx10x \ {x0101, 00101, xx101}, x01x1 \ {10101, 10111, 00111}}
{xxx11 \ {1x011, 0x111, x1011}}
{
   xxx11x0111 \ {
   xxx1110111, xxx1100111, 1x011x0111, 0x111x0111, x1011x0111}}

{1001x \ {10011, 10010, 10010}, xx010 \ {1x010, 0x010}}
{00x00 \ {00100}}
{}

{xxxx1 \ {00001, xx111, x1111}, 0x01x \ {0x011, 01011, 00010}}
{1xx1x \ {11x11, 1x011, 10111}}
{
   1xx11xxx11 \ {
   1xx11xx111, 1xx11x1111, 11x11xxx11, 1x011xxx11, 10111xxx11}, 1xx1x0x01x \ {
   1xx110x010, 1xx100x011, 1xx1x0x011, 1xx1x01011, 1xx1x00010, 11x110x01x, 1x0110x01x, 101110x01x}}

{}
{1x0x1 \ {110x1, 100x1, 10001}}
{}

{0x001 \ {00001, 01001}}
{xx0xx \ {11010, x10x1, x10xx}, 0xxxx \ {01x1x, 0x101, 010x0}}
{
   xx0010x001 \ {
   xx00100001, xx00101001, x10010x001, x10010x001}, 0xx010x001 \ {
   0xx0100001, 0xx0101001, 0x1010x001}}

{x1xxx \ {11011, x1001, x111x}, xx001 \ {x0001, x1001, 11001}}
{0111x \ {01111, 01110, 01110}, xx11x \ {x111x, 1111x, 11110}}
{
   0111xx1x1x \ {
   01111x1x10, 01110x1x11, 0111x11011, 0111xx111x, 01111x1x1x, 01110x1x1x, 01110x1x1x}, xx11xx1x1x \ {
   xx111x1x10, xx110x1x11, xx11x11011, xx11xx111x, x111xx1x1x, 1111xx1x1x, 11110x1x1x}}

{11x0x \ {11100, 1100x, 1110x}, x1000 \ {01000}, x1x01 \ {11001, x1101}}
{xx111 \ {11111, 01111}}
{}

{x11xx \ {111x0, 1111x}}
{x0x00 \ {x0000, 00x00, 00000}, 101x1 \ {10111}, 0x11x \ {01110, 00111}}
{
   x0x00x1100 \ {
   x0x0011100, x0000x1100, 00x00x1100, 00000x1100}, 101x1x11x1 \ {
   10111x1101, 10101x1111, 101x111111, 10111x11x1}, 0x11xx111x \ {
   0x111x1110, 0x110x1111, 0x11x11110, 0x11x1111x, 01110x111x, 00111x111x}}

{xx1x0 \ {10100, 00100, 10110}, x10x0 \ {01010, 010x0, 01000}}
{xx00x \ {10000, 00001, xx001}}
{
   xx000xx100 \ {
   xx00010100, xx00000100, 10000xx100}, xx000x1000 \ {
   xx00001000, xx00001000, 10000x1000}}

{000x0 \ {00000}}
{01x0x \ {01x00, 01000, 01100}, x1xx0 \ {11x00, 01x00, 11000}}
{
   01x0000000 \ {
   01x0000000, 01x0000000, 0100000000, 0110000000}, x1xx0000x0 \ {
   x1x1000000, x1x0000010, x1xx000000, 11x00000x0, 01x00000x0, 11000000x0}}

{xx0xx \ {10011, 11001, x001x}, 1xx10 \ {11010, 10110, 1x110}}
{011x0 \ {01110}, x1xxx \ {010x1, 11010, x11x1}}
{
   011x0xx0x0 \ {
   01110xx000, 01100xx010, 011x0x0010, 01110xx0x0}, x1xxxxx0xx \ {
   x1xx1xx0x0, x1xx0xx0x1, x1x1xxx00x, x1x0xxx01x, x1xxx10011, x1xxx11001, x1xxxx001x, 010x1xx0xx, 11010xx0xx, x11x1xx0xx}, 011101xx10 \ {
   0111011010, 0111010110, 011101x110, 011101xx10}, x1x101xx10 \ {
   x1x1011010, x1x1010110, x1x101x110, 110101xx10}}

{0xxxx \ {0110x, 01111, 00xx1}, 000x0 \ {00000, 00010, 00010}}
{}
{}

{}
{}
{}

{x0001 \ {00001}}
{x11x1 \ {x1101, 01101, 01111}}
{
   x1101x0001 \ {
   x110100001, x1101x0001, 01101x0001}}

{x001x \ {1001x, x0010, 00011}, 001xx \ {00101, 00100}}
{0x000 \ {01000, 00000}}
{
   0x00000100 \ {
   0x00000100, 0100000100, 0000000100}}

{1x010 \ {11010, 10010}, 1x0xx \ {1x000, 1x0x0, 10000}, 000xx \ {00011, 00010}}
{11xxx \ {11111, 11x11, 11010}, 0x1x1 \ {0x111, 001x1, 00111}}
{
   11x101x010 \ {
   11x1011010, 11x1010010, 110101x010}, 11xxx1x0xx \ {
   11xx11x0x0, 11xx01x0x1, 11x1x1x00x, 11x0x1x01x, 11xxx1x000, 11xxx1x0x0, 11xxx10000, 111111x0xx, 11x111x0xx, 110101x0xx}, 0x1x11x0x1 \ {
   0x1111x001, 0x1011x011, 0x1111x0x1, 001x11x0x1, 001111x0x1}, 11xxx000xx \ {
   11xx1000x0, 11xx0000x1, 11x1x0000x, 11x0x0001x, 11xxx00011, 11xxx00010, 11111000xx, 11x11000xx, 11010000xx}, 0x1x1000x1 \ {
   0x11100001, 0x10100011, 0x1x100011, 0x111000x1, 001x1000x1, 00111000x1}}

{x11xx \ {111xx, 01111, x110x}, xx1x1 \ {x11x1, x1111, 0x111}}
{x10xx \ {1101x, x10x0, 010xx}, 1010x \ {10100}}
{
   x10xxx11xx \ {
   x10x1x11x0, x10x0x11x1, x101xx110x, x100xx111x, x10xx111xx, x10xx01111, x10xxx110x, 1101xx11xx, x10x0x11xx, 010xxx11xx}, 1010xx110x \ {
   10101x1100, 10100x1101, 1010x1110x, 1010xx110x, 10100x110x}, x10x1xx1x1 \ {
   x1011xx101, x1001xx111, x10x1x11x1, x10x1x1111, x10x10x111, 11011xx1x1, 010x1xx1x1}, 10101xx101 \ {
   10101x1101}}

{x0101 \ {10101}}
{}
{}

{0x1xx \ {01100, 00100, 0x1x0}, 00x11 \ {00111, 00011, 00011}}
{xx010 \ {x0010}, 1xx00 \ {10x00, 1x000, 1x000}}
{
   xx0100x110 \ {
   xx0100x110, x00100x110}, 1xx000x100 \ {
   1xx0001100, 1xx0000100, 1xx000x100, 10x000x100, 1x0000x100, 1x0000x100}}

{11xxx \ {11000, 11x10, 1111x}}
{x0xx0 \ {10110, 10xx0, x0110}}
{
   x0xx011xx0 \ {
   x0x1011x00, x0x0011x10, x0xx011000, x0xx011x10, x0xx011110, 1011011xx0, 10xx011xx0, x011011xx0}}

{001x0 \ {00100, 00110, 00110}, x01x0 \ {10110, 10100, x0100}}
{}
{}

{}
{xxx01 \ {x0x01, 0x101, 11101}}
{}

{0xx0x \ {00001, 0000x, 0110x}, 1xx1x \ {11010, 10x10, 10011}}
{xx0x1 \ {11011, x0011, x1011}, xx1xx \ {101xx, 1111x, x1110}}
{
   xx0010xx01 \ {
   xx00100001, xx00100001, xx00101101}, xx10x0xx0x \ {
   xx1010xx00, xx1000xx01, xx10x00001, xx10x0000x, xx10x0110x, 1010x0xx0x}, xx0111xx11 \ {
   xx01110011, 110111xx11, x00111xx11, x10111xx11}, xx11x1xx1x \ {
   xx1111xx10, xx1101xx11, xx11x11010, xx11x10x10, xx11x10011, 1011x1xx1x, 1111x1xx1x, x11101xx1x}}

{xxx01 \ {1xx01, 1x101, x1001}, x0xxx \ {1010x, x00x0, 00x11}}
{00x11 \ {00011, 00111}}
{
   00x11x0x11 \ {
   00x1100x11, 00011x0x11, 00111x0x11}}

{x111x \ {1111x, 0111x}, 10xx0 \ {10010, 10000}}
{11x0x \ {11001, 11x00, 11x01}}
{
   11x0010x00 \ {
   11x0010000, 11x0010x00}}

{xx0x0 \ {1x010, xx010, 0x0x0}, xx0xx \ {0001x, 0000x, 110x1}, 1x1x1 \ {10101, 111x1, 1x111}}
{001xx \ {0011x, 001x0, 0010x}, 00x1x \ {0011x, 0001x, 00010}}
{
   001x0xx0x0 \ {
   00110xx000, 00100xx010, 001x01x010, 001x0xx010, 001x00x0x0, 00110xx0x0, 001x0xx0x0, 00100xx0x0}, 00x10xx010 \ {
   00x101x010, 00x10xx010, 00x100x010, 00110xx010, 00010xx010, 00010xx010}, 001xxxx0xx \ {
   001x1xx0x0, 001x0xx0x1, 0011xxx00x, 0010xxx01x, 001xx0001x, 001xx0000x, 001xx110x1, 0011xxx0xx, 001x0xx0xx, 0010xxx0xx}, 00x1xxx01x \ {
   00x11xx010, 00x10xx011, 00x1x0001x, 00x1x11011, 0011xxx01x, 0001xxx01x, 00010xx01x}, 001x11x1x1 \ {
   001111x101, 001011x111, 001x110101, 001x1111x1, 001x11x111, 001111x1x1, 001011x1x1}, 00x111x111 \ {
   00x1111111, 00x111x111, 001111x111, 000111x111}}

{x01xx \ {00111, x01x1, 001x0}, 1x0xx \ {10000, 110xx, 1x001}}
{1xx1x \ {10111, 1xx10, 11111}}
{
   1xx1xx011x \ {
   1xx11x0110, 1xx10x0111, 1xx1x00111, 1xx1xx0111, 1xx1x00110, 10111x011x, 1xx10x011x, 11111x011x}, 1xx1x1x01x \ {
   1xx111x010, 1xx101x011, 1xx1x1101x, 101111x01x, 1xx101x01x, 111111x01x}}

{1x0xx \ {1x011, 10001, 1000x}}
{}
{}

{10x1x \ {10011, 1011x, 10x11}}
{}
{}

{xx0xx \ {0x00x, 11000, x0011}, 00x1x \ {00x11, 00110, 00111}}
{010xx \ {010x1, 0100x, 01010}}
{
   010xxxx0xx \ {
   010x1xx0x0, 010x0xx0x1, 0101xxx00x, 0100xxx01x, 010xx0x00x, 010xx11000, 010xxx0011, 010x1xx0xx, 0100xxx0xx, 01010xx0xx}, 0101x00x1x \ {
   0101100x10, 0101000x11, 0101x00x11, 0101x00110, 0101x00111, 0101100x1x, 0101000x1x}}

{10xx1 \ {10001, 10x11, 10x01}, 0xx00 \ {01100, 01x00, 01000}}
{0xx01 \ {0x001, 0x101, 00x01}, 1xxx1 \ {10011, 111x1, 11x01}}
{
   0xx0110x01 \ {
   0xx0110001, 0xx0110x01, 0x00110x01, 0x10110x01, 00x0110x01}, 1xxx110xx1 \ {
   1xx1110x01, 1xx0110x11, 1xxx110001, 1xxx110x11, 1xxx110x01, 1001110xx1, 111x110xx1, 11x0110xx1}}

{00xx1 \ {00x11, 001x1, 00101}}
{xxxx1 \ {x1xx1, 10xx1, 11101}, 1xxxx \ {10x0x, 11xx0, 1101x}}
{
   xxxx100xx1 \ {
   xxx1100x01, xxx0100x11, xxxx100x11, xxxx1001x1, xxxx100101, x1xx100xx1, 10xx100xx1, 1110100xx1}, 1xxx100xx1 \ {
   1xx1100x01, 1xx0100x11, 1xxx100x11, 1xxx1001x1, 1xxx100101, 10x0100xx1, 1101100xx1}}

{00x00 \ {00000, 00100, 00100}}
{1x100 \ {11100, 10100}, 0x0x1 \ {00011, 010x1, 00001}, 0xxx1 \ {00001, 00011, 01x01}}
{
   1x10000x00 \ {
   1x10000000, 1x10000100, 1x10000100, 1110000x00, 1010000x00}}

{xx010 \ {10010}}
{x000x \ {10001, 00001, 0000x}}
{}

{11x0x \ {11100, 11x01, 11001}, xx000 \ {x0000, x1000, 10000}}
{xxx0x \ {0xx00, x010x, 0x001}, 001x1 \ {00111, 00101, 00101}}
{
   xxx0x11x0x \ {
   xxx0111x00, xxx0011x01, xxx0x11100, xxx0x11x01, xxx0x11001, 0xx0011x0x, x010x11x0x, 0x00111x0x}, 0010111x01 \ {
   0010111x01, 0010111001, 0010111x01, 0010111x01}, xxx00xx000 \ {
   xxx00x0000, xxx00x1000, xxx0010000, 0xx00xx000, x0100xx000}}

{xxxx1 \ {0x0x1, xx011, 1x011}, 010xx \ {01000, 01010, 010x0}}
{0x1x1 \ {01111, 0x111, 00111}}
{
   0x1x1xxxx1 \ {
   0x111xxx01, 0x101xxx11, 0x1x10x0x1, 0x1x1xx011, 0x1x11x011, 01111xxxx1, 0x111xxxx1, 00111xxxx1}, 0x1x1010x1 \ {
   0x11101001, 0x10101011, 01111010x1, 0x111010x1, 00111010x1}}

{1x010 \ {11010, 10010, 10010}, xx0xx \ {x0011, 10011, 110x1}}
{0011x \ {00110, 00111}}
{
   001101x010 \ {
   0011011010, 0011010010, 0011010010, 001101x010}, 0011xxx01x \ {
   00111xx010, 00110xx011, 0011xx0011, 0011x10011, 0011x11011, 00110xx01x, 00111xx01x}}

{xx0xx \ {0x011, 0000x, 11000}, 001xx \ {0011x, 00101, 00100}, 11xx1 \ {11011, 11x01}}
{01x01 \ {01101}, 1xxx0 \ {10x10, 1x1x0, 1x010}}
{
   01x01xx001 \ {
   01x0100001, 01101xx001}, 1xxx0xx0x0 \ {
   1xx10xx000, 1xx00xx010, 1xxx000000, 1xxx011000, 10x10xx0x0, 1x1x0xx0x0, 1x010xx0x0}, 01x0100101 \ {
   01x0100101, 0110100101}, 1xxx0001x0 \ {
   1xx1000100, 1xx0000110, 1xxx000110, 1xxx000100, 10x10001x0, 1x1x0001x0, 1x010001x0}, 01x0111x01 \ {
   01x0111x01, 0110111x01}}

{1x1xx \ {1x1x1, 1x111, 1011x}}
{0xx1x \ {0011x, 0x01x, 00x11}}
{
   0xx1x1x11x \ {
   0xx111x110, 0xx101x111, 0xx1x1x111, 0xx1x1x111, 0xx1x1011x, 0011x1x11x, 0x01x1x11x, 00x111x11x}}

{x1xx0 \ {11xx0, x1010, 11110}}
{}
{}

{}
{x111x \ {01111, x1110, 11110}}
{}

{x0xx1 \ {00xx1, 00x01, 00x11}, x01x0 \ {101x0, 001x0}}
{x1010 \ {11010}, x0x00 \ {10000, 10x00, 10100}}
{
   x1010x0110 \ {
   x101010110, x101000110, 11010x0110}, x0x00x0100 \ {
   x0x0010100, x0x0000100, 10000x0100, 10x00x0100, 10100x0100}}

{0x00x \ {0100x, 0x001, 00001}, xx0xx \ {01000, 0001x, xx00x}}
{}
{}

{01x1x \ {01110, 0111x, 0101x}}
{x011x \ {x0111, 10110, 0011x}}
{
   x011x01x1x \ {
   x011101x10, x011001x11, x011x01110, x011x0111x, x011x0101x, x011101x1x, 1011001x1x, 0011x01x1x}}

{11xxx \ {11101, 11011, 11x11}}
{0x0xx \ {000x1, 0x00x}, xx1xx \ {11100, 00100, 1010x}, 0x00x \ {0000x, 00000, 00000}}
{
   0x0xx11xxx \ {
   0x0x111xx0, 0x0x011xx1, 0x01x11x0x, 0x00x11x1x, 0x0xx11101, 0x0xx11011, 0x0xx11x11, 000x111xxx, 0x00x11xxx}, xx1xx11xxx \ {
   xx1x111xx0, xx1x011xx1, xx11x11x0x, xx10x11x1x, xx1xx11101, xx1xx11011, xx1xx11x11, 1110011xxx, 0010011xxx, 1010x11xxx}, 0x00x11x0x \ {
   0x00111x00, 0x00011x01, 0x00x11101, 0000x11x0x, 0000011x0x, 0000011x0x}}

{1xx01 \ {10001, 10x01, 1x001}}
{00xxx \ {001x0, 00111, 00x00}}
{
   00x011xx01 \ {
   00x0110001, 00x0110x01, 00x011x001}}

{x0101 \ {10101, 00101}}
{1x010 \ {11010, 10010, 10010}, xx1xx \ {xx110, 1110x, x01xx}, 1xx11 \ {1x111, 1x011, 1x011}}
{
   xx101x0101 \ {
   xx10110101, xx10100101, 11101x0101, x0101x0101}}

{x0110 \ {10110}}
{1xx1x \ {11x11, 1011x, 1111x}, 1xx1x \ {1xx11, 11x10, 1111x}}
{
   1xx10x0110 \ {
   1xx1010110, 10110x0110, 11110x0110}, 1xx10x0110 \ {
   1xx1010110, 11x10x0110, 11110x0110}}

{}
{}
{}

{01x0x \ {01100, 01001, 01000}, 00x0x \ {00001, 00101}}
{xx101 \ {1x101, 00101}}
{
   xx10101x01 \ {
   xx10101001, 1x10101x01, 0010101x01}, xx10100x01 \ {
   xx10100001, xx10100101, 1x10100x01, 0010100x01}}

{111x1 \ {11101, 11111}}
{01x1x \ {0111x, 0101x, 01010}, x1x01 \ {01101}}
{
   01x1111111 \ {
   01x1111111, 0111111111, 0101111111}, x1x0111101 \ {
   x1x0111101, 0110111101}}

{xx110 \ {00110, x1110, 01110}, x10xx \ {01000, 01001, 110x0}}
{1x01x \ {10011, 1001x, 1x011}, xx1x0 \ {1x100, 11100, 001x0}}
{
   1x010xx110 \ {
   1x01000110, 1x010x1110, 1x01001110, 10010xx110}, xx110xx110 \ {
   xx11000110, xx110x1110, xx11001110, 00110xx110}, 1x01xx101x \ {
   1x011x1010, 1x010x1011, 1x01x11010, 10011x101x, 1001xx101x, 1x011x101x}, xx1x0x10x0 \ {
   xx110x1000, xx100x1010, xx1x001000, xx1x0110x0, 1x100x10x0, 11100x10x0, 001x0x10x0}}

{x1x11 \ {x1011, 11011, 01x11}, 1x01x \ {11010, 11011, 10011}}
{xx1x0 \ {11100, 01100, 0x100}}
{
   xx1101x010 \ {
   xx11011010}}

{0000x \ {00000, 00001}}
{1x110 \ {10110}, 000x1 \ {00001, 00011}, x1xx1 \ {11111, 01001, 01x01}}
{
   0000100001 \ {
   0000100001, 0000100001}, x1x0100001 \ {
   x1x0100001, 0100100001, 01x0100001}}

{1xx10 \ {10110, 11010, 10x10}, x1x01 \ {11001, x1101, 01101}}
{x11x1 \ {111x1, 11111, x1101}, 1x11x \ {1x111, 10110}}
{
   1x1101xx10 \ {
   1x11010110, 1x11011010, 1x11010x10, 101101xx10}, x1101x1x01 \ {
   x110111001, x1101x1101, x110101101, 11101x1x01, x1101x1x01}}

{0x000 \ {00000, 01000, 01000}}
{1x010 \ {11010, 10010}, xx111 \ {x1111, 0x111}}
{}

{0x1x1 \ {0x111, 01111, 00101}}
{xx10x \ {01100, 11100, x0100}}
{
   xx1010x101 \ {
   xx10100101}}

{0xxx0 \ {01x10, 0xx00, 000x0}}
{x1xx1 \ {01011, 11x01, 011x1}, 0x101 \ {00101, 01101}, 0xxxx \ {0xx1x, 0x0xx}}
{
   0xxx00xxx0 \ {
   0xx100xx00, 0xx000xx10, 0xxx001x10, 0xxx00xx00, 0xxx0000x0, 0xx100xxx0, 0x0x00xxx0}}

{x011x \ {10111, 10110, x0110}, 1x1xx \ {1x101, 101x1, 11100}}
{0000x \ {00001, 00000}, x0x1x \ {00x11, 1001x, x011x}}
{
   x0x1xx011x \ {
   x0x11x0110, x0x10x0111, x0x1x10111, x0x1x10110, x0x1xx0110, 00x11x011x, 1001xx011x, x011xx011x}, 0000x1x10x \ {
   000011x100, 000001x101, 0000x1x101, 0000x10101, 0000x11100, 000011x10x, 000001x10x}, x0x1x1x11x \ {
   x0x111x110, x0x101x111, x0x1x10111, 00x111x11x, 1001x1x11x, x011x1x11x}}

{1xx00 \ {10x00, 11x00, 10100}}
{x0x10 \ {10010, 10110, 00x10}, 1xx0x \ {1x000, 11000, 1x100}, xx101 \ {11101, 1x101}}
{
   1xx001xx00 \ {
   1xx0010x00, 1xx0011x00, 1xx0010100, 1x0001xx00, 110001xx00, 1x1001xx00}}

{x00xx \ {10011, x0010, 1001x}, x10x1 \ {01001, x1001, 110x1}, 01xx1 \ {01111, 010x1, 01101}}
{x0xxx \ {x0010, x01xx, 00100}, xxxx0 \ {00000, xxx00, 01x10}, 0x110 \ {01110, 00110}}
{
   x0xxxx00xx \ {
   x0xx1x00x0, x0xx0x00x1, x0x1xx000x, x0x0xx001x, x0xxx10011, x0xxxx0010, x0xxx1001x, x0010x00xx, x01xxx00xx, 00100x00xx}, xxxx0x00x0 \ {
   xxx10x0000, xxx00x0010, xxxx0x0010, xxxx010010, 00000x00x0, xxx00x00x0, 01x10x00x0}, 0x110x0010 \ {
   0x110x0010, 0x11010010, 01110x0010, 00110x0010}, x0xx1x10x1 \ {
   x0x11x1001, x0x01x1011, x0xx101001, x0xx1x1001, x0xx1110x1, x01x1x10x1}, x0xx101xx1 \ {
   x0x1101x01, x0x0101x11, x0xx101111, x0xx1010x1, x0xx101101, x01x101xx1}}

{x110x \ {1110x, 01101, 01101}}
{xx10x \ {1x100, xx101, x1101}}
{
   xx10xx110x \ {
   xx101x1100, xx100x1101, xx10x1110x, xx10x01101, xx10x01101, 1x100x110x, xx101x110x, x1101x110x}}

{xx010 \ {x0010, x1010, 00010}}
{1xxx1 \ {11101, 11xx1, 101x1}, 1xx01 \ {10x01, 11x01, 11101}}
{}

{1x0x1 \ {1x011, 1x001, 1x001}, 1x1xx \ {1110x, 1x111, 1x101}, 001xx \ {00111, 001x0}}
{x001x \ {10010, 0001x}, 1x110 \ {10110}}
{
   x00111x011 \ {
   x00111x011, 000111x011}, x001x1x11x \ {
   x00111x110, x00101x111, x001x1x111, 100101x11x, 0001x1x11x}, 1x1101x110 \ {
   101101x110}, x001x0011x \ {
   x001100110, x001000111, x001x00111, x001x00110, 100100011x, 0001x0011x}, 1x11000110 \ {
   1x11000110, 1011000110}}

{1001x \ {10010, 10011}, x0x0x \ {0000x, 00x0x}, x0000 \ {10000, 00000}}
{0x100 \ {01100}}
{
   0x100x0x00 \ {
   0x10000000, 0x10000x00, 01100x0x00}, 0x100x0000 \ {
   0x10010000, 0x10000000, 01100x0000}}

{xx0x1 \ {1x001, xx001, 01001}}
{0x111 \ {01111, 00111, 00111}}
{
   0x111xx011 \ {
   01111xx011, 00111xx011, 00111xx011}}

{}
{100xx \ {1001x, 1000x, 100x0}}
{}

{x0x1x \ {0001x, 00x10, 10011}, 1x0xx \ {110xx, 110x0, 1000x}}
{011xx \ {01110, 0111x, 01101}, xx1x1 \ {xx111, 00101, 01101}}
{
   0111xx0x1x \ {
   01111x0x10, 01110x0x11, 0111x0001x, 0111x00x10, 0111x10011, 01110x0x1x, 0111xx0x1x}, xx111x0x11 \ {
   xx11100011, xx11110011, xx111x0x11}, 011xx1x0xx \ {
   011x11x0x0, 011x01x0x1, 0111x1x00x, 0110x1x01x, 011xx110xx, 011xx110x0, 011xx1000x, 011101x0xx, 0111x1x0xx, 011011x0xx}, xx1x11x0x1 \ {
   xx1111x001, xx1011x011, xx1x1110x1, xx1x110001, xx1111x0x1, 001011x0x1, 011011x0x1}}

{x1x1x \ {x1x10, 11x10, x1010}, 0x11x \ {00111, 01110}}
{}
{}

{01x1x \ {01x11, 01110, 01x10}, xxxx0 \ {0x0x0, 01xx0, x00x0}}
{x000x \ {10000, 00000}, 1x100 \ {10100}}
{
   x0000xxx00 \ {
   x00000x000, x000001x00, x0000x0000, 10000xxx00, 00000xxx00}, 1x100xxx00 \ {
   1x1000x000, 1x10001x00, 1x100x0000, 10100xxx00}}

{xxx0x \ {0x000, 00001, 00x00}, 0xx11 \ {00x11, 00011, 0x011}}
{x1x11 \ {01x11, x1111}, 0x011 \ {00011}}
{
   x1x110xx11 \ {
   x1x1100x11, x1x1100011, x1x110x011, 01x110xx11, x11110xx11}, 0x0110xx11 \ {
   0x01100x11, 0x01100011, 0x0110x011, 000110xx11}}

{x0x00 \ {x0000, 00000, 00100}, x10xx \ {x10x0, 010x1, 01010}}
{xx101 \ {0x101, 11101, 01101}}
{
   xx101x1001 \ {
   xx10101001, 0x101x1001, 11101x1001, 01101x1001}}

{xxx00 \ {xx000, 10000, x0x00}, x0x01 \ {10001, x0001}, 0x1xx \ {01110, 001x1, 01111}}
{1xx11 \ {10011, 11111, 11011}, 00x11 \ {00011}}
{
   1xx110x111 \ {
   1xx1100111, 1xx1101111, 100110x111, 111110x111, 110110x111}, 00x110x111 \ {
   00x1100111, 00x1101111, 000110x111}}

{x1100 \ {11100, 01100}}
{0x0xx \ {00011, 01000}}
{
   0x000x1100 \ {
   0x00011100, 0x00001100, 01000x1100}}

{x0x10 \ {00x10, x0110, x0010}, x1x10 \ {11110, 01010, 01x10}}
{001x1 \ {00111}, 001xx \ {0010x, 00100, 0011x}, x1x0x \ {11000, 11100, 01101}}
{
   00110x0x10 \ {
   0011000x10, 00110x0110, 00110x0010, 00110x0x10}, 00110x1x10 \ {
   0011011110, 0011001010, 0011001x10, 00110x1x10}}

{x1xx0 \ {01xx0, 11100, x1110}, x100x \ {01001, 1100x, x1000}}
{xx010 \ {1x010, x0010}, xx1xx \ {x01x0, 011x0, x11xx}}
{
   xx010x1x10 \ {
   xx01001x10, xx010x1110, 1x010x1x10, x0010x1x10}, xx1x0x1xx0 \ {
   xx110x1x00, xx100x1x10, xx1x001xx0, xx1x011100, xx1x0x1110, x01x0x1xx0, 011x0x1xx0, x11x0x1xx0}, xx10xx100x \ {
   xx101x1000, xx100x1001, xx10x01001, xx10x1100x, xx10xx1000, x0100x100x, 01100x100x, x110xx100x}}

{0xxx0 \ {0x110, 00010, 01xx0}}
{x110x \ {11101, 11100, x1100}, x1x01 \ {11x01, 11001, x1001}}
{
   x11000xx00 \ {
   x110001x00, 111000xx00, x11000xx00}}

{00x00 \ {00100, 00000, 00000}, 00xx1 \ {00x01, 00111, 00101}}
{x111x \ {x1110, 11110, 01110}, x1001 \ {11001, 01001, 01001}, 1x100 \ {10100, 11100, 11100}}
{
   1x10000x00 \ {
   1x10000100, 1x10000000, 1x10000000, 1010000x00, 1110000x00, 1110000x00}, x111100x11 \ {
   x111100111}, x100100x01 \ {
   x100100x01, x100100101, 1100100x01, 0100100x01, 0100100x01}}

{}
{1xx1x \ {11011, 11x1x, 10010}, x00xx \ {10001, 10010, 00011}, 0x0x0 \ {000x0, 010x0}}
{}

{0x1x0 \ {0x110, 001x0, 01100}, x1000 \ {11000, 01000}, x1x0x \ {11101, 01x00, x110x}}
{xx0x0 \ {x1000, 1x000, 11010}, 1xx10 \ {11110, 1x110, 10x10}, x1x01 \ {11001, 01001, 01x01}}
{
   xx0x00x1x0 \ {
   xx0100x100, xx0000x110, xx0x00x110, xx0x0001x0, xx0x001100, x10000x1x0, 1x0000x1x0, 110100x1x0}, 1xx100x110 \ {
   1xx100x110, 1xx1000110, 111100x110, 1x1100x110, 10x100x110}, xx000x1000 \ {
   xx00011000, xx00001000, x1000x1000, 1x000x1000}, xx000x1x00 \ {
   xx00001x00, xx000x1100, x1000x1x00, 1x000x1x00}, x1x01x1x01 \ {
   x1x0111101, x1x01x1101, 11001x1x01, 01001x1x01, 01x01x1x01}}

{x1010 \ {11010}, xx111 \ {00111, 1x111, 10111}}
{x00xx \ {00000, 000x0, 0001x}, xx010 \ {00010, 0x010, x0010}}
{
   x0010x1010 \ {
   x001011010, 00010x1010, 00010x1010}, xx010x1010 \ {
   xx01011010, 00010x1010, 0x010x1010, x0010x1010}, x0011xx111 \ {
   x001100111, x00111x111, x001110111, 00011xx111}}

{1x1x0 \ {101x0, 10110, 1x100}}
{xx0x0 \ {1x000, x00x0, 01000}}
{
   xx0x01x1x0 \ {
   xx0101x100, xx0001x110, xx0x0101x0, xx0x010110, xx0x01x100, 1x0001x1x0, x00x01x1x0, 010001x1x0}}

{}
{xx111 \ {10111, x1111, 0x111}, xx001 \ {00001, 01001, x1001}}
{}

{11x1x \ {11x10, 11011, 11110}, 11xxx \ {110x1, 1110x, 11x1x}}
{xx10x \ {1x100, 0010x, 1x101}, x1xx0 \ {11xx0, 11x10, x10x0}}
{
   x1x1011x10 \ {
   x1x1011x10, x1x1011110, 11x1011x10, 11x1011x10, x101011x10}, xx10x11x0x \ {
   xx10111x00, xx10011x01, xx10x11001, xx10x1110x, 1x10011x0x, 0010x11x0x, 1x10111x0x}, x1xx011xx0 \ {
   x1x1011x00, x1x0011x10, x1xx011100, x1xx011x10, 11xx011xx0, 11x1011xx0, x10x011xx0}}

{101xx \ {101x1, 10100, 101x0}, 0x101 \ {00101, 01101}}
{x01xx \ {101x1, 1010x, 00110}, 110x1 \ {11001}}
{
   x01xx101xx \ {
   x01x1101x0, x01x0101x1, x011x1010x, x010x1011x, x01xx101x1, x01xx10100, x01xx101x0, 101x1101xx, 1010x101xx, 00110101xx}, 110x1101x1 \ {
   1101110101, 1100110111, 110x1101x1, 11001101x1}, x01010x101 \ {
   x010100101, x010101101, 101010x101, 101010x101}, 110010x101 \ {
   1100100101, 1100101101, 110010x101}}

{x1xxx \ {0111x, 11x01, 01x10}, 0100x \ {01001, 01000}}
{x10xx \ {010x1, x1011, 01001}, 11xxx \ {11010, 1101x, 110x0}}
{
   x10xxx1xxx \ {
   x10x1x1xx0, x10x0x1xx1, x101xx1x0x, x100xx1x1x, x10xx0111x, x10xx11x01, x10xx01x10, 010x1x1xxx, x1011x1xxx, 01001x1xxx}, 11xxxx1xxx \ {
   11xx1x1xx0, 11xx0x1xx1, 11x1xx1x0x, 11x0xx1x1x, 11xxx0111x, 11xxx11x01, 11xxx01x10, 11010x1xxx, 1101xx1xxx, 110x0x1xxx}, x100x0100x \ {
   x100101000, x100001001, x100x01001, x100x01000, 010010100x, 010010100x}, 11x0x0100x \ {
   11x0101000, 11x0001001, 11x0x01001, 11x0x01000, 110000100x}}

{x010x \ {10100, 00100, 1010x}, x1010 \ {11010, 01010, 01010}, xxx11 \ {11011, 0x011, 01x11}}
{1x11x \ {1x111, 10110}, x1101 \ {01101, 11101}, 0x1xx \ {001x0, 0x100, 00100}}
{
   x1101x0101 \ {
   x110110101, 01101x0101, 11101x0101}, 0x10xx010x \ {
   0x101x0100, 0x100x0101, 0x10x10100, 0x10x00100, 0x10x1010x, 00100x010x, 0x100x010x, 00100x010x}, 1x110x1010 \ {
   1x11011010, 1x11001010, 1x11001010, 10110x1010}, 0x110x1010 \ {
   0x11011010, 0x11001010, 0x11001010, 00110x1010}, 1x111xxx11 \ {
   1x11111011, 1x1110x011, 1x11101x11, 1x111xxx11}, 0x111xxx11 \ {
   0x11111011, 0x1110x011, 0x11101x11}}

{xx1x1 \ {01111, 111x1, 11101}}
{0001x \ {00011, 00010}, 1x1x0 \ {10100, 11110, 10110}, x0101 \ {00101}}
{
   00011xx111 \ {
   0001101111, 0001111111, 00011xx111}, x0101xx101 \ {
   x010111101, x010111101, 00101xx101}}

{}
{xxx0x \ {11101, x0x01, 00x01}, 1x011 \ {11011, 10011}}
{}

{0xx01 \ {01101, 00x01}}
{x001x \ {10010, x0010, 10011}, 1110x \ {11100, 11101}}
{
   111010xx01 \ {
   1110101101, 1110100x01, 111010xx01}}

{xx0x0 \ {x1000, 1x0x0, x10x0}, xxxx0 \ {11010, 0xx00, 01000}}
{1xxx0 \ {1x100, 11100, 11110}, 0x00x \ {01001, 01000}, 10x10 \ {10110, 10010, 10010}}
{
   1xxx0xx0x0 \ {
   1xx10xx000, 1xx00xx010, 1xxx0x1000, 1xxx01x0x0, 1xxx0x10x0, 1x100xx0x0, 11100xx0x0, 11110xx0x0}, 0x000xx000 \ {
   0x000x1000, 0x0001x000, 0x000x1000, 01000xx000}, 10x10xx010 \ {
   10x101x010, 10x10x1010, 10110xx010, 10010xx010, 10010xx010}, 1xxx0xxxx0 \ {
   1xx10xxx00, 1xx00xxx10, 1xxx011010, 1xxx00xx00, 1xxx001000, 1x100xxxx0, 11100xxxx0, 11110xxxx0}, 0x000xxx00 \ {
   0x0000xx00, 0x00001000, 01000xxx00}, 10x10xxx10 \ {
   10x1011010, 10110xxx10, 10010xxx10, 10010xxx10}}

{x101x \ {11011, x1010, 0101x}, 1xxx1 \ {10001, 10011, 11x01}}
{1xx0x \ {10000, 1xx01, 10001}}
{
   1xx011xx01 \ {
   1xx0110001, 1xx0111x01, 1xx011xx01, 100011xx01}}

{xxxx1 \ {0x111, 111x1, x0001}, 0x110 \ {01110, 00110}, xx001 \ {10001, x0001, 11001}}
{}
{}

{xx101 \ {x1101}, 1x0xx \ {10001, 1000x, 11000}}
{111xx \ {11101, 1110x, 11100}}
{
   11101xx101 \ {
   11101x1101, 11101xx101, 11101xx101}, 111xx1x0xx \ {
   111x11x0x0, 111x01x0x1, 1111x1x00x, 1110x1x01x, 111xx10001, 111xx1000x, 111xx11000, 111011x0xx, 1110x1x0xx, 111001x0xx}}

{x0x00 \ {10x00, x0100, 00000}, 1x0x1 \ {1x001, 11011, 100x1}, x0xxx \ {x00xx, 10x1x, 00xx0}}
{}
{}

{xxx00 \ {x1100, 0x100, xx100}, x10xx \ {010xx, 110x1, 110xx}}
{0xxxx \ {00x0x, 01x01}, 10xx1 \ {10111, 10x11, 10x01}, 01x0x \ {01100, 0100x, 01101}}
{
   0xx00xxx00 \ {
   0xx00x1100, 0xx000x100, 0xx00xx100, 00x00xxx00}, 01x00xxx00 \ {
   01x00x1100, 01x000x100, 01x00xx100, 01100xxx00, 01000xxx00}, 0xxxxx10xx \ {
   0xxx1x10x0, 0xxx0x10x1, 0xx1xx100x, 0xx0xx101x, 0xxxx010xx, 0xxxx110x1, 0xxxx110xx, 00x0xx10xx, 01x01x10xx}, 10xx1x10x1 \ {
   10x11x1001, 10x01x1011, 10xx1010x1, 10xx1110x1, 10xx1110x1, 10111x10x1, 10x11x10x1, 10x01x10x1}, 01x0xx100x \ {
   01x01x1000, 01x00x1001, 01x0x0100x, 01x0x11001, 01x0x1100x, 01100x100x, 0100xx100x, 01101x100x}}

{1x0x0 \ {100x0, 11010, 10010}}
{xx11x \ {x1111, x111x, xx111}, 100xx \ {1000x, 10001, 10010}}
{
   xx1101x010 \ {
   xx11010010, xx11011010, xx11010010, x11101x010}, 100x01x0x0 \ {
   100101x000, 100001x010, 100x0100x0, 100x011010, 100x010010, 100001x0x0, 100101x0x0}}

{x10x0 \ {x1000, 11010, 11000}, 10xx0 \ {100x0, 10x10, 10110}, 101x0 \ {10100, 10110, 10110}}
{x0x00 \ {00x00, x0000, 10100}}
{
   x0x00x1000 \ {
   x0x00x1000, x0x0011000, 00x00x1000, x0000x1000, 10100x1000}, x0x0010x00 \ {
   x0x0010000, 00x0010x00, x000010x00, 1010010x00}, x0x0010100 \ {
   x0x0010100, 00x0010100, x000010100, 1010010100}}

{0101x \ {01010, 01011, 01011}, xxxx1 \ {01001, 00011, x1011}}
{0x00x \ {00001, 00000, 00000}}
{
   0x001xxx01 \ {
   0x00101001, 00001xxx01}}

{x1011 \ {11011, 01011}, x001x \ {00010, 10011, 0001x}}
{0x001 \ {00001}}
{}

{x0xx1 \ {10x11, 10111, x00x1}, 11x0x \ {11x00, 1110x, 11101}, xx100 \ {01100, x0100, x0100}}
{}
{}

{0x1x0 \ {00100, 0x100, 0x100}}
{x0x10 \ {10x10, 00x10, 00x10}, 0000x \ {00001, 00000}, 1xx0x \ {10x00, 1110x, 1100x}}
{
   x0x100x110 \ {
   10x100x110, 00x100x110, 00x100x110}, 000000x100 \ {
   0000000100, 000000x100, 000000x100, 000000x100}, 1xx000x100 \ {
   1xx0000100, 1xx000x100, 1xx000x100, 10x000x100, 111000x100, 110000x100}}

{x1xxx \ {01xx1, 11x01, x101x}, x01xx \ {x0100, 101xx, 0011x}}
{0x001 \ {01001, 00001}, 011xx \ {011x1, 01100}}
{
   0x001x1x01 \ {
   0x00101x01, 0x00111x01, 01001x1x01, 00001x1x01}, 011xxx1xxx \ {
   011x1x1xx0, 011x0x1xx1, 0111xx1x0x, 0110xx1x1x, 011xx01xx1, 011xx11x01, 011xxx101x, 011x1x1xxx, 01100x1xxx}, 0x001x0101 \ {
   0x00110101, 01001x0101, 00001x0101}, 011xxx01xx \ {
   011x1x01x0, 011x0x01x1, 0111xx010x, 0110xx011x, 011xxx0100, 011xx101xx, 011xx0011x, 011x1x01xx, 01100x01xx}}

{1xxxx \ {1011x, 110x0, 1010x}, xx101 \ {00101, x0101, 11101}}
{1111x \ {11111, 11110}, xx000 \ {x0000, 11000, 01000}}
{
   1111x1xx1x \ {
   111111xx10, 111101xx11, 1111x1011x, 1111x11010, 111111xx1x, 111101xx1x}, xx0001xx00 \ {
   xx00011000, xx00010100, x00001xx00, 110001xx00, 010001xx00}}

{x1x00 \ {x1100, 11100, 01100}, xx0x0 \ {1x000, xx000, x0010}}
{xx01x \ {00011, 00010, x0010}}
{
   xx010xx010 \ {
   xx010x0010, 00010xx010, x0010xx010}}

{11xxx \ {1100x, 11x0x, 11x01}}
{}
{}

{xx111 \ {10111, 11111, 01111}, 1xxx0 \ {10x00, 100x0, 11000}}
{x10x0 \ {x1010, 11010, 01000}, 10xx1 \ {100x1, 10001}}
{
   10x11xx111 \ {
   10x1110111, 10x1111111, 10x1101111, 10011xx111}, x10x01xxx0 \ {
   x10101xx00, x10001xx10, x10x010x00, x10x0100x0, x10x011000, x10101xxx0, 110101xxx0, 010001xxx0}}

{x11x0 \ {01110, 11110, 11100}, x1xx1 \ {01001, x1x11, x1001}}
{10x1x \ {1011x, 10x10, 10110}, x11xx \ {x110x, 111xx, 011xx}}
{
   10x10x1110 \ {
   10x1001110, 10x1011110, 10110x1110, 10x10x1110, 10110x1110}, x11x0x11x0 \ {
   x1110x1100, x1100x1110, x11x001110, x11x011110, x11x011100, x1100x11x0, 111x0x11x0, 011x0x11x0}, 10x11x1x11 \ {
   10x11x1x11, 10111x1x11}, x11x1x1xx1 \ {
   x1111x1x01, x1101x1x11, x11x101001, x11x1x1x11, x11x1x1001, x1101x1xx1, 111x1x1xx1, 011x1x1xx1}}

{xx110 \ {00110, x0110, 1x110}, 1x01x \ {1x010, 10011}}
{00x0x \ {0000x, 00001, 00x01}}
{}

{xx1x1 \ {x1111, 10111, x0101}, 100x0 \ {10000, 10010}}
{x1x1x \ {01x10, x1010, x111x}, 1x00x \ {1000x, 1x001, 10001}, 0x00x \ {0x001, 0100x, 00001}}
{
   x1x11xx111 \ {
   x1x11x1111, x1x1110111, x1111xx111}, 1x001xx101 \ {
   1x001x0101, 10001xx101, 1x001xx101, 10001xx101}, 0x001xx101 \ {
   0x001x0101, 0x001xx101, 01001xx101, 00001xx101}, x1x1010010 \ {
   x1x1010010, 01x1010010, x101010010, x111010010}, 1x00010000 \ {
   1x00010000, 1000010000}, 0x00010000 \ {
   0x00010000, 0100010000}}

{x10x1 \ {01001, x1011, 11011}, 01x11 \ {01011, 01111}}
{xx100 \ {x1100, 11100}, xx00x \ {0100x, 00000, 1x000}}
{
   xx001x1001 \ {
   xx00101001, 01001x1001}}

{x0x11 \ {x0111, 10111, 00x11}}
{xx1xx \ {011x0, 001x0, 1111x}, xxxx1 \ {0x111, 110x1, x10x1}}
{
   xx111x0x11 \ {
   xx111x0111, xx11110111, xx11100x11, 11111x0x11}, xxx11x0x11 \ {
   xxx11x0111, xxx1110111, xxx1100x11, 0x111x0x11, 11011x0x11, x1011x0x11}}

{xxxx0 \ {01100, xx010, 1x010}}
{}
{}

{}
{1x1x0 \ {11110, 111x0, 111x0}, 01xxx \ {01x1x, 01xx1, 011x0}}
{}

{110x0 \ {11000}, x0100 \ {00100}}
{}
{}

{x1x0x \ {01101, 11101, x1101}}
{xxxxx \ {1xx11, 011x1, 01xx0}, 01x01 \ {01001}, x011x \ {10111, x0110, 00111}}
{
   xxx0xx1x0x \ {
   xxx01x1x00, xxx00x1x01, xxx0x01101, xxx0x11101, xxx0xx1101, 01101x1x0x, 01x00x1x0x}, 01x01x1x01 \ {
   01x0101101, 01x0111101, 01x01x1101, 01001x1x01}}

{xx0xx \ {x1010, xx00x, 1x011}}
{01x0x \ {01000, 01001, 01x00}}
{
   01x0xxx00x \ {
   01x01xx000, 01x00xx001, 01x0xxx00x, 01000xx00x, 01001xx00x, 01x00xx00x}}

{1x0xx \ {1101x, 1x010, 11011}}
{010xx \ {0101x, 01000, 010x0}, 101x1 \ {10111, 10101}}
{
   010xx1x0xx \ {
   010x11x0x0, 010x01x0x1, 0101x1x00x, 0100x1x01x, 010xx1101x, 010xx1x010, 010xx11011, 0101x1x0xx, 010001x0xx, 010x01x0xx}, 101x11x0x1 \ {
   101111x001, 101011x011, 101x111011, 101x111011, 101111x0x1, 101011x0x1}}

{10x01 \ {10101, 10001}, xx011 \ {01011, 10011}, xx0x1 \ {1x0x1, xx001, x1001}}
{0xx00 \ {01100, 01x00, 0x000}, 0x10x \ {00101, 0010x, 01100}}
{
   0x10110x01 \ {
   0x10110101, 0x10110001, 0010110x01, 0010110x01}, 0x101xx001 \ {
   0x1011x001, 0x101xx001, 0x101x1001, 00101xx001, 00101xx001}}

{0xx11 \ {00011, 0x011, 0x011}, 11x1x \ {11010, 1111x, 11110}, x0x1x \ {10111, x0011, x001x}}
{0xx11 \ {01x11, 00011, 00111}, 1x00x \ {1x000, 1x001, 10001}}
{
   0xx110xx11 \ {
   0xx1100011, 0xx110x011, 0xx110x011, 01x110xx11, 000110xx11, 001110xx11}, 0xx1111x11 \ {
   0xx1111111, 01x1111x11, 0001111x11, 0011111x11}, 0xx11x0x11 \ {
   0xx1110111, 0xx11x0011, 0xx11x0011, 01x11x0x11, 00011x0x11, 00111x0x11}}

{x001x \ {0001x, x0010, 10010}, 1xxxx \ {1x11x, 11111, 110xx}}
{x1x11 \ {x1111, 11011, 11x11}, xxxx1 \ {001x1, x0001, x1x01}}
{
   x1x11x0011 \ {
   x1x1100011, x1111x0011, 11011x0011, 11x11x0011}, xxx11x0011 \ {
   xxx1100011, 00111x0011}, x1x111xx11 \ {
   x1x111x111, x1x1111111, x1x1111011, x11111xx11, 110111xx11, 11x111xx11}, xxxx11xxx1 \ {
   xxx111xx01, xxx011xx11, xxxx11x111, xxxx111111, xxxx1110x1, 001x11xxx1, x00011xxx1, x1x011xxx1}}

{xx1xx \ {111xx, 10111, 0111x}, xxxx1 \ {01001, 10x01, 00x01}}
{}
{}

{0x01x \ {00011, 0001x, 0101x}, x011x \ {0011x, 10111}, x11x0 \ {011x0, 11110, 11100}}
{110x0 \ {11010, 11000}, 10xx1 \ {101x1, 10011}}
{
   110100x010 \ {
   1101000010, 1101001010, 110100x010}, 10x110x011 \ {
   10x1100011, 10x1100011, 10x1101011, 101110x011, 100110x011}, 11010x0110 \ {
   1101000110, 11010x0110}, 10x11x0111 \ {
   10x1100111, 10x1110111, 10111x0111, 10011x0111}, 110x0x11x0 \ {
   11010x1100, 11000x1110, 110x0011x0, 110x011110, 110x011100, 11010x11x0, 11000x11x0}}

{11x10 \ {11110, 11010}, x1x1x \ {11111, 01x1x, 01111}}
{000xx \ {00010, 0001x, 000x0}}
{
   0001011x10 \ {
   0001011110, 0001011010, 0001011x10, 0001011x10, 0001011x10}, 0001xx1x1x \ {
   00011x1x10, 00010x1x11, 0001x11111, 0001x01x1x, 0001x01111, 00010x1x1x, 0001xx1x1x, 00010x1x1x}}

{}
{x1x1x \ {01011, 1101x, 01111}, xx10x \ {11100, 1110x, x0101}}
{}

{x1010 \ {11010}, x110x \ {11100, x1100, 11101}}
{x001x \ {10011, 0001x, 00010}, x10x1 \ {11001, 110x1, 11011}}
{
   x0010x1010 \ {
   x001011010, 00010x1010, 00010x1010}, x1001x1101 \ {
   x100111101, 11001x1101, 11001x1101}}

{xxx0x \ {1100x, 0x10x, 0xx01}}
{111x0 \ {11100, 11110}}
{
   11100xxx00 \ {
   1110011000, 111000x100, 11100xxx00}}

{011xx \ {0111x, 0110x, 01110}, xxx10 \ {1x110, x1010, 01110}, 0x0x0 \ {00010, 01010}}
{x1100 \ {01100}, x1xxx \ {01100, 11x1x, x1xx1}}
{
   x110001100 \ {
   x110001100, 0110001100}, x1xxx011xx \ {
   x1xx1011x0, x1xx0011x1, x1x1x0110x, x1x0x0111x, x1xxx0111x, x1xxx0110x, x1xxx01110, 01100011xx, 11x1x011xx, x1xx1011xx}, x1x10xxx10 \ {
   x1x101x110, x1x10x1010, x1x1001110, 11x10xxx10}, x11000x000 \ {
   011000x000}, x1xx00x0x0 \ {
   x1x100x000, x1x000x010, x1xx000010, x1xx001010, 011000x0x0, 11x100x0x0}}

{01xxx \ {0110x, 01x0x, 01111}}
{0x1x0 \ {01100, 0x100, 001x0}, 0x0x0 \ {00000, 000x0}, 1xx11 \ {10x11, 1x111, 10011}}
{
   0x1x001xx0 \ {
   0x11001x00, 0x10001x10, 0x1x001100, 0x1x001x00, 0110001xx0, 0x10001xx0, 001x001xx0}, 0x0x001xx0 \ {
   0x01001x00, 0x00001x10, 0x0x001100, 0x0x001x00, 0000001xx0, 000x001xx0}, 1xx1101x11 \ {
   1xx1101111, 10x1101x11, 1x11101x11, 1001101x11}}

{x101x \ {01011, 1101x, 0101x}, x0xx1 \ {00101, 000x1, 10x01}}
{1xx0x \ {10100, 1x100, 1000x}}
{
   1xx01x0x01 \ {
   1xx0100101, 1xx0100001, 1xx0110x01, 10001x0x01}}

{x111x \ {0111x, 11110, 01111}, x0xx1 \ {x00x1, x0x01, 10001}, x0100 \ {00100, 10100}}
{x01xx \ {x011x, x0110, 10100}, 0001x \ {00010, 00011}}
{
   x011xx111x \ {
   x0111x1110, x0110x1111, x011x0111x, x011x11110, x011x01111, x011xx111x, x0110x111x}, 0001xx111x \ {
   00011x1110, 00010x1111, 0001x0111x, 0001x11110, 0001x01111, 00010x111x, 00011x111x}, x01x1x0xx1 \ {
   x0111x0x01, x0101x0x11, x01x1x00x1, x01x1x0x01, x01x110001, x0111x0xx1}, 00011x0x11 \ {
   00011x0011, 00011x0x11}, x0100x0100 \ {
   x010000100, x010010100, 10100x0100}}

{x0xx0 \ {100x0, 00x10, 00x10}}
{xxxx1 \ {x0xx1, x1001, 011x1}, x1100 \ {11100, 01100}, x0000 \ {00000}}
{
   x1100x0x00 \ {
   x110010000, 11100x0x00, 01100x0x00}, x0000x0x00 \ {
   x000010000, 00000x0x00}}

{1xx0x \ {10101, 11101, 1x10x}, x11xx \ {11111, 0110x, 111x0}, 0x10x \ {0x101, 00100, 00100}}
{000xx \ {0000x, 00001, 00011}, x00x1 \ {00011, 000x1, x0001}}
{
   0000x1xx0x \ {
   000011xx00, 000001xx01, 0000x10101, 0000x11101, 0000x1x10x, 0000x1xx0x, 000011xx0x}, x00011xx01 \ {
   x000110101, x000111101, x00011x101, 000011xx01, x00011xx01}, 000xxx11xx \ {
   000x1x11x0, 000x0x11x1, 0001xx110x, 0000xx111x, 000xx11111, 000xx0110x, 000xx111x0, 0000xx11xx, 00001x11xx, 00011x11xx}, x00x1x11x1 \ {
   x0011x1101, x0001x1111, x00x111111, x00x101101, 00011x11x1, 000x1x11x1, x0001x11x1}, 0000x0x10x \ {
   000010x100, 000000x101, 0000x0x101, 0000x00100, 0000x00100, 0000x0x10x, 000010x10x}, x00010x101 \ {
   x00010x101, 000010x101, x00010x101}}

{1x1xx \ {1010x, 1x110, 10100}, x11x1 \ {01101, x1101, 011x1}}
{00xx1 \ {00101, 00001, 00x11}}
{
   00xx11x1x1 \ {
   00x111x101, 00x011x111, 00xx110101, 001011x1x1, 000011x1x1, 00x111x1x1}, 00xx1x11x1 \ {
   00x11x1101, 00x01x1111, 00xx101101, 00xx1x1101, 00xx1011x1, 00101x11x1, 00001x11x1, 00x11x11x1}}

{0xx0x \ {00101, 0x101, 0xx00}}
{xxx1x \ {x1111, 00011}}
{}

{xx0x0 \ {10000, 1x010, 1x0x0}}
{x0x00 \ {10x00, x0000, 10000}}
{
   x0x00xx000 \ {
   x0x0010000, x0x001x000, 10x00xx000, x0000xx000, 10000xx000}}

{01x0x \ {0110x, 01000, 01101}}
{x011x \ {00110, 10111, 1011x}, xx1x1 \ {001x1, xx111, x01x1}}
{
   xx10101x01 \ {
   xx10101101, xx10101101, 0010101x01, x010101x01}}

{}
{x0xx1 \ {10101, 00011, 00xx1}, 0xx1x \ {0001x, 0xx10, 0x110}}
{}

{01xx1 \ {01001, 01111, 01011}}
{x00x1 \ {x0011, 00001, 000x1}, 0x1x1 \ {0x101, 01101}}
{
   x00x101xx1 \ {
   x001101x01, x000101x11, x00x101001, x00x101111, x00x101011, x001101xx1, 0000101xx1, 000x101xx1}, 0x1x101xx1 \ {
   0x11101x01, 0x10101x11, 0x1x101001, 0x1x101111, 0x1x101011, 0x10101xx1, 0110101xx1}}

{x0xx1 \ {10001, 10101, 101x1}, 000xx \ {00001, 00000}}
{x1x1x \ {11111, 01x1x, 01x1x}, x00xx \ {1001x, x0010, x0010}, 1xx01 \ {1x001, 10101}}
{
   x1x11x0x11 \ {
   x1x1110111, 11111x0x11, 01x11x0x11, 01x11x0x11}, x00x1x0xx1 \ {
   x0011x0x01, x0001x0x11, x00x110001, x00x110101, x00x1101x1, 10011x0xx1}, 1xx01x0x01 \ {
   1xx0110001, 1xx0110101, 1xx0110101, 1x001x0x01, 10101x0x01}, x1x1x0001x \ {
   x1x1100010, x1x1000011, 111110001x, 01x1x0001x, 01x1x0001x}, x00xx000xx \ {
   x00x1000x0, x00x0000x1, x001x0000x, x000x0001x, x00xx00001, x00xx00000, 1001x000xx, x0010000xx, x0010000xx}, 1xx0100001 \ {
   1xx0100001, 1x00100001, 1010100001}}

{1xxx1 \ {1x1x1, 11011}, x1xx0 \ {01x10, 11100, 111x0}}
{0x101 \ {00101}}
{
   0x1011xx01 \ {
   0x1011x101, 001011xx01}}

{1010x \ {10101, 10100, 10100}, x0x01 \ {10101, 00x01}}
{xxxxx \ {001x0, 11100, 1xx10}, xx0x1 \ {1x001, 01011, 00011}}
{
   xxx0x1010x \ {
   xxx0110100, xxx0010101, xxx0x10101, xxx0x10100, xxx0x10100, 001001010x, 111001010x}, xx00110101 \ {
   xx00110101, 1x00110101}, xxx01x0x01 \ {
   xxx0110101, xxx0100x01}, xx001x0x01 \ {
   xx00110101, xx00100x01, 1x001x0x01}}

{1xx00 \ {10100, 1x000, 11100}, 11xxx \ {11x11, 111x0, 11100}}
{xx011 \ {00011, 01011, x0011}, xx1x1 \ {x11x1, 10111, 11101}}
{
   xx01111x11 \ {
   xx01111x11, 0001111x11, 0101111x11, x001111x11}, xx1x111xx1 \ {
   xx11111x01, xx10111x11, xx1x111x11, x11x111xx1, 1011111xx1, 1110111xx1}}

{}
{0x100 \ {01100}, 10xx0 \ {101x0, 10x10}, 00xx1 \ {00111, 00x11, 00001}}
{}

{x00xx \ {100x0, x0000, x001x}, 11x00 \ {11000}}
{x10x0 \ {01010, 010x0, x1010}}
{
   x10x0x00x0 \ {
   x1010x0000, x1000x0010, x10x0100x0, x10x0x0000, x10x0x0010, 01010x00x0, 010x0x00x0, x1010x00x0}, x100011x00 \ {
   x100011000, 0100011x00}}

{x11x0 \ {11110, 011x0}}
{}
{}

{0xx11 \ {0x111, 00011, 00x11}, x1000 \ {01000, 11000}}
{001x1 \ {00111, 00101}, xx111 \ {0x111, x1111}}
{
   001110xx11 \ {
   001110x111, 0011100011, 0011100x11, 001110xx11}, xx1110xx11 \ {
   xx1110x111, xx11100011, xx11100x11, 0x1110xx11, x11110xx11}}

{0x1xx \ {0x110, 01101}, x1x1x \ {11x1x, 01x11, 11011}}
{x01x0 \ {10110, 00100, 101x0}, xx1x0 \ {1x1x0, 111x0, 1x110}}
{
   x01x00x1x0 \ {
   x01100x100, x01000x110, x01x00x110, 101100x1x0, 001000x1x0, 101x00x1x0}, xx1x00x1x0 \ {
   xx1100x100, xx1000x110, xx1x00x110, 1x1x00x1x0, 111x00x1x0, 1x1100x1x0}, x0110x1x10 \ {
   x011011x10, 10110x1x10, 10110x1x10}, xx110x1x10 \ {
   xx11011x10, 1x110x1x10, 11110x1x10, 1x110x1x10}}

{xxx10 \ {11x10, 00110, xx010}, 10x00 \ {10000}}
{xx111 \ {x0111, 01111, 00111}}
{}

{x11x0 \ {011x0, 11100, x1110}, x01xx \ {001x0, 10100, x0100}, 000xx \ {000x1, 0000x, 00000}}
{x100x \ {0100x, 01001}, 11x1x \ {11111, 11011, 11010}}
{
   x1000x1100 \ {
   x100001100, x100011100, 01000x1100}, 11x10x1110 \ {
   11x1001110, 11x10x1110, 11010x1110}, x100xx010x \ {
   x1001x0100, x1000x0101, x100x00100, x100x10100, x100xx0100, 0100xx010x, 01001x010x}, 11x1xx011x \ {
   11x11x0110, 11x10x0111, 11x1x00110, 11111x011x, 11011x011x, 11010x011x}, x100x0000x \ {
   x100100000, x100000001, x100x00001, x100x0000x, x100x00000, 0100x0000x, 010010000x}, 11x1x0001x \ {
   11x1100010, 11x1000011, 11x1x00011, 111110001x, 110110001x, 110100001x}}

{x0xx0 \ {000x0, 00x10, x0x10}, 1xx01 \ {1x001, 11x01, 1x101}}
{}
{}

{xx01x \ {00010, 1001x, xx011}}
{}
{}

{xx000 \ {x1000, 1x000, 00000}, x1xxx \ {0100x, 11x11, 11101}, 0x1xx \ {001x0, 0x110, 0x1x0}}
{xxx01 \ {10101, 00x01}}
{
   xxx01x1x01 \ {
   xxx0101001, xxx0111101, 10101x1x01, 00x01x1x01}, xxx010x101 \ {
   101010x101, 00x010x101}}

{x1xx1 \ {x1x11, x1101, 01x01}, 0x0xx \ {010x0, 0x01x, 00000}}
{0xxx0 \ {0x0x0, 011x0, 0xx00}}
{
   0xxx00x0x0 \ {
   0xx100x000, 0xx000x010, 0xxx0010x0, 0xxx00x010, 0xxx000000, 0x0x00x0x0, 011x00x0x0, 0xx000x0x0}}

{11x01 \ {11101, 11001}}
{0x0x0 \ {00000, 0x000, 000x0}}
{}

{1x10x \ {1x101, 1110x, 1110x}}
{0x1x0 \ {00100, 0x100, 0x110}}
{
   0x1001x100 \ {
   0x10011100, 0x10011100, 001001x100, 0x1001x100}}

{00x0x \ {00100, 00x00}}
{1100x \ {11001, 11000, 11000}}
{
   1100x00x0x \ {
   1100100x00, 1100000x01, 1100x00100, 1100x00x00, 1100100x0x, 1100000x0x, 1100000x0x}}

{000x0 \ {00000, 00010, 00010}}
{xx10x \ {xx101, 10101, 1x101}}
{
   xx10000000 \ {
   xx10000000}}

{0x0x0 \ {000x0, 0x000, 00010}}
{x1x10 \ {11x10, 11110, 11110}, 01xxx \ {0101x, 010x0, 01101}}
{
   x1x100x010 \ {
   x1x1000010, x1x1000010, 11x100x010, 111100x010, 111100x010}, 01xx00x0x0 \ {
   01x100x000, 01x000x010, 01xx0000x0, 01xx00x000, 01xx000010, 010100x0x0, 010x00x0x0}}

{00xx0 \ {00010, 000x0, 00100}, xx000 \ {00000}}
{00xx0 \ {001x0, 00x10, 00x10}, 0xx1x \ {01x11, 0111x, 01011}}
{
   00xx000xx0 \ {
   00x1000x00, 00x0000x10, 00xx000010, 00xx0000x0, 00xx000100, 001x000xx0, 00x1000xx0, 00x1000xx0}, 0xx1000x10 \ {
   0xx1000010, 0xx1000010, 0111000x10}, 00x00xx000 \ {
   00x0000000, 00100xx000}}

{1111x \ {11111, 11110, 11110}, 0x1x1 \ {011x1, 001x1, 01111}, 110x1 \ {11001, 11011}}
{001xx \ {001x1, 00111, 001x0}}
{
   0011x1111x \ {
   0011111110, 0011011111, 0011x11111, 0011x11110, 0011x11110, 001111111x, 001111111x, 001101111x}, 001x10x1x1 \ {
   001110x101, 001010x111, 001x1011x1, 001x1001x1, 001x101111, 001x10x1x1, 001110x1x1}, 001x1110x1 \ {
   0011111001, 0010111011, 001x111001, 001x111011, 001x1110x1, 00111110x1}}

{x1001 \ {11001, 01001}, 010x1 \ {01001}}
{xx1xx \ {01110, 01101, xx1x1}}
{
   xx101x1001 \ {
   xx10111001, xx10101001, 01101x1001, xx101x1001}, xx1x1010x1 \ {
   xx11101001, xx10101011, xx1x101001, 01101010x1, xx1x1010x1}}

{1x11x \ {11111, 11110, 1111x}, 11x11 \ {11011, 11111}}
{01xx1 \ {01011, 010x1}, 1xx0x \ {1xx00, 10100, 1x10x}}
{
   01x111x111 \ {
   01x1111111, 01x1111111, 010111x111, 010111x111}, 01x1111x11 \ {
   01x1111011, 01x1111111, 0101111x11, 0101111x11}}

{}
{x00xx \ {x0000, 1001x, 1001x}}
{}

{xx111 \ {10111, 00111}, xxx0x \ {0x00x, x0x00, 11x0x}, 11x11 \ {11011}}
{00x0x \ {00100, 00x01, 00000}, x10x0 \ {x1010, 11000, 11010}, 010x0 \ {01000, 01010}}
{
   00x0xxxx0x \ {
   00x01xxx00, 00x00xxx01, 00x0x0x00x, 00x0xx0x00, 00x0x11x0x, 00100xxx0x, 00x01xxx0x, 00000xxx0x}, x1000xxx00 \ {
   x10000x000, x1000x0x00, x100011x00, 11000xxx00}, 01000xxx00 \ {
   010000x000, 01000x0x00, 0100011x00, 01000xxx00}}

{xx01x \ {0001x, 1x010, xx010}}
{1xxx1 \ {10x01, 11001, 110x1}, 1xx1x \ {10011, 10010, 1x011}}
{
   1xx11xx011 \ {
   1xx1100011, 11011xx011}, 1xx1xxx01x \ {
   1xx11xx010, 1xx10xx011, 1xx1x0001x, 1xx1x1x010, 1xx1xxx010, 10011xx01x, 10010xx01x, 1x011xx01x}}

{10x10 \ {10110, 10010}, 00x1x \ {00010, 00011, 00110}, 10x11 \ {10011, 10111, 10111}}
{}
{}

{x1x10 \ {11110, 01x10, x1110}, xx0xx \ {010x0, 0001x, x001x}}
{x111x \ {01111, x1111, 1111x}, x1x10 \ {01010, 11010}, x0101 \ {00101}}
{
   x1110x1x10 \ {
   x111011110, x111001x10, x1110x1110, 11110x1x10}, x1x10x1x10 \ {
   x1x1011110, x1x1001x10, x1x10x1110, 01010x1x10, 11010x1x10}, x111xxx01x \ {
   x1111xx010, x1110xx011, x111x01010, x111x0001x, x111xx001x, 01111xx01x, x1111xx01x, 1111xxx01x}, x1x10xx010 \ {
   x1x1001010, x1x1000010, x1x10x0010, 01010xx010, 11010xx010}, x0101xx001 \ {
   00101xx001}}

{1xx11 \ {1x111, 10011}, 000x0 \ {00000}}
{xx1xx \ {0x10x, xx11x, 0111x}, 1x0x0 \ {11010, 110x0, 100x0}}
{
   xx1111xx11 \ {
   xx1111x111, xx11110011, xx1111xx11, 011111xx11}, xx1x0000x0 \ {
   xx11000000, xx10000010, xx1x000000, 0x100000x0, xx110000x0, 01110000x0}, 1x0x0000x0 \ {
   1x01000000, 1x00000010, 1x0x000000, 11010000x0, 110x0000x0, 100x0000x0}}

{10xx1 \ {10001, 100x1, 10111}, x11xx \ {x11x1, 01100, 11100}}
{1xx11 \ {1x011, 10x11, 11x11}, x11x1 \ {11111, 111x1, x1111}, xxx01 \ {xx001, 0x001, 0x001}}
{
   1xx1110x11 \ {
   1xx1110011, 1xx1110111, 1x01110x11, 10x1110x11, 11x1110x11}, x11x110xx1 \ {
   x111110x01, x110110x11, x11x110001, x11x1100x1, x11x110111, 1111110xx1, 111x110xx1, x111110xx1}, xxx0110x01 \ {
   xxx0110001, xxx0110001, xx00110x01, 0x00110x01, 0x00110x01}, 1xx11x1111 \ {
   1xx11x1111, 1x011x1111, 10x11x1111, 11x11x1111}, x11x1x11x1 \ {
   x1111x1101, x1101x1111, x11x1x11x1, 11111x11x1, 111x1x11x1, x1111x11x1}, xxx01x1101 \ {
   xxx01x1101, xx001x1101, 0x001x1101, 0x001x1101}}

{0xxx1 \ {000x1, 0xx01, 01x11}, 0x00x \ {01000, 0100x}, x111x \ {01111, x1110, 0111x}}
{}
{}

{x1x01 \ {11x01, 01001, 01x01}, 0x0x0 \ {000x0, 0x010, 01000}}
{00xxx \ {00100, 0010x, 000x0}, 011xx \ {0110x, 01110, 01100}, x10xx \ {01010, 11011, 110xx}}
{
   00x01x1x01 \ {
   00x0111x01, 00x0101001, 00x0101x01, 00101x1x01}, 01101x1x01 \ {
   0110111x01, 0110101001, 0110101x01, 01101x1x01}, x1001x1x01 \ {
   x100111x01, x100101001, x100101x01, 11001x1x01}, 00xx00x0x0 \ {
   00x100x000, 00x000x010, 00xx0000x0, 00xx00x010, 00xx001000, 001000x0x0, 001000x0x0, 000x00x0x0}, 011x00x0x0 \ {
   011100x000, 011000x010, 011x0000x0, 011x00x010, 011x001000, 011000x0x0, 011100x0x0, 011000x0x0}, x10x00x0x0 \ {
   x10100x000, x10000x010, x10x0000x0, x10x00x010, x10x001000, 010100x0x0, 110x00x0x0}}

{010xx \ {01010, 01000, 01011}}
{xx011 \ {x0011, 01011, 10011}, 0xx11 \ {0x111, 01011, 00111}, 11xxx \ {11x1x, 1101x, 11101}}
{
   xx01101011 \ {
   xx01101011, x001101011, 0101101011, 1001101011}, 0xx1101011 \ {
   0xx1101011, 0x11101011, 0101101011, 0011101011}, 11xxx010xx \ {
   11xx1010x0, 11xx0010x1, 11x1x0100x, 11x0x0101x, 11xxx01010, 11xxx01000, 11xxx01011, 11x1x010xx, 1101x010xx, 11101010xx}}

{010x0 \ {01000, 01010}, x10xx \ {01011, 010xx, 1100x}, xx11x \ {xx110, 1x11x, 0x110}}
{1x10x \ {11101, 1010x}}
{
   1x10001000 \ {
   1x10001000, 1010001000}, 1x10xx100x \ {
   1x101x1000, 1x100x1001, 1x10x0100x, 1x10x1100x, 11101x100x, 1010xx100x}}

{11xx1 \ {110x1, 111x1, 11101}, 0xxxx \ {01x0x, 001xx, 0101x}}
{10xx1 \ {10x11, 101x1, 10111}}
{
   10xx111xx1 \ {
   10x1111x01, 10x0111x11, 10xx1110x1, 10xx1111x1, 10xx111101, 10x1111xx1, 101x111xx1, 1011111xx1}, 10xx10xxx1 \ {
   10x110xx01, 10x010xx11, 10xx101x01, 10xx1001x1, 10xx101011, 10x110xxx1, 101x10xxx1, 101110xxx1}}

{1xxxx \ {10x11, 1x011, 1011x}, 1x1x0 \ {11110, 11100}}
{0x1xx \ {0x100, 01100, 0111x}}
{
   0x1xx1xxxx \ {
   0x1x11xxx0, 0x1x01xxx1, 0x11x1xx0x, 0x10x1xx1x, 0x1xx10x11, 0x1xx1x011, 0x1xx1011x, 0x1001xxxx, 011001xxxx, 0111x1xxxx}, 0x1x01x1x0 \ {
   0x1101x100, 0x1001x110, 0x1x011110, 0x1x011100, 0x1001x1x0, 011001x1x0, 011101x1x0}}

{1x11x \ {1x111, 1x110, 1x110}}
{}
{}

{xx0x1 \ {1x011, 01001, xx001}, 01x10 \ {01010}}
{1111x \ {11111, 11110}}
{
   11111xx011 \ {
   111111x011, 11111xx011}, 1111001x10 \ {
   1111001010, 1111001x10}}

{x110x \ {1110x, 0110x}, x1xxx \ {x10x0, 01x1x, 11011}, 0x010 \ {01010, 00010}}
{x10x1 \ {11001, x1011, x1011}}
{
   x1001x1101 \ {
   x100111101, x100101101, 11001x1101}, x10x1x1xx1 \ {
   x1011x1x01, x1001x1x11, x10x101x11, x10x111011, 11001x1xx1, x1011x1xx1, x1011x1xx1}}

{x01xx \ {x0100, x0101, 00101}}
{11x1x \ {1111x, 11x10}}
{
   11x1xx011x \ {
   11x11x0110, 11x10x0111, 1111xx011x, 11x10x011x}}

{x1xx1 \ {011x1, x1x11, 01101}}
{0x110 \ {00110, 01110}, xx100 \ {01100, 10100}, 10xx1 \ {10001, 10011, 10111}}
{
   10xx1x1xx1 \ {
   10x11x1x01, 10x01x1x11, 10xx1011x1, 10xx1x1x11, 10xx101101, 10001x1xx1, 10011x1xx1, 10111x1xx1}}

{}
{001xx \ {00110, 0010x, 00101}}
{}

{1x00x \ {1x000, 11001, 10001}, 1x111 \ {11111, 10111}}
{xxxx1 \ {0x111, 11x01, x1x01}, 101x1 \ {10111, 10101}, x00xx \ {000x0, x0001, 0001x}}
{
   xxx011x001 \ {
   xxx0111001, xxx0110001, 11x011x001, x1x011x001}, 101011x001 \ {
   1010111001, 1010110001, 101011x001}, x000x1x00x \ {
   x00011x000, x00001x001, x000x1x000, x000x11001, x000x10001, 000001x00x, x00011x00x}, xxx111x111 \ {
   xxx1111111, xxx1110111, 0x1111x111}, 101111x111 \ {
   1011111111, 1011110111, 101111x111}, x00111x111 \ {
   x001111111, x001110111, 000111x111}}

{}
{1x11x \ {1111x, 1x111, 1011x}, xx10x \ {0x10x, 11101, 11100}}
{}

{x0xx1 \ {x0x01, 100x1, 00x01}, x11xx \ {x1101, 0111x, 11100}}
{01x10 \ {01110, 01010}, 1xxxx \ {10100, 10x10, 10000}}
{
   1xxx1x0xx1 \ {
   1xx11x0x01, 1xx01x0x11, 1xxx1x0x01, 1xxx1100x1, 1xxx100x01}, 01x10x1110 \ {
   01x1001110, 01110x1110, 01010x1110}, 1xxxxx11xx \ {
   1xxx1x11x0, 1xxx0x11x1, 1xx1xx110x, 1xx0xx111x, 1xxxxx1101, 1xxxx0111x, 1xxxx11100, 10100x11xx, 10x10x11xx, 10000x11xx}}

{00xx0 \ {00100, 001x0, 000x0}}
{x10xx \ {110xx, 11011, x1011}, 000x0 \ {00000, 00010, 00010}}
{
   x10x000xx0 \ {
   x101000x00, x100000x10, x10x000100, x10x0001x0, x10x0000x0, 110x000xx0}, 000x000xx0 \ {
   0001000x00, 0000000x10, 000x000100, 000x0001x0, 000x0000x0, 0000000xx0, 0001000xx0, 0001000xx0}}

{0xxx1 \ {0xx11, 0x0x1, 0x1x1}}
{x101x \ {x1010, 1101x, 0101x}, x1xx1 \ {x11x1, 11001, 11x01}}
{
   x10110xx11 \ {
   x10110xx11, x10110x011, x10110x111, 110110xx11, 010110xx11}, x1xx10xxx1 \ {
   x1x110xx01, x1x010xx11, x1xx10xx11, x1xx10x0x1, x1xx10x1x1, x11x10xxx1, 110010xxx1, 11x010xxx1}}

{x0100 \ {00100, 10100, 10100}}
{}
{}

{0x10x \ {0x100, 00100, 00100}, xx010 \ {11010, 00010, x1010}, x0x10 \ {x0010, 00110, x0110}}
{xxx01 \ {01x01, 10101, 11101}, 0xx10 \ {0x110, 00010, 01110}}
{
   xxx010x101 \ {
   01x010x101, 101010x101, 111010x101}, 0xx10xx010 \ {
   0xx1011010, 0xx1000010, 0xx10x1010, 0x110xx010, 00010xx010, 01110xx010}, 0xx10x0x10 \ {
   0xx10x0010, 0xx1000110, 0xx10x0110, 0x110x0x10, 00010x0x10, 01110x0x10}}

{x0100 \ {00100, 10100}, x1001 \ {01001}}
{}
{}

{x10x0 \ {x1010, 11010, 01010}}
{00xx1 \ {00101, 001x1}}
{}

{00x1x \ {00x11, 00010, 00111}, x1xx1 \ {x1001, x1111, 01xx1}, 101xx \ {101x1, 101x0, 10100}}
{}
{}

{xxxxx \ {10110, xxx0x, x11x1}, x0x01 \ {10101, 10001, 00001}}
{0x0xx \ {01011, 00011, 010xx}, 01x0x \ {01001, 0100x, 01101}, xx0x1 \ {11011, 0x0x1, 1x011}}
{
   0x0xxxxxxx \ {
   0x0x1xxxx0, 0x0x0xxxx1, 0x01xxxx0x, 0x00xxxx1x, 0x0xx10110, 0x0xxxxx0x, 0x0xxx11x1, 01011xxxxx, 00011xxxxx, 010xxxxxxx}, 01x0xxxx0x \ {
   01x01xxx00, 01x00xxx01, 01x0xxxx0x, 01x0xx1101, 01001xxx0x, 0100xxxx0x, 01101xxx0x}, xx0x1xxxx1 \ {
   xx011xxx01, xx001xxx11, xx0x1xxx01, xx0x1x11x1, 11011xxxx1, 0x0x1xxxx1, 1x011xxxx1}, 0x001x0x01 \ {
   0x00110101, 0x00110001, 0x00100001, 01001x0x01}, 01x01x0x01 \ {
   01x0110101, 01x0110001, 01x0100001, 01001x0x01, 01001x0x01, 01101x0x01}, xx001x0x01 \ {
   xx00110101, xx00110001, xx00100001, 0x001x0x01}}

{xxxx0 \ {x0010, 0xxx0, 000x0}, xx1xx \ {00101, 0111x, 10101}}
{x0101 \ {00101, 10101}}
{
   x0101xx101 \ {
   x010100101, x010110101, 00101xx101, 10101xx101}}

{10xx1 \ {100x1, 10001, 10001}}
{}
{}

{0x111 \ {01111, 00111}, 00x1x \ {00111, 00x11, 00110}, xx1x1 \ {01111, xx111, 0x111}}
{1011x \ {10111, 10110}, xx1x1 \ {011x1, 11101, 10111}, x0x1x \ {10x1x, x0111, x011x}}
{
   101110x111 \ {
   1011101111, 1011100111, 101110x111}, xx1110x111 \ {
   xx11101111, xx11100111, 011110x111, 101110x111}, x0x110x111 \ {
   x0x1101111, x0x1100111, 10x110x111, x01110x111, x01110x111}, 1011x00x1x \ {
   1011100x10, 1011000x11, 1011x00111, 1011x00x11, 1011x00110, 1011100x1x, 1011000x1x}, xx11100x11 \ {
   xx11100111, xx11100x11, 0111100x11, 1011100x11}, x0x1x00x1x \ {
   x0x1100x10, x0x1000x11, x0x1x00111, x0x1x00x11, x0x1x00110, 10x1x00x1x, x011100x1x, x011x00x1x}, 10111xx111 \ {
   1011101111, 10111xx111, 101110x111, 10111xx111}, xx1x1xx1x1 \ {
   xx111xx101, xx101xx111, xx1x101111, xx1x1xx111, xx1x10x111, 011x1xx1x1, 11101xx1x1, 10111xx1x1}, x0x11xx111 \ {
   x0x1101111, x0x11xx111, x0x110x111, 10x11xx111, x0111xx111, x0111xx111}}

{0110x \ {01101, 01100}}
{xx0x1 \ {00011, 100x1, 110x1}, 01xx1 \ {011x1, 01001, 010x1}}
{
   xx00101101 \ {
   xx00101101, 1000101101, 1100101101}, 01x0101101 \ {
   01x0101101, 0110101101, 0100101101, 0100101101}}

{111x0 \ {11100, 11110}, xx101 \ {0x101, 00101, 11101}}
{xxx01 \ {10101, 10x01, 0x101}}
{
   xxx01xx101 \ {
   xxx010x101, xxx0100101, xxx0111101, 10101xx101, 10x01xx101, 0x101xx101}}

{}
{0xx0x \ {0xx01, 00001}}
{}

{1xx1x \ {11110, 1xx11, 1111x}, 00x10 \ {00010}, 0x1x0 \ {011x0, 00100, 00100}}
{x0011 \ {00011, 10011}, xxx0x \ {00x01, 0110x, 0100x}}
{
   x00111xx11 \ {
   x00111xx11, x001111111, 000111xx11, 100111xx11}, xxx000x100 \ {
   xxx0001100, xxx0000100, xxx0000100, 011000x100, 010000x100}}

{01x11 \ {01111}}
{0x0xx \ {00001, 000x1, 010x1}}
{
   0x01101x11 \ {
   0x01101111, 0001101x11, 0101101x11}}

{10x00 \ {10000, 10100, 10100}, 00x00 \ {00100, 00000}, x10xx \ {0101x, 11001, 010x0}}
{01x1x \ {01x11, 0111x, 01111}, 100x0 \ {10000, 10010}}
{
   1000010x00 \ {
   1000010000, 1000010100, 1000010100, 1000010x00}, 1000000x00 \ {
   1000000100, 1000000000, 1000000x00}, 01x1xx101x \ {
   01x11x1010, 01x10x1011, 01x1x0101x, 01x1x01010, 01x11x101x, 0111xx101x, 01111x101x}, 100x0x10x0 \ {
   10010x1000, 10000x1010, 100x001010, 100x0010x0, 10000x10x0, 10010x10x0}}

{01x00 \ {01100, 01000}, x1x0x \ {11101, 11x00, 01000}}
{01xx0 \ {010x0, 01110, 01x00}}
{
   01x0001x00 \ {
   01x0001100, 01x0001000, 0100001x00, 01x0001x00}, 01x00x1x00 \ {
   01x0011x00, 01x0001000, 01000x1x00, 01x00x1x00}}

{x11xx \ {011x1, x111x, x110x}, 01x11 \ {01111, 01011, 01011}}
{000x1 \ {00011, 00001, 00001}}
{
   000x1x11x1 \ {
   00011x1101, 00001x1111, 000x1011x1, 000x1x1111, 000x1x1101, 00011x11x1, 00001x11x1, 00001x11x1}, 0001101x11 \ {
   0001101111, 0001101011, 0001101011, 0001101x11}}

{1xx01 \ {11x01, 10x01, 10101}, 1x1x0 \ {1x100, 11100, 1x110}}
{}
{}

{xxx11 \ {10111, xx111}, 1x101 \ {11101, 10101, 10101}}
{x1x0x \ {x1x01, x110x, 11x00}}
{
   x1x011x101 \ {
   x1x0111101, x1x0110101, x1x0110101, x1x011x101, x11011x101}}

{010xx \ {010x1, 0101x, 01000}}
{0xx1x \ {01111, 01x10, 01x11}}
{
   0xx1x0101x \ {
   0xx1101010, 0xx1001011, 0xx1x01011, 0xx1x0101x, 011110101x, 01x100101x, 01x110101x}}

{}
{1xx1x \ {10x11, 1x010, 10011}, x1xx0 \ {01100, x1x00, 11xx0}}
{}

{00x1x \ {00x10, 00111, 00011}}
{x010x \ {00101, 0010x, 10101}}
{}

{1x1x0 \ {1x100, 101x0, 111x0}, 1xx11 \ {11x11, 1x011, 10111}}
{0xx00 \ {0x000, 01000, 01000}, 1x101 \ {11101}}
{
   0xx001x100 \ {
   0xx001x100, 0xx0010100, 0xx0011100, 0x0001x100, 010001x100, 010001x100}}

{1x11x \ {1x111, 10111, 1011x}, 0xxxx \ {00x0x, 0xx00, 00x10}}
{x1x11 \ {01x11, 11011, 11011}, xx0xx \ {010xx, xx001, x101x}}
{
   x1x111x111 \ {
   x1x111x111, x1x1110111, x1x1110111, 01x111x111, 110111x111, 110111x111}, xx01x1x11x \ {
   xx0111x110, xx0101x111, xx01x1x111, xx01x10111, xx01x1011x, 0101x1x11x, x101x1x11x}, x1x110xx11 \ {
   01x110xx11, 110110xx11, 110110xx11}, xx0xx0xxxx \ {
   xx0x10xxx0, xx0x00xxx1, xx01x0xx0x, xx00x0xx1x, xx0xx00x0x, xx0xx0xx00, xx0xx00x10, 010xx0xxxx, xx0010xxxx, x101x0xxxx}}

{xx110 \ {0x110, 1x110}, 10x10 \ {10010, 10110, 10110}}
{}
{}

{1xx11 \ {11011, 11111, 10x11}, x0111 \ {10111, 00111, 00111}}
{0xxxx \ {0x01x, 01101, 00x00}, 0x0x1 \ {010x1, 00011, 01011}, x1xxx \ {01110, 110x1, 11110}}
{
   0xx111xx11 \ {
   0xx1111011, 0xx1111111, 0xx1110x11, 0x0111xx11}, 0x0111xx11 \ {
   0x01111011, 0x01111111, 0x01110x11, 010111xx11, 000111xx11, 010111xx11}, x1x111xx11 \ {
   x1x1111011, x1x1111111, x1x1110x11, 110111xx11}, 0xx11x0111 \ {
   0xx1110111, 0xx1100111, 0xx1100111, 0x011x0111}, 0x011x0111 \ {
   0x01110111, 0x01100111, 0x01100111, 01011x0111, 00011x0111, 01011x0111}, x1x11x0111 \ {
   x1x1110111, x1x1100111, x1x1100111, 11011x0111}}

{1x1x1 \ {111x1, 11101, 11111}, 1100x \ {11001}, 0001x \ {00011, 00010, 00010}}
{10xx0 \ {10010, 100x0, 10x10}, xx01x \ {00010, xx011, xx011}}
{
   xx0111x111 \ {
   xx01111111, xx01111111, xx0111x111, xx0111x111}, 10x0011000 \ {
   1000011000}, 10x1000010 \ {
   10x1000010, 10x1000010, 1001000010, 1001000010, 10x1000010}, xx01x0001x \ {
   xx01100010, xx01000011, xx01x00011, xx01x00010, xx01x00010, 000100001x, xx0110001x, xx0110001x}}

{x01x1 \ {x0111, 10101, x0101}}
{0xx00 \ {01100, 01000, 01x00}, x100x \ {01001, x1001, 01000}, 0xxx0 \ {001x0, 0x0x0, 00110}}
{
   x1001x0101 \ {
   x100110101, x1001x0101, 01001x0101, x1001x0101}}

{xx001 \ {00001, 1x001}, x0x1x \ {00011, 10x1x, 10x10}, xx100 \ {1x100, 11100, 0x100}}
{x1001 \ {01001}, x00xx \ {10011, 00010, 0000x}}
{
   x1001xx001 \ {
   x100100001, x10011x001, 01001xx001}, x0001xx001 \ {
   x000100001, x00011x001, 00001xx001}, x001xx0x1x \ {
   x0011x0x10, x0010x0x11, x001x00011, x001x10x1x, x001x10x10, 10011x0x1x, 00010x0x1x}, x0000xx100 \ {
   x00001x100, x000011100, x00000x100, 00000xx100}}

{01xx1 \ {01011, 01111, 01x11}}
{1xx0x \ {11x0x, 1xx01}, x101x \ {x1011, 1101x, 1101x}}
{
   1xx0101x01 \ {
   11x0101x01, 1xx0101x01}, x101101x11 \ {
   x101101011, x101101111, x101101x11, x101101x11, 1101101x11, 1101101x11}}

{xxx0x \ {00101, 1x100, xx001}}
{}
{}

{00xx0 \ {00100, 00110, 00010}, xxx1x \ {1xx1x, 11010, 00110}}
{1x01x \ {1x011, 1x010, 10010}, xx0x0 \ {01000, x0010, 1x000}}
{
   1x01000x10 \ {
   1x01000110, 1x01000010, 1x01000x10, 1001000x10}, xx0x000xx0 \ {
   xx01000x00, xx00000x10, xx0x000100, xx0x000110, xx0x000010, 0100000xx0, x001000xx0, 1x00000xx0}, 1x01xxxx1x \ {
   1x011xxx10, 1x010xxx11, 1x01x1xx1x, 1x01x11010, 1x01x00110, 1x011xxx1x, 1x010xxx1x, 10010xxx1x}, xx010xxx10 \ {
   xx0101xx10, xx01011010, xx01000110, x0010xxx10}}

{xxx10 \ {0x110, 1x010, x1010}, 0x01x \ {00010, 01011, 0001x}}
{00xxx \ {000x0, 0001x, 001xx}}
{
   00x10xxx10 \ {
   00x100x110, 00x101x010, 00x10x1010, 00010xxx10, 00010xxx10, 00110xxx10}, 00x1x0x01x \ {
   00x110x010, 00x100x011, 00x1x00010, 00x1x01011, 00x1x0001x, 000100x01x, 0001x0x01x, 0011x0x01x}}

{10x10 \ {10010, 10110, 10110}}
{1xx1x \ {1xx10, 10x11, 1x01x}, 1xx0x \ {11000, 1x00x, 11001}, x1011 \ {01011}}
{
   1xx1010x10 \ {
   1xx1010010, 1xx1010110, 1xx1010110, 1xx1010x10, 1x01010x10}}

{0111x \ {01110, 01111}, xx1x0 \ {00100, 1x100, 1x110}}
{}
{}

{0x011 \ {01011}}
{xx100 \ {00100, 0x100, x0100}}
{}

{1xx01 \ {11x01, 10101, 10101}, xx00x \ {01001, x1000, 0100x}, xxx1x \ {x0011, 1011x, 10111}}
{1xx0x \ {1x101, 10000, 1x001}}
{
   1xx011xx01 \ {
   1xx0111x01, 1xx0110101, 1xx0110101, 1x1011xx01, 1x0011xx01}, 1xx0xxx00x \ {
   1xx01xx000, 1xx00xx001, 1xx0x01001, 1xx0xx1000, 1xx0x0100x, 1x101xx00x, 10000xx00x, 1x001xx00x}}

{0xxx1 \ {01111, 00x11, 010x1}}
{}
{}

{x0100 \ {10100, 00100}}
{x11x1 \ {111x1, x1101}, x1x00 \ {x1000, 11000, 01x00}}
{
   x1x00x0100 \ {
   x1x0010100, x1x0000100, x1000x0100, 11000x0100, 01x00x0100}}

{x1100 \ {11100, 01100, 01100}, x0x0x \ {10x00, x0100, 10x01}, 1xxx0 \ {110x0, 111x0, 1x110}}
{01xx1 \ {01011, 01101}, 0xx01 \ {01x01, 00x01, 00x01}}
{
   01x01x0x01 \ {
   01x0110x01, 01101x0x01}, 0xx01x0x01 \ {
   0xx0110x01, 01x01x0x01, 00x01x0x01, 00x01x0x01}}

{x001x \ {x0010, 00010, 1001x}, x0001 \ {10001, 00001}}
{011xx \ {011x0, 01111}, 11xxx \ {11x01, 110xx, 11xx1}}
{
   0111xx001x \ {
   01111x0010, 01110x0011, 0111xx0010, 0111x00010, 0111x1001x, 01110x001x, 01111x001x}, 11x1xx001x \ {
   11x11x0010, 11x10x0011, 11x1xx0010, 11x1x00010, 11x1x1001x, 1101xx001x, 11x11x001x}, 01101x0001 \ {
   0110110001, 0110100001}, 11x01x0001 \ {
   11x0110001, 11x0100001, 11x01x0001, 11001x0001, 11x01x0001}}

{11x01 \ {11101, 11001, 11001}}
{x1xxx \ {01xx0, 11x10, 01010}}
{
   x1x0111x01 \ {
   x1x0111101, x1x0111001, x1x0111001}}

{x1x10 \ {11110, x1110, 01x10}}
{0x11x \ {0x111, 00111, 0111x}}
{
   0x110x1x10 \ {
   0x11011110, 0x110x1110, 0x11001x10, 01110x1x10}}

{10x1x \ {10011, 10111, 1001x}}
{x10x0 \ {01010, 01000, 110x0}, xx1x1 \ {01101, x0101, 11111}}
{
   x101010x10 \ {
   x101010010, 0101010x10, 1101010x10}, xx11110x11 \ {
   xx11110011, xx11110111, xx11110011, 1111110x11}}

{0110x \ {01100, 01101, 01101}, 11x01 \ {11001, 11101}}
{xx01x \ {x101x, 10010, 01010}, 1x01x \ {11010, 1x010, 10011}, x1xxx \ {110x0, 11011, x11xx}}
{
   x1x0x0110x \ {
   x1x0101100, x1x0001101, x1x0x01100, x1x0x01101, x1x0x01101, 110000110x, x110x0110x}, x1x0111x01 \ {
   x1x0111001, x1x0111101, x110111x01}}

{x00xx \ {10001, x001x, 00011}, x1000 \ {11000, 01000, 01000}, 0x1x0 \ {01110, 0x110, 0x110}}
{0xx1x \ {0x110, 0x010, 0001x}, 0101x \ {01010, 01011}}
{
   0xx1xx001x \ {
   0xx11x0010, 0xx10x0011, 0xx1xx001x, 0xx1x00011, 0x110x001x, 0x010x001x, 0001xx001x}, 0101xx001x \ {
   01011x0010, 01010x0011, 0101xx001x, 0101x00011, 01010x001x, 01011x001x}, 0xx100x110 \ {
   0xx1001110, 0xx100x110, 0xx100x110, 0x1100x110, 0x0100x110, 000100x110}, 010100x110 \ {
   0101001110, 010100x110, 010100x110, 010100x110}}

{}
{}
{}

{x1x11 \ {01x11, 11011, 11111}}
{}
{}

{}
{10xxx \ {10x00, 101x0, 1010x}, xx100 \ {00100, 10100, 01100}}
{}

{00xx1 \ {00x11, 00111, 00111}, 11x00 \ {11100}}
{11xxx \ {110x0, 11110, 11x11}, x0x1x \ {x0111, 00011}}
{
   11xx100xx1 \ {
   11x1100x01, 11x0100x11, 11xx100x11, 11xx100111, 11xx100111, 11x1100xx1}, x0x1100x11 \ {
   x0x1100x11, x0x1100111, x0x1100111, x011100x11, 0001100x11}, 11x0011x00 \ {
   11x0011100, 1100011x00}}

{1xx0x \ {11001, 11000, 10x00}, x00x0 \ {00000, x0010, 10000}}
{1x1x1 \ {11111, 1x101, 10111}}
{
   1x1011xx01 \ {
   1x10111001, 1x1011xx01}}

{xxx0x \ {x0x01, 01101, 1000x}, xxx11 \ {x1111, x0x11, xx111}, 11xx0 \ {11x00, 111x0, 11x10}}
{xxx0x \ {1x101, 10001, 0x001}, 0x01x \ {01010, 01011}, 1110x \ {11101, 11100}}
{
   xxx0xxxx0x \ {
   xxx01xxx00, xxx00xxx01, xxx0xx0x01, xxx0x01101, xxx0x1000x, 1x101xxx0x, 10001xxx0x, 0x001xxx0x}, 1110xxxx0x \ {
   11101xxx00, 11100xxx01, 1110xx0x01, 1110x01101, 1110x1000x, 11101xxx0x, 11100xxx0x}, 0x011xxx11 \ {
   0x011x1111, 0x011x0x11, 0x011xx111, 01011xxx11}, xxx0011x00 \ {
   xxx0011x00, xxx0011100}, 0x01011x10 \ {
   0x01011110, 0x01011x10, 0101011x10}, 1110011x00 \ {
   1110011x00, 1110011100, 1110011x00}}

{xx001 \ {x1001, 00001, 01001}, 11xx1 \ {11x01, 11x11}}
{0000x \ {00001, 00000}}
{
   00001xx001 \ {
   00001x1001, 0000100001, 0000101001, 00001xx001}, 0000111x01 \ {
   0000111x01, 0000111x01}}

{x000x \ {x0000, 00001, 00000}, xx110 \ {01110, 0x110, x1110}}
{x10x0 \ {11010, 01010, 11000}}
{
   x1000x0000 \ {
   x1000x0000, x100000000, 11000x0000}, x1010xx110 \ {
   x101001110, x10100x110, x1010x1110, 11010xx110, 01010xx110}}

{xx110 \ {1x110, 00110}}
{xx0xx \ {11000, xx01x, 00010}}
{
   xx010xx110 \ {
   xx0101x110, xx01000110, xx010xx110, 00010xx110}}

{x0x10 \ {x0110, 00110, 00x10}, x0xxx \ {00x1x, 00101, 100x1}}
{x0xxx \ {00110, 10101, x00xx}, x1110 \ {01110}}
{
   x0x10x0x10 \ {
   x0x10x0110, x0x1000110, x0x1000x10, 00110x0x10, x0010x0x10}, x0xxxx0xxx \ {
   x0xx1x0xx0, x0xx0x0xx1, x0x1xx0x0x, x0x0xx0x1x, x0xxx00x1x, x0xxx00101, x0xxx100x1, 00110x0xxx, 10101x0xxx, x00xxx0xxx}, x1110x0x10 \ {
   x111000x10, 01110x0x10}}

{x1110 \ {11110, 01110}}
{x11x0 \ {011x0, 11110, 11100}}
{
   x1110x1110 \ {
   x111011110, x111001110, 01110x1110, 11110x1110}}

{100x1 \ {10001}, 0xxxx \ {01x01, 00x10, 0xxx1}}
{0x0x0 \ {00010, 0x010, 0x000}, 1xx0x \ {10001, 10101, 10000}}
{
   1xx0110001 \ {
   1xx0110001, 1000110001, 1010110001}, 0x0x00xxx0 \ {
   0x0100xx00, 0x0000xx10, 0x0x000x10, 000100xxx0, 0x0100xxx0, 0x0000xxx0}, 1xx0x0xx0x \ {
   1xx010xx00, 1xx000xx01, 1xx0x01x01, 1xx0x0xx01, 100010xx0x, 101010xx0x, 100000xx0x}}

{00x00 \ {00000, 00100}, 00x00 \ {00000, 00100}, 1xxx0 \ {10x10, 10000, 11x10}}
{01x1x \ {01010, 01x11, 01x11}}
{
   01x101xx10 \ {
   01x1010x10, 01x1011x10, 010101xx10}}

{00x0x \ {0000x, 00000, 00101}, x1101 \ {11101, 01101}}
{0x110 \ {01110, 00110, 00110}, 1x100 \ {11100, 10100}}
{
   1x10000x00 \ {
   1x10000000, 1x10000000, 1110000x00, 1010000x00}}

{1x0xx \ {1x001, 1100x, 11011}, x0x10 \ {10x10, 00110, x0110}}
{1101x \ {11010, 11011, 11011}, 00xxx \ {0000x, 00101, 00100}, x11x0 \ {01100, x1100, 111x0}}
{
   1101x1x01x \ {
   110111x010, 110101x011, 1101x11011, 110101x01x, 110111x01x, 110111x01x}, 00xxx1x0xx \ {
   00xx11x0x0, 00xx01x0x1, 00x1x1x00x, 00x0x1x01x, 00xxx1x001, 00xxx1100x, 00xxx11011, 0000x1x0xx, 001011x0xx, 001001x0xx}, x11x01x0x0 \ {
   x11101x000, x11001x010, x11x011000, 011001x0x0, x11001x0x0, 111x01x0x0}, 11010x0x10 \ {
   1101010x10, 1101000110, 11010x0110, 11010x0x10}, 00x10x0x10 \ {
   00x1010x10, 00x1000110, 00x10x0110}, x1110x0x10 \ {
   x111010x10, x111000110, x1110x0110, 11110x0x10}}

{xx111 \ {x1111, x0111, 01111}, 1xxxx \ {10111, 100x0, 11x00}}
{xx001 \ {00001, x1001, 01001}, 0x10x \ {00100, 0x100, 00101}}
{
   xx0011xx01 \ {
   000011xx01, x10011xx01, 010011xx01}, 0x10x1xx0x \ {
   0x1011xx00, 0x1001xx01, 0x10x10000, 0x10x11x00, 001001xx0x, 0x1001xx0x, 001011xx0x}}

{0xx11 \ {01011, 01111, 01x11}}
{x111x \ {x1111, 11111, 11110}}
{
   x11110xx11 \ {
   x111101011, x111101111, x111101x11, x11110xx11, 111110xx11}}

{x11x0 \ {011x0, 01110, x1110}, 01xx1 \ {01x01, 01011}}
{0xxxx \ {00001, 011x1, 0x011}, 1x0x0 \ {10010, 1x000, 110x0}}
{
   0xxx0x11x0 \ {
   0xx10x1100, 0xx00x1110, 0xxx0011x0, 0xxx001110, 0xxx0x1110}, 1x0x0x11x0 \ {
   1x010x1100, 1x000x1110, 1x0x0011x0, 1x0x001110, 1x0x0x1110, 10010x11x0, 1x000x11x0, 110x0x11x0}, 0xxx101xx1 \ {
   0xx1101x01, 0xx0101x11, 0xxx101x01, 0xxx101011, 0000101xx1, 011x101xx1, 0x01101xx1}}

{1x0xx \ {1x010, 11001, 10010}, 0x1x0 \ {0x110, 01110}}
{}
{}

{10x1x \ {10x11, 10010, 10010}}
{110x0 \ {11010, 11000}}
{
   1101010x10 \ {
   1101010010, 1101010010, 1101010x10}}

{01x1x \ {01x11, 01x10, 0101x}, 10xx1 \ {10001, 101x1}}
{xxx00 \ {10x00, 00000, 01000}, 110xx \ {1100x, 11001}}
{
   1101x01x1x \ {
   1101101x10, 1101001x11, 1101x01x11, 1101x01x10, 1101x0101x}, 110x110xx1 \ {
   1101110x01, 1100110x11, 110x110001, 110x1101x1, 1100110xx1, 1100110xx1}}

{}
{xx01x \ {11011, 1x010, 1x010}, 01x0x \ {01x00, 01000, 01x01}}
{}

{01x0x \ {01000, 01x01, 0100x}}
{01x10 \ {01010, 01110, 01110}, 1x1x1 \ {111x1, 1x101}}
{
   1x10101x01 \ {
   1x10101x01, 1x10101001, 1110101x01, 1x10101x01}}

{000xx \ {0000x, 00001, 000x0}}
{xx111 \ {0x111, 01111, 10111}, x1x1x \ {01011, 01x11, 11011}}
{
   xx11100011 \ {
   0x11100011, 0111100011, 1011100011}, x1x1x0001x \ {
   x1x1100010, x1x1000011, x1x1x00010, 010110001x, 01x110001x, 110110001x}}

{xx11x \ {00111, x1111, x0111}, x10xx \ {x10x0, 01001, 0101x}}
{x111x \ {11110, x1111, 01111}}
{
   x111xxx11x \ {
   x1111xx110, x1110xx111, x111x00111, x111xx1111, x111xx0111, 11110xx11x, x1111xx11x, 01111xx11x}, x111xx101x \ {
   x1111x1010, x1110x1011, x111xx1010, x111x0101x, 11110x101x, x1111x101x, 01111x101x}}

{}
{x1110 \ {01110, 11110, 11110}, x000x \ {10001, 1000x, 0000x}}
{}

{x0xx0 \ {100x0, x0x10, x0110}, 0x0xx \ {0101x, 00010, 0x011}}
{x00x1 \ {000x1, x0001, x0001}, 0x1xx \ {0x1x1, 0x11x, 0x1x0}, 10xxx \ {101x1, 10000, 10x01}}
{
   0x1x0x0xx0 \ {
   0x110x0x00, 0x100x0x10, 0x1x0100x0, 0x1x0x0x10, 0x1x0x0110, 0x110x0xx0, 0x1x0x0xx0}, 10xx0x0xx0 \ {
   10x10x0x00, 10x00x0x10, 10xx0100x0, 10xx0x0x10, 10xx0x0110, 10000x0xx0}, x00x10x0x1 \ {
   x00110x001, x00010x011, x00x101011, x00x10x011, 000x10x0x1, x00010x0x1, x00010x0x1}, 0x1xx0x0xx \ {
   0x1x10x0x0, 0x1x00x0x1, 0x11x0x00x, 0x10x0x01x, 0x1xx0101x, 0x1xx00010, 0x1xx0x011, 0x1x10x0xx, 0x11x0x0xx, 0x1x00x0xx}, 10xxx0x0xx \ {
   10xx10x0x0, 10xx00x0x1, 10x1x0x00x, 10x0x0x01x, 10xxx0101x, 10xxx00010, 10xxx0x011, 101x10x0xx, 100000x0xx, 10x010x0xx}}

{x000x \ {10001, 00000, 1000x}}
{}
{}

{0xxx0 \ {00x00, 00xx0, 0x0x0}}
{x1x0x \ {11x0x, 11101, x100x}, xxxxx \ {1xxx0, 0x101, 11000}, xxx10 \ {01010, 1xx10, 11x10}}
{
   x1x000xx00 \ {
   x1x0000x00, x1x0000x00, x1x000x000, 11x000xx00, x10000xx00}, xxxx00xxx0 \ {
   xxx100xx00, xxx000xx10, xxxx000x00, xxxx000xx0, xxxx00x0x0, 1xxx00xxx0, 110000xxx0}, xxx100xx10 \ {
   xxx1000x10, xxx100x010, 010100xx10, 1xx100xx10, 11x100xx10}}

{x0xx0 \ {00110, 101x0, x0010}, 1xx10 \ {11010, 10x10, 10010}}
{0x10x \ {01100, 0110x, 00100}, 0x11x \ {00111, 00110, 0x111}}
{
   0x100x0x00 \ {
   0x10010100, 01100x0x00, 01100x0x00, 00100x0x00}, 0x110x0x10 \ {
   0x11000110, 0x11010110, 0x110x0010, 00110x0x10}, 0x1101xx10 \ {
   0x11011010, 0x11010x10, 0x11010010, 001101xx10}}

{x1x10 \ {11x10, 11110, x1010}, x10xx \ {010xx, x100x, 01001}}
{}
{}

{0x1xx \ {001xx, 01100}, x110x \ {x1100, 1110x, 0110x}}
{10x00 \ {10100}}
{
   10x000x100 \ {
   10x0000100, 10x0001100, 101000x100}, 10x00x1100 \ {
   10x00x1100, 10x0011100, 10x0001100, 10100x1100}}

{x00xx \ {100x0, 00001, 10000}}
{xx00x \ {11001, 00000, xx000}}
{
   xx00xx000x \ {
   xx001x0000, xx000x0001, xx00x10000, xx00x00001, xx00x10000, 11001x000x, 00000x000x, xx000x000x}}

{x00xx \ {x00x0, x001x}, 0010x \ {00101, 00100}, 011xx \ {011x0, 01100, 01100}}
{01xxx \ {0111x, 0110x, 011x0}, x001x \ {10011, 00010}, xxx0x \ {00100, 01x01, 11x0x}}
{
   01xxxx00xx \ {
   01xx1x00x0, 01xx0x00x1, 01x1xx000x, 01x0xx001x, 01xxxx00x0, 01xxxx001x, 0111xx00xx, 0110xx00xx, 011x0x00xx}, x001xx001x \ {
   x0011x0010, x0010x0011, x001xx0010, x001xx001x, 10011x001x, 00010x001x}, xxx0xx000x \ {
   xxx01x0000, xxx00x0001, xxx0xx0000, 00100x000x, 01x01x000x, 11x0xx000x}, 01x0x0010x \ {
   01x0100100, 01x0000101, 01x0x00101, 01x0x00100, 0110x0010x, 011000010x}, xxx0x0010x \ {
   xxx0100100, xxx0000101, xxx0x00101, xxx0x00100, 001000010x, 01x010010x, 11x0x0010x}, 01xxx011xx \ {
   01xx1011x0, 01xx0011x1, 01x1x0110x, 01x0x0111x, 01xxx011x0, 01xxx01100, 01xxx01100, 0111x011xx, 0110x011xx, 011x0011xx}, x001x0111x \ {
   x001101110, x001001111, x001x01110, 100110111x, 000100111x}, xxx0x0110x \ {
   xxx0101100, xxx0001101, xxx0x01100, xxx0x01100, xxx0x01100, 001000110x, 01x010110x, 11x0x0110x}}

{10xx1 \ {10111, 10001, 101x1}, 0111x \ {01110, 01111, 01111}, 010xx \ {010x1, 01000, 01011}}
{1xx1x \ {11x10, 1x110}}
{
   1xx1110x11 \ {
   1xx1110111, 1xx1110111}, 1xx1x0111x \ {
   1xx1101110, 1xx1001111, 1xx1x01110, 1xx1x01111, 1xx1x01111, 11x100111x, 1x1100111x}, 1xx1x0101x \ {
   1xx1101010, 1xx1001011, 1xx1x01011, 1xx1x01011, 11x100101x, 1x1100101x}}

{x1xxx \ {x111x, 11000, 0111x}}
{0xx1x \ {0x111, 00111, 00010}}
{
   0xx1xx1x1x \ {
   0xx11x1x10, 0xx10x1x11, 0xx1xx111x, 0xx1x0111x, 0x111x1x1x, 00111x1x1x, 00010x1x1x}}

{00xxx \ {001x0, 0010x, 00x11}}
{}
{}

{1x11x \ {1x111, 1x110, 1111x}}
{0x0xx \ {0x00x, 0x0x1, 0100x}, x1000 \ {01000, 11000}}
{
   0x01x1x11x \ {
   0x0111x110, 0x0101x111, 0x01x1x111, 0x01x1x110, 0x01x1111x, 0x0111x11x}}

{111xx \ {11101, 11110, 11111}, xxx10 \ {01x10, 11010, 01110}}
{x1x10 \ {01x10, x1110, 01110}}
{
   x1x1011110 \ {
   x1x1011110, 01x1011110, x111011110, 0111011110}, x1x10xxx10 \ {
   x1x1001x10, x1x1011010, x1x1001110, 01x10xxx10, x1110xxx10, 01110xxx10}}

{x0xx1 \ {x01x1, 10011}, x00x1 \ {10001, x0001}}
{100xx \ {1000x, 10010, 10011}}
{
   100x1x0xx1 \ {
   10011x0x01, 10001x0x11, 100x1x01x1, 100x110011, 10001x0xx1, 10011x0xx1}, 100x1x00x1 \ {
   10011x0001, 10001x0011, 100x110001, 100x1x0001, 10001x00x1, 10011x00x1}}

{}
{}
{}

{11xxx \ {11101, 11x11, 11x10}}
{xxx1x \ {0011x, 11x10, x0x1x}}
{
   xxx1x11x1x \ {
   xxx1111x10, xxx1011x11, xxx1x11x11, xxx1x11x10, 0011x11x1x, 11x1011x1x, x0x1x11x1x}}

{xxx1x \ {xxx11, 01x1x, 11x10}}
{xxxx0 \ {10x10, 01x10, x11x0}, xx011 \ {x0011, 01011, x1011}}
{
   xxx10xxx10 \ {
   xxx1001x10, xxx1011x10, 10x10xxx10, 01x10xxx10, x1110xxx10}, xx011xxx11 \ {
   xx011xxx11, xx01101x11, x0011xxx11, 01011xxx11, x1011xxx11}}

{x101x \ {01011, 1101x, 0101x}, 0x11x \ {0x111, 0011x, 01111}}
{011x1 \ {01101, 01111}}
{
   01111x1011 \ {
   0111101011, 0111111011, 0111101011, 01111x1011}, 011110x111 \ {
   011110x111, 0111100111, 0111101111, 011110x111}}

{}
{1xxxx \ {110x0, 11011, 1001x}, x0001 \ {00001, 10001, 10001}}
{}

{11xxx \ {1111x, 11x1x, 110xx}, 1x11x \ {10111, 1111x}, 1xx10 \ {11x10, 1x010}}
{}
{}

{010xx \ {01000, 010x1}}
{0x01x \ {0x010, 0101x}}
{
   0x01x0101x \ {
   0x01101010, 0x01001011, 0x01x01011, 0x0100101x, 0101x0101x}}

{x1x0x \ {x100x, 01x0x, 01101}}
{0xxx0 \ {0x010, 001x0, 00000}, 101x0 \ {10110}}
{
   0xx00x1x00 \ {
   0xx00x1000, 0xx0001x00, 00100x1x00, 00000x1x00}, 10100x1x00 \ {
   10100x1000, 1010001x00}}

{0x1x0 \ {001x0, 0x110, 01100}}
{0x0x1 \ {01011, 000x1, 010x1}}
{}

{xx010 \ {0x010, 11010, 01010}, x1101 \ {11101, 01101}}
{x1x1x \ {x1010, 0111x, 01x1x}}
{
   x1x10xx010 \ {
   x1x100x010, x1x1011010, x1x1001010, x1010xx010, 01110xx010, 01x10xx010}}

{x10xx \ {11001, 0101x, 010xx}, x100x \ {0100x, 11000, 11000}}
{1x01x \ {1x011, 11011, 10011}, 111x1 \ {11111}}
{
   1x01xx101x \ {
   1x011x1010, 1x010x1011, 1x01x0101x, 1x01x0101x, 1x011x101x, 11011x101x, 10011x101x}, 111x1x10x1 \ {
   11111x1001, 11101x1011, 111x111001, 111x101011, 111x1010x1, 11111x10x1}, 11101x1001 \ {
   1110101001}}

{xx100 \ {x1100, x0100, x0100}}
{x11x1 \ {111x1, 011x1}, 1111x \ {11110, 11111}, 01x1x \ {0101x, 01111}}
{}

{00xx0 \ {00x10, 00x00, 00110}, xxx11 \ {x0011, x1011, xx011}}
{0xx00 \ {00x00, 0x000, 0x100}, 1x10x \ {10101, 11101, 11101}}
{
   0xx0000x00 \ {
   0xx0000x00, 00x0000x00, 0x00000x00, 0x10000x00}, 1x10000x00 \ {
   1x10000x00}}

{1xx10 \ {10x10, 10110, 10110}, 1xx00 \ {11100, 1x000, 1x100}}
{xx01x \ {00010, 11011, x001x}}
{
   xx0101xx10 \ {
   xx01010x10, xx01010110, xx01010110, 000101xx10, x00101xx10}}

{}
{1x00x \ {1x001, 11000, 11001}}
{}

{x0x0x \ {10101, 1000x, x0001}}
{1xxx1 \ {11111, 11001, 101x1}}
{
   1xx01x0x01 \ {
   1xx0110101, 1xx0110001, 1xx01x0001, 11001x0x01, 10101x0x01}}

{11x0x \ {11x00, 1100x, 11100}}
{xx110 \ {11110, 01110, 01110}}
{}

{x010x \ {10101, 0010x, x0101}, x1x0x \ {x1001, 01100, x1x01}}
{1010x \ {10100}, 000x1 \ {00011, 00001}}
{
   1010xx010x \ {
   10101x0100, 10100x0101, 1010x10101, 1010x0010x, 1010xx0101, 10100x010x}, 00001x0101 \ {
   0000110101, 0000100101, 00001x0101, 00001x0101}, 1010xx1x0x \ {
   10101x1x00, 10100x1x01, 1010xx1001, 1010x01100, 1010xx1x01, 10100x1x0x}, 00001x1x01 \ {
   00001x1001, 00001x1x01, 00001x1x01}}

{xx011 \ {0x011, 00011, 1x011}}
{0011x \ {00111}, 00xxx \ {00110, 00x0x, 00011}, x0x0x \ {00101, 10000, 10101}}
{
   00111xx011 \ {
   001110x011, 0011100011, 001111x011, 00111xx011}, 00x11xx011 \ {
   00x110x011, 00x1100011, 00x111x011, 00011xx011}}

{1x11x \ {1x111, 11110}, xx01x \ {1x010, 0001x, 11010}, x0x10 \ {00x10, 10110}}
{xx1x1 \ {x0111, 0x1x1, 10111}, xx0x1 \ {11011, 1x001, 01011}}
{
   xx1111x111 \ {
   xx1111x111, x01111x111, 0x1111x111, 101111x111}, xx0111x111 \ {
   xx0111x111, 110111x111, 010111x111}, xx111xx011 \ {
   xx11100011, x0111xx011, 0x111xx011, 10111xx011}, xx011xx011 \ {
   xx01100011, 11011xx011, 01011xx011}}

{xx0x0 \ {100x0, 11010, 0x010}}
{1x00x \ {1x000, 1000x, 11000}, 110x1 \ {11001}, 01xx1 \ {01001, 011x1, 01101}}
{
   1x000xx000 \ {
   1x00010000, 1x000xx000, 10000xx000, 11000xx000}}

{1x1x1 \ {101x1, 11101, 11101}}
{x0x11 \ {10011, 00x11, 10111}, 10xxx \ {10xx0, 10110, 10010}}
{
   x0x111x111 \ {
   x0x1110111, 100111x111, 00x111x111, 101111x111}, 10xx11x1x1 \ {
   10x111x101, 10x011x111, 10xx1101x1, 10xx111101, 10xx111101}}

{0xx00 \ {0x000, 00100, 01x00}, 0x00x \ {0x001, 01000, 01000}}
{10xxx \ {10001, 10x01, 10x00}}
{
   10x000xx00 \ {
   10x000x000, 10x0000100, 10x0001x00, 10x000xx00}, 10x0x0x00x \ {
   10x010x000, 10x000x001, 10x0x0x001, 10x0x01000, 10x0x01000, 100010x00x, 10x010x00x, 10x000x00x}}

{011xx \ {0111x, 011x1, 011x0}, 11xx0 \ {11010, 110x0, 11x10}}
{111xx \ {11100, 111x1}, 01xx0 \ {01x10, 011x0}, 0x1x0 \ {0x100, 00100, 01110}}
{
   111xx011xx \ {
   111x1011x0, 111x0011x1, 1111x0110x, 1110x0111x, 111xx0111x, 111xx011x1, 111xx011x0, 11100011xx, 111x1011xx}, 01xx0011x0 \ {
   01x1001100, 01x0001110, 01xx001110, 01xx0011x0, 01x10011x0, 011x0011x0}, 0x1x0011x0 \ {
   0x11001100, 0x10001110, 0x1x001110, 0x1x0011x0, 0x100011x0, 00100011x0, 01110011x0}, 111x011xx0 \ {
   1111011x00, 1110011x10, 111x011010, 111x0110x0, 111x011x10, 1110011xx0}, 01xx011xx0 \ {
   01x1011x00, 01x0011x10, 01xx011010, 01xx0110x0, 01xx011x10, 01x1011xx0, 011x011xx0}, 0x1x011xx0 \ {
   0x11011x00, 0x10011x10, 0x1x011010, 0x1x0110x0, 0x1x011x10, 0x10011xx0, 0010011xx0, 0111011xx0}}

{xx100 \ {x1100, 1x100, 11100}}
{x0x0x \ {00001, 00x01, 00x0x}}
{
   x0x00xx100 \ {
   x0x00x1100, x0x001x100, x0x0011100, 00x00xx100}}

{}
{x11xx \ {x111x, x110x, 1111x}}
{}

{xx0xx \ {xx01x, 10010, xx00x}, xx0xx \ {1x0x1, 01001, x00x0}}
{01xxx \ {01111, 010x1, 011x0}}
{
   01xxxxx0xx \ {
   01xx1xx0x0, 01xx0xx0x1, 01x1xxx00x, 01x0xxx01x, 01xxxxx01x, 01xxx10010, 01xxxxx00x, 01111xx0xx, 010x1xx0xx, 011x0xx0xx}, 01xxxxx0xx \ {
   01xx1xx0x0, 01xx0xx0x1, 01x1xxx00x, 01x0xxx01x, 01xxx1x0x1, 01xxx01001, 01xxxx00x0, 01111xx0xx, 010x1xx0xx, 011x0xx0xx}}

{1xxxx \ {1x00x, 1001x, 1000x}, 01xx1 \ {01001, 01011, 01x11}, 0xx0x \ {00x01, 0x00x, 01100}}
{0xx00 \ {01x00, 01100, 00000}, x0xx0 \ {10100, 00x10, x0010}, x1100 \ {01100, 11100, 11100}}
{
   0xx001xx00 \ {
   0xx001x000, 0xx0010000, 01x001xx00, 011001xx00, 000001xx00}, x0xx01xxx0 \ {
   x0x101xx00, x0x001xx10, x0xx01x000, x0xx010010, x0xx010000, 101001xxx0, 00x101xxx0, x00101xxx0}, x11001xx00 \ {
   x11001x000, x110010000, 011001xx00, 111001xx00, 111001xx00}, 0xx000xx00 \ {
   0xx000x000, 0xx0001100, 01x000xx00, 011000xx00, 000000xx00}, x0x000xx00 \ {
   x0x000x000, x0x0001100, 101000xx00}, x11000xx00 \ {
   x11000x000, x110001100, 011000xx00, 111000xx00, 111000xx00}}

{xx01x \ {1101x, 0x01x, x0010}, 1001x \ {10010, 10011}}
{10xxx \ {10010, 100x0, 10011}}
{
   10x1xxx01x \ {
   10x11xx010, 10x10xx011, 10x1x1101x, 10x1x0x01x, 10x1xx0010, 10010xx01x, 10010xx01x, 10011xx01x}, 10x1x1001x \ {
   10x1110010, 10x1010011, 10x1x10010, 10x1x10011, 100101001x, 100101001x, 100111001x}}

{10x01 \ {10101}}
{1xx1x \ {11011, 10111, 11x10}}
{}

{x0100 \ {10100}}
{x10xx \ {x10x0, 010x0, x1011}}
{
   x1000x0100 \ {
   x100010100, x1000x0100, 01000x0100}}

{x0xx0 \ {10x10, x0x10, 10xx0}}
{0x1x1 \ {01101, 0x111}, x01x0 \ {10100, 00110, 00110}}
{
   x01x0x0xx0 \ {
   x0110x0x00, x0100x0x10, x01x010x10, x01x0x0x10, x01x010xx0, 10100x0xx0, 00110x0xx0, 00110x0xx0}}

{1x1x0 \ {10100, 11110, 11100}, 111xx \ {11100, 11101, 1110x}}
{x01xx \ {00110, 001xx, 10100}}
{
   x01x01x1x0 \ {
   x01101x100, x01001x110, x01x010100, x01x011110, x01x011100, 001101x1x0, 001x01x1x0, 101001x1x0}, x01xx111xx \ {
   x01x1111x0, x01x0111x1, x011x1110x, x010x1111x, x01xx11100, x01xx11101, x01xx1110x, 00110111xx, 001xx111xx, 10100111xx}}

{0xx11 \ {0x011, 01111, 00x11}, x11xx \ {x1100, 111x1, 01101}}
{1100x \ {11000}, xx0x1 \ {xx001, 1x001, x0011}}
{
   xx0110xx11 \ {
   xx0110x011, xx01101111, xx01100x11, x00110xx11}, 1100xx110x \ {
   11001x1100, 11000x1101, 1100xx1100, 1100x11101, 1100x01101, 11000x110x}, xx0x1x11x1 \ {
   xx011x1101, xx001x1111, xx0x1111x1, xx0x101101, xx001x11x1, 1x001x11x1, x0011x11x1}}

{001xx \ {001x0, 00100, 00111}, 1xxxx \ {111x1, 10xx1, 11111}, 0x010 \ {01010, 00010, 00010}}
{1xx00 \ {1x000, 11100, 10x00}}
{
   1xx0000100 \ {
   1xx0000100, 1xx0000100, 1x00000100, 1110000100, 10x0000100}, 1xx001xx00 \ {
   1x0001xx00, 111001xx00, 10x001xx00}}

{}
{}
{}

{xx0x0 \ {x1010, 0x010, 00010}}
{1x0xx \ {10010, 11011, 1x011}}
{
   1x0x0xx0x0 \ {
   1x010xx000, 1x000xx010, 1x0x0x1010, 1x0x00x010, 1x0x000010, 10010xx0x0}}

{11xxx \ {1100x, 11001, 11001}, 1x011 \ {11011, 10011}, 00x0x \ {0010x, 00000, 00101}}
{1x0xx \ {10000, 11010}}
{
   1x0xx11xxx \ {
   1x0x111xx0, 1x0x011xx1, 1x01x11x0x, 1x00x11x1x, 1x0xx1100x, 1x0xx11001, 1x0xx11001, 1000011xxx, 1101011xxx}, 1x0111x011 \ {
   1x01111011, 1x01110011}, 1x00x00x0x \ {
   1x00100x00, 1x00000x01, 1x00x0010x, 1x00x00000, 1x00x00101, 1000000x0x}}

{x1111 \ {11111, 01111, 01111}, 11xx1 \ {11101, 11001}}
{x1xxx \ {11100, x100x, 11xx1}}
{
   x1x11x1111 \ {
   x1x1111111, x1x1101111, x1x1101111, 11x11x1111}, x1xx111xx1 \ {
   x1x1111x01, x1x0111x11, x1xx111101, x1xx111001, x100111xx1, 11xx111xx1}}

{x0xx1 \ {x0011, 00x01, 00x01}}
{}
{}

{000x1 \ {00011}, 01x0x \ {0100x, 01001, 0110x}}
{01x11 \ {01011, 01111, 01111}, xx111 \ {11111, x0111, 01111}}
{
   01x1100011 \ {
   01x1100011, 0101100011, 0111100011, 0111100011}, xx11100011 \ {
   xx11100011, 1111100011, x011100011, 0111100011}}

{11xx0 \ {11x10, 11x00, 110x0}}
{x1x1x \ {x1110, 0111x, x111x}, 10x0x \ {1000x, 10000, 10000}}
{
   x1x1011x10 \ {
   x1x1011x10, x1x1011010, x111011x10, 0111011x10, x111011x10}, 10x0011x00 \ {
   10x0011x00, 10x0011000, 1000011x00, 1000011x00, 1000011x00}}

{xx0x1 \ {01001, x0011, xx001}}
{0011x \ {00111, 00110, 00110}, 1xxx0 \ {10xx0, 10100, 10x00}}
{
   00111xx011 \ {
   00111x0011, 00111xx011}}

{xx0x0 \ {100x0, 1x000, x00x0}, x1000 \ {01000, 11000, 11000}}
{}
{}

{xx001 \ {0x001, x1001, 11001}}
{1x11x \ {1x111, 10110}}
{}

{010xx \ {01011, 01001, 01010}, 1xx01 \ {10001, 11x01, 11x01}}
{x10xx \ {x1011, x101x}}
{
   x10xx010xx \ {
   x10x1010x0, x10x0010x1, x101x0100x, x100x0101x, x10xx01011, x10xx01001, x10xx01010, x1011010xx, x101x010xx}, x10011xx01 \ {
   x100110001, x100111x01, x100111x01}}

{}
{1x0x0 \ {11010, 11000, 110x0}}
{}

{}
{0xx0x \ {01x0x, 00x0x, 01000}, x1000 \ {11000, 01000}}
{}

{}
{10x00 \ {10100, 10000}}
{}

{}
{x11xx \ {1111x, 111xx, 111xx}}
{}

{xxxxx \ {0xx0x, x0101, 0xxx0}, 01xxx \ {01111, 011x0, 01x01}}
{x110x \ {01100, 1110x}, 10x1x \ {10111, 10x10}}
{
   x110xxxx0x \ {
   x1101xxx00, x1100xxx01, x110x0xx0x, x110xx0101, x110x0xx00, 01100xxx0x, 1110xxxx0x}, 10x1xxxx1x \ {
   10x11xxx10, 10x10xxx11, 10x1x0xx10, 10111xxx1x, 10x10xxx1x}, x110x01x0x \ {
   x110101x00, x110001x01, x110x01100, x110x01x01, 0110001x0x, 1110x01x0x}, 10x1x01x1x \ {
   10x1101x10, 10x1001x11, 10x1x01111, 10x1x01110, 1011101x1x, 10x1001x1x}}

{}
{1x1x0 \ {111x0, 10100, 1x100}, 000x1 \ {00001, 00011, 00011}}
{}

{xx11x \ {xx111, 1x111, 11110}}
{x1x10 \ {01110, x1110}, 0001x \ {00010, 00011}}
{
   x1x10xx110 \ {
   x1x1011110, 01110xx110, x1110xx110}, 0001xxx11x \ {
   00011xx110, 00010xx111, 0001xxx111, 0001x1x111, 0001x11110, 00010xx11x, 00011xx11x}}

{}
{xx1x0 \ {101x0, 0x1x0, 111x0}}
{}

{0x010 \ {01010, 00010}, x110x \ {0110x, 01101}}
{0x1xx \ {00101, 0x111, 0x100}, x0x1x \ {x0x10, x0010, 10111}}
{
   0x1100x010 \ {
   0x11001010, 0x11000010}, x0x100x010 \ {
   x0x1001010, x0x1000010, x0x100x010, x00100x010}, 0x10xx110x \ {
   0x101x1100, 0x100x1101, 0x10x0110x, 0x10x01101, 00101x110x, 0x100x110x}}

{0101x \ {01010, 01011, 01011}}
{xx01x \ {01011, 0001x, 1001x}, xxxx1 \ {x10x1, 1x0x1, xx001}, 00xxx \ {000x0, 00011, 000x1}}
{
   xx01x0101x \ {
   xx01101010, xx01001011, xx01x01010, xx01x01011, xx01x01011, 010110101x, 0001x0101x, 1001x0101x}, xxx1101011 \ {
   xxx1101011, xxx1101011, x101101011, 1x01101011}, 00x1x0101x \ {
   00x1101010, 00x1001011, 00x1x01010, 00x1x01011, 00x1x01011, 000100101x, 000110101x, 000110101x}}

{x0x01 \ {00001, 10001, 10101}, x1010 \ {11010, 01010}}
{x0x1x \ {10x1x, 10010}, 010x0 \ {01010, 01000}, xxx00 \ {x0000, x0x00, 00100}}
{
   x0x10x1010 \ {
   x0x1011010, x0x1001010, 10x10x1010, 10010x1010}, 01010x1010 \ {
   0101011010, 0101001010, 01010x1010}}

{x0x0x \ {0010x, x000x, x0000}, 0xxxx \ {0xxx0, 0x0x0, 0011x}}
{101xx \ {101x0, 10110, 10100}}
{
   1010xx0x0x \ {
   10101x0x00, 10100x0x01, 1010x0010x, 1010xx000x, 1010xx0000, 10100x0x0x, 10100x0x0x}, 101xx0xxxx \ {
   101x10xxx0, 101x00xxx1, 1011x0xx0x, 1010x0xx1x, 101xx0xxx0, 101xx0x0x0, 101xx0011x, 101x00xxxx, 101100xxxx, 101000xxxx}}

{1xx00 \ {11x00, 1x000, 10000}, 0xx1x \ {0x011, 0x110, 00111}}
{xx010 \ {1x010, 00010, 0x010}, 1xxx0 \ {10010, 10110, 110x0}}
{
   1xx001xx00 \ {
   1xx0011x00, 1xx001x000, 1xx0010000, 110001xx00}, xx0100xx10 \ {
   xx0100x110, 1x0100xx10, 000100xx10, 0x0100xx10}, 1xx100xx10 \ {
   1xx100x110, 100100xx10, 101100xx10, 110100xx10}}

{x00xx \ {1000x, 10001, 00000}, x0x1x \ {1001x, 10110}, 1xx10 \ {11010, 11x10}}
{1xx10 \ {10x10, 10010}}
{
   1xx10x0010 \ {
   10x10x0010, 10010x0010}, 1xx10x0x10 \ {
   1xx1010010, 1xx1010110, 10x10x0x10, 10010x0x10}, 1xx101xx10 \ {
   1xx1011010, 1xx1011x10, 10x101xx10, 100101xx10}}

{0x010 \ {00010, 01010}}
{x100x \ {01000, 11000, 11000}, x100x \ {11000, 01001}}
{}

{}
{1x1x1 \ {10111, 11111}}
{}

{10x11 \ {10111, 10011}}
{1000x \ {10001, 10000}}
{}

{x00xx \ {10011, x00x0, 100x1}, xxxx1 \ {0x0x1, x1001, xx111}}
{xx010 \ {x0010, 1x010, 1x010}, xxx01 \ {11101, 11x01, 10001}}
{
   xx010x0010 \ {
   xx010x0010, x0010x0010, 1x010x0010, 1x010x0010}, xxx01x0001 \ {
   xxx0110001, 11101x0001, 11x01x0001, 10001x0001}, xxx01xxx01 \ {
   xxx010x001, xxx01x1001, 11101xxx01, 11x01xxx01, 10001xxx01}}

{1x0xx \ {1000x, 10011, 110x1}, xx011 \ {x0011, 00011, 1x011}}
{0x1xx \ {001x1, 00110, 0x1x0}}
{
   0x1xx1x0xx \ {
   0x1x11x0x0, 0x1x01x0x1, 0x11x1x00x, 0x10x1x01x, 0x1xx1000x, 0x1xx10011, 0x1xx110x1, 001x11x0xx, 001101x0xx, 0x1x01x0xx}, 0x111xx011 \ {
   0x111x0011, 0x11100011, 0x1111x011, 00111xx011}}

{xx101 \ {11101, 0x101, x0101}}
{x1xxx \ {11x0x, 0110x, 11xx0}, 10xxx \ {10xx1, 100x1, 10xx0}}
{
   x1x01xx101 \ {
   x1x0111101, x1x010x101, x1x01x0101, 11x01xx101, 01101xx101}, 10x01xx101 \ {
   10x0111101, 10x010x101, 10x01x0101, 10x01xx101, 10001xx101}}

{01x0x \ {0100x, 01001}}
{}
{}

{0x11x \ {0x111, 00111, 00111}}
{x01x0 \ {x0100, 00100, 001x0}}
{
   x01100x110 \ {
   001100x110}}

{10xx0 \ {10x10, 100x0, 10000}, xx0x1 \ {x0001, xx011, 1x011}}
{x1x0x \ {x1x01, 1100x, 11x01}, x1xxx \ {01x01, 01xx0, 01x10}, x1101 \ {01101, 11101}}
{
   x1x0010x00 \ {
   x1x0010000, x1x0010000, 1100010x00}, x1xx010xx0 \ {
   x1x1010x00, x1x0010x10, x1xx010x10, x1xx0100x0, x1xx010000, 01xx010xx0, 01x1010xx0}, x1x01xx001 \ {
   x1x01x0001, x1x01xx001, 11001xx001, 11x01xx001}, x1xx1xx0x1 \ {
   x1x11xx001, x1x01xx011, x1xx1x0001, x1xx1xx011, x1xx11x011, 01x01xx0x1}, x1101xx001 \ {
   x1101x0001, 01101xx001, 11101xx001}}

{x0001 \ {10001, 00001, 00001}}
{x10xx \ {110x1, 0100x, 110xx}, x1xx0 \ {110x0, 11x10, x10x0}, 0x010 \ {00010, 01010}}
{
   x1001x0001 \ {
   x100110001, x100100001, x100100001, 11001x0001, 01001x0001, 11001x0001}}

{00xxx \ {00001, 00x0x, 00x0x}, 00xx0 \ {00x00, 00010}, x0x10 \ {10010, 00110, 00110}}
{0x0xx \ {0100x, 0x01x, 0x00x}, 0x00x \ {0100x, 00000}}
{
   0x0xx00xxx \ {
   0x0x100xx0, 0x0x000xx1, 0x01x00x0x, 0x00x00x1x, 0x0xx00001, 0x0xx00x0x, 0x0xx00x0x, 0100x00xxx, 0x01x00xxx, 0x00x00xxx}, 0x00x00x0x \ {
   0x00100x00, 0x00000x01, 0x00x00001, 0x00x00x0x, 0x00x00x0x, 0100x00x0x, 0000000x0x}, 0x0x000xx0 \ {
   0x01000x00, 0x00000x10, 0x0x000x00, 0x0x000010, 0100000xx0, 0x01000xx0, 0x00000xx0}, 0x00000x00 \ {
   0x00000x00, 0100000x00, 0000000x00}, 0x010x0x10 \ {
   0x01010010, 0x01000110, 0x01000110, 0x010x0x10}}

{x10xx \ {x1011, 110x0, 01010}}
{xxx0x \ {11001, 0x101, 1110x}, x0010 \ {00010}, 0xxx0 \ {0x100, 011x0, 0x0x0}}
{
   xxx0xx100x \ {
   xxx01x1000, xxx00x1001, xxx0x11000, 11001x100x, 0x101x100x, 1110xx100x}, x0010x1010 \ {
   x001011010, x001001010, 00010x1010}, 0xxx0x10x0 \ {
   0xx10x1000, 0xx00x1010, 0xxx0110x0, 0xxx001010, 0x100x10x0, 011x0x10x0, 0x0x0x10x0}}

{00x10 \ {00010}}
{0xx11 \ {01x11, 01111, 01111}, 0xx1x \ {01x11, 0111x, 00110}, 011x0 \ {01100}}
{
   0xx1000x10 \ {
   0xx1000010, 0111000x10, 0011000x10}, 0111000x10 \ {
   0111000010}}

{x0x1x \ {0011x, x0110, 10x1x}}
{x01xx \ {x0100, 00101, 10100}}
{
   x011xx0x1x \ {
   x0111x0x10, x0110x0x11, x011x0011x, x011xx0110, x011x10x1x}}

{x0x00 \ {10000, x0100, 10x00}, 001xx \ {001x1, 00100}}
{00x0x \ {0010x}, xx111 \ {x1111}}
{
   00x00x0x00 \ {
   00x0010000, 00x00x0100, 00x0010x00, 00100x0x00}, 00x0x0010x \ {
   00x0100100, 00x0000101, 00x0x00101, 00x0x00100, 0010x0010x}, xx11100111 \ {
   xx11100111, x111100111}}

{xx01x \ {0x011, 0x010, 11010}}
{0xx1x \ {0001x, 0011x, 00111}}
{
   0xx1xxx01x \ {
   0xx11xx010, 0xx10xx011, 0xx1x0x011, 0xx1x0x010, 0xx1x11010, 0001xxx01x, 0011xxx01x, 00111xx01x}}

{0x01x \ {01011, 00010}, xx100 \ {1x100, x1100}}
{x1x00 \ {01100, x1100, 11x00}}
{
   x1x00xx100 \ {
   x1x001x100, x1x00x1100, 01100xx100, x1100xx100, 11x00xx100}}

{1x0xx \ {110x0, 1001x, 1x011}}
{1xx00 \ {10000, 11x00, 1x100}, 0x10x \ {00101, 0110x, 0x101}, 1xxx1 \ {1x111, 10011, 1xx01}}
{
   1xx001x000 \ {
   1xx0011000, 100001x000, 11x001x000, 1x1001x000}, 0x10x1x00x \ {
   0x1011x000, 0x1001x001, 0x10x11000, 001011x00x, 0110x1x00x, 0x1011x00x}, 1xxx11x0x1 \ {
   1xx111x001, 1xx011x011, 1xxx110011, 1xxx11x011, 1x1111x0x1, 100111x0x1, 1xx011x0x1}}

{x01x1 \ {001x1, 10101, 101x1}}
{xxxx1 \ {xx111, 1x0x1, x01x1}}
{
   xxxx1x01x1 \ {
   xxx11x0101, xxx01x0111, xxxx1001x1, xxxx110101, xxxx1101x1, xx111x01x1, 1x0x1x01x1, x01x1x01x1}}

{x1xx1 \ {11111, x1111, 11011}}
{0101x \ {01010, 01011}, xx010 \ {11010, 01010, 00010}}
{
   01011x1x11 \ {
   0101111111, 01011x1111, 0101111011, 01011x1x11}}

{x110x \ {x1101, 0110x, x1100}, 0x0x0 \ {01000, 010x0, 0x010}}
{1x0x0 \ {100x0, 110x0, 10010}}
{
   1x000x1100 \ {
   1x00001100, 1x000x1100, 10000x1100, 11000x1100}, 1x0x00x0x0 \ {
   1x0100x000, 1x0000x010, 1x0x001000, 1x0x0010x0, 1x0x00x010, 100x00x0x0, 110x00x0x0, 100100x0x0}}

{01x1x \ {01x11, 0101x, 01x10}}
{11x1x \ {11x10, 11x11}, 110x1 \ {11001}}
{
   11x1x01x1x \ {
   11x1101x10, 11x1001x11, 11x1x01x11, 11x1x0101x, 11x1x01x10, 11x1001x1x, 11x1101x1x}, 1101101x11 \ {
   1101101x11, 1101101011}}

{x10x0 \ {x1000, 11010, x1010}, x010x \ {x0100, 00100, x0101}}
{xx011 \ {01011, 0x011}}
{}

{x0x10 \ {00x10, 10x10, 10010}}
{xxx1x \ {x0111, 11111, x001x}, xx0x1 \ {11001, 110x1, xx001}, x001x \ {10011, 00010}}
{
   xxx10x0x10 \ {
   xxx1000x10, xxx1010x10, xxx1010010, x0010x0x10}, x0010x0x10 \ {
   x001000x10, x001010x10, x001010010, 00010x0x10}}

{0x110 \ {00110, 01110}, x11x0 \ {01110, 01100, x1100}}
{00xx1 \ {000x1, 00x11, 001x1}, 100x0 \ {10010, 10000}}
{
   100100x110 \ {
   1001000110, 1001001110, 100100x110}, 100x0x11x0 \ {
   10010x1100, 10000x1110, 100x001110, 100x001100, 100x0x1100, 10010x11x0, 10000x11x0}}

{1x10x \ {11100, 11101}, 0x1x0 \ {001x0, 0x100, 0x100}}
{}
{}

{xx0x1 \ {xx011, xx001, 110x1}, x1010 \ {01010, 11010}}
{x11xx \ {1111x, 11101, 11100}}
{
   x11x1xx0x1 \ {
   x1111xx001, x1101xx011, x11x1xx011, x11x1xx001, x11x1110x1, 11111xx0x1, 11101xx0x1}, x1110x1010 \ {
   x111001010, x111011010, 11110x1010}}

{x000x \ {00001, 10001}, 10xx1 \ {10x01, 10001, 10x11}}
{x10x0 \ {01000, 01010, 11000}, 0x110 \ {01110, 00110}}
{
   x1000x0000 \ {
   01000x0000, 11000x0000}}

{110xx \ {110x1, 11010}}
{0x110 \ {01110, 00110, 00110}, x1100 \ {11100, 01100}}
{
   0x11011010 \ {
   0x11011010, 0111011010, 0011011010, 0011011010}, x110011000 \ {
   1110011000, 0110011000}}

{1xx1x \ {11111, 1101x, 1x011}}
{}
{}

{1011x \ {10111}}
{0x1xx \ {011xx, 0011x}}
{
   0x11x1011x \ {
   0x11110110, 0x11010111, 0x11x10111, 0111x1011x, 0011x1011x}}

{110x1 \ {11011, 11001, 11001}}
{1xxx0 \ {10x00, 10000, 1xx00}}
{}

{x0x1x \ {00110, x0x10, x001x}}
{110xx \ {11010, 110x1, 1100x}, 1x11x \ {1x110, 1011x, 1011x}}
{
   1101xx0x1x \ {
   11011x0x10, 11010x0x11, 1101x00110, 1101xx0x10, 1101xx001x, 11010x0x1x, 11011x0x1x}, 1x11xx0x1x \ {
   1x111x0x10, 1x110x0x11, 1x11x00110, 1x11xx0x10, 1x11xx001x, 1x110x0x1x, 1011xx0x1x, 1011xx0x1x}}

{xx1x0 \ {0x1x0, 111x0, x0110}, 0x1x0 \ {001x0, 011x0, 01110}}
{x1111 \ {11111, 01111, 01111}}
{}

{}
{100x0 \ {10010, 10000, 10000}, x110x \ {01100, 01101, x1100}}
{}

{10xx1 \ {10101, 10011, 100x1}, 1x01x \ {10011, 1x010, 10010}}
{x0x10 \ {00x10, 10110, x0010}}
{
   x0x101x010 \ {
   x0x101x010, x0x1010010, 00x101x010, 101101x010, x00101x010}}

{x0xx1 \ {x0x01, 00011, 001x1}}
{x0x00 \ {10100, 00000, 00x00}}
{}

{0xxx1 \ {01x01, 010x1, 01011}}
{1x10x \ {1010x, 1x101, 11100}}
{
   1x1010xx01 \ {
   1x10101x01, 1x10101001, 101010xx01, 1x1010xx01}}

{x0xx0 \ {00100, 00xx0, 00000}}
{00x1x \ {00010, 0001x, 00x11}}
{
   00x10x0x10 \ {
   00x1000x10, 00010x0x10, 00010x0x10}}

{10xx0 \ {10110, 10x10, 10000}, x01x1 \ {001x1, 00111, 00111}}
{}
{}

{0x11x \ {00111}, 11xx0 \ {11000, 110x0, 11110}, xx100 \ {10100, 00100, 1x100}}
{}
{}

{x111x \ {0111x, x1110}, 00xx1 \ {00x11, 00111}, 1x001 \ {10001}}
{x00xx \ {000xx, x00x1, x0001}}
{
   x001xx111x \ {
   x0011x1110, x0010x1111, x001x0111x, x001xx1110, 0001xx111x, x0011x111x}, x00x100xx1 \ {
   x001100x01, x000100x11, x00x100x11, x00x100111, 000x100xx1, x00x100xx1, x000100xx1}, x00011x001 \ {
   x000110001, 000011x001, x00011x001, x00011x001}}

{xx0xx \ {xx000, 1x0x1, x0011}}
{xx000 \ {01000, 1x000, x0000}, x000x \ {1000x, 00001}}
{
   xx000xx000 \ {
   xx000xx000, 01000xx000, 1x000xx000, x0000xx000}, x000xxx00x \ {
   x0001xx000, x0000xx001, x000xxx000, x000x1x001, 1000xxx00x, 00001xx00x}}

{x10x0 \ {01000, 010x0}}
{x1101 \ {11101, 01101}}
{}

{}
{xx100 \ {01100, 00100, x0100}}
{}

{1x011 \ {10011, 11011, 11011}}
{1x1x1 \ {1x101, 11101}, 10xx1 \ {10011, 10001}}
{
   1x1111x011 \ {
   1x11110011, 1x11111011, 1x11111011}, 10x111x011 \ {
   10x1110011, 10x1111011, 10x1111011, 100111x011}}

{x1xxx \ {x1111, 11x10, 111x0}, 101x1 \ {10111, 10101}}
{x111x \ {1111x, x1111, x1110}}
{
   x111xx1x1x \ {
   x1111x1x10, x1110x1x11, x111xx1111, x111x11x10, x111x11110, 1111xx1x1x, x1111x1x1x, x1110x1x1x}, x111110111 \ {
   x111110111, 1111110111, x111110111}}

{0xxx1 \ {0x111, 01001, 01011}}
{xx001 \ {0x001, x0001}, x011x \ {0011x, x0110, 00110}}
{
   xx0010xx01 \ {
   xx00101001, 0x0010xx01, x00010xx01}, x01110xx11 \ {
   x01110x111, x011101011, 001110xx11}}

{1x10x \ {1110x, 1010x, 1010x}}
{x1xxx \ {01x01, 11x0x, x110x}, 110xx \ {1101x, 11000, 110x0}}
{
   x1x0x1x10x \ {
   x1x011x100, x1x001x101, x1x0x1110x, x1x0x1010x, x1x0x1010x, 01x011x10x, 11x0x1x10x, x110x1x10x}, 1100x1x10x \ {
   110011x100, 110001x101, 1100x1110x, 1100x1010x, 1100x1010x, 110001x10x, 110001x10x}}

{x1110 \ {01110, 11110, 11110}}
{11x10 \ {11010, 11110, 11110}}
{
   11x10x1110 \ {
   11x1001110, 11x1011110, 11x1011110, 11010x1110, 11110x1110, 11110x1110}}

{1011x \ {10111}, x1xx0 \ {01010, x1110, x11x0}, 1xx01 \ {10101, 11001, 10x01}}
{}
{}

{010xx \ {010x1, 01011, 010x0}, x1x01 \ {x1101, 11101}}
{x10x0 \ {x1010, 11000, 11010}}
{
   x10x0010x0 \ {
   x101001000, x100001010, x10x0010x0, x1010010x0, 11000010x0, 11010010x0}}

{x1111 \ {11111, 01111, 01111}}
{00x10 \ {00010, 00110, 00110}, xx010 \ {00010, x0010, 11010}}
{}

{x1x10 \ {01110, 11110}}
{xx1xx \ {111xx, x010x, 1x100}, 0x1x1 \ {00111, 001x1, 001x1}, 1xx1x \ {1x010, 10010, 1001x}}
{
   xx110x1x10 \ {
   xx11001110, xx11011110, 11110x1x10}, 1xx10x1x10 \ {
   1xx1001110, 1xx1011110, 1x010x1x10, 10010x1x10, 10010x1x10}}

{xx111 \ {1x111, 01111, x0111}}
{x0xx0 \ {00xx0, 10110, x0x00}, 0x0xx \ {00001, 0100x, 01001}}
{
   0x011xx111 \ {
   0x0111x111, 0x01101111, 0x011x0111}}

{1xx00 \ {11x00, 10x00}, 11xx0 \ {11x00, 11100}}
{1x111 \ {10111, 11111}, 10xx0 \ {10000, 10100, 10010}}
{
   10x001xx00 \ {
   10x0011x00, 10x0010x00, 100001xx00, 101001xx00}, 10xx011xx0 \ {
   10x1011x00, 10x0011x10, 10xx011x00, 10xx011100, 1000011xx0, 1010011xx0, 1001011xx0}}

{01xx1 \ {01001, 01101, 01x11}, 1xxx0 \ {11x00, 1xx00, 10x10}}
{0100x \ {01000, 01001}}
{
   0100101x01 \ {
   0100101001, 0100101101, 0100101x01}, 010001xx00 \ {
   0100011x00, 010001xx00, 010001xx00}}

{0x01x \ {0x011, 01011}}
{01xx1 \ {010x1, 01x01, 01x11}}
{
   01x110x011 \ {
   01x110x011, 01x1101011, 010110x011, 01x110x011}}

{1x1x1 \ {10101, 1x101}, 010xx \ {010x0, 01000, 01000}}
{x01x1 \ {x0101, 00111}, 11x0x \ {11100, 11x01, 1100x}, 1x10x \ {1110x, 1x101, 11101}}
{
   x01x11x1x1 \ {
   x01111x101, x01011x111, x01x110101, x01x11x101, x01011x1x1, 001111x1x1}, 11x011x101 \ {
   11x0110101, 11x011x101, 11x011x101, 110011x101}, 1x1011x101 \ {
   1x10110101, 1x1011x101, 111011x101, 1x1011x101, 111011x101}, x01x1010x1 \ {
   x011101001, x010101011, x0101010x1, 00111010x1}, 11x0x0100x \ {
   11x0101000, 11x0001001, 11x0x01000, 11x0x01000, 11x0x01000, 111000100x, 11x010100x, 1100x0100x}, 1x10x0100x \ {
   1x10101000, 1x10001001, 1x10x01000, 1x10x01000, 1x10x01000, 1110x0100x, 1x1010100x, 111010100x}}

{}
{x0111 \ {00111}}
{}

{xx011 \ {11011, 01011, 0x011}, 001x1 \ {00111}}
{x1x01 \ {11001, 01x01, 11101}, 10xx1 \ {10001, 10111, 10x01}}
{
   10x11xx011 \ {
   10x1111011, 10x1101011, 10x110x011, 10111xx011}, x1x0100101 \ {
   1100100101, 01x0100101, 1110100101}, 10xx1001x1 \ {
   10x1100101, 10x0100111, 10xx100111, 10001001x1, 10111001x1, 10x01001x1}}

{}
{xxxxx \ {011x1, x0x0x, 00x00}, x11x1 \ {01111}, 000x0 \ {00000}}
{}

{xx011 \ {00011, 11011, 01011}, x01xx \ {x01x1, x01x0, 101x0}}
{}
{}

{x0xx0 \ {x0100, 00xx0}, x11x0 \ {01110, 011x0, 011x0}}
{x0x10 \ {00010, 00110, x0110}, x1011 \ {11011, 01011, 01011}, 1111x \ {11110, 11111, 11111}}
{
   x0x10x0x10 \ {
   x0x1000x10, 00010x0x10, 00110x0x10, x0110x0x10}, 11110x0x10 \ {
   1111000x10, 11110x0x10}, x0x10x1110 \ {
   x0x1001110, x0x1001110, x0x1001110, 00010x1110, 00110x1110, x0110x1110}, 11110x1110 \ {
   1111001110, 1111001110, 1111001110, 11110x1110}}

{1xx1x \ {10x1x, 10x11, 1111x}, 0xx01 \ {01x01, 00101, 00001}}
{xxxx1 \ {10xx1, 1x0x1, x1x01}, x10xx \ {x100x, x10x1, 01011}, x0101 \ {10101, 00101}}
{
   xxx111xx11 \ {
   xxx1110x11, xxx1110x11, xxx1111111, 10x111xx11, 1x0111xx11}, x101x1xx1x \ {
   x10111xx10, x10101xx11, x101x10x1x, x101x10x11, x101x1111x, x10111xx1x, 010111xx1x}, xxx010xx01 \ {
   xxx0101x01, xxx0100101, xxx0100001, 10x010xx01, 1x0010xx01, x1x010xx01}, x10010xx01 \ {
   x100101x01, x100100101, x100100001, x10010xx01, x10010xx01}, x01010xx01 \ {
   x010101x01, x010100101, x010100001, 101010xx01, 001010xx01}}

{000xx \ {00011, 0000x, 00001}}
{1xxxx \ {1x110, 10x0x, 1xx01}, x11xx \ {111xx, 0110x, 11100}, 10xxx \ {1000x, 10000, 101xx}}
{
   1xxxx000xx \ {
   1xxx1000x0, 1xxx0000x1, 1xx1x0000x, 1xx0x0001x, 1xxxx00011, 1xxxx0000x, 1xxxx00001, 1x110000xx, 10x0x000xx, 1xx01000xx}, x11xx000xx \ {
   x11x1000x0, x11x0000x1, x111x0000x, x110x0001x, x11xx00011, x11xx0000x, x11xx00001, 111xx000xx, 0110x000xx, 11100000xx}, 10xxx000xx \ {
   10xx1000x0, 10xx0000x1, 10x1x0000x, 10x0x0001x, 10xxx00011, 10xxx0000x, 10xxx00001, 1000x000xx, 10000000xx, 101xx000xx}}

{}
{x010x \ {10100, 00101, 0010x}}
{}

{xxxx0 \ {100x0, 011x0, 11000}}
{xx0x0 \ {xx000, 1x010}, 0xxx1 \ {0xx01, 00xx1, 001x1}, 0x01x \ {0101x, 01010}}
{
   xx0x0xxxx0 \ {
   xx010xxx00, xx000xxx10, xx0x0100x0, xx0x0011x0, xx0x011000, xx000xxxx0, 1x010xxxx0}, 0x010xxx10 \ {
   0x01010010, 0x01001110, 01010xxx10, 01010xxx10}}

{1x111 \ {11111, 10111}}
{0x01x \ {01010, 01011}, 100xx \ {10010, 100x0, 1001x}, x11x0 \ {11110, 01110}}
{
   0x0111x111 \ {
   0x01111111, 0x01110111, 010111x111}, 100111x111 \ {
   1001111111, 1001110111, 100111x111}}

{x11x1 \ {111x1, 11101, 01101}}
{}
{}

{0x1x0 \ {011x0, 0x100, 0x100}, 1xxx0 \ {1x100, 1x0x0}}
{xx101 \ {1x101, 11101}, 1xx00 \ {10x00, 1x000, 11x00}, x110x \ {0110x, 01101, 11100}}
{
   1xx000x100 \ {
   1xx0001100, 1xx000x100, 1xx000x100, 10x000x100, 1x0000x100, 11x000x100}, x11000x100 \ {
   x110001100, x11000x100, x11000x100, 011000x100, 111000x100}, 1xx001xx00 \ {
   1xx001x100, 1xx001x000, 10x001xx00, 1x0001xx00, 11x001xx00}, x11001xx00 \ {
   x11001x100, x11001x000, 011001xx00, 111001xx00}}

{x0xx1 \ {x01x1, 00001, 00xx1}, 101xx \ {1010x, 101x0, 10111}}
{11x1x \ {1101x, 11111, 11011}, x11x1 \ {x1101, x1111}}
{
   11x11x0x11 \ {
   11x11x0111, 11x1100x11, 11011x0x11, 11111x0x11, 11011x0x11}, x11x1x0xx1 \ {
   x1111x0x01, x1101x0x11, x11x1x01x1, x11x100001, x11x100xx1, x1101x0xx1, x1111x0xx1}, 11x1x1011x \ {
   11x1110110, 11x1010111, 11x1x10110, 11x1x10111, 1101x1011x, 111111011x, 110111011x}, x11x1101x1 \ {
   x111110101, x110110111, x11x110101, x11x110111, x1101101x1, x1111101x1}}

{x0xx0 \ {000x0, 001x0, 00010}, x011x \ {00110, 1011x, 1011x}}
{}
{}

{x1100 \ {11100}, xx110 \ {x1110, 1x110}}
{x1xx0 \ {01010, 11010, x1110}, x111x \ {11110, x1111}}
{
   x1x00x1100 \ {
   x1x0011100}, x1x10xx110 \ {
   x1x10x1110, x1x101x110, 01010xx110, 11010xx110, x1110xx110}, x1110xx110 \ {
   x1110x1110, x11101x110, 11110xx110}}

{1x1x1 \ {10101, 11101, 101x1}}
{xx111 \ {0x111, 10111}, 0xxx1 \ {0x111, 001x1, 01101}, xxx01 \ {01x01, 0xx01, 11001}}
{
   xx1111x111 \ {
   xx11110111, 0x1111x111, 101111x111}, 0xxx11x1x1 \ {
   0xx111x101, 0xx011x111, 0xxx110101, 0xxx111101, 0xxx1101x1, 0x1111x1x1, 001x11x1x1, 011011x1x1}, xxx011x101 \ {
   xxx0110101, xxx0111101, xxx0110101, 01x011x101, 0xx011x101, 110011x101}}

{xxx10 \ {xx010, x1110, 11010}}
{xx1x0 \ {00110, x0110, x1110}}
{
   xx110xxx10 \ {
   xx110xx010, xx110x1110, xx11011010, 00110xxx10, x0110xxx10, x1110xxx10}}

{xxx01 \ {11001, 00x01, 10001}}
{00xxx \ {00x01, 0000x, 001x0}}
{
   00x01xxx01 \ {
   00x0111001, 00x0100x01, 00x0110001, 00x01xxx01, 00001xxx01}}

{x00x0 \ {00000, x0010, 00010}, xx110 \ {10110, 1x110, 00110}, 10xx0 \ {10100, 10x00, 10010}}
{}
{}

{10xx1 \ {10001, 10101, 10101}, 10x1x \ {10011, 10111, 10x10}, 10x1x \ {10010, 1011x}}
{01xx0 \ {011x0, 01x10}, 0x000 \ {00000, 01000, 01000}}
{
   01x1010x10 \ {
   01x1010x10, 0111010x10, 01x1010x10}}

{11xx0 \ {11x10, 11100, 11010}}
{}
{}

{}
{x0x01 \ {x0101, 00101, 10x01}, 11x1x \ {11011, 1101x, 11110}, 01xx1 \ {01011, 01111, 010x1}}
{}

{xx10x \ {1010x, 10100, 11100}, 101x0 \ {10110, 10100}, xx100 \ {10100, x1100, 00100}}
{xxxx1 \ {110x1, x1111, x1011}, xx100 \ {00100, x1100, x0100}}
{
   xxx01xx101 \ {
   xxx0110101, 11001xx101}, xx100xx100 \ {
   xx10010100, xx10010100, xx10011100, 00100xx100, x1100xx100, x0100xx100}, xx10010100 \ {
   xx10010100, 0010010100, x110010100, x010010100}}

{0xxx1 \ {010x1, 00xx1, 01x11}}
{x111x \ {11110, x1111, 01110}}
{
   x11110xx11 \ {
   x111101011, x111100x11, x111101x11, x11110xx11}}

{x001x \ {00011, 10011, x0011}}
{}
{}

{1001x \ {10011, 10010}, 01xxx \ {0101x, 011xx, 01x00}}
{x11x0 \ {01100, x1100, 01110}, x11x1 \ {011x1, 111x1, 111x1}}
{
   x111010010 \ {
   x111010010, 0111010010}, x111110011 \ {
   x111110011, 0111110011, 1111110011, 1111110011}, x11x001xx0 \ {
   x111001x00, x110001x10, x11x001010, x11x0011x0, x11x001x00, 0110001xx0, x110001xx0, 0111001xx0}, x11x101xx1 \ {
   x111101x01, x110101x11, x11x101011, x11x1011x1, 011x101xx1, 111x101xx1, 111x101xx1}}

{01x1x \ {01011, 01x11}, 1x00x \ {1x001, 1x000, 10001}}
{000x1 \ {00011}}
{
   0001101x11 \ {
   0001101011, 0001101x11, 0001101x11}, 000011x001 \ {
   000011x001, 0000110001}}

{00x1x \ {00011, 00110}, 0xx01 \ {0x001, 01101, 01101}}
{x011x \ {00110, x0110}}
{
   x011x00x1x \ {
   x011100x10, x011000x11, x011x00011, x011x00110, 0011000x1x, x011000x1x}}

{110xx \ {11010, 110x1, 110x0}, 10xx0 \ {10000, 10110, 101x0}}
{0x1x0 \ {01110, 011x0}}
{
   0x1x0110x0 \ {
   0x11011000, 0x10011010, 0x1x011010, 0x1x0110x0, 01110110x0, 011x0110x0}, 0x1x010xx0 \ {
   0x11010x00, 0x10010x10, 0x1x010000, 0x1x010110, 0x1x0101x0, 0111010xx0, 011x010xx0}}

{11x0x \ {11100, 1110x, 11001}, 10xx0 \ {101x0, 10110, 10100}, 000xx \ {000x0, 00010, 00000}}
{x0xx0 \ {00110, x00x0, x0x00}}
{
   x0x0011x00 \ {
   x0x0011100, x0x0011100, x000011x00, x0x0011x00}, x0xx010xx0 \ {
   x0x1010x00, x0x0010x10, x0xx0101x0, x0xx010110, x0xx010100, 0011010xx0, x00x010xx0, x0x0010xx0}, x0xx0000x0 \ {
   x0x1000000, x0x0000010, x0xx0000x0, x0xx000010, x0xx000000, 00110000x0, x00x0000x0, x0x00000x0}}

{x00x0 \ {100x0, 10000}, 0x0x1 \ {00001}}
{xx0xx \ {000xx, xx010, 1x010}, x00xx \ {x0000, x00x0, 00011}}
{
   xx0x0x00x0 \ {
   xx010x0000, xx000x0010, xx0x0100x0, xx0x010000, 000x0x00x0, xx010x00x0, 1x010x00x0}, x00x0x00x0 \ {
   x0010x0000, x0000x0010, x00x0100x0, x00x010000, x0000x00x0, x00x0x00x0}, xx0x10x0x1 \ {
   xx0110x001, xx0010x011, xx0x100001, 000x10x0x1}, x00x10x0x1 \ {
   x00110x001, x00010x011, x00x100001, 000110x0x1}}

{xxx01 \ {01001, 00001, 10001}}
{x01xx \ {10100, 0010x, 001x0}, x101x \ {x1010, 01010, 11011}}
{
   x0101xxx01 \ {
   x010101001, x010100001, x010110001, 00101xxx01}}

{100x1 \ {10001}}
{0x1x0 \ {001x0, 01100, 0x100}, x10x1 \ {11001, x1001, x1011}}
{
   x10x1100x1 \ {
   x101110001, x100110011, x10x110001, 11001100x1, x1001100x1, x1011100x1}}

{xx101 \ {1x101, 01101, x1101}, 0xx11 \ {00011, 01111}}
{00xx1 \ {00111, 00x11}, 011x1 \ {01111}}
{
   00x01xx101 \ {
   00x011x101, 00x0101101, 00x01x1101}, 01101xx101 \ {
   011011x101, 0110101101, 01101x1101}, 00x110xx11 \ {
   00x1100011, 00x1101111, 001110xx11, 00x110xx11}, 011110xx11 \ {
   0111100011, 0111101111, 011110xx11}}

{}
{1x100 \ {10100, 11100}, xx01x \ {11011, 10010, xx011}}
{}

{0001x \ {00011, 00010}}
{00xxx \ {00010, 0011x, 0011x}, xx1x1 \ {1x111, xx111, 1x1x1}}
{
   00x1x0001x \ {
   00x1100010, 00x1000011, 00x1x00011, 00x1x00010, 000100001x, 0011x0001x, 0011x0001x}, xx11100011 \ {
   xx11100011, 1x11100011, xx11100011, 1x11100011}}

{xx100 \ {11100, x0100, 0x100}, 00xxx \ {00100, 00000}}
{xxx11 \ {x1x11, x1111, 0xx11}, x110x \ {01101, x1101, 0110x}}
{
   x1100xx100 \ {
   x110011100, x1100x0100, x11000x100, 01100xx100}, xxx1100x11 \ {
   x1x1100x11, x111100x11, 0xx1100x11}, x110x00x0x \ {
   x110100x00, x110000x01, x110x00100, x110x00000, 0110100x0x, x110100x0x, 0110x00x0x}}

{x11x0 \ {01100, 111x0}, x1111 \ {11111, 01111}, xxx00 \ {1xx00, 01100}}
{1xx01 \ {10001, 11101, 1x101}}
{}

{x0100 \ {10100, 00100, 00100}}
{000x0 \ {00000, 00010}}
{
   00000x0100 \ {
   0000010100, 0000000100, 0000000100, 00000x0100}}

{0x0x1 \ {000x1, 0x011, 010x1}}
{1x0x1 \ {100x1, 11011, 1x011}, xx10x \ {x0101, x1100, 11101}}
{
   1x0x10x0x1 \ {
   1x0110x001, 1x0010x011, 1x0x1000x1, 1x0x10x011, 1x0x1010x1, 100x10x0x1, 110110x0x1, 1x0110x0x1}, xx1010x001 \ {
   xx10100001, xx10101001, x01010x001, 111010x001}}

{}
{0x11x \ {0011x, 00110, 00111}, 001x0 \ {00110, 00100, 00100}}
{}

{}
{xxx10 \ {01010, 1xx10}, 0x11x \ {0011x, 00111, 0111x}}
{}

{}
{1101x \ {11011}, 1xx10 \ {1x010, 1x110, 11010}}
{}

{}
{xxx11 \ {1xx11, 0x011, xx011}, 10x0x \ {1000x, 10100, 10001}, 00x1x \ {00x11, 00011, 00010}}
{}

{1x01x \ {11010, 1x011}, 1x0xx \ {1x001, 1x010, 1x0x1}}
{}
{}

{xx00x \ {0x000, 0x00x, 00000}}
{xx010 \ {00010, 0x010, 0x010}, 011xx \ {0110x, 01111, 0111x}}
{
   0110xxx00x \ {
   01101xx000, 01100xx001, 0110x0x000, 0110x0x00x, 0110x00000, 0110xxx00x}}

{xx1x1 \ {x1101, 1x111, 0x101}, xxx00 \ {x1000, x1100, 01x00}}
{1xx01 \ {11x01, 1x101, 11001}, 0x010 \ {01010, 00010}, 10x0x \ {10100, 10x01}}
{
   1xx01xx101 \ {
   1xx01x1101, 1xx010x101, 11x01xx101, 1x101xx101, 11001xx101}, 10x01xx101 \ {
   10x01x1101, 10x010x101, 10x01xx101}, 10x00xxx00 \ {
   10x00x1000, 10x00x1100, 10x0001x00, 10100xxx00}}

{0xx00 \ {01000, 00100, 0x100}}
{x1x01 \ {x1101, 01x01}}
{}

{1xx00 \ {10100, 11100, 10x00}, xx01x \ {1001x, x0011, 00010}}
{01xx0 \ {01100, 01010, 01x00}, 11x1x \ {1111x, 11011, 11010}}
{
   01x001xx00 \ {
   01x0010100, 01x0011100, 01x0010x00, 011001xx00, 01x001xx00}, 01x10xx010 \ {
   01x1010010, 01x1000010, 01010xx010}, 11x1xxx01x \ {
   11x11xx010, 11x10xx011, 11x1x1001x, 11x1xx0011, 11x1x00010, 1111xxx01x, 11011xx01x, 11010xx01x}}

{010x0 \ {01000, 01010, 01010}, xx10x \ {1010x, 0x10x, x110x}, x11xx \ {x110x, x11x0, x1110}}
{x1xx0 \ {011x0, 01010, 01010}}
{
   x1xx0010x0 \ {
   x1x1001000, x1x0001010, x1xx001000, x1xx001010, x1xx001010, 011x0010x0, 01010010x0, 01010010x0}, x1x00xx100 \ {
   x1x0010100, x1x000x100, x1x00x1100, 01100xx100}, x1xx0x11x0 \ {
   x1x10x1100, x1x00x1110, x1xx0x1100, x1xx0x11x0, x1xx0x1110, 011x0x11x0, 01010x11x0, 01010x11x0}}

{x10x0 \ {010x0, 110x0, 11000}, x0x1x \ {00x10, x001x, 00011}}
{xx0x0 \ {x10x0, xx000, 1x010}}
{
   xx0x0x10x0 \ {
   xx010x1000, xx000x1010, xx0x0010x0, xx0x0110x0, xx0x011000, x10x0x10x0, xx000x10x0, 1x010x10x0}, xx010x0x10 \ {
   xx01000x10, xx010x0010, x1010x0x10, 1x010x0x10}}

{xxx11 \ {01011, 10x11, 1x111}, 10xx1 \ {10x11, 101x1}, x00x1 \ {10011, 00011}}
{1x11x \ {10111, 1x111, 10110}, 1xx11 \ {10111, 11111, 1x111}}
{
   1x111xxx11 \ {
   1x11101011, 1x11110x11, 1x1111x111, 10111xxx11, 1x111xxx11}, 1xx11xxx11 \ {
   1xx1101011, 1xx1110x11, 1xx111x111, 10111xxx11, 11111xxx11, 1x111xxx11}, 1x11110x11 \ {
   1x11110x11, 1x11110111, 1011110x11, 1x11110x11}, 1xx1110x11 \ {
   1xx1110x11, 1xx1110111, 1011110x11, 1111110x11, 1x11110x11}, 1x111x0011 \ {
   1x11110011, 1x11100011, 10111x0011, 1x111x0011}, 1xx11x0011 \ {
   1xx1110011, 1xx1100011, 10111x0011, 11111x0011, 1x111x0011}}

{xx1x0 \ {1x110, x0100, xx100}}
{xx0x0 \ {x00x0, x1010, 110x0}}
{
   xx0x0xx1x0 \ {
   xx010xx100, xx000xx110, xx0x01x110, xx0x0x0100, xx0x0xx100, x00x0xx1x0, x1010xx1x0, 110x0xx1x0}}

{1xxx1 \ {10x11, 10111, 10x01}, 1110x \ {11101, 11100, 11100}}
{xx010 \ {x1010, 01010}}
{}

{}
{11x01 \ {11101, 11001, 11001}}
{}

{1xx0x \ {1x00x, 1110x, 11000}}
{}
{}

{xx10x \ {x110x, 00100, 0010x}, 11x0x \ {11000, 11100, 1100x}}
{01xxx \ {010xx, 01010, 0111x}}
{
   01x0xxx10x \ {
   01x01xx100, 01x00xx101, 01x0xx110x, 01x0x00100, 01x0x0010x, 0100xxx10x}, 01x0x11x0x \ {
   01x0111x00, 01x0011x01, 01x0x11000, 01x0x11100, 01x0x1100x, 0100x11x0x}}

{}
{0x0x0 \ {0x000, 00000, 010x0}, x0x00 \ {00x00, 10x00, 10x00}, xxxx0 \ {x0x10, 01110, 100x0}}
{}

{01x00 \ {01100}}
{xxx1x \ {x1x1x, xxx11, 00x10}}
{}

{0x1xx \ {0x11x, 0x110, 0x111}, 1xxx1 \ {11x11, 11x01, 10101}}
{10xxx \ {10111, 10x00, 10x01}, x10xx \ {1100x, x1011, 010xx}, 011x1 \ {01101}}
{
   10xxx0x1xx \ {
   10xx10x1x0, 10xx00x1x1, 10x1x0x10x, 10x0x0x11x, 10xxx0x11x, 10xxx0x110, 10xxx0x111, 101110x1xx, 10x000x1xx, 10x010x1xx}, x10xx0x1xx \ {
   x10x10x1x0, x10x00x1x1, x101x0x10x, x100x0x11x, x10xx0x11x, x10xx0x110, x10xx0x111, 1100x0x1xx, x10110x1xx, 010xx0x1xx}, 011x10x1x1 \ {
   011110x101, 011010x111, 011x10x111, 011x10x111, 011010x1x1}, 10xx11xxx1 \ {
   10x111xx01, 10x011xx11, 10xx111x11, 10xx111x01, 10xx110101, 101111xxx1, 10x011xxx1}, x10x11xxx1 \ {
   x10111xx01, x10011xx11, x10x111x11, x10x111x01, x10x110101, 110011xxx1, x10111xxx1, 010x11xxx1}, 011x11xxx1 \ {
   011111xx01, 011011xx11, 011x111x11, 011x111x01, 011x110101, 011011xxx1}}

{x1111 \ {11111, 01111}, 1x101 \ {10101}}
{1xx11 \ {10x11, 10011, 1x011}, x11x1 \ {01111, 111x1, 11101}, 10x0x \ {1010x, 10000, 10x01}}
{
   1xx11x1111 \ {
   1xx1111111, 1xx1101111, 10x11x1111, 10011x1111, 1x011x1111}, x1111x1111 \ {
   x111111111, x111101111, 01111x1111, 11111x1111}, x11011x101 \ {
   x110110101, 111011x101, 111011x101}, 10x011x101 \ {
   10x0110101, 101011x101, 10x011x101}}

{0xx0x \ {01101, 01x0x, 01x00}}
{x00x1 \ {00001, 000x1, x0011}, x01x0 \ {00100, x0110}}
{
   x00010xx01 \ {
   x000101101, x000101x01, 000010xx01, 000010xx01}, x01000xx00 \ {
   x010001x00, x010001x00, 001000xx00}}

{1x1xx \ {111x0, 10101, 11111}}
{x1xx1 \ {011x1, 01x11, x1x01}, x1x1x \ {01110, 11111, 0101x}, 1xxxx \ {1001x, 10010, 11x01}}
{
   x1xx11x1x1 \ {
   x1x111x101, x1x011x111, x1xx110101, x1xx111111, 011x11x1x1, 01x111x1x1, x1x011x1x1}, x1x1x1x11x \ {
   x1x111x110, x1x101x111, x1x1x11110, x1x1x11111, 011101x11x, 111111x11x, 0101x1x11x}, 1xxxx1x1xx \ {
   1xxx11x1x0, 1xxx01x1x1, 1xx1x1x10x, 1xx0x1x11x, 1xxxx111x0, 1xxxx10101, 1xxxx11111, 1001x1x1xx, 100101x1xx, 11x011x1xx}}

{1xxx1 \ {10111, 1x101, 1xx01}}
{110x1 \ {11011}, x0x01 \ {10101, 00001, 00001}}
{
   110x11xxx1 \ {
   110111xx01, 110011xx11, 110x110111, 110x11x101, 110x11xx01, 110111xxx1}, x0x011xx01 \ {
   x0x011x101, x0x011xx01, 101011xx01, 000011xx01, 000011xx01}}

{}
{0x100 \ {01100}, xx11x \ {11110, 0x110, xx111}}
{}

{x110x \ {01100, x1101, 1110x}}
{xxx0x \ {0010x, 0x001, 01100}}
{
   xxx0xx110x \ {
   xxx01x1100, xxx00x1101, xxx0x01100, xxx0xx1101, xxx0x1110x, 0010xx110x, 0x001x110x, 01100x110x}}

{xxx0x \ {0x101, 11x01, x0x0x}, 1xx00 \ {11000, 10000, 1x100}, x1010 \ {11010}}
{}
{}

{}
{10x0x \ {10100, 1000x, 10x01}}
{}

{10x0x \ {10100, 1010x}}
{x1xx1 \ {x1x11, 01111, x1111}, 00x11 \ {00011}}
{
   x1x0110x01 \ {
   x1x0110101}}

{0xxx1 \ {01x01, 000x1, 01x11}, xx11x \ {x1110, 10111, 1x11x}}
{1x11x \ {1x111, 11110, 1111x}, 110x0 \ {11010}}
{
   1x1110xx11 \ {
   1x11100011, 1x11101x11, 1x1110xx11, 111110xx11}, 1x11xxx11x \ {
   1x111xx110, 1x110xx111, 1x11xx1110, 1x11x10111, 1x11x1x11x, 1x111xx11x, 11110xx11x, 1111xxx11x}, 11010xx110 \ {
   11010x1110, 110101x110, 11010xx110}}

{xx0x0 \ {01010, 110x0, 000x0}, x1x0x \ {01x01, 01x00, x1000}, 10xx1 \ {10001, 10101, 10101}}
{001x0 \ {00110, 00100}}
{
   001x0xx0x0 \ {
   00110xx000, 00100xx010, 001x001010, 001x0110x0, 001x0000x0, 00110xx0x0, 00100xx0x0}, 00100x1x00 \ {
   0010001x00, 00100x1000, 00100x1x00}}

{}
{00xx1 \ {00001, 00x01, 00101}, x0xx1 \ {00xx1, x0x01}}
{}

{x11x1 \ {01101, 11111}}
{10xx1 \ {10101, 10x01, 10001}, 101x1 \ {10111, 10101}, x0x11 \ {x0111, x0011, x0011}}
{
   10xx1x11x1 \ {
   10x11x1101, 10x01x1111, 10xx101101, 10xx111111, 10101x11x1, 10x01x11x1, 10001x11x1}, 101x1x11x1 \ {
   10111x1101, 10101x1111, 101x101101, 101x111111, 10111x11x1, 10101x11x1}, x0x11x1111 \ {
   x0x1111111, x0111x1111, x0011x1111, x0011x1111}}

{1x1xx \ {111xx, 101x0, 1x11x}, x101x \ {0101x, x1010, 11010}, 0xxx0 \ {0xx10, 00000, 00x00}}
{10x11 \ {10011}, x010x \ {10100, 0010x}, 00xxx \ {00x01, 00xx1, 00101}}
{
   10x111x111 \ {
   10x1111111, 10x111x111, 100111x111}, x010x1x10x \ {
   x01011x100, x01001x101, x010x1110x, x010x10100, 101001x10x, 0010x1x10x}, 00xxx1x1xx \ {
   00xx11x1x0, 00xx01x1x1, 00x1x1x10x, 00x0x1x11x, 00xxx111xx, 00xxx101x0, 00xxx1x11x, 00x011x1xx, 00xx11x1xx, 001011x1xx}, 10x11x1011 \ {
   10x1101011, 10011x1011}, 00x1xx101x \ {
   00x11x1010, 00x10x1011, 00x1x0101x, 00x1xx1010, 00x1x11010, 00x11x101x}, x01000xx00 \ {
   x010000000, x010000x00, 101000xx00, 001000xx00}, 00xx00xxx0 \ {
   00x100xx00, 00x000xx10, 00xx00xx10, 00xx000000, 00xx000x00}}

{xxx1x \ {01x11, 00010, x0x1x}}
{x1110 \ {01110, 11110}}
{
   x1110xxx10 \ {
   x111000010, x1110x0x10, 01110xxx10, 11110xxx10}}

{x0x10 \ {10110, 00010, 10010}, x001x \ {x0010, 00011, 10010}, 0xx1x \ {0011x, 0xx10, 00010}}
{11x0x \ {11x00, 11100}, 01x1x \ {01011, 01010, 0111x}}
{
   01x10x0x10 \ {
   01x1010110, 01x1000010, 01x1010010, 01010x0x10, 01110x0x10}, 01x1xx001x \ {
   01x11x0010, 01x10x0011, 01x1xx0010, 01x1x00011, 01x1x10010, 01011x001x, 01010x001x, 0111xx001x}, 01x1x0xx1x \ {
   01x110xx10, 01x100xx11, 01x1x0011x, 01x1x0xx10, 01x1x00010, 010110xx1x, 010100xx1x, 0111x0xx1x}}

{}
{x0x01 \ {10x01, 00x01, x0101}, 01xx0 \ {01000, 010x0, 01110}}
{}

{0x1x0 \ {01100, 00100, 01110}, xxx11 \ {01111, x1x11, 0x011}}
{}
{}

{}
{}
{}

{0xx1x \ {01010, 0xx11, 01110}, 0x1xx \ {01110, 001x0, 0x110}}
{010x0 \ {01010}}
{
   010100xx10 \ {
   0101001010, 0101001110, 010100xx10}, 010x00x1x0 \ {
   010100x100, 010000x110, 010x001110, 010x0001x0, 010x00x110, 010100x1x0}}

{11xxx \ {111x1, 11101}}
{}
{}

{xx000 \ {01000, x0000, 10000}}
{x000x \ {00001, x0001, x0001}}
{
   x0000xx000 \ {
   x000001000, x0000x0000, x000010000}}

{00x1x \ {0001x, 00x11, 0011x}, xxx10 \ {0xx10, 0x010, 1xx10}}
{0xxx1 \ {010x1, 01111, 00xx1}, 1xx01 \ {11x01, 10101, 10001}, 00x1x \ {00111, 0001x, 00x10}}
{
   0xx1100x11 \ {
   0xx1100011, 0xx1100x11, 0xx1100111, 0101100x11, 0111100x11, 00x1100x11}, 00x1x00x1x \ {
   00x1100x10, 00x1000x11, 00x1x0001x, 00x1x00x11, 00x1x0011x, 0011100x1x, 0001x00x1x, 00x1000x1x}, 00x10xxx10 \ {
   00x100xx10, 00x100x010, 00x101xx10, 00010xxx10, 00x10xxx10}}

{1x1xx \ {10101, 1011x, 1x1x0}, 001xx \ {0010x, 0011x, 001x0}}
{01xxx \ {010x1, 011x1}, 10x11 \ {10011, 10111, 10111}}
{
   01xxx1x1xx \ {
   01xx11x1x0, 01xx01x1x1, 01x1x1x10x, 01x0x1x11x, 01xxx10101, 01xxx1011x, 01xxx1x1x0, 010x11x1xx, 011x11x1xx}, 10x111x111 \ {
   10x1110111, 100111x111, 101111x111, 101111x111}, 01xxx001xx \ {
   01xx1001x0, 01xx0001x1, 01x1x0010x, 01x0x0011x, 01xxx0010x, 01xxx0011x, 01xxx001x0, 010x1001xx, 011x1001xx}, 10x1100111 \ {
   10x1100111, 1001100111, 1011100111, 1011100111}}

{010xx \ {01011, 01010, 0100x}, x1xx0 \ {11010, 01010, x1000}, 1x110 \ {11110, 10110}}
{}
{}

{0x100 \ {01100}, 0x100 \ {01100, 00100}, 00x11 \ {00111, 00011}}
{101xx \ {10110, 10100, 10111}, xxx0x \ {1x101, x1001, x010x}, x10x0 \ {01000, 110x0, 010x0}}
{
   101000x100 \ {
   1010001100, 101000x100}, xxx000x100 \ {
   xxx0001100, x01000x100}, x10000x100 \ {
   x100001100, 010000x100, 110000x100, 010000x100}, 1011100x11 \ {
   1011100111, 1011100011, 1011100x11}}

{}
{0xx00 \ {00x00, 00100}, x01x1 \ {101x1, 10101, 001x1}}
{}

{1xx11 \ {11011, 10x11, 11111}}
{10x01 \ {10101, 10001}, xxx1x \ {10110, 00x11, 1x111}}
{
   xxx111xx11 \ {
   xxx1111011, xxx1110x11, xxx1111111, 00x111xx11, 1x1111xx11}}

{0x000 \ {01000, 00000}, 0x1x0 \ {0x110, 0x100, 01100}}
{}
{}

{xx0x1 \ {00011, 11011, 000x1}}
{xxx10 \ {11010, 0xx10, 0xx10}, 1x0x1 \ {11011, 110x1, 10001}, 0011x \ {00110, 00111}}
{
   1x0x1xx0x1 \ {
   1x011xx001, 1x001xx011, 1x0x100011, 1x0x111011, 1x0x1000x1, 11011xx0x1, 110x1xx0x1, 10001xx0x1}, 00111xx011 \ {
   0011100011, 0011111011, 0011100011, 00111xx011}}

{x0xxx \ {10011, x001x, x00x0}}
{1x010 \ {11010, 10010, 10010}, x1x1x \ {11010, x1110, x1110}}
{
   1x010x0x10 \ {
   1x010x0010, 1x010x0010, 11010x0x10, 10010x0x10, 10010x0x10}, x1x1xx0x1x \ {
   x1x11x0x10, x1x10x0x11, x1x1x10011, x1x1xx001x, x1x1xx0010, 11010x0x1x, x1110x0x1x, x1110x0x1x}}

{10xx1 \ {100x1, 10101, 10001}, 11x0x \ {11001, 11000, 1110x}, x111x \ {x1111, 11110}}
{0x1x0 \ {01100, 0x110, 011x0}, x10x1 \ {11011, 010x1, x1001}}
{
   x10x110xx1 \ {
   x101110x01, x100110x11, x10x1100x1, x10x110101, x10x110001, 1101110xx1, 010x110xx1, x100110xx1}, 0x10011x00 \ {
   0x10011000, 0x10011100, 0110011x00, 0110011x00}, x100111x01 \ {
   x100111001, x100111101, 0100111x01, x100111x01}, 0x110x1110 \ {
   0x11011110, 0x110x1110, 01110x1110}, x1011x1111 \ {
   x1011x1111, 11011x1111, 01011x1111}}

{1x1xx \ {111xx, 1x1x1, 10111}}
{xxxxx \ {x0x10, 001x0, x01x0}}
{
   xxxxx1x1xx \ {
   xxxx11x1x0, xxxx01x1x1, xxx1x1x10x, xxx0x1x11x, xxxxx111xx, xxxxx1x1x1, xxxxx10111, x0x101x1xx, 001x01x1xx, x01x01x1xx}}

{0xx10 \ {01010, 0x110}}
{xxxxx \ {01x0x, 111x0, 11000}}
{
   xxx100xx10 \ {
   xxx1001010, xxx100x110, 111100xx10}}

{100xx \ {10011, 1001x, 100x1}, x01x0 \ {x0100, 001x0, 00100}}
{1x10x \ {11100, 10100, 1010x}, x111x \ {x1111, 1111x, 01110}, x1x11 \ {01011, x1011, 11011}}
{
   1x10x1000x \ {
   1x10110000, 1x10010001, 1x10x10001, 111001000x, 101001000x, 1010x1000x}, x111x1001x \ {
   x111110010, x111010011, x111x10011, x111x1001x, x111x10011, x11111001x, 1111x1001x, 011101001x}, x1x1110011 \ {
   x1x1110011, x1x1110011, x1x1110011, 0101110011, x101110011, 1101110011}, 1x100x0100 \ {
   1x100x0100, 1x10000100, 1x10000100, 11100x0100, 10100x0100, 10100x0100}, x1110x0110 \ {
   x111000110, 11110x0110, 01110x0110}}

{xxx1x \ {11x1x, 00x11, 0x110}, 100xx \ {10010, 10001, 10000}}
{xxxx0 \ {11100, 11x00, 01xx0}, xxx0x \ {01x00, 1010x, x1000}}
{
   xxx10xxx10 \ {
   xxx1011x10, xxx100x110, 01x10xxx10}, xxxx0100x0 \ {
   xxx1010000, xxx0010010, xxxx010010, xxxx010000, 11100100x0, 11x00100x0, 01xx0100x0}, xxx0x1000x \ {
   xxx0110000, xxx0010001, xxx0x10001, xxx0x10000, 01x001000x, 1010x1000x, x10001000x}}

{}
{1x10x \ {11100, 1010x, 1010x}, 10x11 \ {10111}}
{}

{x01x1 \ {x0111, 101x1, 10101}, 1xxx0 \ {1x000, 1xx00, 11xx0}}
{0xxx0 \ {011x0, 0x0x0, 00000}}
{
   0xxx01xxx0 \ {
   0xx101xx00, 0xx001xx10, 0xxx01x000, 0xxx01xx00, 0xxx011xx0, 011x01xxx0, 0x0x01xxx0, 000001xxx0}}

{0011x \ {00111, 00110}, 11x0x \ {1100x, 11x00, 11x00}}
{1110x \ {11100, 11101, 11101}, 1x0xx \ {110x1, 1x000, 1x000}}
{
   1x01x0011x \ {
   1x01100110, 1x01000111, 1x01x00111, 1x01x00110, 110110011x}, 1110x11x0x \ {
   1110111x00, 1110011x01, 1110x1100x, 1110x11x00, 1110x11x00, 1110011x0x, 1110111x0x, 1110111x0x}, 1x00x11x0x \ {
   1x00111x00, 1x00011x01, 1x00x1100x, 1x00x11x00, 1x00x11x00, 1100111x0x, 1x00011x0x, 1x00011x0x}}

{1xx0x \ {11101, 10000, 10000}, 00x01 \ {00001, 00101}}
{0x11x \ {0x110, 0111x, 00110}}
{}

{}
{x111x \ {01111, 11111}, 0x0x0 \ {000x0, 010x0, 01000}, xx110 \ {0x110, 11110, 00110}}
{}

{01x0x \ {0100x, 01101, 01101}}
{101x0 \ {10110, 10100}}
{
   1010001x00 \ {
   1010001000, 1010001x00}}

{xx0xx \ {x100x, x1010, 0x000}}
{1xx1x \ {10x10, 11010, 1xx10}, 11x00 \ {11100, 11000, 11000}, 0x01x \ {01011, 00010, 01010}}
{
   1xx1xxx01x \ {
   1xx11xx010, 1xx10xx011, 1xx1xx1010, 10x10xx01x, 11010xx01x, 1xx10xx01x}, 11x00xx000 \ {
   11x00x1000, 11x000x000, 11100xx000, 11000xx000, 11000xx000}, 0x01xxx01x \ {
   0x011xx010, 0x010xx011, 0x01xx1010, 01011xx01x, 00010xx01x, 01010xx01x}}

{x100x \ {01000, x1000, 01001}, x0x11 \ {00011, x0111}}
{0111x \ {01111, 01110, 01110}, 0x01x \ {01010, 0001x, 0101x}}
{
   01111x0x11 \ {
   0111100011, 01111x0111, 01111x0x11}, 0x011x0x11 \ {
   0x01100011, 0x011x0111, 00011x0x11, 01011x0x11}}

{x1x1x \ {01x1x, 0111x, 1101x}}
{}
{}

{0xxx0 \ {0x0x0, 01010, 0x010}}
{xxx01 \ {10x01, 1x101, 0xx01}, 00x1x \ {00110, 00011, 0011x}}
{
   00x100xx10 \ {
   00x100x010, 00x1001010, 00x100x010, 001100xx10, 001100xx10}}

{0xxx0 \ {0x000, 000x0, 00xx0}, xx1xx \ {1x10x, 01111, 01111}}
{x1xx0 \ {110x0, x10x0, x1000}, x0xx0 \ {00100, 00000, 00110}}
{
   x1xx00xxx0 \ {
   x1x100xx00, x1x000xx10, x1xx00x000, x1xx0000x0, x1xx000xx0, 110x00xxx0, x10x00xxx0, x10000xxx0}, x0xx00xxx0 \ {
   x0x100xx00, x0x000xx10, x0xx00x000, x0xx0000x0, x0xx000xx0, 001000xxx0, 000000xxx0, 001100xxx0}, x1xx0xx1x0 \ {
   x1x10xx100, x1x00xx110, x1xx01x100, 110x0xx1x0, x10x0xx1x0, x1000xx1x0}, x0xx0xx1x0 \ {
   x0x10xx100, x0x00xx110, x0xx01x100, 00100xx1x0, 00000xx1x0, 00110xx1x0}}

{x0x0x \ {10101, 10x00, 00x00}, x1011 \ {11011, 01011}}
{11x00 \ {11000}, x11x0 \ {x1100, 01100, 01110}, 1x100 \ {10100}}
{
   11x00x0x00 \ {
   11x0010x00, 11x0000x00, 11000x0x00}, x1100x0x00 \ {
   x110010x00, x110000x00, x1100x0x00, 01100x0x00}, 1x100x0x00 \ {
   1x10010x00, 1x10000x00, 10100x0x00}}

{001xx \ {00101, 001x0, 00111}}
{01x0x \ {01000, 0110x, 01x01}, 100x0 \ {10000}}
{
   01x0x0010x \ {
   01x0100100, 01x0000101, 01x0x00101, 01x0x00100, 010000010x, 0110x0010x, 01x010010x}, 100x0001x0 \ {
   1001000100, 1000000110, 100x0001x0, 10000001x0}}

{110xx \ {110x1, 1101x}, 00xx1 \ {00001, 00x11}}
{11xxx \ {11101, 11110, 111x0}, x01x1 \ {10101, 001x1, 101x1}}
{
   11xxx110xx \ {
   11xx1110x0, 11xx0110x1, 11x1x1100x, 11x0x1101x, 11xxx110x1, 11xxx1101x, 11101110xx, 11110110xx, 111x0110xx}, x01x1110x1 \ {
   x011111001, x010111011, x01x1110x1, x01x111011, 10101110x1, 001x1110x1, 101x1110x1}, 11xx100xx1 \ {
   11x1100x01, 11x0100x11, 11xx100001, 11xx100x11, 1110100xx1}, x01x100xx1 \ {
   x011100x01, x010100x11, x01x100001, x01x100x11, 1010100xx1, 001x100xx1, 101x100xx1}}

{x01x0 \ {00100, 00110, 10110}}
{x11x0 \ {x1110, 01110}}
{
   x11x0x01x0 \ {
   x1110x0100, x1100x0110, x11x000100, x11x000110, x11x010110, x1110x01x0, 01110x01x0}}

{xx10x \ {11100, 10100, 1110x}, 1110x \ {11100, 11101}, 1110x \ {11101, 11100, 11100}}
{x1x10 \ {11x10, 11010, x1110}}
{}

{0x010 \ {00010}, 1x0x1 \ {10001, 110x1, 11011}}
{x101x \ {x1011, 01011, 11011}, x110x \ {1110x, 01101}}
{
   x10100x010 \ {
   x101000010}, x10111x011 \ {
   x101111011, x101111011, x10111x011, 010111x011, 110111x011}, x11011x001 \ {
   x110110001, x110111001, 111011x001, 011011x001}}

{01x1x \ {0111x, 01010, 01110}}
{}
{}

{00xxx \ {00x1x, 0000x}}
{x00x1 \ {00011, 00001}, x00x1 \ {000x1, 10011, 00001}}
{
   x00x100xx1 \ {
   x001100x01, x000100x11, x00x100x11, x00x100001, 0001100xx1, 0000100xx1}}

{1x101 \ {10101, 11101}}
{10xx1 \ {10111, 10001, 101x1}}
{
   10x011x101 \ {
   10x0110101, 10x0111101, 100011x101, 101011x101}}

{1x1xx \ {11100, 111xx, 10111}}
{xx0x1 \ {x0001, 110x1, x10x1}, 1x110 \ {11110}}
{
   xx0x11x1x1 \ {
   xx0111x101, xx0011x111, xx0x1111x1, xx0x110111, x00011x1x1, 110x11x1x1, x10x11x1x1}, 1x1101x110 \ {
   1x11011110, 111101x110}}

{xx0xx \ {110xx, x000x, 01010}}
{1x10x \ {1x101, 1010x, 1x100}}
{
   1x10xxx00x \ {
   1x101xx000, 1x100xx001, 1x10x1100x, 1x10xx000x, 1x101xx00x, 1010xxx00x, 1x100xx00x}}

{x111x \ {0111x, x1111, 01111}}
{xx1x0 \ {10100, 11100, 111x0}, xx0xx \ {010x1, 1001x, 10010}}
{
   xx110x1110 \ {
   xx11001110, 11110x1110}, xx01xx111x \ {
   xx011x1110, xx010x1111, xx01x0111x, xx01xx1111, xx01x01111, 01011x111x, 1001xx111x, 10010x111x}}

{1x10x \ {1110x, 1x100, 1010x}, xx0xx \ {01000, x10x0, x0011}}
{}
{}

{110x1 \ {11001, 11011, 11011}, 0xx10 \ {00110, 01110, 00x10}, 0x1x0 \ {011x0, 001x0, 00100}}
{1xx00 \ {10100, 11100, 11000}, xx10x \ {0x10x}}
{
   xx10111001 \ {
   xx10111001, 0x10111001}, 1xx000x100 \ {
   1xx0001100, 1xx0000100, 1xx0000100, 101000x100, 111000x100, 110000x100}, xx1000x100 \ {
   xx10001100, xx10000100, xx10000100, 0x1000x100}}

{xx011 \ {01011, x0011, 10011}}
{1xx11 \ {10x11, 11011, 11011}}
{
   1xx11xx011 \ {
   1xx1101011, 1xx11x0011, 1xx1110011, 10x11xx011, 11011xx011, 11011xx011}}

{xx110 \ {x0110, 01110, 11110}}
{00x01 \ {00101, 00001}}
{}

{x0xxx \ {10011, 001xx, 00xx0}}
{1xx0x \ {1000x, 1x000, 11x0x}}
{
   1xx0xx0x0x \ {
   1xx01x0x00, 1xx00x0x01, 1xx0x0010x, 1xx0x00x00, 1000xx0x0x, 1x000x0x0x, 11x0xx0x0x}}

{10xx1 \ {10101, 101x1}, 1010x \ {10100, 10101, 10101}}
{10xx0 \ {10x00, 10010, 10110}}
{
   10x0010100 \ {
   10x0010100, 10x0010100}}

{xxx1x \ {0xx1x, 10x1x, x0x1x}, 1xxx1 \ {1x111, 11x11, 11xx1}}
{01x1x \ {01110, 0111x, 01010}}
{
   01x1xxxx1x \ {
   01x11xxx10, 01x10xxx11, 01x1x0xx1x, 01x1x10x1x, 01x1xx0x1x, 01110xxx1x, 0111xxxx1x, 01010xxx1x}, 01x111xx11 \ {
   01x111x111, 01x1111x11, 01x1111x11, 011111xx11}}

{xx110 \ {x1110, 1x110, 00110}, 10xx0 \ {100x0, 10100, 10110}}
{x01xx \ {10111, 00101, x0110}}
{
   x0110xx110 \ {
   x0110x1110, x01101x110, x011000110, x0110xx110}, x01x010xx0 \ {
   x011010x00, x010010x10, x01x0100x0, x01x010100, x01x010110, x011010xx0}}

{0x10x \ {00101, 01101, 00100}, x011x \ {00111, x0110, 1011x}}
{0xxx0 \ {01000, 01xx0, 0x000}}
{
   0xx000x100 \ {
   0xx0000100, 010000x100, 01x000x100, 0x0000x100}, 0xx10x0110 \ {
   0xx10x0110, 0xx1010110, 01x10x0110}}

{xxx11 \ {00011, x0111, 1xx11}}
{x1x00 \ {01000}, x1xx1 \ {x10x1, 01111}}
{
   x1x11xxx11 \ {
   x1x1100011, x1x11x0111, x1x111xx11, x1011xxx11, 01111xxx11}}

{}
{111xx \ {111x1, 11111, 11110}}
{}

{xx0x1 \ {010x1, 11001, 000x1}, x11x0 \ {111x0, 11100, 01110}}
{00x1x \ {00x10, 00110, 00011}, 0xxx1 \ {01xx1, 0x111, 00001}}
{
   00x11xx011 \ {
   00x1101011, 00x1100011, 00011xx011}, 0xxx1xx0x1 \ {
   0xx11xx001, 0xx01xx011, 0xxx1010x1, 0xxx111001, 0xxx1000x1, 01xx1xx0x1, 0x111xx0x1, 00001xx0x1}, 00x10x1110 \ {
   00x1011110, 00x1001110, 00x10x1110, 00110x1110}}

{x1x01 \ {11101, 11001, x1001}, 1xxx0 \ {10100, 11xx0}}
{00xxx \ {000xx, 00xx1}, x100x \ {01000, x1001}}
{
   00x01x1x01 \ {
   00x0111101, 00x0111001, 00x01x1001, 00001x1x01, 00x01x1x01}, x1001x1x01 \ {
   x100111101, x100111001, x1001x1001, x1001x1x01}, 00xx01xxx0 \ {
   00x101xx00, 00x001xx10, 00xx010100, 00xx011xx0, 000x01xxx0}, x10001xx00 \ {
   x100010100, x100011x00, 010001xx00}}

{xx01x \ {00010, x001x, 11011}}
{10xx1 \ {101x1, 10101, 10111}, 1x11x \ {11111, 10111}}
{
   10x11xx011 \ {
   10x11x0011, 10x1111011, 10111xx011, 10111xx011}, 1x11xxx01x \ {
   1x111xx010, 1x110xx011, 1x11x00010, 1x11xx001x, 1x11x11011, 11111xx01x, 10111xx01x}}

{01x1x \ {0101x, 01010, 01111}, 10x0x \ {10000, 10101, 10001}}
{}
{}

{}
{xx01x \ {00010, 11010, 1x011}}
{}

{x1001 \ {11001, 01001}, xx100 \ {11100, 0x100, 01100}}
{x010x \ {10100, x0100, 10101}}
{
   x0101x1001 \ {
   x010111001, x010101001, 10101x1001}, x0100xx100 \ {
   x010011100, x01000x100, x010001100, 10100xx100, x0100xx100}}

{}
{x110x \ {01101, 0110x, 01100}, 11x0x \ {11101, 1100x}, xx10x \ {x010x, 1x100, x0100}}
{}

{0011x \ {00111}, x1x0x \ {01x0x, 01001, 01000}}
{110x0 \ {11010, 11000, 11000}, x1xx1 \ {11xx1, 01x01, 11001}, x1x01 \ {01001, x1101}}
{
   1101000110 \ {
   1101000110}, x1x1100111 \ {
   x1x1100111, 11x1100111}, 11000x1x00 \ {
   1100001x00, 1100001000, 11000x1x00, 11000x1x00}, x1x01x1x01 \ {
   x1x0101x01, x1x0101001, 11x01x1x01, 01x01x1x01, 11001x1x01}, x1x01x1x01 \ {
   x1x0101x01, x1x0101001, 01001x1x01, x1101x1x01}}

{x0xx1 \ {00x11, 00xx1, 10101}, 1xx11 \ {11011, 11x11, 11x11}}
{}
{}

{110xx \ {11000, 1101x}}
{xx1xx \ {001x1, 0x11x, 1x100}, 0x1xx \ {0x111, 0x10x, 01100}, 00xx1 \ {00x11, 00111, 00011}}
{
   xx1xx110xx \ {
   xx1x1110x0, xx1x0110x1, xx11x1100x, xx10x1101x, xx1xx11000, xx1xx1101x, 001x1110xx, 0x11x110xx, 1x100110xx}, 0x1xx110xx \ {
   0x1x1110x0, 0x1x0110x1, 0x11x1100x, 0x10x1101x, 0x1xx11000, 0x1xx1101x, 0x111110xx, 0x10x110xx, 01100110xx}, 00xx1110x1 \ {
   00x1111001, 00x0111011, 00xx111011, 00x11110x1, 00111110x1, 00011110x1}}

{x1x0x \ {11x01, x1000, x110x}, x010x \ {10100, x0100, 00101}, 01xxx \ {01011, 01x11, 0111x}}
{101xx \ {101x1, 1010x, 10110}, 11x1x \ {1101x, 11011}}
{
   1010xx1x0x \ {
   10101x1x00, 10100x1x01, 1010x11x01, 1010xx1000, 1010xx110x, 10101x1x0x, 1010xx1x0x}, 1010xx010x \ {
   10101x0100, 10100x0101, 1010x10100, 1010xx0100, 1010x00101, 10101x010x, 1010xx010x}, 101xx01xxx \ {
   101x101xx0, 101x001xx1, 1011x01x0x, 1010x01x1x, 101xx01011, 101xx01x11, 101xx0111x, 101x101xxx, 1010x01xxx, 1011001xxx}, 11x1x01x1x \ {
   11x1101x10, 11x1001x11, 11x1x01011, 11x1x01x11, 11x1x0111x, 1101x01x1x, 1101101x1x}}

{10x00 \ {10100, 10000}}
{x01xx \ {10101, 00111, 0011x}}
{
   x010010x00 \ {
   x010010100, x010010000}}

{10xxx \ {10111, 10001, 10x10}}
{x1111 \ {01111, 11111}}
{
   x111110x11 \ {
   x111110111, 0111110x11, 1111110x11}}

{1x000 \ {11000, 10000, 10000}}
{00x0x \ {0010x, 0000x, 0000x}}
{
   00x001x000 \ {
   00x0011000, 00x0010000, 00x0010000, 001001x000, 000001x000, 000001x000}}

{}
{xxx1x \ {01011, x0x11, 1x01x}, 0x10x \ {0110x, 0x100, 0010x}, 1x01x \ {1101x, 11010}}
{}

{x0x00 \ {00100, 10x00, x0000}, x01x1 \ {00101, 10101, 00111}}
{00x0x \ {0000x, 0010x}, 1x0x1 \ {10001, 1x001}}
{
   00x00x0x00 \ {
   00x0000100, 00x0010x00, 00x00x0000, 00000x0x00, 00100x0x00}, 00x01x0101 \ {
   00x0100101, 00x0110101, 00001x0101, 00101x0101}, 1x0x1x01x1 \ {
   1x011x0101, 1x001x0111, 1x0x100101, 1x0x110101, 1x0x100111, 10001x01x1, 1x001x01x1}}

{00xx1 \ {000x1, 00001}}
{x1100 \ {11100}}
{}

{1x10x \ {1x100, 10100, 1x101}, x1xx0 \ {01x10, x10x0, x1000}}
{xx00x \ {0100x, xx001, x100x}}
{
   xx00x1x10x \ {
   xx0011x100, xx0001x101, xx00x1x100, xx00x10100, xx00x1x101, 0100x1x10x, xx0011x10x, x100x1x10x}, xx000x1x00 \ {
   xx000x1000, xx000x1000, 01000x1x00, x1000x1x00}}

{}
{00x0x \ {00100, 00x00, 00x00}, x0x11 \ {x0011, 00111, 10011}}
{}

{x001x \ {00010, 10010, 00011}}
{xxxxx \ {x0010, 11x11, 1xx00}, xxx10 \ {1x010, x1110, 00110}}
{
   xxx1xx001x \ {
   xxx11x0010, xxx10x0011, xxx1x00010, xxx1x10010, xxx1x00011, x0010x001x, 11x11x001x}, xxx10x0010 \ {
   xxx1000010, xxx1010010, 1x010x0010, x1110x0010, 00110x0010}}

{xxx00 \ {x0x00, x1100, x1000}}
{xx1x1 \ {11101, 00111, 101x1}, x1x11 \ {11x11, 01x11}}
{}

{0110x \ {01100, 01101}}
{}
{}

{0x101 \ {01101}, 10x01 \ {10001, 10101}}
{01x1x \ {0111x, 01x11, 01111}}
{}

{xx0x1 \ {000x1, 10011}, 111xx \ {11101, 11111, 1111x}, x0x00 \ {00100, 10x00, 00000}}
{00x1x \ {00111, 0011x}}
{
   00x11xx011 \ {
   00x1100011, 00x1110011, 00111xx011, 00111xx011}, 00x1x1111x \ {
   00x1111110, 00x1011111, 00x1x11111, 00x1x1111x, 001111111x, 0011x1111x}}

{x1x10 \ {x1110, 11110, x1010}, x11x0 \ {01100, 01110}}
{0xx10 \ {0x110, 00x10, 00x10}}
{
   0xx10x1x10 \ {
   0xx10x1110, 0xx1011110, 0xx10x1010, 0x110x1x10, 00x10x1x10, 00x10x1x10}, 0xx10x1110 \ {
   0xx1001110, 0x110x1110, 00x10x1110, 00x10x1110}}

{x110x \ {11100, x1100, x1101}}
{1xx1x \ {10010, 1x011, 1x01x}}
{}

{0100x \ {01000, 01001, 01001}, 1x0xx \ {1000x, 1101x, 110x1}}
{x110x \ {11101, 0110x}, 11xxx \ {11x10, 11x11, 11011}}
{
   x110x0100x \ {
   x110101000, x110001001, x110x01000, x110x01001, x110x01001, 111010100x, 0110x0100x}, 11x0x0100x \ {
   11x0101000, 11x0001001, 11x0x01000, 11x0x01001, 11x0x01001}, x110x1x00x \ {
   x11011x000, x11001x001, x110x1000x, x110x11001, 111011x00x, 0110x1x00x}, 11xxx1x0xx \ {
   11xx11x0x0, 11xx01x0x1, 11x1x1x00x, 11x0x1x01x, 11xxx1000x, 11xxx1101x, 11xxx110x1, 11x101x0xx, 11x111x0xx, 110111x0xx}}

{01xxx \ {01010, 01x0x, 01111}}
{x00x1 \ {00011, 100x1, 00001}}
{
   x00x101xx1 \ {
   x001101x01, x000101x11, x00x101x01, x00x101111, 0001101xx1, 100x101xx1, 0000101xx1}}

{1x0x1 \ {10001, 1x011, 100x1}, x0110 \ {10110, 00110, 00110}}
{1xxxx \ {11100, 101xx, 101xx}, x1xx1 \ {111x1, 11001, 010x1}}
{
   1xxx11x0x1 \ {
   1xx111x001, 1xx011x011, 1xxx110001, 1xxx11x011, 1xxx1100x1, 101x11x0x1, 101x11x0x1}, x1xx11x0x1 \ {
   x1x111x001, x1x011x011, x1xx110001, x1xx11x011, x1xx1100x1, 111x11x0x1, 110011x0x1, 010x11x0x1}, 1xx10x0110 \ {
   1xx1010110, 1xx1000110, 1xx1000110, 10110x0110, 10110x0110}}

{xx111 \ {01111, 10111, 10111}, 0xx10 \ {00x10, 00010, 01110}, x0x0x \ {1010x, 10001, x000x}}
{101xx \ {1011x, 101x0, 10110}, x111x \ {11111, 01111, 01111}, x11x1 \ {x1111, x1101, x1101}}
{
   10111xx111 \ {
   1011101111, 1011110111, 1011110111, 10111xx111}, x1111xx111 \ {
   x111101111, x111110111, x111110111, 11111xx111, 01111xx111, 01111xx111}, 101100xx10 \ {
   1011000x10, 1011000010, 1011001110, 101100xx10, 101100xx10, 101100xx10}, x11100xx10 \ {
   x111000x10, x111000010, x111001110}, 1010xx0x0x \ {
   10101x0x00, 10100x0x01, 1010x1010x, 1010x10001, 1010xx000x, 10100x0x0x}, x1101x0x01 \ {
   x110110101, x110110001, x1101x0001, x1101x0x01, x1101x0x01}}

{}
{x0xx1 \ {100x1, 000x1, 00x01}, 100xx \ {100x0, 10001, 100x1}}
{}

{x11xx \ {x111x, 011x0, x11x1}, 1xxxx \ {11xxx, 1111x, 11111}, 00xx0 \ {00010, 00100, 00110}}
{01xxx \ {011x0, 01101, 010x1}, 11xx0 \ {11000, 11010}}
{
   01xxxx11xx \ {
   01xx1x11x0, 01xx0x11x1, 01x1xx110x, 01x0xx111x, 01xxxx111x, 01xxx011x0, 01xxxx11x1, 011x0x11xx, 01101x11xx, 010x1x11xx}, 11xx0x11x0 \ {
   11x10x1100, 11x00x1110, 11xx0x1110, 11xx0011x0, 11000x11x0, 11010x11x0}, 01xxx1xxxx \ {
   01xx11xxx0, 01xx01xxx1, 01x1x1xx0x, 01x0x1xx1x, 01xxx11xxx, 01xxx1111x, 01xxx11111, 011x01xxxx, 011011xxxx, 010x11xxxx}, 11xx01xxx0 \ {
   11x101xx00, 11x001xx10, 11xx011xx0, 11xx011110, 110001xxx0, 110101xxx0}, 01xx000xx0 \ {
   01x1000x00, 01x0000x10, 01xx000010, 01xx000100, 01xx000110, 011x000xx0}, 11xx000xx0 \ {
   11x1000x00, 11x0000x10, 11xx000010, 11xx000100, 11xx000110, 1100000xx0, 1101000xx0}}

{xxx01 \ {0x101, x0x01, 00001}, x01x0 \ {00100, 101x0}}
{xxx1x \ {x1x10, 01111, x0x10}}
{
   xxx10x0110 \ {
   xxx1010110, x1x10x0110, x0x10x0110}}

{x1xx0 \ {01x10, 11x10, x1x00}, x11x1 \ {011x1, 11101, 11101}}
{x010x \ {00101, x0101}, 01xxx \ {01011, 01x10, 0101x}, x00x1 \ {00001, 10011, 000x1}}
{
   x0100x1x00 \ {
   x0100x1x00}, 01xx0x1xx0 \ {
   01x10x1x00, 01x00x1x10, 01xx001x10, 01xx011x10, 01xx0x1x00, 01x10x1xx0, 01010x1xx0}, x0101x1101 \ {
   x010101101, x010111101, x010111101, 00101x1101, x0101x1101}, 01xx1x11x1 \ {
   01x11x1101, 01x01x1111, 01xx1011x1, 01xx111101, 01xx111101, 01011x11x1, 01011x11x1}, x00x1x11x1 \ {
   x0011x1101, x0001x1111, x00x1011x1, x00x111101, x00x111101, 00001x11x1, 10011x11x1, 000x1x11x1}}

{}
{x1x1x \ {x1110, 01010, 1101x}}
{}

{xx0x0 \ {x10x0, 10000, 01010}, 1x1x1 \ {11101, 11111, 10101}}
{x0xx0 \ {x0x00, 00x10}}
{
   x0xx0xx0x0 \ {
   x0x10xx000, x0x00xx010, x0xx0x10x0, x0xx010000, x0xx001010, x0x00xx0x0, 00x10xx0x0}}

{}
{xx0xx \ {x00x1, 11010, x1000}}
{}

{001xx \ {00100, 0010x, 0011x}, 01x0x \ {01100, 01x00, 01x00}}
{xx0xx \ {00001, 11011, 00010}}
{
   xx0xx001xx \ {
   xx0x1001x0, xx0x0001x1, xx01x0010x, xx00x0011x, xx0xx00100, xx0xx0010x, xx0xx0011x, 00001001xx, 11011001xx, 00010001xx}, xx00x01x0x \ {
   xx00101x00, xx00001x01, xx00x01100, xx00x01x00, xx00x01x00, 0000101x0x}}

{110x0 \ {11010, 11000}, x100x \ {01001, 1100x, 0100x}}
{1x001 \ {10001, 11001, 11001}, 1011x \ {10111, 10110, 10110}}
{
   1011011010 \ {
   1011011010, 1011011010, 1011011010}, 1x001x1001 \ {
   1x00101001, 1x00111001, 1x00101001, 10001x1001, 11001x1001, 11001x1001}}

{xx0x0 \ {x1000, 11010, 01010}}
{1x0xx \ {1x0x1, 1001x, 10000}, 011x1 \ {01101}, xx10x \ {xx101, 0110x, x010x}}
{
   1x0x0xx0x0 \ {
   1x010xx000, 1x000xx010, 1x0x0x1000, 1x0x011010, 1x0x001010, 10010xx0x0, 10000xx0x0}, xx100xx000 \ {
   xx100x1000, 01100xx000, x0100xx000}}

{x01x0 \ {x0110, 00100}}
{0x0xx \ {00000, 010x0, 01001}, 01x11 \ {01111, 01011}, 01xx0 \ {01100, 01010, 01010}}
{
   0x0x0x01x0 \ {
   0x010x0100, 0x000x0110, 0x0x0x0110, 0x0x000100, 00000x01x0, 010x0x01x0}, 01xx0x01x0 \ {
   01x10x0100, 01x00x0110, 01xx0x0110, 01xx000100, 01100x01x0, 01010x01x0, 01010x01x0}}

{1xx10 \ {10x10, 10110, 10110}, xxx1x \ {1001x, 0011x, x1010}, 1xx10 \ {10110, 1x110, 11010}}
{0x10x \ {01101, 00100, 01100}}
{}

{0x1x0 \ {01110, 011x0, 0x110}, x100x \ {11000, 0100x, 01001}, x11xx \ {011x0, 11111, x11x1}}
{011x0 \ {01110}, x1xxx \ {11x10, 01100, 110x0}}
{
   011x00x1x0 \ {
   011100x100, 011000x110, 011x001110, 011x0011x0, 011x00x110, 011100x1x0}, x1xx00x1x0 \ {
   x1x100x100, x1x000x110, x1xx001110, x1xx0011x0, x1xx00x110, 11x100x1x0, 011000x1x0, 110x00x1x0}, 01100x1000 \ {
   0110011000, 0110001000}, x1x0xx100x \ {
   x1x01x1000, x1x00x1001, x1x0x11000, x1x0x0100x, x1x0x01001, 01100x100x, 11000x100x}, 011x0x11x0 \ {
   01110x1100, 01100x1110, 011x0011x0, 01110x11x0}, x1xxxx11xx \ {
   x1xx1x11x0, x1xx0x11x1, x1x1xx110x, x1x0xx111x, x1xxx011x0, x1xxx11111, x1xxxx11x1, 11x10x11xx, 01100x11xx, 110x0x11xx}}

{0x10x \ {0010x, 01101, 00101}, x1000 \ {11000, 01000}}
{11xxx \ {11000, 11010, 11x00}, xx001 \ {00001, 1x001}}
{
   11x0x0x10x \ {
   11x010x100, 11x000x101, 11x0x0010x, 11x0x01101, 11x0x00101, 110000x10x, 11x000x10x}, xx0010x101 \ {
   xx00100101, xx00101101, xx00100101, 000010x101, 1x0010x101}, 11x00x1000 \ {
   11x0011000, 11x0001000, 11000x1000, 11x00x1000}}

{10x0x \ {10101, 10000}, 0xx0x \ {00x01, 01x00, 01100}}
{xx011 \ {01011, x1011}, x011x \ {x0110, 1011x, 10110}}
{}

{x0xx1 \ {10011, x01x1, 10101}, x1xxx \ {x10x1, 11011, 110x0}}
{xx0x0 \ {01010, 1x000, x1010}, 0xxx0 \ {01110, 00000, 001x0}, 10xx1 \ {10111, 101x1, 10101}}
{
   10xx1x0xx1 \ {
   10x11x0x01, 10x01x0x11, 10xx110011, 10xx1x01x1, 10xx110101, 10111x0xx1, 101x1x0xx1, 10101x0xx1}, xx0x0x1xx0 \ {
   xx010x1x00, xx000x1x10, xx0x0110x0, 01010x1xx0, 1x000x1xx0, x1010x1xx0}, 0xxx0x1xx0 \ {
   0xx10x1x00, 0xx00x1x10, 0xxx0110x0, 01110x1xx0, 00000x1xx0, 001x0x1xx0}, 10xx1x1xx1 \ {
   10x11x1x01, 10x01x1x11, 10xx1x10x1, 10xx111011, 10111x1xx1, 101x1x1xx1, 10101x1xx1}}

{x0x00 \ {10x00, 00x00, x0000}, 0xx00 \ {00000, 01000, 00100}}
{1000x \ {10001, 10000}}
{
   10000x0x00 \ {
   1000010x00, 1000000x00, 10000x0000, 10000x0x00}, 100000xx00 \ {
   1000000000, 1000001000, 1000000100, 100000xx00}}

{x101x \ {01010, 11011, 11011}, 10xxx \ {1001x, 100xx, 10000}}
{111xx \ {11110, 11111, 1111x}, 011xx \ {01110, 01101, 011x1}}
{
   1111xx101x \ {
   11111x1010, 11110x1011, 1111x01010, 1111x11011, 1111x11011, 11110x101x, 11111x101x, 1111xx101x}, 0111xx101x \ {
   01111x1010, 01110x1011, 0111x01010, 0111x11011, 0111x11011, 01110x101x, 01111x101x}, 111xx10xxx \ {
   111x110xx0, 111x010xx1, 1111x10x0x, 1110x10x1x, 111xx1001x, 111xx100xx, 111xx10000, 1111010xxx, 1111110xxx, 1111x10xxx}, 011xx10xxx \ {
   011x110xx0, 011x010xx1, 0111x10x0x, 0110x10x1x, 011xx1001x, 011xx100xx, 011xx10000, 0111010xxx, 0110110xxx, 011x110xxx}}

{x1x11 \ {01011, 01x11}, xxx01 \ {01x01, 00101, x0x01}}
{xx111 \ {10111, x1111, x1111}, x1xx1 \ {01x11, 11x11, x1x11}}
{
   xx111x1x11 \ {
   xx11101011, xx11101x11, 10111x1x11, x1111x1x11, x1111x1x11}, x1x11x1x11 \ {
   x1x1101011, x1x1101x11, 01x11x1x11, 11x11x1x11, x1x11x1x11}, x1x01xxx01 \ {
   x1x0101x01, x1x0100101, x1x01x0x01}}

{}
{x11xx \ {1110x, x11x0, 111x1}, 00x0x \ {00x01, 0010x, 00100}}
{}

{1xxx1 \ {1x001, 1xx01, 11x11}, x1xxx \ {01001, x100x, 11001}}
{xxx10 \ {x0010, x0x10, xx010}, 1xx10 \ {10110, 11110, 11110}}
{
   xxx10x1x10 \ {
   x0010x1x10, x0x10x1x10, xx010x1x10}, 1xx10x1x10 \ {
   10110x1x10, 11110x1x10, 11110x1x10}}

{x11x0 \ {01100, 011x0, 11110}, 0100x \ {01000, 01001}}
{010x0 \ {01000, 01010, 01010}, 0xx01 \ {0x001, 00101}}
{
   010x0x11x0 \ {
   01010x1100, 01000x1110, 010x001100, 010x0011x0, 010x011110, 01000x11x0, 01010x11x0, 01010x11x0}, 0100001000 \ {
   0100001000, 0100001000}, 0xx0101001 \ {
   0xx0101001, 0x00101001, 0010101001}}

{1x000 \ {10000, 11000}, x0x10 \ {00110, 10110}, 01xx0 \ {01000, 01010}}
{}
{}

{0xx1x \ {0001x, 00x10, 0x01x}, 1x1x1 \ {10111, 101x1, 10101}}
{x0xxx \ {10xx1, x0001, 101x1}, 00x1x \ {00x11, 00011, 00011}}
{
   x0x1x0xx1x \ {
   x0x110xx10, x0x100xx11, x0x1x0001x, x0x1x00x10, x0x1x0x01x, 10x110xx1x, 101110xx1x}, 00x1x0xx1x \ {
   00x110xx10, 00x100xx11, 00x1x0001x, 00x1x00x10, 00x1x0x01x, 00x110xx1x, 000110xx1x, 000110xx1x}, x0xx11x1x1 \ {
   x0x111x101, x0x011x111, x0xx110111, x0xx1101x1, x0xx110101, 10xx11x1x1, x00011x1x1, 101x11x1x1}, 00x111x111 \ {
   00x1110111, 00x1110111, 00x111x111, 000111x111, 000111x111}}

{x10x0 \ {11000, 010x0, 01000}, x11x0 \ {x1110, 01110, 11100}, x001x \ {x0011, 00011, 10010}}
{0x011 \ {01011}}
{
   0x011x0011 \ {
   0x011x0011, 0x01100011, 01011x0011}}

{111x1 \ {11111}}
{x111x \ {0111x, x1110, 11111}, 1xx10 \ {11010, 10x10, 1x110}}
{
   x111111111 \ {
   x111111111, 0111111111, 1111111111}}

{110x0 \ {11010, 11000}}
{x10xx \ {110x1, 010x0, x1000}}
{
   x10x0110x0 \ {
   x101011000, x100011010, x10x011010, x10x011000, 010x0110x0, x1000110x0}}

{x11xx \ {x1100, x1101}, x0xx1 \ {10001, 101x1, x0x11}, 11x0x \ {1110x, 11100, 11100}}
{x0xxx \ {00xx0, 000x0, 101x1}}
{
   x0xxxx11xx \ {
   x0xx1x11x0, x0xx0x11x1, x0x1xx110x, x0x0xx111x, x0xxxx1100, x0xxxx1101, 00xx0x11xx, 000x0x11xx, 101x1x11xx}, x0xx1x0xx1 \ {
   x0x11x0x01, x0x01x0x11, x0xx110001, x0xx1101x1, x0xx1x0x11, 101x1x0xx1}, x0x0x11x0x \ {
   x0x0111x00, x0x0011x01, x0x0x1110x, x0x0x11100, x0x0x11100, 00x0011x0x, 0000011x0x, 1010111x0x}}

{1000x \ {10001, 10000}}
{}
{}

{xx001 \ {x1001, 01001, 00001}, x1x11 \ {11x11, 01111}, 0xx00 \ {00000, 0x000, 00100}}
{x01xx \ {x0111, 00101, 10111}, 110xx \ {11001, 11011, 1101x}}
{
   x0101xx001 \ {
   x0101x1001, x010101001, x010100001, 00101xx001}, 11001xx001 \ {
   11001x1001, 1100101001, 1100100001, 11001xx001}, x0111x1x11 \ {
   x011111x11, x011101111, x0111x1x11, 10111x1x11}, 11011x1x11 \ {
   1101111x11, 1101101111, 11011x1x11, 11011x1x11}, x01000xx00 \ {
   x010000000, x01000x000, x010000100}, 110000xx00 \ {
   1100000000, 110000x000, 1100000100}}

{0xxx1 \ {010x1, 00x01, 000x1}, x0xxx \ {x0x00, 00101, 10x11}}
{00x00 \ {00100, 00000}, x11xx \ {11101, 011x1, 011xx}}
{
   x11x10xxx1 \ {
   x11110xx01, x11010xx11, x11x1010x1, x11x100x01, x11x1000x1, 111010xxx1, 011x10xxx1, 011x10xxx1}, 00x00x0x00 \ {
   00x00x0x00, 00100x0x00, 00000x0x00}, x11xxx0xxx \ {
   x11x1x0xx0, x11x0x0xx1, x111xx0x0x, x110xx0x1x, x11xxx0x00, x11xx00101, x11xx10x11, 11101x0xxx, 011x1x0xxx, 011xxx0xxx}}

{0xx01 \ {00001, 01001, 01001}, 10xx0 \ {10110, 10100}}
{11x01 \ {11001, 11101, 11101}}
{
   11x010xx01 \ {
   11x0100001, 11x0101001, 11x0101001, 110010xx01, 111010xx01, 111010xx01}}

{xxx1x \ {00x11, 1111x, 0001x}, xx0xx \ {x1001, 010x0, xx011}}
{}
{}

{xx1xx \ {00100, 011xx, x1101}, x1xxx \ {01xx0, 010x1, x11x1}, xxx10 \ {10010, 10110, 01010}}
{x01x1 \ {x0111, 101x1, 10111}}
{
   x01x1xx1x1 \ {
   x0111xx101, x0101xx111, x01x1011x1, x01x1x1101, x0111xx1x1, 101x1xx1x1, 10111xx1x1}, x01x1x1xx1 \ {
   x0111x1x01, x0101x1x11, x01x1010x1, x01x1x11x1, x0111x1xx1, 101x1x1xx1, 10111x1xx1}}

{11xx0 \ {110x0, 11000, 11x00}}
{x01xx \ {101x1, 0010x, 00101}}
{
   x01x011xx0 \ {
   x011011x00, x010011x10, x01x0110x0, x01x011000, x01x011x00, 0010011xx0}}

{0xx11 \ {01x11, 00x11, 00x11}, 011xx \ {01100, 011x0, 011x1}, 10xx1 \ {101x1, 10x01, 10101}}
{xx1x1 \ {111x1, 0x1x1, 0x1x1}, 0x1x0 \ {01100, 0x110}}
{
   xx1110xx11 \ {
   xx11101x11, xx11100x11, xx11100x11, 111110xx11, 0x1110xx11, 0x1110xx11}, xx1x1011x1 \ {
   xx11101101, xx10101111, xx1x1011x1, 111x1011x1, 0x1x1011x1, 0x1x1011x1}, 0x1x0011x0 \ {
   0x11001100, 0x10001110, 0x1x001100, 0x1x0011x0, 01100011x0, 0x110011x0}, xx1x110xx1 \ {
   xx11110x01, xx10110x11, xx1x1101x1, xx1x110x01, xx1x110101, 111x110xx1, 0x1x110xx1, 0x1x110xx1}}

{x1x00 \ {x1000, 11x00, x1100}}
{xx011 \ {0x011, x1011}, x11xx \ {01110, 01111, 111xx}}
{
   x1100x1x00 \ {
   x1100x1000, x110011x00, x1100x1100, 11100x1x00}}

{11xx0 \ {11x10, 11110, 11010}, 1x1x0 \ {10110, 1x100, 1x100}}
{x0x0x \ {00001, x000x, 00101}, xx1x1 \ {11111, xx111, 011x1}}
{
   x0x0011x00 \ {
   x000011x00}, x0x001x100 \ {
   x0x001x100, x0x001x100, x00001x100}}

{0xxx0 \ {0x010, 01010, 00110}}
{x101x \ {11010, 01011, 01010}}
{
   x10100xx10 \ {
   x10100x010, x101001010, x101000110, 110100xx10, 010100xx10}}

{1x00x \ {1100x, 10000, 11000}, 00x10 \ {00010, 00110}}
{xx1xx \ {x0101, 011xx, 101x1}, 101xx \ {10111, 10101, 101x1}, xx100 \ {01100, 1x100, 1x100}}
{
   xx10x1x00x \ {
   xx1011x000, xx1001x001, xx10x1100x, xx10x10000, xx10x11000, x01011x00x, 0110x1x00x, 101011x00x}, 1010x1x00x \ {
   101011x000, 101001x001, 1010x1100x, 1010x10000, 1010x11000, 101011x00x, 101011x00x}, xx1001x000 \ {
   xx10011000, xx10010000, xx10011000, 011001x000, 1x1001x000, 1x1001x000}, xx11000x10 \ {
   xx11000010, xx11000110, 0111000x10}, 1011000x10 \ {
   1011000010, 1011000110}}

{10xx1 \ {10011, 10111, 10001}}
{010x1 \ {01001, 01011}, 111x0 \ {11100, 11110}}
{
   010x110xx1 \ {
   0101110x01, 0100110x11, 010x110011, 010x110111, 010x110001, 0100110xx1, 0101110xx1}}

{1x1x1 \ {11111, 10111, 101x1}}
{1x11x \ {1011x, 10110, 1111x}}
{
   1x1111x111 \ {
   1x11111111, 1x11110111, 1x11110111, 101111x111, 111111x111}}

{x00x0 \ {00010, 10010, 100x0}}
{x00x1 \ {00011, 10011}, 00x0x \ {00000, 00x01, 00001}}
{
   00x00x0000 \ {
   00x0010000, 00000x0000}}

{x10x0 \ {11000, 11010, 01000}}
{1xxx1 \ {11111, 10101, 11x01}}
{}

{}
{0xx0x \ {00101, 0xx01, 00000}, 0x0x0 \ {0x010, 000x0, 00000}}
{}

{0xx01 \ {00101, 00001, 00x01}, 01x11 \ {01111, 01011}}
{}
{}

{x1xx1 \ {x1x01, 01011, x11x1}}
{0x1x0 \ {0x100, 01110, 01110}, x00x0 \ {10010, 100x0, 100x0}}
{}

{0xx10 \ {0x010, 00110, 01010}, 10x11 \ {10011, 10111}}
{}
{}

{xx011 \ {1x011, x0011}, 010x1 \ {01001, 01011}}
{xx0xx \ {100xx, 1x011, xx0x0}}
{
   xx011xx011 \ {
   xx0111x011, xx011x0011, 10011xx011, 1x011xx011}, xx0x1010x1 \ {
   xx01101001, xx00101011, xx0x101001, xx0x101011, 100x1010x1, 1x011010x1}}

{}
{xxxx0 \ {xx100, xx010, 10x10}}
{}

{xxxx0 \ {1x100, x1x10, x1110}}
{x010x \ {x0101, 10100}, x0011 \ {10011, 00011}, x11x0 \ {01100, 11100, x1100}}
{
   x0100xxx00 \ {
   x01001x100, 10100xxx00}, x11x0xxxx0 \ {
   x1110xxx00, x1100xxx10, x11x01x100, x11x0x1x10, x11x0x1110, 01100xxxx0, 11100xxxx0, x1100xxxx0}}

{x0x00 \ {x0000, 00x00, 00000}, 0x1xx \ {0x100, 0111x, 011x0}}
{1x1x1 \ {11101, 11111}, x1x10 \ {11010, 01x10, 01010}, x0x01 \ {00101, x0101}}
{
   1x1x10x1x1 \ {
   1x1110x101, 1x1010x111, 1x1x101111, 111010x1x1, 111110x1x1}, x1x100x110 \ {
   x1x1001110, x1x1001110, 110100x110, 01x100x110, 010100x110}, x0x010x101 \ {
   001010x101, x01010x101}}

{0x01x \ {00010, 0001x, 0001x}}
{0x0x1 \ {0x001, 010x1, 0x011}}
{
   0x0110x011 \ {
   0x01100011, 0x01100011, 010110x011, 0x0110x011}}

{}
{}
{}

{00xxx \ {000x1, 00101}, 01x0x \ {0110x, 01100}}
{01x10 \ {01010, 01110}, 1x00x \ {11001, 1100x, 10000}}
{
   01x1000x10 \ {
   0101000x10, 0111000x10}, 1x00x00x0x \ {
   1x00100x00, 1x00000x01, 1x00x00001, 1x00x00101, 1100100x0x, 1100x00x0x, 1000000x0x}, 1x00x01x0x \ {
   1x00101x00, 1x00001x01, 1x00x0110x, 1x00x01100, 1100101x0x, 1100x01x0x, 1000001x0x}}

{0x11x \ {0x111, 00111, 0x110}, 1xxx0 \ {10x10, 10x00, 1x0x0}, 0xxx1 \ {01001, 00x11, 0xx11}}
{1xx10 \ {10010, 1x110, 10x10}, 111xx \ {111x0, 11110, 111x1}}
{
   1xx100x110 \ {
   1xx100x110, 100100x110, 1x1100x110, 10x100x110}, 1111x0x11x \ {
   111110x110, 111100x111, 1111x0x111, 1111x00111, 1111x0x110, 111100x11x, 111100x11x, 111110x11x}, 1xx101xx10 \ {
   1xx1010x10, 1xx101x010, 100101xx10, 1x1101xx10, 10x101xx10}, 111x01xxx0 \ {
   111101xx00, 111001xx10, 111x010x10, 111x010x00, 111x01x0x0, 111x01xxx0, 111101xxx0}, 111x10xxx1 \ {
   111110xx01, 111010xx11, 111x101001, 111x100x11, 111x10xx11, 111x10xxx1}}

{x1x00 \ {01x00, 11x00, x1000}}
{01xxx \ {0111x, 011x1, 01x0x}}
{
   01x00x1x00 \ {
   01x0001x00, 01x0011x00, 01x00x1000, 01x00x1x00}}

{010xx \ {01000, 0101x, 01011}}
{1x110 \ {11110, 10110}, 0011x \ {00111, 00110}}
{
   1x11001010 \ {
   1x11001010, 1111001010, 1011001010}, 0011x0101x \ {
   0011101010, 0011001011, 0011x0101x, 0011x01011, 001110101x, 001100101x}}

{x01x0 \ {x0110, x0100}, 1x101 \ {10101}}
{x0x1x \ {x001x, 10x11, 00111}}
{
   x0x10x0110 \ {
   x0x10x0110, x0010x0110}}

{101x1 \ {10101, 10111, 10111}, 0010x \ {00101, 00100, 00100}}
{0x1x1 \ {01101, 00111}, xxx00 \ {xx100, 11000, 10000}}
{
   0x1x1101x1 \ {
   0x11110101, 0x10110111, 0x1x110101, 0x1x110111, 0x1x110111, 01101101x1, 00111101x1}, 0x10100101 \ {
   0x10100101, 0110100101}, xxx0000100 \ {
   xxx0000100, xxx0000100, xx10000100, 1100000100, 1000000100}}

{}
{01x10 \ {01110, 01010}}
{}

{11xxx \ {11x1x, 11001, 11x01}, 011x0 \ {01110, 01100}}
{0xx10 \ {00010, 01x10, 00110}}
{
   0xx1011x10 \ {
   0xx1011x10, 0001011x10, 01x1011x10, 0011011x10}, 0xx1001110 \ {
   0xx1001110, 0001001110, 01x1001110, 0011001110}}

{1x10x \ {11100, 1010x, 1x101}, 1xx1x \ {10011, 1xx10, 1101x}}
{10x10 \ {10110}, 01xxx \ {010xx, 01010, 01xx1}, xx1xx \ {0x1xx, x01xx, xx11x}}
{
   01x0x1x10x \ {
   01x011x100, 01x001x101, 01x0x11100, 01x0x1010x, 01x0x1x101, 0100x1x10x, 01x011x10x}, xx10x1x10x \ {
   xx1011x100, xx1001x101, xx10x11100, xx10x1010x, xx10x1x101, 0x10x1x10x, x010x1x10x}, 10x101xx10 \ {
   10x101xx10, 10x1011010, 101101xx10}, 01x1x1xx1x \ {
   01x111xx10, 01x101xx11, 01x1x10011, 01x1x1xx10, 01x1x1101x, 0101x1xx1x, 010101xx1x, 01x111xx1x}, xx11x1xx1x \ {
   xx1111xx10, xx1101xx11, xx11x10011, xx11x1xx10, xx11x1101x, 0x11x1xx1x, x011x1xx1x, xx11x1xx1x}}

{01x0x \ {01101, 0110x, 01x01}, 00x10 \ {00010, 00110, 00110}}
{001x1 \ {00101, 00111}, x0xx1 \ {00x01, x0011, 10x01}}
{
   0010101x01 \ {
   0010101101, 0010101101, 0010101x01, 0010101x01}, x0x0101x01 \ {
   x0x0101101, x0x0101101, x0x0101x01, 00x0101x01, 10x0101x01}}

{xx101 \ {01101, x1101, x0101}, 101x0 \ {10110, 10100}, 11x00 \ {11000}}
{}
{}

{10x11 \ {10111, 10011, 10011}, xx001 \ {x0001, 01001, 01001}}
{}
{}

{0xx0x \ {01x01, 0x10x}}
{}
{}

{10xx0 \ {10100, 10110, 10010}, xx0xx \ {000x1, 10001, x00xx}}
{}
{}

{0xxx0 \ {01x10, 00100, 0xx10}, 0110x \ {01100, 01101}}
{01x1x \ {0101x, 01110, 01x11}, 1x01x \ {1x011, 1001x, 1001x}}
{
   01x100xx10 \ {
   01x1001x10, 01x100xx10, 010100xx10, 011100xx10}, 1x0100xx10 \ {
   1x01001x10, 1x0100xx10, 100100xx10, 100100xx10}}

{0x0xx \ {010x0, 010x1, 01001}, 0x0xx \ {0x0x1, 01000, 0100x}, 11x10 \ {11110, 11010}}
{011x0 \ {01100}, 110x0 \ {11000}}
{
   011x00x0x0 \ {
   011100x000, 011000x010, 011x001000, 011x001000, 011000x0x0}, 110x00x0x0 \ {
   110100x000, 110000x010, 110x001000, 110x001000, 110000x0x0}, 0111011x10 \ {
   0111011110, 0111011010}, 1101011x10 \ {
   1101011110, 1101011010}}

{x11x0 \ {011x0, x1110, 111x0}, 0xx01 \ {00001, 01101, 00101}}
{x000x \ {10000, 10001, 00001}}
{
   x0000x1100 \ {
   x000001100, x000011100, 10000x1100}, x00010xx01 \ {
   x000100001, x000101101, x000100101, 100010xx01, 000010xx01}}

{10xxx \ {10001, 10x0x, 10100}, xx0x1 \ {0x0x1, xx001, x0011}}
{0xx1x \ {0x11x, 0x010, 0111x}, 000xx \ {0000x, 00001, 0001x}}
{
   0xx1x10x1x \ {
   0xx1110x10, 0xx1010x11, 0x11x10x1x, 0x01010x1x, 0111x10x1x}, 000xx10xxx \ {
   000x110xx0, 000x010xx1, 0001x10x0x, 0000x10x1x, 000xx10001, 000xx10x0x, 000xx10100, 0000x10xxx, 0000110xxx, 0001x10xxx}, 0xx11xx011 \ {
   0xx110x011, 0xx11x0011, 0x111xx011, 01111xx011}, 000x1xx0x1 \ {
   00011xx001, 00001xx011, 000x10x0x1, 000x1xx001, 000x1x0011, 00001xx0x1, 00001xx0x1, 00011xx0x1}}

{x00xx \ {1000x, x001x, 100xx}, xxx10 \ {01x10, 10x10, 00x10}}
{01xxx \ {01010, 01101, 01110}, x100x \ {01001, 01000, 11001}}
{
   01xxxx00xx \ {
   01xx1x00x0, 01xx0x00x1, 01x1xx000x, 01x0xx001x, 01xxx1000x, 01xxxx001x, 01xxx100xx, 01010x00xx, 01101x00xx, 01110x00xx}, x100xx000x \ {
   x1001x0000, x1000x0001, x100x1000x, x100x1000x, 01001x000x, 01000x000x, 11001x000x}, 01x10xxx10 \ {
   01x1001x10, 01x1010x10, 01x1000x10, 01010xxx10, 01110xxx10}}

{00x10 \ {00110, 00010}}
{00xxx \ {00101, 0010x, 001x0}}
{
   00x1000x10 \ {
   00x1000110, 00x1000010, 0011000x10}}

{111xx \ {111x0, 11100}}
{x101x \ {x1011, 01011}, x11xx \ {x11x0, 11100, x110x}}
{
   x101x1111x \ {
   x101111110, x101011111, x101x11110, x10111111x, 010111111x}, x11xx111xx \ {
   x11x1111x0, x11x0111x1, x111x1110x, x110x1111x, x11xx111x0, x11xx11100, x11x0111xx, 11100111xx, x110x111xx}}

{x00xx \ {10000, x0011, x00x0}, xx1x0 \ {0x1x0, xx110, xx100}}
{10x1x \ {10110, 10x11}, x110x \ {x1101, 0110x, 1110x}}
{
   10x1xx001x \ {
   10x11x0010, 10x10x0011, 10x1xx0011, 10x1xx0010, 10110x001x, 10x11x001x}, x110xx000x \ {
   x1101x0000, x1100x0001, x110x10000, x110xx0000, x1101x000x, 0110xx000x, 1110xx000x}, 10x10xx110 \ {
   10x100x110, 10x10xx110, 10110xx110}, x1100xx100 \ {
   x11000x100, x1100xx100, 01100xx100, 11100xx100}}

{x011x \ {10110, 00111, x0111}}
{0x1x1 \ {001x1, 00101, 011x1}, 000x1 \ {00001}}
{
   0x111x0111 \ {
   0x11100111, 0x111x0111, 00111x0111, 01111x0111}, 00011x0111 \ {
   0001100111, 00011x0111}}

{xxxxx \ {10101, x1xx1, xx1xx}, 0xx10 \ {0x110, 01110, 01010}}
{10x01 \ {10101}, x1x0x \ {x1100, 1110x, x110x}}
{
   10x01xxx01 \ {
   10x0110101, 10x01x1x01, 10x01xx101, 10101xxx01}, x1x0xxxx0x \ {
   x1x01xxx00, x1x00xxx01, x1x0x10101, x1x0xx1x01, x1x0xxx10x, x1100xxx0x, 1110xxxx0x, x110xxxx0x}}

{1x1x1 \ {11111, 11101, 10111}}
{x110x \ {0110x, 11101}}
{
   x11011x101 \ {
   x110111101, 011011x101, 111011x101}}

{}
{xx001 \ {1x001, 11001, 11001}}
{}

{00x0x \ {00x00, 00x01, 0010x}, 0110x \ {01101}, x01x0 \ {x0110, 10110, 10110}}
{}
{}

{1x0xx \ {100x1, 1x000}}
{xxx01 \ {11001, 10x01, 01101}, x0x0x \ {10000, 00101, x0101}, 0x10x \ {00100, 0010x, 0010x}}
{
   xxx011x001 \ {
   xxx0110001, 110011x001, 10x011x001, 011011x001}, x0x0x1x00x \ {
   x0x011x000, x0x001x001, x0x0x10001, x0x0x1x000, 100001x00x, 001011x00x, x01011x00x}, 0x10x1x00x \ {
   0x1011x000, 0x1001x001, 0x10x10001, 0x10x1x000, 001001x00x, 0010x1x00x, 0010x1x00x}}

{xx10x \ {x110x, 10101, 11100}}
{1011x \ {10111, 10110, 10110}, x0xxx \ {x0100, 00100, 00001}}
{
   x0x0xxx10x \ {
   x0x01xx100, x0x00xx101, x0x0xx110x, x0x0x10101, x0x0x11100, x0100xx10x, 00100xx10x, 00001xx10x}}

{x1x11 \ {x1011, 11011, 11x11}, xx10x \ {1110x, 1x100, 0x100}}
{xxx1x \ {x1110, 00111, 01x1x}}
{
   xxx11x1x11 \ {
   xxx11x1011, xxx1111011, xxx1111x11, 00111x1x11, 01x11x1x11}}

{x0x11 \ {10011, x0111, 00x11}}
{xxxx1 \ {0x101, 000x1, 00101}}
{
   xxx11x0x11 \ {
   xxx1110011, xxx11x0111, xxx1100x11, 00011x0x11}}

{01xxx \ {011x0, 01x00, 01x01}, x1xxx \ {11101, 11011, x1x11}}
{xx111 \ {x1111, 1x111, x0111}, x0xx1 \ {10001, 10111, 001x1}}
{
   xx11101x11 \ {
   x111101x11, 1x11101x11, x011101x11}, x0xx101xx1 \ {
   x0x1101x01, x0x0101x11, x0xx101x01, 1000101xx1, 1011101xx1, 001x101xx1}, xx111x1x11 \ {
   xx11111011, xx111x1x11, x1111x1x11, 1x111x1x11, x0111x1x11}, x0xx1x1xx1 \ {
   x0x11x1x01, x0x01x1x11, x0xx111101, x0xx111011, x0xx1x1x11, 10001x1xx1, 10111x1xx1, 001x1x1xx1}}

{xx001 \ {1x001, 0x001, 10001}, 011xx \ {0110x, 01101, 0111x}}
{100xx \ {10001, 100x1}}
{
   10001xx001 \ {
   100011x001, 100010x001, 1000110001, 10001xx001, 10001xx001}, 100xx011xx \ {
   100x1011x0, 100x0011x1, 1001x0110x, 1000x0111x, 100xx0110x, 100xx01101, 100xx0111x, 10001011xx, 100x1011xx}}

{01xx1 \ {01111, 01001}}
{x0xx1 \ {00001, x00x1, x0001}}
{
   x0xx101xx1 \ {
   x0x1101x01, x0x0101x11, x0xx101111, x0xx101001, 0000101xx1, x00x101xx1, x000101xx1}}

{x110x \ {1110x, 01101, x1101}, x11x0 \ {11100, 011x0}}
{x011x \ {00110, 0011x, 1011x}, 01xxx \ {010x1, 01100}}
{
   01x0xx110x \ {
   01x01x1100, 01x00x1101, 01x0x1110x, 01x0x01101, 01x0xx1101, 01001x110x, 01100x110x}, x0110x1110 \ {
   x011001110, 00110x1110, 00110x1110, 10110x1110}, 01xx0x11x0 \ {
   01x10x1100, 01x00x1110, 01xx011100, 01xx0011x0, 01100x11x0}}

{11xx1 \ {11101, 11111, 111x1}}
{1x001 \ {11001, 10001}, xxxx0 \ {101x0, 0xx10, 1x100}, 1xxx1 \ {10xx1, 10101, 1xx01}}
{
   1x00111x01 \ {
   1x00111101, 1x00111101, 1100111x01, 1000111x01}, 1xxx111xx1 \ {
   1xx1111x01, 1xx0111x11, 1xxx111101, 1xxx111111, 1xxx1111x1, 10xx111xx1, 1010111xx1, 1xx0111xx1}}

{x011x \ {x0111, 1011x, 00110}}
{x0010 \ {10010, 00010, 00010}, 00x1x \ {00010, 00011, 00110}}
{
   x0010x0110 \ {
   x001010110, x001000110, 10010x0110, 00010x0110, 00010x0110}, 00x1xx011x \ {
   00x11x0110, 00x10x0111, 00x1xx0111, 00x1x1011x, 00x1x00110, 00010x011x, 00011x011x, 00110x011x}}

{x010x \ {00100, x0100, 10100}, 01x10 \ {01110, 01010}}
{0xx0x \ {0xx01, 0000x, 0x100}}
{
   0xx0xx010x \ {
   0xx01x0100, 0xx00x0101, 0xx0x00100, 0xx0xx0100, 0xx0x10100, 0xx01x010x, 0000xx010x, 0x100x010x}}

{011xx \ {011x0, 01101, 0111x}, xx1xx \ {x110x, x01x0, 0111x}}
{00x01 \ {00101, 00001}, 0xxx1 \ {00111, 00001, 00011}}
{
   00x0101101 \ {
   00x0101101, 0010101101, 0000101101}, 0xxx1011x1 \ {
   0xx1101101, 0xx0101111, 0xxx101101, 0xxx101111, 00111011x1, 00001011x1, 00011011x1}, 00x01xx101 \ {
   00x01x1101, 00101xx101, 00001xx101}, 0xxx1xx1x1 \ {
   0xx11xx101, 0xx01xx111, 0xxx1x1101, 0xxx101111, 00111xx1x1, 00001xx1x1, 00011xx1x1}}

{111xx \ {111x1, 1111x, 1111x}, x011x \ {x0111, 00110}}
{xx11x \ {xx110, x1111, 01111}, x10xx \ {01001, 1101x, 11010}}
{
   xx11x1111x \ {
   xx11111110, xx11011111, xx11x11111, xx11x1111x, xx11x1111x, xx1101111x, x11111111x, 011111111x}, x10xx111xx \ {
   x10x1111x0, x10x0111x1, x101x1110x, x100x1111x, x10xx111x1, x10xx1111x, x10xx1111x, 01001111xx, 1101x111xx, 11010111xx}, xx11xx011x \ {
   xx111x0110, xx110x0111, xx11xx0111, xx11x00110, xx110x011x, x1111x011x, 01111x011x}, x101xx011x \ {
   x1011x0110, x1010x0111, x101xx0111, x101x00110, 1101xx011x, 11010x011x}}

{x1xx1 \ {010x1, 11x01, x1111}}
{0x10x \ {0x101, 00101, 00100}}
{
   0x101x1x01 \ {
   0x10101001, 0x10111x01, 0x101x1x01, 00101x1x01}}

{}
{11x1x \ {11010, 11x10, 1111x}}
{}

{1001x \ {10011, 10010}}
{x000x \ {10000, x0000, 1000x}, 1x001 \ {10001, 11001}, 0xxxx \ {0000x, 0x10x, 0x0xx}}
{
   0xx1x1001x \ {
   0xx1110010, 0xx1010011, 0xx1x10011, 0xx1x10010, 0x01x1001x}}

{xx0xx \ {x0001, 0x01x, x000x}, xx00x \ {x1000, x100x, 1x001}, xx1x0 \ {11110, 01100, 11100}}
{xx101 \ {1x101, 01101, 0x101}, 01xxx \ {011x1, 01001, 0101x}}
{
   xx101xx001 \ {
   xx101x0001, xx101x0001, 1x101xx001, 01101xx001, 0x101xx001}, 01xxxxx0xx \ {
   01xx1xx0x0, 01xx0xx0x1, 01x1xxx00x, 01x0xxx01x, 01xxxx0001, 01xxx0x01x, 01xxxx000x, 011x1xx0xx, 01001xx0xx, 0101xxx0xx}, xx101xx001 \ {
   xx101x1001, xx1011x001, 1x101xx001, 01101xx001, 0x101xx001}, 01x0xxx00x \ {
   01x01xx000, 01x00xx001, 01x0xx1000, 01x0xx100x, 01x0x1x001, 01101xx00x, 01001xx00x}, 01xx0xx1x0 \ {
   01x10xx100, 01x00xx110, 01xx011110, 01xx001100, 01xx011100, 01010xx1x0}}

{1xxx0 \ {10010, 10000, 110x0}, 0x001 \ {01001, 00001}}
{x1x11 \ {01011, 11x11, 11x11}}
{}

{111xx \ {11110, 11100, 11111}, x110x \ {01100, 1110x, x1100}}
{}
{}

{1x0x1 \ {10001, 110x1, 110x1}}
{10xx0 \ {100x0, 10x10}, xx11x \ {1x110, 0111x, 11110}, 01x00 \ {01100, 01000, 01000}}
{
   xx1111x011 \ {
   xx11111011, xx11111011, 011111x011}}

{1001x \ {10010, 10011}}
{}
{}

{101x0 \ {10100, 10110}, 1x1x1 \ {11111, 10101, 10111}}
{1x0xx \ {1x000, 1001x, 1000x}}
{
   1x0x0101x0 \ {
   1x01010100, 1x00010110, 1x0x010100, 1x0x010110, 1x000101x0, 10010101x0, 10000101x0}, 1x0x11x1x1 \ {
   1x0111x101, 1x0011x111, 1x0x111111, 1x0x110101, 1x0x110111, 100111x1x1, 100011x1x1}}

{x11x0 \ {11110, 111x0, x1100}, xx0xx \ {1000x, 0x00x, 00001}, 1xxxx \ {1x11x, 101xx, 10000}}
{1xx01 \ {10x01, 11x01, 10101}, 0x1xx \ {0110x, 001xx, 0x101}, x101x \ {11010, x1011, 01011}}
{
   0x1x0x11x0 \ {
   0x110x1100, 0x100x1110, 0x1x011110, 0x1x0111x0, 0x1x0x1100, 01100x11x0, 001x0x11x0}, x1010x1110 \ {
   x101011110, x101011110, 11010x1110}, 1xx01xx001 \ {
   1xx0110001, 1xx010x001, 1xx0100001, 10x01xx001, 11x01xx001, 10101xx001}, 0x1xxxx0xx \ {
   0x1x1xx0x0, 0x1x0xx0x1, 0x11xxx00x, 0x10xxx01x, 0x1xx1000x, 0x1xx0x00x, 0x1xx00001, 0110xxx0xx, 001xxxx0xx, 0x101xx0xx}, x101xxx01x \ {
   x1011xx010, x1010xx011, 11010xx01x, x1011xx01x, 01011xx01x}, 1xx011xx01 \ {
   1xx0110101, 10x011xx01, 11x011xx01, 101011xx01}, 0x1xx1xxxx \ {
   0x1x11xxx0, 0x1x01xxx1, 0x11x1xx0x, 0x10x1xx1x, 0x1xx1x11x, 0x1xx101xx, 0x1xx10000, 0110x1xxxx, 001xx1xxxx, 0x1011xxxx}, x101x1xx1x \ {
   x10111xx10, x10101xx11, x101x1x11x, x101x1011x, 110101xx1x, x10111xx1x, 010111xx1x}}

{0111x \ {01111, 01110}}
{0x00x \ {00000, 0x001, 0100x}, x1x0x \ {01101, 01001, x100x}, x0xxx \ {00100, 001x1, 00x01}}
{
   x0x1x0111x \ {
   x0x1101110, x0x1001111, x0x1x01111, x0x1x01110, 001110111x}}

{x11x0 \ {011x0, 11100}, xxx0x \ {xx001, x000x, xxx00}, x1x1x \ {x1111, 1101x, x1110}}
{01x0x \ {0100x, 01001, 01101}}
{
   01x00x1100 \ {
   01x0001100, 01x0011100, 01000x1100}, 01x0xxxx0x \ {
   01x01xxx00, 01x00xxx01, 01x0xxx001, 01x0xx000x, 01x0xxxx00, 0100xxxx0x, 01001xxx0x, 01101xxx0x}}

{}
{xx1xx \ {0x101, 101xx, 0x110}, 0xx00 \ {0x100, 01000, 01000}}
{}

{}
{00x1x \ {00010, 0011x, 00110}, x0x1x \ {x0110, 10111, 10x10}}
{}

{}
{10xxx \ {10001, 10011, 10xx0}, x1xxx \ {1101x, x1001, 11xx0}, x1xx1 \ {01111, 11101, 11x11}}
{}

{x1x11 \ {11x11, 11011, 11111}, xxx10 \ {x0110, 00x10, 11x10}}
{xx100 \ {11100, x1100, 1x100}, 1x01x \ {11011, 10010, 1001x}}
{
   1x011x1x11 \ {
   1x01111x11, 1x01111011, 1x01111111, 11011x1x11, 10011x1x11}, 1x010xxx10 \ {
   1x010x0110, 1x01000x10, 1x01011x10, 10010xxx10, 10010xxx10}}

{10xx1 \ {10011, 10001, 10x01}}
{01x1x \ {0101x, 01110}}
{
   01x1110x11 \ {
   01x1110011, 0101110x11}}

{xx010 \ {1x010, 10010, 11010}, xx10x \ {11101, 0x100, 11100}}
{x0x10 \ {x0010, x0110, 00110}, 00xx1 \ {00101, 001x1, 000x1}}
{
   x0x10xx010 \ {
   x0x101x010, x0x1010010, x0x1011010, x0010xx010, x0110xx010, 00110xx010}, 00x01xx101 \ {
   00x0111101, 00101xx101, 00101xx101, 00001xx101}}

{x1xxx \ {01000, x1xx1, 01x00}, 00x01 \ {00001, 00101}}
{x110x \ {11100, 11101, x1100}, 1xx1x \ {11x11, 1x010, 1x011}}
{
   x110xx1x0x \ {
   x1101x1x00, x1100x1x01, x110x01000, x110xx1x01, x110x01x00, 11100x1x0x, 11101x1x0x, x1100x1x0x}, 1xx1xx1x1x \ {
   1xx11x1x10, 1xx10x1x11, 1xx1xx1x11, 11x11x1x1x, 1x010x1x1x, 1x011x1x1x}, x110100x01 \ {
   x110100001, x110100101, 1110100x01}}

{1x00x \ {11000, 10001, 11001}, 10xx1 \ {101x1, 10111}, 10x1x \ {10x10, 10x11, 10111}}
{00xx0 \ {001x0, 00000, 00110}}
{
   00x001x000 \ {
   00x0011000, 001001x000, 000001x000}, 00x1010x10 \ {
   00x1010x10, 0011010x10, 0011010x10}}

{x0x1x \ {00x10, 00x1x}, 11x1x \ {1111x}}
{01xx0 \ {01x00, 010x0}, xx111 \ {11111, 0x111, 1x111}}
{
   01x10x0x10 \ {
   01x1000x10, 01x1000x10, 01010x0x10}, xx111x0x11 \ {
   xx11100x11, 11111x0x11, 0x111x0x11, 1x111x0x11}, 01x1011x10 \ {
   01x1011110, 0101011x10}, xx11111x11 \ {
   xx11111111, 1111111x11, 0x11111x11, 1x11111x11}}

{x1xx1 \ {010x1, 01011, x1x01}}
{0x0x0 \ {0x010, 01000, 0x000}, 011xx \ {01100, 01110, 01110}}
{
   011x1x1xx1 \ {
   01111x1x01, 01101x1x11, 011x1010x1, 011x101011, 011x1x1x01}}

{0xx10 \ {00110, 01110, 0x010}, 01x0x \ {0100x, 01000, 01000}}
{xx1xx \ {x010x, 0110x, 101xx}, 00xx1 \ {00x01, 00011}}
{
   xx1100xx10 \ {
   xx11000110, xx11001110, xx1100x010, 101100xx10}, xx10x01x0x \ {
   xx10101x00, xx10001x01, xx10x0100x, xx10x01000, xx10x01000, x010x01x0x, 0110x01x0x, 1010x01x0x}, 00x0101x01 \ {
   00x0101001, 00x0101x01}}

{x0x1x \ {00x11, 10011, 00x10}, x1xxx \ {x1100, 11011, x1x01}}
{010xx \ {010x0, 01010, 01011}, xx100 \ {00100, 1x100, 11100}}
{
   0101xx0x1x \ {
   01011x0x10, 01010x0x11, 0101x00x11, 0101x10011, 0101x00x10, 01010x0x1x, 01010x0x1x, 01011x0x1x}, 010xxx1xxx \ {
   010x1x1xx0, 010x0x1xx1, 0101xx1x0x, 0100xx1x1x, 010xxx1100, 010xx11011, 010xxx1x01, 010x0x1xxx, 01010x1xxx, 01011x1xxx}, xx100x1x00 \ {
   xx100x1100, 00100x1x00, 1x100x1x00, 11100x1x00}}

{1x0x0 \ {100x0, 11010, 11000}, 00x0x \ {00101, 00x00, 0010x}, x1x11 \ {01111, 01011, 01011}}
{0111x \ {01110, 01111}}
{
   011101x010 \ {
   0111010010, 0111011010, 011101x010}, 01111x1x11 \ {
   0111101111, 0111101011, 0111101011, 01111x1x11}}

{xx1x1 \ {x1101, x01x1, 00101}}
{0011x \ {00110, 00111}}
{
   00111xx111 \ {
   00111x0111, 00111xx111}}

{}
{x1x0x \ {x1101, x100x, 11x01}}
{}

{xx011 \ {x0011, 10011, 0x011}, xx00x \ {1x000, 01000, 01000}}
{}
{}

{1x001 \ {11001, 10001}, 10xx0 \ {10x00, 10100, 100x0}}
{1x011 \ {11011, 10011, 10011}}
{}

{xxx1x \ {x1x11, xx11x, 1011x}, x1x11 \ {11111, 11011, 01111}}
{x01x0 \ {x0100, x0110, 10110}}
{
   x0110xxx10 \ {
   x0110xx110, x011010110, x0110xxx10, 10110xxx10}}

{x0xx0 \ {10000, 00100, x0x00}}
{00xx1 \ {00001, 001x1, 00011}, 1101x \ {11010}, 01x0x \ {01001, 01x01, 0100x}}
{
   11010x0x10 \ {
   11010x0x10}, 01x00x0x00 \ {
   01x0010000, 01x0000100, 01x00x0x00, 01000x0x00}}

{x1x10 \ {11x10, x1110, 01x10}, 110xx \ {1101x, 11000, 11010}}
{1011x \ {10110}}
{
   10110x1x10 \ {
   1011011x10, 10110x1110, 1011001x10, 10110x1x10}, 1011x1101x \ {
   1011111010, 1011011011, 1011x1101x, 1011x11010, 101101101x}}

{1xxx1 \ {11111, 1x011, 10xx1}, 110xx \ {11000, 1101x, 110x1}}
{1xx0x \ {11x00, 10x0x, 10x01}}
{
   1xx011xx01 \ {
   1xx0110x01, 10x011xx01, 10x011xx01}, 1xx0x1100x \ {
   1xx0111000, 1xx0011001, 1xx0x11000, 1xx0x11001, 11x001100x, 10x0x1100x, 10x011100x}}

{x1xxx \ {11x10, 11100, 010xx}}
{}
{}

{01x00 \ {01100, 01000}}
{1xx1x \ {11x10, 11010, 1x111}, 10x10 \ {10110}}
{}

{}
{0x010 \ {01010}, xx101 \ {11101, 00101, 01101}}
{}

{000xx \ {000x0, 0001x, 00011}}
{x11xx \ {x1110, 111xx, x11x0}, x101x \ {x1011, 11011}}
{
   x11xx000xx \ {
   x11x1000x0, x11x0000x1, x111x0000x, x110x0001x, x11xx000x0, x11xx0001x, x11xx00011, x1110000xx, 111xx000xx, x11x0000xx}, x101x0001x \ {
   x101100010, x101000011, x101x00010, x101x0001x, x101x00011, x10110001x, 110110001x}}

{01x1x \ {0111x, 01011}}
{0xxx0 \ {00100, 01110, 0x010}, xx000 \ {0x000, 10000, 10000}}
{
   0xx1001x10 \ {
   0xx1001110, 0111001x10, 0x01001x10}}

{x100x \ {01000, 0100x, 11001}}
{11xx1 \ {11111, 111x1}, x1xx0 \ {11x00, 11100, x1110}}
{
   11x01x1001 \ {
   11x0101001, 11x0111001, 11101x1001}, x1x00x1000 \ {
   x1x0001000, x1x0001000, 11x00x1000, 11100x1000}}

{x1xxx \ {11xxx, 1101x, 0111x}, 1xxx1 \ {1x0x1, 10001, 11x01}}
{x00x1 \ {000x1, 00001, x0001}, xx11x \ {x111x, 0x11x, 0x111}}
{
   x00x1x1xx1 \ {
   x0011x1x01, x0001x1x11, x00x111xx1, x00x111011, x00x101111, 000x1x1xx1, 00001x1xx1, x0001x1xx1}, xx11xx1x1x \ {
   xx111x1x10, xx110x1x11, xx11x11x1x, xx11x1101x, xx11x0111x, x111xx1x1x, 0x11xx1x1x, 0x111x1x1x}, x00x11xxx1 \ {
   x00111xx01, x00011xx11, x00x11x0x1, x00x110001, x00x111x01, 000x11xxx1, 000011xxx1, x00011xxx1}, xx1111xx11 \ {
   xx1111x011, x11111xx11, 0x1111xx11, 0x1111xx11}}

{11xx0 \ {11x10, 11110}, x0010 \ {00010, 10010}}
{x0xx0 \ {x0000, x0100, 10110}, x0xx0 \ {10000, x0100, 10x00}}
{
   x0xx011xx0 \ {
   x0x1011x00, x0x0011x10, x0xx011x10, x0xx011110, x000011xx0, x010011xx0, 1011011xx0}, x0xx011xx0 \ {
   x0x1011x00, x0x0011x10, x0xx011x10, x0xx011110, 1000011xx0, x010011xx0, 10x0011xx0}, x0x10x0010 \ {
   x0x1000010, x0x1010010}}

{x110x \ {x1100, 11100, 0110x}, xxx01 \ {xx101, 00001, 1xx01}}
{xx101 \ {x0101, x1101, 11101}, x101x \ {11010, x1010}}
{
   xx101x1101 \ {
   xx10101101, x0101x1101, x1101x1101, 11101x1101}, xx101xxx01 \ {
   xx101xx101, xx10100001, xx1011xx01, x0101xxx01, x1101xxx01, 11101xxx01}}

{x000x \ {x0001, 1000x, 0000x}, x0xxx \ {00101, 00x0x, x000x}}
{10xx0 \ {10010, 101x0, 101x0}}
{
   10x00x0000 \ {
   10x0010000, 10x0000000, 10100x0000, 10100x0000}, 10xx0x0xx0 \ {
   10x10x0x00, 10x00x0x10, 10xx000x00, 10xx0x0000, 10010x0xx0, 101x0x0xx0, 101x0x0xx0}}

{01xxx \ {01x00, 01x0x, 01000}, x11xx \ {01101, 0111x, 1110x}}
{1xxx1 \ {10x01, 100x1, 1x101}}
{
   1xxx101xx1 \ {
   1xx1101x01, 1xx0101x11, 1xxx101x01, 10x0101xx1, 100x101xx1, 1x10101xx1}, 1xxx1x11x1 \ {
   1xx11x1101, 1xx01x1111, 1xxx101101, 1xxx101111, 1xxx111101, 10x01x11x1, 100x1x11x1, 1x101x11x1}}

{}
{x001x \ {00010, 10011, 0001x}, 0x0x1 \ {0x011, 0x001, 01001}}
{}

{01xx1 \ {011x1, 010x1}, 0xxx0 \ {01110, 00100, 01000}}
{}
{}

{1xxx0 \ {100x0, 10010, 110x0}}
{x0110 \ {00110}}
{
   x01101xx10 \ {
   x011010010, x011010010, x011011010, 001101xx10}}

{10x1x \ {10x11, 10011, 10111}, 0xx0x \ {0xx01, 0x001, 0x000}}
{x0x11 \ {10x11, 10011, x0011}}
{
   x0x1110x11 \ {
   x0x1110x11, x0x1110011, x0x1110111, 10x1110x11, 1001110x11, x001110x11}}

{10x00 \ {10000, 10100}, 11xxx \ {11001, 11111, 111xx}}
{1x1x1 \ {11111, 11101, 10101}}
{
   1x1x111xx1 \ {
   1x11111x01, 1x10111x11, 1x1x111001, 1x1x111111, 1x1x1111x1, 1111111xx1, 1110111xx1, 1010111xx1}}

{0x01x \ {00011, 0101x, 0101x}, 0xx01 \ {01001, 0x001}}
{10xxx \ {10111, 100xx, 10x01}}
{
   10x1x0x01x \ {
   10x110x010, 10x100x011, 10x1x00011, 10x1x0101x, 10x1x0101x, 101110x01x, 1001x0x01x}, 10x010xx01 \ {
   10x0101001, 10x010x001, 100010xx01, 10x010xx01}}

{}
{11xxx \ {11110, 1110x, 11x1x}, x101x \ {x1011, 0101x, 11011}, 01x1x \ {01x10, 0101x, 0111x}}
{}

{01x0x \ {0100x, 01101, 01101}}
{11xx0 \ {11100, 11010, 11110}, xx1x0 \ {00100, 00110, 00110}, 110xx \ {11010, 110x1, 1101x}}
{
   11x0001x00 \ {
   11x0001000, 1110001x00}, xx10001x00 \ {
   xx10001000, 0010001x00}, 1100x01x0x \ {
   1100101x00, 1100001x01, 1100x0100x, 1100x01101, 1100x01101, 1100101x0x}}

{1001x \ {10010, 10011}, x110x \ {01100, x1101}, xx1xx \ {0x10x, 1x11x, 0x101}}
{}
{}

{xx10x \ {00100, 10101, xx101}}
{1x01x \ {1x011, 1001x}}
{}

{xx0x0 \ {01010, 010x0, xx010}}
{1x1x0 \ {1x100, 111x0}}
{
   1x1x0xx0x0 \ {
   1x110xx000, 1x100xx010, 1x1x001010, 1x1x0010x0, 1x1x0xx010, 1x100xx0x0, 111x0xx0x0}}

{00xx0 \ {000x0}}
{}
{}

{}
{xxx11 \ {01111, 10111, 11x11}, x00x1 \ {000x1, 10001, 00011}, x0xx0 \ {00000, x0x10, 10x00}}
{}

{}
{xxx01 \ {0x001, x1x01, 11x01}, 11x0x \ {11000, 11101, 11x00}}
{}

{1x001 \ {10001, 11001}, 011x1 \ {01111}}
{}
{}

{01x0x \ {01x01, 01000}}
{xxx10 \ {xx110, 01010, 01010}}
{}

{0x000 \ {01000, 00000}}
{0x1x0 \ {00100, 01110, 00110}, xx11x \ {x1111, 10110, 0x111}}
{
   0x1000x000 \ {
   0x10001000, 0x10000000, 001000x000}}

{11x0x \ {1110x, 11101, 11000}, 0xx11 \ {01x11, 0x111}}
{10x00 \ {10100}, x0xx0 \ {00x00, x0110, 00000}}
{
   10x0011x00 \ {
   10x0011100, 10x0011000, 1010011x00}, x0x0011x00 \ {
   x0x0011100, x0x0011000, 00x0011x00, 0000011x00}}

{}
{x1x10 \ {11x10, x1110}, 0xx01 \ {00101, 0x101, 01001}, x001x \ {10010, 1001x, x0010}}
{}

{0xx1x \ {00010, 01x10, 0xx10}, 00xx1 \ {00101, 001x1, 00x01}}
{x1x01 \ {11101, 11001, x1001}, xx1xx \ {111x0, 01111, 0x100}}
{
   xx11x0xx1x \ {
   xx1110xx10, xx1100xx11, xx11x00010, xx11x01x10, xx11x0xx10, 111100xx1x, 011110xx1x}, x1x0100x01 \ {
   x1x0100101, x1x0100101, x1x0100x01, 1110100x01, 1100100x01, x100100x01}, xx1x100xx1 \ {
   xx11100x01, xx10100x11, xx1x100101, xx1x1001x1, xx1x100x01, 0111100xx1}}

{xxxxx \ {x1xxx, 1x111, 010x1}, xx0xx \ {11010, 1x01x, 0x0xx}, 01xx1 \ {01101, 01011, 01x01}}
{10x0x \ {10001, 1010x}, 01x0x \ {01100, 01101}}
{
   10x0xxxx0x \ {
   10x01xxx00, 10x00xxx01, 10x0xx1x0x, 10x0x01001, 10001xxx0x, 1010xxxx0x}, 01x0xxxx0x \ {
   01x01xxx00, 01x00xxx01, 01x0xx1x0x, 01x0x01001, 01100xxx0x, 01101xxx0x}, 10x0xxx00x \ {
   10x01xx000, 10x00xx001, 10x0x0x00x, 10001xx00x, 1010xxx00x}, 01x0xxx00x \ {
   01x01xx000, 01x00xx001, 01x0x0x00x, 01100xx00x, 01101xx00x}, 10x0101x01 \ {
   10x0101101, 10x0101x01, 1000101x01, 1010101x01}, 01x0101x01 \ {
   01x0101101, 01x0101x01, 0110101x01}}

{}
{}
{}

{}
{10x10 \ {10110, 10010, 10010}, x10xx \ {110xx, x1000, 11011}}
{}

{00x1x \ {00x10, 0011x, 00011}, 01x01 \ {01001, 01101}, xxxx0 \ {11010, 01x00, 1xx00}}
{xx11x \ {1x110, 0x11x, x0110}, x1x10 \ {11010, x1010, x1010}}
{
   xx11x00x1x \ {
   xx11100x10, xx11000x11, xx11x00x10, xx11x0011x, xx11x00011, 1x11000x1x, 0x11x00x1x, x011000x1x}, x1x1000x10 \ {
   x1x1000x10, x1x1000110, 1101000x10, x101000x10, x101000x10}, xx110xxx10 \ {
   xx11011010, 1x110xxx10, 0x110xxx10, x0110xxx10}, x1x10xxx10 \ {
   x1x1011010, 11010xxx10, x1010xxx10, x1010xxx10}}

{x10x1 \ {01011, 01001, 010x1}, xx110 \ {00110, x1110, 11110}}
{x0x0x \ {00001, 00x0x, 0010x}, xxx11 \ {1xx11, x1111}}
{
   x0x01x1001 \ {
   x0x0101001, x0x0101001, 00001x1001, 00x01x1001, 00101x1001}, xxx11x1011 \ {
   xxx1101011, xxx1101011, 1xx11x1011, x1111x1011}}

{x001x \ {1001x, 00011}, 1x0x0 \ {11010, 10010, 10010}}
{x1xxx \ {01110, 010x0, 01x0x}, 00x01 \ {00101, 00001}, 0xx01 \ {00001}}
{
   x1x1xx001x \ {
   x1x11x0010, x1x10x0011, x1x1x1001x, x1x1x00011, 01110x001x, 01010x001x}, x1xx01x0x0 \ {
   x1x101x000, x1x001x010, x1xx011010, x1xx010010, x1xx010010, 011101x0x0, 010x01x0x0, 01x001x0x0}}

{xx110 \ {11110, x0110}, x101x \ {0101x, x1011, 1101x}}
{xx00x \ {1x000, 11001, 10001}}
{}

{110xx \ {11000, 110x0}, 1xxx0 \ {1x110, 1x100, 1x0x0}}
{0x0x0 \ {0x000, 01010, 010x0}, xx010 \ {1x010, 11010}}
{
   0x0x0110x0 \ {
   0x01011000, 0x00011010, 0x0x011000, 0x0x0110x0, 0x000110x0, 01010110x0, 010x0110x0}, xx01011010 \ {
   xx01011010, 1x01011010, 1101011010}, 0x0x01xxx0 \ {
   0x0101xx00, 0x0001xx10, 0x0x01x110, 0x0x01x100, 0x0x01x0x0, 0x0001xxx0, 010101xxx0, 010x01xxx0}, xx0101xx10 \ {
   xx0101x110, xx0101x010, 1x0101xx10, 110101xx10}}

{x0010 \ {10010}, 011xx \ {01110, 011x1, 011x1}}
{}
{}

{xx100 \ {11100, x0100, 10100}}
{1xx01 \ {11x01, 11001, 1x101}, x0000 \ {10000}}
{
   x0000xx100 \ {
   x000011100, x0000x0100, x000010100, 10000xx100}}

{01xx1 \ {01101, 01111, 01111}, 0x0xx \ {00010, 010x0, 00001}, 10x0x \ {10x01, 1000x, 1000x}}
{xxx00 \ {01x00, 11100, 01000}, 1xxxx \ {1xx01, 1xxx0, 1x101}}
{
   1xxx101xx1 \ {
   1xx1101x01, 1xx0101x11, 1xxx101101, 1xxx101111, 1xxx101111, 1xx0101xx1, 1x10101xx1}, xxx000x000 \ {
   xxx0001000, 01x000x000, 111000x000, 010000x000}, 1xxxx0x0xx \ {
   1xxx10x0x0, 1xxx00x0x1, 1xx1x0x00x, 1xx0x0x01x, 1xxxx00010, 1xxxx010x0, 1xxxx00001, 1xx010x0xx, 1xxx00x0xx, 1x1010x0xx}, xxx0010x00 \ {
   xxx0010000, xxx0010000, 01x0010x00, 1110010x00, 0100010x00}, 1xx0x10x0x \ {
   1xx0110x00, 1xx0010x01, 1xx0x10x01, 1xx0x1000x, 1xx0x1000x, 1xx0110x0x, 1xx0010x0x, 1x10110x0x}}

{1xxxx \ {10001, 11001, 1x101}}
{0x100 \ {01100}}
{
   0x1001xx00 \ {
   011001xx00}}

{00xx1 \ {000x1, 00001, 00111}}
{}
{}

{x1x00 \ {01000, 11100, 11000}}
{0x1x0 \ {01110, 011x0}}
{
   0x100x1x00 \ {
   0x10001000, 0x10011100, 0x10011000, 01100x1x00}}

{0xx10 \ {01010, 00010, 00x10}, 1x00x \ {1100x, 10000, 1000x}}
{xxxx1 \ {00011, 010x1, 1x1x1}}
{
   xxx011x001 \ {
   xxx0111001, xxx0110001, 010011x001, 1x1011x001}}

{xxxxx \ {x1xx0, 11x01, xx1x0}}
{111xx \ {1110x, 111x0, 111x0}}
{
   111xxxxxxx \ {
   111x1xxxx0, 111x0xxxx1, 1111xxxx0x, 1110xxxx1x, 111xxx1xx0, 111xx11x01, 111xxxx1x0, 1110xxxxxx, 111x0xxxxx, 111x0xxxxx}}

{xx00x \ {1x000, 0x000, 1000x}}
{xx10x \ {0110x, x110x, 00101}, xxxxx \ {x11x0, 0x111, xx1xx}}
{
   xx10xxx00x \ {
   xx101xx000, xx100xx001, xx10x1x000, xx10x0x000, xx10x1000x, 0110xxx00x, x110xxx00x, 00101xx00x}, xxx0xxx00x \ {
   xxx01xx000, xxx00xx001, xxx0x1x000, xxx0x0x000, xxx0x1000x, x1100xx00x, xx10xxx00x}}

{1x011 \ {11011, 10011}, 1x0xx \ {110x1, 1x00x, 1x011}}
{x1xxx \ {x1111, x1xx0, 01110}}
{
   x1x111x011 \ {
   x1x1111011, x1x1110011, x11111x011}, x1xxx1x0xx \ {
   x1xx11x0x0, x1xx01x0x1, x1x1x1x00x, x1x0x1x01x, x1xxx110x1, x1xxx1x00x, x1xxx1x011, x11111x0xx, x1xx01x0xx, 011101x0xx}}

{x00x0 \ {00000, x0010}, 0xxx1 \ {00x11, 00011, 01011}}
{x100x \ {1100x, 0100x, x1000}}
{
   x1000x0000 \ {
   x100000000, 11000x0000, 01000x0000, x1000x0000}, x10010xx01 \ {
   110010xx01, 010010xx01}}

{x011x \ {10111, 0011x, 10110}, xx100 \ {1x100, x1100, 11100}}
{x0100 \ {10100, 00100, 00100}}
{
   x0100xx100 \ {
   x01001x100, x0100x1100, x010011100, 10100xx100, 00100xx100, 00100xx100}}

{1x010 \ {11010, 10010, 10010}, xxxxx \ {0x0xx, x1xx1, x0001}}
{xxx01 \ {00x01, x0x01, x1x01}}
{
   xxx01xxx01 \ {
   xxx010x001, xxx01x1x01, xxx01x0001, 00x01xxx01, x0x01xxx01, x1x01xxx01}}

{}
{1xx0x \ {1x10x, 11000, 1xx00}, x0x00 \ {10x00, x0000}}
{}

{xxx01 \ {0xx01, 00101, 01101}}
{xx0x0 \ {x1010, 10000, 1x000}, 0x11x \ {0x110, 01111, 01111}}
{}

{11x10 \ {11010, 11110}, 0010x \ {00101, 00100, 00100}, 11x11 \ {11011}}
{xxx10 \ {10x10, 0xx10, 11010}, x11xx \ {01110, x11x1, 1111x}, xx1xx \ {1x11x, 1x101, x0100}}
{
   xxx1011x10 \ {
   xxx1011010, xxx1011110, 10x1011x10, 0xx1011x10, 1101011x10}, x111011x10 \ {
   x111011010, x111011110, 0111011x10, 1111011x10}, xx11011x10 \ {
   xx11011010, xx11011110, 1x11011x10}, x110x0010x \ {
   x110100100, x110000101, x110x00101, x110x00100, x110x00100, x11010010x}, xx10x0010x \ {
   xx10100100, xx10000101, xx10x00101, xx10x00100, xx10x00100, 1x1010010x, x01000010x}, x111111x11 \ {
   x111111011, x111111x11, 1111111x11}, xx11111x11 \ {
   xx11111011, 1x11111x11}}

{1xx10 \ {1x110, 11110, 11x10}, xx10x \ {x0101, 01101, 0010x}}
{01xxx \ {01x0x, 01100, 0101x}}
{
   01x101xx10 \ {
   01x101x110, 01x1011110, 01x1011x10, 010101xx10}, 01x0xxx10x \ {
   01x01xx100, 01x00xx101, 01x0xx0101, 01x0x01101, 01x0x0010x, 01x0xxx10x, 01100xx10x}}

{}
{10xxx \ {10001, 100x1}}
{}

{11x1x \ {11111, 11011, 11010}, xx000 \ {00000, 10000}}
{xx101 \ {00101, 11101}, 0x100 \ {00100}, x0x1x \ {0011x, x001x, x0010}}
{
   x0x1x11x1x \ {
   x0x1111x10, x0x1011x11, x0x1x11111, x0x1x11011, x0x1x11010, 0011x11x1x, x001x11x1x, x001011x1x}, 0x100xx000 \ {
   0x10000000, 0x10010000, 00100xx000}}

{xxx00 \ {01100, 00x00, 00000}}
{x10x1 \ {11001, x1001, 11011}}
{}

{000xx \ {0000x, 000x1, 000x0}, 11xxx \ {1100x, 11001, 11x00}}
{1xxxx \ {10xxx, 110x0, 111x0}}
{
   1xxxx000xx \ {
   1xxx1000x0, 1xxx0000x1, 1xx1x0000x, 1xx0x0001x, 1xxxx0000x, 1xxxx000x1, 1xxxx000x0, 10xxx000xx, 110x0000xx, 111x0000xx}, 1xxxx11xxx \ {
   1xxx111xx0, 1xxx011xx1, 1xx1x11x0x, 1xx0x11x1x, 1xxxx1100x, 1xxxx11001, 1xxxx11x00, 10xxx11xxx, 110x011xxx, 111x011xxx}}

{0x10x \ {01100, 00101, 0x101}, 1xx10 \ {11110, 1x010, 1x010}}
{1x11x \ {1111x, 10111, 10110}}
{
   1x1101xx10 \ {
   1x11011110, 1x1101x010, 1x1101x010, 111101xx10, 101101xx10}}

{0xx0x \ {01100, 00x01, 00x00}, x01xx \ {10101, 10110, 1010x}}
{011xx \ {0111x, 0110x, 011x1}}
{
   0110x0xx0x \ {
   011010xx00, 011000xx01, 0110x01100, 0110x00x01, 0110x00x00, 0110x0xx0x, 011010xx0x}, 011xxx01xx \ {
   011x1x01x0, 011x0x01x1, 0111xx010x, 0110xx011x, 011xx10101, 011xx10110, 011xx1010x, 0111xx01xx, 0110xx01xx, 011x1x01xx}}

{001x0 \ {00100, 00110}, 1x0xx \ {10011, 11000, 1000x}}
{x011x \ {0011x, 00111}}
{
   x011000110 \ {
   x011000110, 0011000110}, x011x1x01x \ {
   x01111x010, x01101x011, x011x10011, 0011x1x01x, 001111x01x}}

{01xxx \ {01xx1, 01110, 01110}, 0xxx1 \ {01x01, 000x1, 001x1}}
{00xx1 \ {001x1, 00001}}
{
   00xx101xx1 \ {
   00x1101x01, 00x0101x11, 00xx101xx1, 001x101xx1, 0000101xx1}, 00xx10xxx1 \ {
   00x110xx01, 00x010xx11, 00xx101x01, 00xx1000x1, 00xx1001x1, 001x10xxx1, 000010xxx1}}

{0x10x \ {0110x, 00100, 00101}}
{1x00x \ {10000, 11000, 10001}, x1x0x \ {01101, 11000, 01x0x}}
{
   1x00x0x10x \ {
   1x0010x100, 1x0000x101, 1x00x0110x, 1x00x00100, 1x00x00101, 100000x10x, 110000x10x, 100010x10x}, x1x0x0x10x \ {
   x1x010x100, x1x000x101, x1x0x0110x, x1x0x00100, x1x0x00101, 011010x10x, 110000x10x, 01x0x0x10x}}

{xxxx0 \ {0xx10, 01x00, x0xx0}, x1x0x \ {01101, 11001, 01000}}
{0xx10 \ {01010, 01110, 00110}, xx110 \ {01110, 11110, 10110}}
{
   0xx10xxx10 \ {
   0xx100xx10, 0xx10x0x10, 01010xxx10, 01110xxx10, 00110xxx10}, xx110xxx10 \ {
   xx1100xx10, xx110x0x10, 01110xxx10, 11110xxx10, 10110xxx10}}

{xxxxx \ {1xxxx, x0111, 0x0x1}, 0x01x \ {0001x, 01010, 01010}}
{x0x11 \ {10x11, 00111, 10011}}
{
   x0x11xxx11 \ {
   x0x111xx11, x0x11x0111, x0x110x011, 10x11xxx11, 00111xxx11, 10011xxx11}, x0x110x011 \ {
   x0x1100011, 10x110x011, 001110x011, 100110x011}}

{11xx1 \ {11x11, 110x1}}
{00x1x \ {00x10, 0011x, 00111}}
{
   00x1111x11 \ {
   00x1111x11, 00x1111011, 0011111x11, 0011111x11}}

{110x1 \ {11011}, 001x0 \ {00110, 00100, 00100}}
{xx01x \ {x1010, x101x, xx010}, 1x01x \ {1x011, 1x010, 10010}, xxx0x \ {11001, 01000, 01x00}}
{
   xx01111011 \ {
   xx01111011, x101111011}, 1x01111011 \ {
   1x01111011, 1x01111011}, xxx0111001 \ {
   1100111001}, xx01000110 \ {
   xx01000110, x101000110, x101000110, xx01000110}, 1x01000110 \ {
   1x01000110, 1x01000110, 1001000110}, xxx0000100 \ {
   xxx0000100, xxx0000100, 0100000100, 01x0000100}}

{x1xx0 \ {11x00, 01x00}, xx101 \ {0x101, 10101, 00101}}
{001x0 \ {00100, 00110, 00110}, x1x10 \ {01010, 11110}}
{
   001x0x1xx0 \ {
   00110x1x00, 00100x1x10, 001x011x00, 001x001x00, 00100x1xx0, 00110x1xx0, 00110x1xx0}, x1x10x1x10 \ {
   01010x1x10, 11110x1x10}}

{x1x01 \ {11x01, 11001, 11001}, 11xx0 \ {11x00, 11000, 110x0}, xx10x \ {11101, 01100, 00100}}
{xxxx1 \ {1x1x1, 011x1, xxx11}, x11x1 \ {11101, 01101, 11111}}
{
   xxx01x1x01 \ {
   xxx0111x01, xxx0111001, xxx0111001, 1x101x1x01, 01101x1x01}, x1101x1x01 \ {
   x110111x01, x110111001, x110111001, 11101x1x01, 01101x1x01}, xxx01xx101 \ {
   xxx0111101, 1x101xx101, 01101xx101}, x1101xx101 \ {
   x110111101, 11101xx101, 01101xx101}}

{xx1x0 \ {111x0, 1x100, 0x1x0}, 1x0xx \ {1100x, 1x0x0, 11011}, xxxx1 \ {01011, 10111, 01xx1}}
{1xxxx \ {1x1xx, 1111x, 10x00}}
{
   1xxx0xx1x0 \ {
   1xx10xx100, 1xx00xx110, 1xxx0111x0, 1xxx01x100, 1xxx00x1x0, 1x1x0xx1x0, 11110xx1x0, 10x00xx1x0}, 1xxxx1x0xx \ {
   1xxx11x0x0, 1xxx01x0x1, 1xx1x1x00x, 1xx0x1x01x, 1xxxx1100x, 1xxxx1x0x0, 1xxxx11011, 1x1xx1x0xx, 1111x1x0xx, 10x001x0xx}, 1xxx1xxxx1 \ {
   1xx11xxx01, 1xx01xxx11, 1xxx101011, 1xxx110111, 1xxx101xx1, 1x1x1xxxx1, 11111xxxx1}}

{xx011 \ {01011, x1011, 00011}, x01xx \ {001xx, 0011x, 1010x}}
{x11xx \ {x11x1, 111xx, 011x0}, x0x1x \ {10x11, 10010}}
{
   x1111xx011 \ {
   x111101011, x1111x1011, x111100011, x1111xx011, 11111xx011}, x0x11xx011 \ {
   x0x1101011, x0x11x1011, x0x1100011, 10x11xx011}, x11xxx01xx \ {
   x11x1x01x0, x11x0x01x1, x111xx010x, x110xx011x, x11xx001xx, x11xx0011x, x11xx1010x, x11x1x01xx, 111xxx01xx, 011x0x01xx}, x0x1xx011x \ {
   x0x11x0110, x0x10x0111, x0x1x0011x, x0x1x0011x, 10x11x011x, 10010x011x}}

{x000x \ {0000x, 00001, x0000}, 0000x \ {00000}}
{00x1x \ {00011, 00111}}
{}

{x111x \ {11111}}
{011xx \ {011x0, 0111x, 0111x}, x1xx1 \ {x1x11, x1111, 11111}}
{
   0111xx111x \ {
   01111x1110, 01110x1111, 0111x11111, 01110x111x, 0111xx111x, 0111xx111x}, x1x11x1111 \ {
   x1x1111111, x1x11x1111, x1111x1111, 11111x1111}}

{1xx1x \ {11x1x, 10111}, x011x \ {0011x, 1011x, 10111}, x110x \ {x1100, x1101, 01100}}
{0xx11 \ {01x11, 01111, 00111}, x1001 \ {11001, 01001}}
{
   0xx111xx11 \ {
   0xx1111x11, 0xx1110111, 01x111xx11, 011111xx11, 001111xx11}, 0xx11x0111 \ {
   0xx1100111, 0xx1110111, 0xx1110111, 01x11x0111, 01111x0111, 00111x0111}, x1001x1101 \ {
   x1001x1101, 11001x1101, 01001x1101}}

{1x10x \ {10101, 10100, 11100}, 00xx0 \ {00100, 00x00, 00x00}}
{xx110 \ {11110, 1x110, 00110}, 0x0xx \ {01000, 010xx, 010x1}, x01x0 \ {001x0, 101x0}}
{
   0x00x1x10x \ {
   0x0011x100, 0x0001x101, 0x00x10101, 0x00x10100, 0x00x11100, 010001x10x, 0100x1x10x, 010011x10x}, x01001x100 \ {
   x010010100, x010011100, 001001x100, 101001x100}, xx11000x10 \ {
   1111000x10, 1x11000x10, 0011000x10}, 0x0x000xx0 \ {
   0x01000x00, 0x00000x10, 0x0x000100, 0x0x000x00, 0x0x000x00, 0100000xx0, 010x000xx0}, x01x000xx0 \ {
   x011000x00, x010000x10, x01x000100, x01x000x00, x01x000x00, 001x000xx0, 101x000xx0}}

{xxx10 \ {11x10, 10110, x0010}}
{01x00 \ {01000}}
{}

{}
{xx111 \ {x1111, 1x111, 11111}}
{}

{x0101 \ {00101, 10101}, x1x01 \ {01101, x1101, x1101}}
{xxx1x \ {1xx1x, xxx10, x0x1x}, 0xx10 \ {01110, 00110, 00110}}
{}

{0x11x \ {0111x, 0x111, 0011x}, 0xx0x \ {0010x, 00000, 01100}}
{}
{}

{1xxx1 \ {10x11, 1xx11, 100x1}, x0011 \ {10011, 00011}}
{}
{}

{}
{01x11 \ {01111, 01011}, 0x11x \ {0111x}}
{}

{1xx10 \ {1x010, 1x110, 10010}, xx00x \ {0x00x, 10000, 0x000}}
{x1x0x \ {01000, x1001, x100x}}
{
   x1x0xxx00x \ {
   x1x01xx000, x1x00xx001, x1x0x0x00x, x1x0x10000, x1x0x0x000, 01000xx00x, x1001xx00x, x100xxx00x}}

{0xx11 \ {00111, 01011, 01x11}, 0x1xx \ {00110, 00100, 001x1}}
{01xx1 \ {01111, 01011, 01x11}, xxx10 \ {11x10, 0x110, x1110}}
{
   01x110xx11 \ {
   01x1100111, 01x1101011, 01x1101x11, 011110xx11, 010110xx11, 01x110xx11}, 01xx10x1x1 \ {
   01x110x101, 01x010x111, 01xx1001x1, 011110x1x1, 010110x1x1, 01x110x1x1}, xxx100x110 \ {
   xxx1000110, 11x100x110, 0x1100x110, x11100x110}}

{1x000 \ {11000, 10000, 10000}, 00xxx \ {00100, 0000x}}
{xxx1x \ {x0011, 10x11, x001x}, x1xx1 \ {x1111, x11x1, 01101}}
{
   xxx1x00x1x \ {
   xxx1100x10, xxx1000x11, x001100x1x, 10x1100x1x, x001x00x1x}, x1xx100xx1 \ {
   x1x1100x01, x1x0100x11, x1xx100001, x111100xx1, x11x100xx1, 0110100xx1}}

{1100x \ {11001, 11000}, 0x1x1 \ {01111, 001x1, 00111}}
{xx01x \ {x101x, 11011, x0010}, xx1x0 \ {1x110, 0x110}}
{
   xx10011000 \ {
   xx10011000}, xx0110x111 \ {
   xx01101111, xx01100111, xx01100111, x10110x111, 110110x111}}

{1110x \ {11101, 11100, 11100}}
{010x1 \ {01011, 01001}, 1xx1x \ {11110, 11011, 1x110}}
{
   0100111101 \ {
   0100111101, 0100111101}}

{10x01 \ {10001}}
{x00xx \ {x0010, 000xx, 10011}, x1x00 \ {11100, 01x00}}
{
   x000110x01 \ {
   x000110001, 0000110x01}}

{001x0 \ {00100, 00110}}
{11xxx \ {11100, 1101x}, xx101 \ {x1101, 1x101, 10101}, 10x10 \ {10110}}
{
   11xx0001x0 \ {
   11x1000100, 11x0000110, 11xx000100, 11xx000110, 11100001x0, 11010001x0}, 10x1000110 \ {
   10x1000110, 1011000110}}

{}
{01x01 \ {01001}}
{}

{x0xx1 \ {x01x1, x0001, 00xx1}, xx1x1 \ {00111, 10111, 1x1x1}}
{x11xx \ {x1111, 0111x, 0110x}, 11x0x \ {1100x, 11101}}
{
   x11x1x0xx1 \ {
   x1111x0x01, x1101x0x11, x11x1x01x1, x11x1x0001, x11x100xx1, x1111x0xx1, 01111x0xx1, 01101x0xx1}, 11x01x0x01 \ {
   11x01x0101, 11x01x0001, 11x0100x01, 11001x0x01, 11101x0x01}, x11x1xx1x1 \ {
   x1111xx101, x1101xx111, x11x100111, x11x110111, x11x11x1x1, x1111xx1x1, 01111xx1x1, 01101xx1x1}, 11x01xx101 \ {
   11x011x101, 11001xx101, 11101xx101}}

{00xx1 \ {00001, 00x01, 00111}}
{100xx \ {10010, 1000x, 10000}, 0xx00 \ {00000, 00100, 01000}, xxxx1 \ {x1x01, 00101, 11xx1}}
{
   100x100xx1 \ {
   1001100x01, 1000100x11, 100x100001, 100x100x01, 100x100111, 1000100xx1}, xxxx100xx1 \ {
   xxx1100x01, xxx0100x11, xxxx100001, xxxx100x01, xxxx100111, x1x0100xx1, 0010100xx1, 11xx100xx1}}

{x00xx \ {x0010, 1001x, x0000}, 010x1 \ {01011, 01001}}
{x0x1x \ {10x1x, x0010, x001x}, 0111x \ {01110, 01111}}
{
   x0x1xx001x \ {
   x0x11x0010, x0x10x0011, x0x1xx0010, x0x1x1001x, 10x1xx001x, x0010x001x, x001xx001x}, 0111xx001x \ {
   01111x0010, 01110x0011, 0111xx0010, 0111x1001x, 01110x001x, 01111x001x}, x0x1101011 \ {
   x0x1101011, 10x1101011, x001101011}, 0111101011 \ {
   0111101011, 0111101011}}

{1xxx1 \ {10101, 100x1, 11xx1}, x0101 \ {10101, 00101}}
{0x00x \ {01000, 0x001, 0100x}}
{
   0x0011xx01 \ {
   0x00110101, 0x00110001, 0x00111x01, 0x0011xx01, 010011xx01}, 0x001x0101 \ {
   0x00110101, 0x00100101, 0x001x0101, 01001x0101}}

{10x0x \ {10x01, 10001}}
{0x1x1 \ {01101, 0x101, 0x101}}
{
   0x10110x01 \ {
   0x10110x01, 0x10110001, 0110110x01, 0x10110x01, 0x10110x01}}

{11xx1 \ {11001, 11011}, xx0x0 \ {1x0x0, x0010, x00x0}}
{1xx01 \ {11x01, 10x01, 10101}, x0xxx \ {10101, x000x, 10xx1}, xx10x \ {01100, 01101, 0110x}}
{
   1xx0111x01 \ {
   1xx0111001, 11x0111x01, 10x0111x01, 1010111x01}, x0xx111xx1 \ {
   x0x1111x01, x0x0111x11, x0xx111001, x0xx111011, 1010111xx1, x000111xx1, 10xx111xx1}, xx10111x01 \ {
   xx10111001, 0110111x01, 0110111x01}, x0xx0xx0x0 \ {
   x0x10xx000, x0x00xx010, x0xx01x0x0, x0xx0x0010, x0xx0x00x0, x0000xx0x0}, xx100xx000 \ {
   xx1001x000, xx100x0000, 01100xx000, 01100xx000}}

{xxx1x \ {00110, xx111, x001x}}
{00x11 \ {00111, 00011}, 0xxx0 \ {01x10, 00100}, x010x \ {10101, x0100, 00100}}
{
   00x11xxx11 \ {
   00x11xx111, 00x11x0011, 00111xxx11, 00011xxx11}, 0xx10xxx10 \ {
   0xx1000110, 0xx10x0010, 01x10xxx10}}

{0xxx0 \ {00000, 0x110, 00110}}
{x11x0 \ {x1110, 01110, x1100}, x00x1 \ {00001, 10001}}
{
   x11x00xxx0 \ {
   x11100xx00, x11000xx10, x11x000000, x11x00x110, x11x000110, x11100xxx0, 011100xxx0, x11000xxx0}}

{}
{0x1x0 \ {011x0, 01110, 00100}}
{}

{1x0x1 \ {110x1, 100x1, 10001}}
{00x10 \ {00010, 00110}, x10xx \ {x1011, 11001, 01010}}
{
   x10x11x0x1 \ {
   x10111x001, x10011x011, x10x1110x1, x10x1100x1, x10x110001, x10111x0x1, 110011x0x1}}

{111x0 \ {11100}, 0x1xx \ {0010x, 01101, 011x0}}
{xx0x0 \ {x0000, 0x010, x1000}}
{
   xx0x0111x0 \ {
   xx01011100, xx00011110, xx0x011100, x0000111x0, 0x010111x0, x1000111x0}, xx0x00x1x0 \ {
   xx0100x100, xx0000x110, xx0x000100, xx0x0011x0, x00000x1x0, 0x0100x1x0, x10000x1x0}}

{x0x1x \ {x0111, 0001x, 1011x}, 111x0 \ {11110, 11100, 11100}}
{}
{}

{x0x00 \ {00x00, x0000, x0100}, 0x101 \ {01101}}
{1xxxx \ {10x11, 1x101, 10x1x}, 0x1x0 \ {011x0, 0x110}}
{
   1xx00x0x00 \ {
   1xx0000x00, 1xx00x0000, 1xx00x0100}, 0x100x0x00 \ {
   0x10000x00, 0x100x0000, 0x100x0100, 01100x0x00}, 1xx010x101 \ {
   1xx0101101, 1x1010x101}}

{xx110 \ {10110, 01110, 0x110}}
{1111x \ {11110, 11111}}
{
   11110xx110 \ {
   1111010110, 1111001110, 111100x110, 11110xx110}}

{x10xx \ {110xx, 1100x, 110x0}, xx0xx \ {x00x1, xx010, x10x1}}
{0011x \ {00111}, xx0x0 \ {100x0, 01000, 1x010}, 0xx0x \ {0x101, 01100, 00001}}
{
   0011xx101x \ {
   00111x1010, 00110x1011, 0011x1101x, 0011x11010, 00111x101x}, xx0x0x10x0 \ {
   xx010x1000, xx000x1010, xx0x0110x0, xx0x011000, xx0x0110x0, 100x0x10x0, 01000x10x0, 1x010x10x0}, 0xx0xx100x \ {
   0xx01x1000, 0xx00x1001, 0xx0x1100x, 0xx0x1100x, 0xx0x11000, 0x101x100x, 01100x100x, 00001x100x}, 0011xxx01x \ {
   00111xx010, 00110xx011, 0011xx0011, 0011xxx010, 0011xx1011, 00111xx01x}, xx0x0xx0x0 \ {
   xx010xx000, xx000xx010, xx0x0xx010, 100x0xx0x0, 01000xx0x0, 1x010xx0x0}, 0xx0xxx00x \ {
   0xx01xx000, 0xx00xx001, 0xx0xx0001, 0xx0xx1001, 0x101xx00x, 01100xx00x, 00001xx00x}}

{x1x10 \ {01110, 11110, x1010}, x1xxx \ {1111x, x1xx0, x1011}}
{x1011 \ {11011, 01011}, 10x0x \ {1000x, 10001, 10x00}, 10x1x \ {10x11, 10x10, 10111}}
{
   10x10x1x10 \ {
   10x1001110, 10x1011110, 10x10x1010, 10x10x1x10}, x1011x1x11 \ {
   x101111111, x1011x1011, 11011x1x11, 01011x1x11}, 10x0xx1x0x \ {
   10x01x1x00, 10x00x1x01, 10x0xx1x00, 1000xx1x0x, 10001x1x0x, 10x00x1x0x}, 10x1xx1x1x \ {
   10x11x1x10, 10x10x1x11, 10x1x1111x, 10x1xx1x10, 10x1xx1011, 10x11x1x1x, 10x10x1x1x, 10111x1x1x}}

{0110x \ {01100, 01101}, x1x00 \ {x1100, 01000}}
{00xx0 \ {001x0, 00010, 00x00}, 00xx1 \ {00x11, 00111, 00001}}
{
   00x0001100 \ {
   00x0001100, 0010001100, 00x0001100}, 00x0101101 \ {
   00x0101101, 0000101101}, 00x00x1x00 \ {
   00x00x1100, 00x0001000, 00100x1x00, 00x00x1x00}}

{x11xx \ {1110x, 111xx, x11x0}, 1x1x1 \ {11101, 11111, 10111}}
{x011x \ {00110, 0011x, x0111}, 011x1 \ {01101}}
{
   x011xx111x \ {
   x0111x1110, x0110x1111, x011x1111x, x011xx1110, 00110x111x, 0011xx111x, x0111x111x}, 011x1x11x1 \ {
   01111x1101, 01101x1111, 011x111101, 011x1111x1, 01101x11x1}, x01111x111 \ {
   x011111111, x011110111, 001111x111, x01111x111}, 011x11x1x1 \ {
   011111x101, 011011x111, 011x111101, 011x111111, 011x110111, 011011x1x1}}

{1x0x1 \ {11001, 1x011, 1x011}, x001x \ {10010, 0001x}}
{0001x \ {00011, 00010}, 00x10 \ {00010, 00110}}
{
   000111x011 \ {
   000111x011, 000111x011, 000111x011}, 0001xx001x \ {
   00011x0010, 00010x0011, 0001x10010, 0001x0001x, 00011x001x, 00010x001x}, 00x10x0010 \ {
   00x1010010, 00x1000010, 00010x0010, 00110x0010}}

{01x01 \ {01001, 01101}}
{01x0x \ {01101, 0100x}}
{
   01x0101x01 \ {
   01x0101001, 01x0101101, 0110101x01, 0100101x01}}

{xx11x \ {x1111, 1x11x, x0111}, x00x1 \ {x0001, 10011, 00001}, x10xx \ {0100x, x100x, x1010}}
{xx0xx \ {10010, 0x00x, x100x}, 0x00x \ {0x000, 0x001, 01000}, 11xx0 \ {11010, 111x0, 11110}}
{
   xx01xxx11x \ {
   xx011xx110, xx010xx111, xx01xx1111, xx01x1x11x, xx01xx0111, 10010xx11x}, 11x10xx110 \ {
   11x101x110, 11010xx110, 11110xx110, 11110xx110}, xx0x1x00x1 \ {
   xx011x0001, xx001x0011, xx0x1x0001, xx0x110011, xx0x100001, 0x001x00x1, x1001x00x1}, 0x001x0001 \ {
   0x001x0001, 0x00100001, 0x001x0001}, xx0xxx10xx \ {
   xx0x1x10x0, xx0x0x10x1, xx01xx100x, xx00xx101x, xx0xx0100x, xx0xxx100x, xx0xxx1010, 10010x10xx, 0x00xx10xx, x100xx10xx}, 0x00xx100x \ {
   0x001x1000, 0x000x1001, 0x00x0100x, 0x00xx100x, 0x000x100x, 0x001x100x, 01000x100x}, 11xx0x10x0 \ {
   11x10x1000, 11x00x1010, 11xx001000, 11xx0x1000, 11xx0x1010, 11010x10x0, 111x0x10x0, 11110x10x0}}

{}
{100xx \ {10011, 10001, 1001x}}
{}

{10x1x \ {10010, 10x11, 10011}, 010x1 \ {01011, 01001}}
{10x10 \ {10110, 10010}}
{
   10x1010x10 \ {
   10x1010010, 1011010x10, 1001010x10}}

{}
{0x0x0 \ {00010, 01000, 010x0}}
{}

{x1001 \ {01001, 11001, 11001}, xx001 \ {01001, x0001, 1x001}}
{0x01x \ {0x011, 01010}}
{}

{x1x1x \ {1111x, 11110, 01011}}
{0x1x0 \ {01100, 01110, 011x0}, x0xxx \ {x00x1, 10010, 000xx}}
{
   0x110x1x10 \ {
   0x11011110, 0x11011110, 01110x1x10, 01110x1x10}, x0x1xx1x1x \ {
   x0x11x1x10, x0x10x1x11, x0x1x1111x, x0x1x11110, x0x1x01011, x0011x1x1x, 10010x1x1x, 0001xx1x1x}}

{xx0x0 \ {0x0x0, 01000, xx010}}
{1x001 \ {11001, 10001, 10001}}
{}

{x000x \ {x0000, x0001, x0001}, 1x0x1 \ {10001, 11001, 1x001}}
{0xx01 \ {01x01, 00001, 01101}, x1xx0 \ {11x10, 01100, x11x0}, xx10x \ {0x101, 1x10x, 11101}}
{
   0xx01x0001 \ {
   0xx01x0001, 0xx01x0001, 01x01x0001, 00001x0001, 01101x0001}, x1x00x0000 \ {
   x1x00x0000, 01100x0000, x1100x0000}, xx10xx000x \ {
   xx101x0000, xx100x0001, xx10xx0000, xx10xx0001, xx10xx0001, 0x101x000x, 1x10xx000x, 11101x000x}, 0xx011x001 \ {
   0xx0110001, 0xx0111001, 0xx011x001, 01x011x001, 000011x001, 011011x001}, xx1011x001 \ {
   xx10110001, xx10111001, xx1011x001, 0x1011x001, 1x1011x001, 111011x001}}

{00xx0 \ {00110, 00x00}}
{00xx0 \ {001x0, 00100, 000x0}, 1010x \ {10100, 10101}, x10xx \ {x1000, x10x0, 110x0}}
{
   00xx000xx0 \ {
   00x1000x00, 00x0000x10, 00xx000110, 00xx000x00, 001x000xx0, 0010000xx0, 000x000xx0}, 1010000x00 \ {
   1010000x00, 1010000x00}, x10x000xx0 \ {
   x101000x00, x100000x10, x10x000110, x10x000x00, x100000xx0, x10x000xx0, 110x000xx0}}

{x00xx \ {1000x, 100x0, 0001x}, x1xx1 \ {111x1, x1011, 11xx1}, 00xx1 \ {00101, 000x1, 001x1}}
{0x10x \ {0110x, 0010x, 00100}, x0101 \ {10101, 00101}, x10xx \ {11011, 11010, x10x0}}
{
   0x10xx000x \ {
   0x101x0000, 0x100x0001, 0x10x1000x, 0x10x10000, 0110xx000x, 0010xx000x, 00100x000x}, x0101x0001 \ {
   x010110001, 10101x0001, 00101x0001}, x10xxx00xx \ {
   x10x1x00x0, x10x0x00x1, x101xx000x, x100xx001x, x10xx1000x, x10xx100x0, x10xx0001x, 11011x00xx, 11010x00xx, x10x0x00xx}, 0x101x1x01 \ {
   0x10111101, 0x10111x01, 01101x1x01, 00101x1x01}, x0101x1x01 \ {
   x010111101, x010111x01, 10101x1x01, 00101x1x01}, x10x1x1xx1 \ {
   x1011x1x01, x1001x1x11, x10x1111x1, x10x1x1011, x10x111xx1, 11011x1xx1}, 0x10100x01 \ {
   0x10100101, 0x10100001, 0x10100101, 0110100x01, 0010100x01}, x010100x01 \ {
   x010100101, x010100001, x010100101, 1010100x01, 0010100x01}, x10x100xx1 \ {
   x101100x01, x100100x11, x10x100101, x10x1000x1, x10x1001x1, 1101100xx1}}

{}
{x0x10 \ {00110, x0110}, 0xx11 \ {00011, 01x11}}
{}

{}
{x10x1 \ {01001, x1011, 01011}, 0xx01 \ {0x001, 00101, 01101}}
{}

{1x110 \ {10110, 11110, 11110}}
{x11x1 \ {11101, x1101, x1101}}
{}

{1x11x \ {11110, 10111, 11111}}
{1xxx0 \ {1x000, 10x00, 110x0}}
{
   1xx101x110 \ {
   1xx1011110, 110101x110}}

{}
{x0xx1 \ {10101, 100x1, x0101}, 1x0xx \ {1001x, 11010}}
{}

{xxxx1 \ {01101, 01001, xx0x1}, 00x10 \ {00110, 00010, 00010}}
{0xx10 \ {00010, 01x10, 01010}, 1x010 \ {11010, 10010}}
{
   0xx1000x10 \ {
   0xx1000110, 0xx1000010, 0xx1000010, 0001000x10, 01x1000x10, 0101000x10}, 1x01000x10 \ {
   1x01000110, 1x01000010, 1x01000010, 1101000x10, 1001000x10}}

{01x1x \ {01x11, 01011}}
{00xx1 \ {001x1, 00101, 00111}, x101x \ {11010, 11011}}
{
   00x1101x11 \ {
   00x1101x11, 00x1101011, 0011101x11, 0011101x11}, x101x01x1x \ {
   x101101x10, x101001x11, x101x01x11, x101x01011, 1101001x1x, 1101101x1x}}

{}
{}
{}

{}
{x000x \ {10001, 1000x, 10000}}
{}

{00xxx \ {00111, 00011, 00x1x}, 010x1 \ {01001, 01011}}
{xxx11 \ {x1111, x0x11, 0x011}, 1x0x1 \ {100x1, 110x1, 10001}}
{
   xxx1100x11 \ {
   xxx1100111, xxx1100011, xxx1100x11, x111100x11, x0x1100x11, 0x01100x11}, 1x0x100xx1 \ {
   1x01100x01, 1x00100x11, 1x0x100111, 1x0x100011, 1x0x100x11, 100x100xx1, 110x100xx1, 1000100xx1}, xxx1101011 \ {
   xxx1101011, x111101011, x0x1101011, 0x01101011}, 1x0x1010x1 \ {
   1x01101001, 1x00101011, 1x0x101001, 1x0x101011, 100x1010x1, 110x1010x1, 10001010x1}}

{x0x1x \ {00110, 1011x, x0011}}
{}
{}

{01x1x \ {01x10, 01111, 01111}, x0x01 \ {10001, 10101, x0101}}
{x110x \ {11101, 01100}, xxx01 \ {11001, 0x101, 01101}}
{
   x1101x0x01 \ {
   x110110001, x110110101, x1101x0101, 11101x0x01}, xxx01x0x01 \ {
   xxx0110001, xxx0110101, xxx01x0101, 11001x0x01, 0x101x0x01, 01101x0x01}}

{1xx0x \ {1x000, 11100, 10000}, 1x01x \ {10011, 1001x}}
{x11xx \ {111xx, x110x, x11x0}}
{
   x110x1xx0x \ {
   x11011xx00, x11001xx01, x110x1x000, x110x11100, x110x10000, 1110x1xx0x, x110x1xx0x, x11001xx0x}, x111x1x01x \ {
   x11111x010, x11101x011, x111x10011, x111x1001x, 1111x1x01x, x11101x01x}}

{}
{}
{}

{xx010 \ {11010, 0x010}}
{xxx10 \ {10110, 10x10, x1010}, 1x011 \ {11011, 10011}}
{
   xxx10xx010 \ {
   xxx1011010, xxx100x010, 10110xx010, 10x10xx010, x1010xx010}}

{0x0xx \ {0101x, 01011, 010x0}, 1x001 \ {10001, 11001, 11001}}
{xx0x1 \ {x10x1, 010x1, 01001}}
{
   xx0x10x0x1 \ {
   xx0110x001, xx0010x011, xx0x101011, xx0x101011, x10x10x0x1, 010x10x0x1, 010010x0x1}, xx0011x001 \ {
   xx00110001, xx00111001, xx00111001, x10011x001, 010011x001, 010011x001}}

{x0010 \ {10010, 00010}, 10x00 \ {10100, 10000}}
{x1x1x \ {0111x, 01011}, x1xx0 \ {x11x0, 01000, 01110}}
{
   x1x10x0010 \ {
   x1x1010010, x1x1000010, 01110x0010}, x1x0010x00 \ {
   x1x0010100, x1x0010000, x110010x00, 0100010x00}}

{x11x1 \ {111x1, 011x1, 11101}, x0x01 \ {10101, 10x01, x0001}}
{xx10x \ {x010x, x1101, 1x10x}, x11x0 \ {011x0, 11100}}
{
   xx101x1101 \ {
   xx10111101, xx10101101, xx10111101, x0101x1101, x1101x1101, 1x101x1101}, xx101x0x01 \ {
   xx10110101, xx10110x01, xx101x0001, x0101x0x01, x1101x0x01, 1x101x0x01}}

{x1x11 \ {11111, x1111, 11x11}, x1x01 \ {01101, x1101, 01x01}}
{10xx1 \ {10011, 10001, 101x1}}
{
   10x11x1x11 \ {
   10x1111111, 10x11x1111, 10x1111x11, 10011x1x11, 10111x1x11}, 10x01x1x01 \ {
   10x0101101, 10x01x1101, 10x0101x01, 10001x1x01, 10101x1x01}}

{xxxx1 \ {0x1x1, 0xxx1, xx0x1}, 1xxxx \ {11xxx, 1x101, 110xx}, 10xx1 \ {10x11, 101x1, 101x1}}
{1101x \ {11011, 11010, 11010}}
{
   11011xxx11 \ {
   110110x111, 110110xx11, 11011xx011, 11011xxx11}, 1101x1xx1x \ {
   110111xx10, 110101xx11, 1101x11x1x, 1101x1101x, 110111xx1x, 110101xx1x, 110101xx1x}, 1101110x11 \ {
   1101110x11, 1101110111, 1101110111, 1101110x11}}

{xxxx0 \ {xxx00, 00010, 01110}, 0x0x0 \ {01000, 00010, 010x0}}
{x1xx0 \ {x1100, 01100, 11x00}, x1010 \ {11010}}
{
   x1xx0xxxx0 \ {
   x1x10xxx00, x1x00xxx10, x1xx0xxx00, x1xx000010, x1xx001110, x1100xxxx0, 01100xxxx0, 11x00xxxx0}, x1010xxx10 \ {
   x101000010, x101001110, 11010xxx10}, x1xx00x0x0 \ {
   x1x100x000, x1x000x010, x1xx001000, x1xx000010, x1xx0010x0, x11000x0x0, 011000x0x0, 11x000x0x0}, x10100x010 \ {
   x101000010, x101001010, 110100x010}}

{}
{x0100 \ {00100}, 00xxx \ {00011, 0011x, 000x1}}
{}

{x10xx \ {010xx, 11010, x1010}, xx100 \ {x0100, 01100}}
{x000x \ {00001, 1000x}, x10x0 \ {11010, x1010, 01010}, xx11x \ {1x11x, 0x110, 1x110}}
{
   x000xx100x \ {
   x0001x1000, x0000x1001, x000x0100x, 00001x100x, 1000xx100x}, x10x0x10x0 \ {
   x1010x1000, x1000x1010, x10x0010x0, x10x011010, x10x0x1010, 11010x10x0, x1010x10x0, 01010x10x0}, xx11xx101x \ {
   xx111x1010, xx110x1011, xx11x0101x, xx11x11010, xx11xx1010, 1x11xx101x, 0x110x101x, 1x110x101x}, x0000xx100 \ {
   x0000x0100, x000001100, 10000xx100}, x1000xx100 \ {
   x1000x0100, x100001100}}

{10xx1 \ {10101, 10x01, 10001}}
{x0xx0 \ {x0110, x0000, 10100}}
{}

{11xxx \ {1110x, 11111, 11100}, 1011x \ {10111, 10110}}
{0x101 \ {00101, 01101}, 10x1x \ {10110, 10010, 10x10}}
{
   0x10111x01 \ {
   0x10111101, 0010111x01, 0110111x01}, 10x1x11x1x \ {
   10x1111x10, 10x1011x11, 10x1x11111, 1011011x1x, 1001011x1x, 10x1011x1x}, 10x1x1011x \ {
   10x1110110, 10x1010111, 10x1x10111, 10x1x10110, 101101011x, 100101011x, 10x101011x}}

{x0xx0 \ {00010, 10000, 00100}, xx0x0 \ {00000, xx000, 010x0}}
{}
{}

{xx1xx \ {10111, x0110, 111x0}}
{00xxx \ {00xx0, 00010}, xxx01 \ {1x001, 01001, 1xx01}}
{
   00xxxxx1xx \ {
   00xx1xx1x0, 00xx0xx1x1, 00x1xxx10x, 00x0xxx11x, 00xxx10111, 00xxxx0110, 00xxx111x0, 00xx0xx1xx, 00010xx1xx}, xxx01xx101 \ {
   1x001xx101, 01001xx101, 1xx01xx101}}

{x1x11 \ {x1011, 01111, 11011}, xx01x \ {10010, 0001x, 0x01x}}
{0x1x1 \ {0x111, 01111, 011x1}, 0xxxx \ {01x0x, 0x10x, 01x00}}
{
   0x111x1x11 \ {
   0x111x1011, 0x11101111, 0x11111011, 0x111x1x11, 01111x1x11, 01111x1x11}, 0xx11x1x11 \ {
   0xx11x1011, 0xx1101111, 0xx1111011}, 0x111xx011 \ {
   0x11100011, 0x1110x011, 0x111xx011, 01111xx011, 01111xx011}, 0xx1xxx01x \ {
   0xx11xx010, 0xx10xx011, 0xx1x10010, 0xx1x0001x, 0xx1x0x01x}}

{xxx00 \ {0xx00, 00000, 10x00}}
{0010x \ {00101, 00100}}
{
   00100xxx00 \ {
   001000xx00, 0010000000, 0010010x00, 00100xxx00}}

{}
{0xx1x \ {0xx10, 00111, 00x1x}, 10x1x \ {1001x}}
{}

{xx100 \ {00100, 0x100, 01100}, 1x011 \ {10011, 11011}}
{11x1x \ {11011, 1111x}}
{
   11x111x011 \ {
   11x1110011, 11x1111011, 110111x011, 111111x011}}

{1x01x \ {10011, 1101x, 1101x}, 0100x \ {01001, 01000}}
{x0xx1 \ {10001, x0011, x0111}, 0xx00 \ {01x00, 00000, 0x000}}
{
   x0x111x011 \ {
   x0x1110011, x0x1111011, x0x1111011, x00111x011, x01111x011}, x0x0101001 \ {
   x0x0101001, 1000101001}, 0xx0001000 \ {
   0xx0001000, 01x0001000, 0000001000, 0x00001000}}

{xxx11 \ {0x011, 00011, xx011}, 1xxx1 \ {1xx11, 10xx1, 11111}}
{x1000 \ {11000, 01000}}
{}

{00xxx \ {0001x, 00110, 001x1}, 1x010 \ {11010, 10010}}
{0110x \ {01100, 01101, 01101}, x1x00 \ {01x00, 01100, 11000}}
{
   0110x00x0x \ {
   0110100x00, 0110000x01, 0110x00101, 0110000x0x, 0110100x0x, 0110100x0x}, x1x0000x00 \ {
   01x0000x00, 0110000x00, 1100000x00}}

{10x1x \ {10x10, 10010, 1011x}, xx00x \ {0x00x, 11001, 01001}, 010x1 \ {01001, 01011, 01011}}
{x010x \ {x0101, 00101}, 110xx \ {11000, 11011}}
{
   1101x10x1x \ {
   1101110x10, 1101010x11, 1101x10x10, 1101x10010, 1101x1011x, 1101110x1x}, x010xxx00x \ {
   x0101xx000, x0100xx001, x010x0x00x, x010x11001, x010x01001, x0101xx00x, 00101xx00x}, 1100xxx00x \ {
   11001xx000, 11000xx001, 1100x0x00x, 1100x11001, 1100x01001, 11000xx00x}, x010101001 \ {
   x010101001, x010101001, 0010101001}, 110x1010x1 \ {
   1101101001, 1100101011, 110x101001, 110x101011, 110x101011, 11011010x1}}

{0x0x0 \ {01010, 00010, 0x010}, 000xx \ {00011, 00000, 0001x}, 1x100 \ {10100, 11100}}
{x1x11 \ {01x11, x1011, 11011}, x111x \ {11110, x1111, 01111}}
{
   x11100x010 \ {
   x111001010, x111000010, x11100x010, 111100x010}, x1x1100011 \ {
   x1x1100011, x1x1100011, 01x1100011, x101100011, 1101100011}, x111x0001x \ {
   x111100010, x111000011, x111x00011, x111x0001x, 111100001x, x11110001x, 011110001x}}

{x1x1x \ {01110, x1110, x1011}}
{x01x0 \ {10110, x0100, 10100}}
{
   x0110x1x10 \ {
   x011001110, x0110x1110, 10110x1x10}}

{}
{}
{}

{1xxx0 \ {1x000, 10110, 10000}}
{1xx10 \ {10x10, 10010, 10010}, x10x0 \ {01000, 110x0, 01010}, x1xx0 \ {111x0, 01000, x1000}}
{
   1xx101xx10 \ {
   1xx1010110, 10x101xx10, 100101xx10, 100101xx10}, x10x01xxx0 \ {
   x10101xx00, x10001xx10, x10x01x000, x10x010110, x10x010000, 010001xxx0, 110x01xxx0, 010101xxx0}, x1xx01xxx0 \ {
   x1x101xx00, x1x001xx10, x1xx01x000, x1xx010110, x1xx010000, 111x01xxx0, 010001xxx0, x10001xxx0}}

{x10xx \ {0101x, 11000, x1000}, 00xxx \ {000x0, 001x1, 001x1}}
{0x1xx \ {00111, 0110x, 0x101}}
{
   0x1xxx10xx \ {
   0x1x1x10x0, 0x1x0x10x1, 0x11xx100x, 0x10xx101x, 0x1xx0101x, 0x1xx11000, 0x1xxx1000, 00111x10xx, 0110xx10xx, 0x101x10xx}, 0x1xx00xxx \ {
   0x1x100xx0, 0x1x000xx1, 0x11x00x0x, 0x10x00x1x, 0x1xx000x0, 0x1xx001x1, 0x1xx001x1, 0011100xxx, 0110x00xxx, 0x10100xxx}}

{x0000 \ {10000, 00000, 00000}, 0x10x \ {01101, 0110x, 0110x}}
{x1xxx \ {01111, 11x1x, 1110x}}
{
   x1x00x0000 \ {
   x1x0010000, x1x0000000, x1x0000000, 11100x0000}, x1x0x0x10x \ {
   x1x010x100, x1x000x101, x1x0x01101, x1x0x0110x, x1x0x0110x, 1110x0x10x}}

{01x1x \ {01x10, 01110, 01110}}
{0100x \ {01000, 01001, 01001}, 1x000 \ {11000, 10000}, 0x110 \ {00110}}
{
   0x11001x10 \ {
   0x11001x10, 0x11001110, 0x11001110, 0011001x10}}

{x00x0 \ {100x0, 00000, x0010}, 1x110 \ {11110}}
{001xx \ {00110, 001x0}, xxx01 \ {0xx01, 11x01, 11001}}
{
   001x0x00x0 \ {
   00110x0000, 00100x0010, 001x0100x0, 001x000000, 001x0x0010, 00110x00x0, 001x0x00x0}, 001101x110 \ {
   0011011110, 001101x110, 001101x110}}

{xxx1x \ {1x11x, 1xx1x, 01010}, 0x0xx \ {00010, 0x00x, 00011}}
{x1xx0 \ {01xx0, x1000, 111x0}}
{
   x1x10xxx10 \ {
   x1x101x110, x1x101xx10, x1x1001010, 01x10xxx10, 11110xxx10}, x1xx00x0x0 \ {
   x1x100x000, x1x000x010, x1xx000010, x1xx00x000, 01xx00x0x0, x10000x0x0, 111x00x0x0}}

{xxx01 \ {x0001, 0xx01, 1x101}, 00x10 \ {00110, 00010}}
{1x1x1 \ {10101, 101x1, 10111}}
{
   1x101xxx01 \ {
   1x101x0001, 1x1010xx01, 1x1011x101, 10101xxx01, 10101xxx01}}

{1x1x1 \ {10111, 10101, 11111}}
{0xx01 \ {01001, 0x001, 01x01}}
{
   0xx011x101 \ {
   0xx0110101, 010011x101, 0x0011x101, 01x011x101}}

{1x1x1 \ {10101, 10111, 10111}, x0xx1 \ {00101, 00x11, 10111}}
{x11x1 \ {x1111, 01111, 01101}}
{
   x11x11x1x1 \ {
   x11111x101, x11011x111, x11x110101, x11x110111, x11x110111, x11111x1x1, 011111x1x1, 011011x1x1}, x11x1x0xx1 \ {
   x1111x0x01, x1101x0x11, x11x100101, x11x100x11, x11x110111, x1111x0xx1, 01111x0xx1, 01101x0xx1}}

{10x1x \ {10010, 10x11, 10x10}, xxxx1 \ {0xxx1, 10xx1, 1x011}}
{110xx \ {11010, 11001}}
{
   1101x10x1x \ {
   1101110x10, 1101010x11, 1101x10010, 1101x10x11, 1101x10x10, 1101010x1x}, 110x1xxxx1 \ {
   11011xxx01, 11001xxx11, 110x10xxx1, 110x110xx1, 110x11x011, 11001xxxx1}}

{}
{10xx0 \ {10000, 10110}, xxx11 \ {01x11, 01011, x0011}, 0xxx0 \ {01xx0, 0xx10, 0x1x0}}
{}

{00xx1 \ {001x1, 00x01, 000x1}, 0x00x \ {0000x, 01000, 0100x}}
{00x0x \ {00001, 00100}, 01xx1 \ {01101, 01x11, 01x11}}
{
   00x0100x01 \ {
   00x0100101, 00x0100x01, 00x0100001, 0000100x01}, 01xx100xx1 \ {
   01x1100x01, 01x0100x11, 01xx1001x1, 01xx100x01, 01xx1000x1, 0110100xx1, 01x1100xx1, 01x1100xx1}, 00x0x0x00x \ {
   00x010x000, 00x000x001, 00x0x0000x, 00x0x01000, 00x0x0100x, 000010x00x, 001000x00x}, 01x010x001 \ {
   01x0100001, 01x0101001, 011010x001}}

{x1x0x \ {01x01, 11x0x, 11x0x}, x1001 \ {01001}}
{00xx1 \ {00111, 00001, 00011}}
{
   00x01x1x01 \ {
   00x0101x01, 00x0111x01, 00x0111x01, 00001x1x01}, 00x01x1001 \ {
   00x0101001, 00001x1001}}

{x1101 \ {01101, 11101}, 101xx \ {101x0, 10110, 10100}}
{001x0 \ {00100}}
{
   001x0101x0 \ {
   0011010100, 0010010110, 001x0101x0, 001x010110, 001x010100, 00100101x0}}

{xx101 \ {11101, x0101, 00101}}
{1011x \ {10111}, x0x10 \ {x0110, x0010, 10x10}}
{}

{0xx10 \ {01110, 00x10, 01010}}
{100xx \ {1000x, 1001x, 10000}, 0x0x1 \ {00001, 010x1, 00011}, 00xxx \ {0010x, 00xx0, 00001}}
{
   100100xx10 \ {
   1001001110, 1001000x10, 1001001010, 100100xx10}, 00x100xx10 \ {
   00x1001110, 00x1000x10, 00x1001010, 00x100xx10}}

{x01x1 \ {101x1, 001x1, 001x1}}
{xx01x \ {x101x, 1x011, 10011}, 0001x \ {00010, 00011, 00011}}
{
   xx011x0111 \ {
   xx01110111, xx01100111, xx01100111, x1011x0111, 1x011x0111, 10011x0111}, 00011x0111 \ {
   0001110111, 0001100111, 0001100111, 00011x0111, 00011x0111}}

{xx011 \ {11011, 0x011, 01011}}
{x10xx \ {110x1, 01010}}
{
   x1011xx011 \ {
   x101111011, x10110x011, x101101011, 11011xx011}}

{x0x01 \ {00001, 00101, 10101}, 1x011 \ {11011, 10011, 10011}, 11xxx \ {11x1x, 11100, 11011}}
{}
{}

{11x0x \ {1110x, 11x00, 11x01}}
{11x00 \ {11100}}
{
   11x0011x00 \ {
   11x0011100, 11x0011x00, 1110011x00}}

{x0xx0 \ {x00x0, x0010, 00000}}
{xx111 \ {01111, 10111, 00111}}
{}

{xxx10 \ {11110, 1x110, 01010}}
{}
{}

{010xx \ {01010, 0101x}, xxxx0 \ {x1010, 10x10, 01x10}}
{}
{}

{1x1x0 \ {11110, 111x0, 10110}, 000xx \ {000x0, 00001}, x0xx0 \ {10110, 10x10, 101x0}}
{1xxx0 \ {11000, 100x0, 11110}}
{
   1xxx01x1x0 \ {
   1xx101x100, 1xx001x110, 1xxx011110, 1xxx0111x0, 1xxx010110, 110001x1x0, 100x01x1x0, 111101x1x0}, 1xxx0000x0 \ {
   1xx1000000, 1xx0000010, 1xxx0000x0, 11000000x0, 100x0000x0, 11110000x0}, 1xxx0x0xx0 \ {
   1xx10x0x00, 1xx00x0x10, 1xxx010110, 1xxx010x10, 1xxx0101x0, 11000x0xx0, 100x0x0xx0, 11110x0xx0}}

{}
{x10xx \ {x10x1, 110x0, 010x1}, x001x \ {x0011, 10010, 10010}}
{}

{xxx1x \ {x111x, 10111, 1x11x}, 01x11 \ {01011}}
{xxx10 \ {0x010, xx110, xx010}, 010x0 \ {01000, 01010}}
{
   xxx10xxx10 \ {
   xxx10x1110, xxx101x110, 0x010xxx10, xx110xxx10, xx010xxx10}, 01010xxx10 \ {
   01010x1110, 010101x110, 01010xxx10}}

{1xx01 \ {10x01, 10101}}
{1011x \ {10110, 10111, 10111}, x1x1x \ {1101x, x111x, 01x10}}
{}

{}
{0x1x0 \ {001x0, 01110, 0x100}, 0xx11 \ {00x11, 00111, 0x011}}
{}

{xxx1x \ {1011x, 1xx1x, 0x110}, x0x11 \ {x0111, 10x11, 00111}}
{0x10x \ {0010x, 01100, 00101}}
{}

{1xx00 \ {10100, 1x100, 11100}}
{1x0xx \ {10010, 100xx, 110xx}, x00x1 \ {x0011, 00001, 00011}}
{
   1x0001xx00 \ {
   1x00010100, 1x0001x100, 1x00011100, 100001xx00, 110001xx00}}

{001x0 \ {00110, 00100, 00100}}
{0xx11 \ {00x11, 01111, 00111}, xx01x \ {x101x, 10011, 1001x}}
{
   xx01000110 \ {
   xx01000110, x101000110, 1001000110}}

{xxx00 \ {1xx00, 00x00, 00100}}
{111xx \ {111x0, 11101, 11101}, 01x0x \ {01000, 0110x, 0100x}}
{
   11100xxx00 \ {
   111001xx00, 1110000x00, 1110000100, 11100xxx00}, 01x00xxx00 \ {
   01x001xx00, 01x0000x00, 01x0000100, 01000xxx00, 01100xxx00, 01000xxx00}}

{xx10x \ {x010x, x0101, 0010x}}
{1x0xx \ {1101x, 10001, 10010}, x1xx1 \ {01x11, 01xx1, 11101}}
{
   1x00xxx10x \ {
   1x001xx100, 1x000xx101, 1x00xx010x, 1x00xx0101, 1x00x0010x, 10001xx10x}, x1x01xx101 \ {
   x1x01x0101, x1x01x0101, x1x0100101, 01x01xx101, 11101xx101}}

{1x11x \ {10111, 11111, 1x110}}
{1x011 \ {10011, 11011}, 1xxxx \ {10xx0, 101x0, 10011}}
{
   1x0111x111 \ {
   1x01110111, 1x01111111, 100111x111, 110111x111}, 1xx1x1x11x \ {
   1xx111x110, 1xx101x111, 1xx1x10111, 1xx1x11111, 1xx1x1x110, 10x101x11x, 101101x11x, 100111x11x}}

{01xx0 \ {011x0, 01x00, 01100}, x00x1 \ {00001, 10011}}
{0x10x \ {0010x, 0x100, 00100}, 1000x \ {10000, 10001, 10001}}
{
   0x10001x00 \ {
   0x10001100, 0x10001x00, 0x10001100, 0010001x00, 0x10001x00, 0010001x00}, 1000001x00 \ {
   1000001100, 1000001x00, 1000001100, 1000001x00}, 0x101x0001 \ {
   0x10100001, 00101x0001}, 10001x0001 \ {
   1000100001, 10001x0001, 10001x0001}}

{00x0x \ {00101, 00x00, 0000x}, 10x01 \ {10101, 10001}}
{1xx01 \ {11101, 1x001}}
{
   1xx0100x01 \ {
   1xx0100101, 1xx0100001, 1110100x01, 1x00100x01}, 1xx0110x01 \ {
   1xx0110101, 1xx0110001, 1110110x01, 1x00110x01}}

{}
{xx00x \ {xx001, x000x, 1000x}}
{}

{111x1 \ {11111}, 1x010 \ {11010, 10010}}
{x1x00 \ {01000, 11100, x1000}, 100xx \ {1001x, 10001, 10001}}
{
   100x1111x1 \ {
   1001111101, 1000111111, 100x111111, 10011111x1, 10001111x1, 10001111x1}, 100101x010 \ {
   1001011010, 1001010010, 100101x010}}

{111xx \ {1110x, 11110, 111x1}, 0xx11 \ {00111, 01011, 00011}, xx00x \ {0x001, x0001, 0100x}}
{x10xx \ {0101x, 1100x}}
{
   x10xx111xx \ {
   x10x1111x0, x10x0111x1, x101x1110x, x100x1111x, x10xx1110x, x10xx11110, x10xx111x1, 0101x111xx, 1100x111xx}, x10110xx11 \ {
   x101100111, x101101011, x101100011, 010110xx11}, x100xxx00x \ {
   x1001xx000, x1000xx001, x100x0x001, x100xx0001, x100x0100x, 1100xxx00x}}

{xxx10 \ {10x10, 0xx10, 00010}}
{x1101 \ {01101, 11101}}
{}

{
   11000110000000000001}

{
   00000000000100011011}

{
   00000000000100011011}

{
   11000110000000000001}

{
   00000000000100011011}

{
   11000000000001000110}

empty
{
   }

false
full
{
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}

true
{
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \ {
   xxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxx, 
   xxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxx, 
   xxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxx, 
   xxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxx, 
   xxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxx, 
   xxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxx, 
   xxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxx, 
   xxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxx, 
   xxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxx, 
   xxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxx, 
   xxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxx, 
   xxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxx}}

{
   }

{
   }

project
{
   xxxxxxxxxxxxxxxxxx}

{
   }

{
   000000111000000110000000000001, 
   000000100000010000000000001000, 
   000000000100010000000000100000}

{
   000000111000000110, 
   000000100000010000, 
   000000000100010000}

t1 before:{
   000000000100010000000000100000}

t1 after:{
   000000000100010000000000100000, 
   000000111000000110000000000001, 
   000000100000010000000000001000}

delta:{
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}

{
   001001001000001001, 
   010001001000001001}

{
   001001001000001001}

filter: (= (:var 0) (:var 1)) {xxx \ {x01, x10}}

filter: (or (= (:var 0) (:var 1)) (= (:var 0) (:var 2))) {xxx \ {001, 110}}

filter: (or (= (:var 0) (:var 1)) (= (:var 0) (:var 2))) {xxx \ {001, 110}}

filter interpreted
filter: true {
   xxxxxxxxxxxxxxxxxx}

filter: false {
   }

filter: (= (:var 0) (:var 2)) {
   xxxxxxxxxxxxxxxxxx \ {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}}

filter: (not (= (:var 0) (:var 2))) {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}

filter: (= (:var 0) #b010) {
   xxxxxxxxxxxxxxx010}

filter: (= ((_ extract 2 1) (:var 0)) #b11) {
   xxxxxxxxxxxxxxx11x}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11) (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xxxxxxxxxxxx, 
   xx1xx0xxxxxxxxxxxx, 
   x0xx1xxxxxxxxxxxxx, 
   x1xx0xxxxxxxxxxxxx, 
   0xx1xxxxxxxxxxxxxx, 
   1xx0xxxxxxxxxxxxxx}, 
   1xx0xxxxxxxxxxx11x \ {
   1x00x1xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x, 
   10x01xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   0xx1xxxxxxxxxxx11x \ {
   0x01x1xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   01x10xxxxxxxxxx11x}, 
   x1xx0xxxxxxxxxx11x \ {
   x10x01xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   01x10xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   11x00xxxxxxxxxx11x \ {
   110001xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   01x10xxxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x0xx1xxxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   10x01xxxxxxxxxx11x}, 
   10x01xxxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   00x11xxxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   001110xxxxxxxxx11x}, 
   xx1xx0xxxxxxxxx11x \ {
   x01x10xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x}, 
   1x10x0xxxxxxxxx11x \ {
   101010xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   0x11x0xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x11x00xxxxxxxxx11x \ {
   011100xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   111000xxxxxxxxx11x, 
   011100xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   101010xxxxxxxxx11x, 
   001110xxxxxxxxx11x, 
   xx0xx1xxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x10x01xxxxxxxxx11x, 
   0x01x1xxxxxxxxx11x, 
   1x00x1xxxxxxxxx11x}, 
   1x00x1xxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   0x01x1xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   010101xxxxxxxxx11x}, 
   x10x01xxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   110001xxxxxxxxx11x, 
   010101xxxxxxxxx11x, 
   x00x11xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   100011xxxxxxxxx11x}, 
   100011xxxxxxxxx11x, 
   000111xxxxxxxxx11x}

filter: (= ((_ extract 2 1) (:var 3)) ((_ extract 1 0) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0x1xxxxxxxxxxxxx, 
   xx1x0xxxxxxxxxxxxx, 
   x0x1xxxxxxxxxxxxxx, 
   x1x0xxxxxxxxxxxxxx}}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11)
    (= ((_ extract 2 1) (:var 3)) ((_ extract 1 0) (:var 4)))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0x1xxxxxxxxxxxxx, 
   xx1x0xxxxxxxxxxxxx, 
   x0x1xxxxxxxxxxxxxx, 
   x1x0xxxxxxxxxxxxxx}, 
   x1x0xxxxxxxxxxx11x \ {
   x1001xxxxxxxxxx11x, 
   x1100xxxxxxxxxx11x}, 
   x0x1xxxxxxxxxxx11x \ {
   x0011xxxxxxxxxx11x, 
   x0110xxxxxxxxxx11x}, 
   xx1x0xxxxxxxxxx11x \ {
   x0110xxxxxxxxxx11x, 
   x1100xxxxxxxxxx11x}, 
   x1100xxxxxxxxxx11x, 
   x0110xxxxxxxxxx11x, 
   xx0x1xxxxxxxxxx11x \ {
   x0011xxxxxxxxxx11x, 
   x1001xxxxxxxxxx11x}, 
   x1001xxxxxxxxxx11x, 
   x0011xxxxxxxxxx11x}

filter: (or (= (:var 0) (:var 2)) (= (:var 0) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xxxxx0xxxxxxxx1, 
   x0xxxxxx0xxxxxxx11, 
   x1xxxxxx0xxxxxxx01, 
   0xxxxxxx0xxxxxx1x1, 
   1xxxxxxx0xxxxxx0x1, 
   xx1xxxxx1xxxxxxxx0, 
   x0xxxxxx1xxxxxxx10, 
   x1xxxxxx1xxxxxxx00, 
   0xxxxxxx1xxxxxx1x0, 
   1xxxxxxx1xxxxxx0x0, 
   xx0xxxx0xxxxxxxx11, 
   xx1xxxx0xxxxxxxx10, 
   x0xxxxx0xxxxxxxx1x, 
   0xxxxxx0xxxxxxx11x, 
   1xxxxxx0xxxxxxx01x, 
   xx0xxxx1xxxxxxxx01, 
   xx1xxxx1xxxxxxxx00, 
   x1xxxxx1xxxxxxxx0x, 
   0xxxxxx1xxxxxxx10x, 
   1xxxxxx1xxxxxxx00x, 
   xx0xxx0xxxxxxxx1x1, 
   xx1xxx0xxxxxxxx1x0, 
   x0xxxx0xxxxxxxx11x, 
   x1xxxx0xxxxxxxx10x, 
   0xxxxx0xxxxxxxx1xx, 
   xx0xxx1xxxxxxxx0x1, 
   xx1xxx1xxxxxxxx0x0, 
   x0xxxx1xxxxxxxx01x, 
   x1xxxx1xxxxxxxx00x, 
   1xxxxx1xxxxxxxx0xx}}

filter: (or (= (:var 0) (:var 2)) (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xx0xxxxxxxx1, 
   xx1xx0xx0xxxxxxxx1, 
   x0xx1xxx0xxxxxxxx1, 
   x1xx0xxx0xxxxxxxx1, 
   0xx1xxxx0xxxxxxxx1, 
   1xx0xxxx0xxxxxxxx1, 
   xx0xx1xx1xxxxxxxx0, 
   xx1xx0xx1xxxxxxxx0, 
   x0xx1xxx1xxxxxxxx0, 
   x1xx0xxx1xxxxxxxx0, 
   0xx1xxxx1xxxxxxxx0, 
   1xx0xxxx1xxxxxxxx0, 
   xx0xx1x0xxxxxxxx1x, 
   xx1xx0x0xxxxxxxx1x, 
   x0xx1xx0xxxxxxxx1x, 
   x1xx0xx0xxxxxxxx1x, 
   0xx1xxx0xxxxxxxx1x, 
   1xx0xxx0xxxxxxxx1x, 
   xx0xx1x1xxxxxxxx0x, 
   xx1xx0x1xxxxxxxx0x, 
   x0xx1xx1xxxxxxxx0x, 
   x1xx0xx1xxxxxxxx0x, 
   0xx1xxx1xxxxxxxx0x, 
   1xx0xxx1xxxxxxxx0x, 
   xx0xx10xxxxxxxx1xx, 
   xx1xx00xxxxxxxx1xx, 
   x0xx1x0xxxxxxxx1xx, 
   x1xx0x0xxxxxxxx1xx, 
   0xx1xx0xxxxxxxx1xx, 
   1xx0xx0xxxxxxxx1xx, 
   xx0xx11xxxxxxxx0xx, 
   xx1xx01xxxxxxxx0xx, 
   x0xx1x1xxxxxxxx0xx, 
   x1xx0x1xxxxxxxx0xx, 
   0xx1xx1xxxxxxxx0xx, 
   1xx0xx1xxxxxxxx0xx}}

filter: (or (= ((_ extract 2 1) (:var 0)) ((_ extract 1 0) (:var 2)))
    (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xx0xxxxxxx1x, 
   xx1xx0xx0xxxxxxx1x, 
   x0xx1xxx0xxxxxxx1x, 
   x1xx0xxx0xxxxxxx1x, 
   0xx1xxxx0xxxxxxx1x, 
   1xx0xxxx0xxxxxxx1x, 
   xx0xx1xx1xxxxxxx0x, 
   xx1xx0xx1xxxxxxx0x, 
   x0xx1xxx1xxxxxxx0x, 
   x1xx0xxx1xxxxxxx0x, 
   0xx1xxxx1xxxxxxx0x, 
   1xx0xxxx1xxxxxxx0x, 
   xx0xx1x0xxxxxxx1xx, 
   xx1xx0x0xxxxxxx1xx, 
   x0xx1xx0xxxxxxx1xx, 
   x1xx0xx0xxxxxxx1xx, 
   0xx1xxx0xxxxxxx1xx, 
   1xx0xxx0xxxxxxx1xx, 
   xx0xx1x1xxxxxxx0xx, 
   xx1xx0x1xxxxxxx0xx, 
   x0xx1xx1xxxxxxx0xx, 
   x1xx0xx1xxxxxxx0xx, 
   0xx1xxx1xxxxxxx0xx, 
   1xx0xxx1xxxxxxx0xx}}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11) (= (:var 3) (:var 4))) {
   xxxxxxxxxxxxxxxxxx \ {
   xx0xx1xxxxxxxxxxxx, 
   xx1xx0xxxxxxxxxxxx, 
   x0xx1xxxxxxxxxxxxx, 
   x1xx0xxxxxxxxxxxxx, 
   0xx1xxxxxxxxxxxxxx, 
   1xx0xxxxxxxxxxxxxx}, 
   1xx0xxxxxxxxxxx11x \ {
   1x00x1xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x, 
   10x01xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   0xx1xxxxxxxxxxx11x \ {
   0x01x1xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   01x10xxxxxxxxxx11x}, 
   x1xx0xxxxxxxxxx11x \ {
   x10x01xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   01x10xxxxxxxxxx11x, 
   11x00xxxxxxxxxx11x}, 
   11x00xxxxxxxxxx11x \ {
   110001xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   01x10xxxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x0xx1xxxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x, 
   00x11xxxxxxxxxx11x, 
   10x01xxxxxxxxxx11x}, 
   10x01xxxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   00x11xxxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   001110xxxxxxxxx11x}, 
   xx1xx0xxxxxxxxx11x \ {
   x01x10xxxxxxxxx11x, 
   x11x00xxxxxxxxx11x, 
   0x11x0xxxxxxxxx11x, 
   1x10x0xxxxxxxxx11x}, 
   1x10x0xxxxxxxxx11x \ {
   101010xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   0x11x0xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   011100xxxxxxxxx11x}, 
   x11x00xxxxxxxxx11x \ {
   011100xxxxxxxxx11x, 
   111000xxxxxxxxx11x}, 
   111000xxxxxxxxx11x, 
   011100xxxxxxxxx11x, 
   x01x10xxxxxxxxx11x \ {
   001110xxxxxxxxx11x, 
   101010xxxxxxxxx11x}, 
   101010xxxxxxxxx11x, 
   001110xxxxxxxxx11x, 
   xx0xx1xxxxxxxxx11x \ {
   x00x11xxxxxxxxx11x, 
   x10x01xxxxxxxxx11x, 
   0x01x1xxxxxxxxx11x, 
   1x00x1xxxxxxxxx11x}, 
   1x00x1xxxxxxxxx11x \ {
   100011xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   0x01x1xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   010101xxxxxxxxx11x}, 
   x10x01xxxxxxxxx11x \ {
   010101xxxxxxxxx11x, 
   110001xxxxxxxxx11x}, 
   110001xxxxxxxxx11x, 
   010101xxxxxxxxx11x, 
   x00x11xxxxxxxxx11x \ {
   000111xxxxxxxxx11x, 
   100011xxxxxxxxx11x}, 
   100011xxxxxxxxx11x, 
   000111xxxxxxxxx11x}

filter: (or (= ((_ extract 2 1) (:var 0)) #b11) (= (:var 3) #b011)) {
   xxxxxxxxxxxxxxx11x, 
   xxx011xxxxxxxxxxxx}

filter: (or (= (:var 0) #b101) (= (:var 3) #b101)) {
   xxxxxxxxxxxxxxx101, 
   xxx101xxxxxxxxxxxx}

filter: (or (= (:var 0) #b111) (= (:var 3) #b111)) {
   xxxxxxxxxxxxxxx111, 
   xxx111xxxxxxxxxxxx}

filter: (not (or (= (:var 0) (:var 2)) (= (:var 3) (:var 4)))) {
   xx0xx1xx0xxxxxxxx1, 
   xx0xx1xx1xxxxxxxx0, 
   xx0xx1x0xxxxxxxx1x, 
   xx0xx1x1xxxxxxxx0x, 
   xx0xx10xxxxxxxx1xx, 
   xx0xx11xxxxxxxx0xx, 
   xx1xx0xx0xxxxxxxx1, 
   xx1xx0xx1xxxxxxxx0, 
   xx1xx0x0xxxxxxxx1x, 
   xx1xx0x1xxxxxxxx0x, 
   xx1xx00xxxxxxxx1xx, 
   xx1xx01xxxxxxxx0xx, 
   x0xx1xxx0xxxxxxxx1, 
   x0xx1xxx1xxxxxxxx0, 
   x0xx1xx0xxxxxxxx1x, 
   x0xx1xx1xxxxxxxx0x, 
   x0xx1x0xxxxxxxx1xx, 
   x0xx1x1xxxxxxxx0xx, 
   x1xx0xxx0xxxxxxxx1, 
   x1xx0xxx1xxxxxxxx0, 
   x1xx0xx0xxxxxxxx1x, 
   x1xx0xx1xxxxxxxx0x, 
   x1xx0x0xxxxxxxx1xx, 
   x1xx0x1xxxxxxxx0xx, 
   0xx1xxxx0xxxxxxxx1, 
   0xx1xxxx1xxxxxxxx0, 
   0xx1xxx0xxxxxxxx1x, 
   0xx1xxx1xxxxxxxx0x, 
   0xx1xx0xxxxxxxx1xx, 
   0xx1xx1xxxxxxxx0xx, 
   1xx0xxxx0xxxxxxxx1, 
   1xx0xxxx1xxxxxxxx0, 
   1xx0xxx0xxxxxxxx1x, 
   1xx0xxx1xxxxxxxx0x, 
   1xx0xx0xxxxxxxx1xx, 
   1xx0xx1xxxxxxxx0xx}

filter: (= (:var 0) (:var 2)) {
   xxxxxxxxxxxxxxxxxx \ {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}}

filter: (not (= (:var 0) (:var 2))) {
   xxxxxxxx0xxxxxxxx1, 
   xxxxxxxx1xxxxxxxx0, 
   xxxxxxx0xxxxxxxx1x, 
   xxxxxxx1xxxxxxxx0x, 
   xxxxxx0xxxxxxxx1xx, 
   xxxxxx1xxxxxxxx0xx}

PASS
(test udoc_relation :time 14.15 :before-memory 0.05 :after-memory 0.05)
PASS
(test string_buffer :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test string_buffer :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test map :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test map :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test diff_logic :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test diff_logic :time 0.00 :before-memory 0.05 :after-memory 0.05)
0
2
6
8198
{1, 2, 44} : 1
{1, 2, 4, 44} : 3
PASS
(test uint_set :time 0.13 :before-memory 0.05 :after-memory 0.05)
0
2
6
8198
{1, 2, 44} : 1
{1, 2, 4, 44} : 3
PASS
(test uint_set :time 0.12 :before-memory 0.05 :after-memory 0.05)
PASS
(test list :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test list :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test small_object_allocator :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test small_object_allocator :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test timeout :time 0.00 :before-memory 0.05 :after-memory 0.05)
PASS
(test timeout :time 0.00 :before-memory 0.05 :after-memory 0.05)
[hypothesis]: a
#5 := (not a)
[hypothesis]: #5
#5 := (not a)
#6 := [hypothesis]: #5
#4 := [hypothesis]: a
#7 := [unit-resolution #4 #6]: false
[lemma #7]: a
#5 := (not a)
#10 := (or a #5)
#6 := [hypothesis]: #5
#4 := [hypothesis]: a
#7 := [unit-resolution #4 #6]: false
[lemma #7]: #10
PASS
(test proof_checker :time 0.00 :before-memory 0.05 :after-memory 0.05)
[hypothesis]: a
#5 := (not a)
[hypothesis]: #5
#5 := (not a)
#6 := [hypothesis]: #5
#4 := [hypothesis]: a
#7 := [unit-resolution #4 #6]: false
[lemma #7]: a
#5 := (not a)
#10 := (or a #5)
#6 := [hypothesis]: #5
#4 := [hypothesis]: a
#7 := [unit-resolution #4 #6]: false
[lemma #7]: #10
PASS
(test proof_checker :time 0.00 :before-memory 0.05 :after-memory 0.05)
(exists ((x Real)) (! (and (= (+ x 1.0) xp) (>= (+ x y) 0.0)) :weight 0))
(>= (+ xp y) 1.0)
PASS
(test simplifier :time 0.03 :before-memory 0.05 :after-memory 16.32)
(exists ((x Real)) (! (and (= (+ x 1.0) xp) (>= (+ x y) 0.0)) :weight 0))
(>= (+ xp y) 1.0)
PASS
(test simplifier :time 0.03 :before-memory 16.32 :after-memory 32.63)
PASS
(test bit_blaster :time 0.01 :before-memory 32.63 :after-memory 32.70)
PASS
(test bit_blaster :time 0.01 :before-memory 32.70 :after-memory 32.70)
(forall ((y S)) (! (and (p y (:var 1)) (p (:var 2) (:var 3))) :weight 0))
(forall ((y S)) (! (and (p y (:var 2)) (p (:var 1) (:var 3))) :weight 0))
(forall ((y S)) (! (and (p y (:var 2)) (p (:var 1) (:var 3))) :weight 0))
(forall ((y S) (x S)) (! (and (p x y) (p (:var 2) (:var 3))) :weight 0))
(forall ((y S) (x S)) (! (and (p x y) (p (:var 3) (:var 2))) :weight 0))
(forall ((y S) (x S)) (! (and (p x y) (p (:var 3) (:var 2))) :weight 0))
PASS
(test var_subst :time 0.01 :before-memory 32.70 :after-memory 32.70)
(forall ((y S)) (! (and (p y (:var 1)) (p (:var 2) (:var 3))) :weight 0))
(forall ((y S)) (! (and (p y (:var 2)) (p (:var 1) (:var 3))) :weight 0))
(forall ((y S)) (! (and (p y (:var 2)) (p (:var 1) (:var 3))) :weight 0))
(forall ((y S) (x S)) (! (and (p x y) (p (:var 2) (:var 3))) :weight 0))
(forall ((y S) (x S)) (! (and (p x y) (p (:var 3) (:var 2))) :weight 0))
(forall ((y S) (x S)) (! (and (p x y) (p (:var 3) (:var 2))) :weight 0))
PASS
(test var_subst :time 0.01 :before-memory 32.70 :after-memory 32.70)
WARNING: parser error
WARNING: parser error
WARNING: parser error
PASS
(test simple_parser :time 0.00 :before-memory 32.70 :after-memory 32.70)
WARNING: parser error
WARNING: parser error
WARNING: parser error
PASS
(test simple_parser :time 0.00 :before-memory 32.70 :after-memory 32.70)
1
1
1
1
PASS
(test api :time 0.03 :before-memory 32.70 :after-memory 32.74)
1
1
1
1
PASS
(test api :time 0.02 :before-memory 32.74 :after-memory 32.74)
l_true
l_true
l_true
l_false

a
l_false

a
c
l_false

a
c
e
l_true
PASS
(test cube_clause :time 0.01 :before-memory 32.74 :after-memory 32.72)
l_true
l_true
l_true
l_false

a
l_false

a
c
l_false

a
c
e
l_true
PASS
(test cube_clause :time 0.01 :before-memory 32.72 :after-memory 32.72)
x: (1, 2), y: (-2, 3), z: (-1, 5)
x: (1, 2), y: (-2, 3), z: (-4, 6)
[10, 10]
(-oo, oo)
[-10, oo)
(-oo, 10]
(-10, oo)
(-oo, 10)
[2, 10]
[-2, -1) * [-3, 0] = [0, 6]
(1, 2] * [0, 3] = [0, 6]
(1, 2) * [-3, 0] = (-6, 0]
[10, 20] / (0, 1] = [10, oo)
[5, oo)
PASS
(test old_interval :time 0.00 :before-memory 32.72 :after-memory 32.72)
x: (1, 2), y: (-2, 3), z: (-1, 5)
x: (1, 2), y: (-2, 3), z: (-4, 6)
[10, 10]
(-oo, oo)
[-10, oo)
(-oo, 10]
(-10, oo)
(-oo, 10)
[2, 10]
[-2, -1) * [-3, 0] = [0, 6]
(1, 2] * [0, 3] = [0, 6]
(1, 2) * [-3, 0] = (-6, 0]
[10, 20] / (0, 1] = [10, oo)
[5, oo)
PASS
(test old_interval :time 0.00 :before-memory 32.72 :after-memory 32.72)
Class a |-> 0
Class b |-> 0
Class c |-> 2
Class d |-> 0
Class (f a) |-> 4
Class (f b) |-> 4
Class (f c) |-> 6
asserting b <= f(a)
Class a |-> 0
Class b |-> 0
Class c |-> 2
Class d |-> 0
Class (f a) |-> 0
Class (f b) |-> 0
Class (f c) |-> 0
Class ((as const (Array Int Int)) 1) |-> 0
Class (store ((as const (Array Int Int)) 1) 1 a) |-> 1
Class (store (store ((as const (Array Int Int)) 1) 1 a) 2 b) |-> 2
Class (store ((as const (Array Int Int)) 1) 2 b) |-> 3
Class (store (store ((as const (Array Int Int)) 1) 2 b) 1 a) |-> 2
PASS
(test get_implied_equalities :time 0.03 :before-memory 32.72 :after-memory 32.74)
Class a |-> 0
Class b |-> 0
Class c |-> 2
Class d |-> 0
Class (f a) |-> 4
Class (f b) |-> 4
Class (f c) |-> 6
asserting b <= f(a)
Class a |-> 0
Class b |-> 0
Class c |-> 2
Class d |-> 0
Class (f a) |-> 0
Class (f b) |-> 0
Class (f c) |-> 0
Class ((as const (Array Int Int)) 1) |-> 0
Class (store ((as const (Array Int Int)) 1) 1 a) |-> 1
Class (store (store ((as const (Array Int Int)) 1) 1 a) 2 b) |-> 2
Class (store ((as const (Array Int Int)) 1) 2 b) |-> 3
Class (store (store ((as const (Array Int Int)) 1) 2 b) 1 a) |-> 2
PASS
(test get_implied_equalities :time 0.03 :before-memory 32.74 :after-memory 32.74)
not solved
 1 3 0 0
PASS
(test arith_simplifier_plugin :time 0.00 :before-memory 32.74 :after-memory 32.72)
not solved
 1 3 0 0
PASS
(test arith_simplifier_plugin :time 0.00 :before-memory 32.72 :after-memory 32.72)
Is (f (g (h a)) (h a)) an instance of (f (g (:var 0)) (:var 0))
yes
VAR 0:0 --> 1
(h a)
Are the arguments of (f (g (h a)) (h a)) an instance of the arguments of (f (g (:var 0)) (:var 0))
yes
VAR 0:0 --> 1
(h a)
applying substitution to
(r (:var 0) (:var 1) (:var 2))
result:
(r (h a) (:var 1) (:var 2))

Is (f (g (h a)) (g (h a))) an instance of (f (g (:var 0)) (:var 0))
no
Are the arguments of (f (g (h a)) (g (h a))) an instance of the arguments of (f (g (:var 0)) (:var 0))
no

Is (f (:var 1) (:var 0)) an instance of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(:var 0)
Are the arguments of (f (:var 1) (:var 0)) an instance of the arguments of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(:var 0)
applying substitution to
(r (:var 0) (:var 1) (:var 2))
result:
(r (:var 1) (:var 0) (:var 2))

Is (f (:var 1) (g (:var 0))) an instance of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(g (:var 0))
Are the arguments of (f (:var 1) (g (:var 0))) an instance of the arguments of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(g (:var 0))
applying substitution to
(r (:var 0) (:var 1) (:var 2))
result:
(r (:var 1) (g (:var 0)) (:var 2))

Is (f (:var 0) (:var 1)) an instance of (f (:var 1) (g (:var 0)))
no
Are the arguments of (f (:var 0) (:var 1)) an instance of the arguments of (f (:var 1) (g (:var 0)))
no

PASS
(test matcher :time 0.01 :before-memory 32.72 :after-memory 32.72)
Is (f (g (h a)) (h a)) an instance of (f (g (:var 0)) (:var 0))
yes
VAR 0:0 --> 1
(h a)
Are the arguments of (f (g (h a)) (h a)) an instance of the arguments of (f (g (:var 0)) (:var 0))
yes
VAR 0:0 --> 1
(h a)
applying substitution to
(r (:var 0) (:var 1) (:var 2))
result:
(r (h a) (:var 1) (:var 2))

Is (f (g (h a)) (g (h a))) an instance of (f (g (:var 0)) (:var 0))
no
Are the arguments of (f (g (h a)) (g (h a))) an instance of the arguments of (f (g (:var 0)) (:var 0))
no

Is (f (:var 1) (:var 0)) an instance of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(:var 0)
Are the arguments of (f (:var 1) (:var 0)) an instance of the arguments of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(:var 0)
applying substitution to
(r (:var 0) (:var 1) (:var 2))
result:
(r (:var 1) (:var 0) (:var 2))

Is (f (:var 1) (g (:var 0))) an instance of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(g (:var 0))
Are the arguments of (f (:var 1) (g (:var 0))) an instance of the arguments of (f (:var 0) (:var 1))
yes
VAR 0:0 --> 1
(:var 1)
VAR 1:0 --> 1
(g (:var 0))
applying substitution to
(r (:var 0) (:var 1) (:var 2))
result:
(r (:var 1) (g (:var 0)) (:var 2))

Is (f (:var 0) (:var 1)) an instance of (f (:var 1) (g (:var 0)))
no
Are the arguments of (f (:var 0) (:var 1)) an instance of the arguments of (f (:var 1) (g (:var 0)))
no

PASS
(test matcher :time 0.01 :before-memory 32.72 :after-memory 32.72)
PASS
(test object_allocator :time 0.13 :before-memory 32.72 :after-memory 32.72)
PASS
(test object_allocator :time 0.12 :before-memory 32.72 :after-memory 32.72)
i: 0, a: 1
i: 1, a: 2
i: 2, a: 4
i: 3, a: 8
i: 4, a: 16
i: 5, a: 32
i: 6, a: 64
i: 7, a: 128
i: 8, a: 256
i: 9, a: 512
i: 10, a: 1024
i: 11, a: 2048
i: 12, a: 4096
i: 13, a: 8192
i: 14, a: 16384
i: 15, a: 32768
i: 16, a: 65536
i: 17, a: 131072
i: 18, a: 262144
i: 19, a: 524288
i: 20, a: 1048576
i: 21, a: 2097152
i: 22, a: 4194304
i: 23, a: 8388608
i: 24, a: 16777216
i: 25, a: 33554432
i: 26, a: 67108864
i: 27, a: 134217728
i: 28, a: 268435456
i: 29, a: 536870912
i: 30, a: 1073741824
i: 31, a: 2147483648
i: 32, a: 4294967296
i: 33, a: 8589934592
i: 34, a: 17179869184
i: 35, a: 34359738368
i: 36, a: 68719476736
i: 37, a: 137438953472
i: 38, a: 274877906944
i: 39, a: 549755813888
i: 40, a: 1099511627776
i: 41, a: 2199023255552
i: 42, a: 4398046511104
i: 43, a: 8796093022208
i: 44, a: 17592186044416
i: 45, a: 35184372088832
i: 46, a: 70368744177664
i: 47, a: 140737488355328
i: 48, a: 281474976710656
i: 49, a: 562949953421312
i: 50, a: 1125899906842624
i: 51, a: 2251799813685248
i: 52, a: 4503599627370496
i: 53, a: 9007199254740992
i: 54, a: 18014398509481984
i: 55, a: 36028797018963968
i: 56, a: 72057594037927936
i: 57, a: 144115188075855872
i: 58, a: 288230376151711744
i: 59, a: 576460752303423488
i: 60, a: 1152921504606846976
i: 61, a: 2305843009213693952
i: 62, a: 4611686018427387904
i: 63, a: 9223372036854775808
i: 64, a: 18446744073709551616
i: 65, a: 36893488147419103232
i: 66, a: 73786976294838206464
i: 67, a: 147573952589676412928
i: 68, a: 295147905179352825856
i: 69, a: 590295810358705651712
i: 70, a: 1180591620717411303424
i: 71, a: 2361183241434822606848
i: 72, a: 4722366482869645213696
i: 73, a: 9444732965739290427392
i: 74, a: 18889465931478580854784
i: 75, a: 37778931862957161709568
i: 76, a: 75557863725914323419136
i: 77, a: 151115727451828646838272
i: 78, a: 302231454903657293676544
i: 79, a: 604462909807314587353088
i: 80, a: 1208925819614629174706176
i: 81, a: 2417851639229258349412352
i: 82, a: 4835703278458516698824704
i: 83, a: 9671406556917033397649408
i: 84, a: 19342813113834066795298816
i: 85, a: 38685626227668133590597632
i: 86, a: 77371252455336267181195264
i: 87, a: 154742504910672534362390528
i: 88, a: 309485009821345068724781056
i: 89, a: 618970019642690137449562112
i: 90, a: 1237940039285380274899124224
i: 91, a: 2475880078570760549798248448
i: 92, a: 4951760157141521099596496896
i: 93, a: 9903520314283042199192993792
i: 94, a: 19807040628566084398385987584
i: 95, a: 39614081257132168796771975168
i: 96, a: 79228162514264337593543950336
i: 97, a: 158456325028528675187087900672
i: 98, a: 316912650057057350374175801344
i: 99, a: 633825300114114700748351602688
i: 100, a: 1267650600228229401496703205376
i: 101, a: 2535301200456458802993406410752
i: 102, a: 5070602400912917605986812821504
i: 103, a: 10141204801825835211973625643008
i: 104, a: 20282409603651670423947251286016
i: 105, a: 40564819207303340847894502572032
i: 106, a: 81129638414606681695789005144064
i: 107, a: 162259276829213363391578010288128
i: 108, a: 324518553658426726783156020576256
i: 109, a: 649037107316853453566312041152512
i: 110, a: 1298074214633706907132624082305024
i: 111, a: 2596148429267413814265248164610048
i: 112, a: 5192296858534827628530496329220096
i: 113, a: 10384593717069655257060992658440192
i: 114, a: 20769187434139310514121985316880384
i: 115, a: 41538374868278621028243970633760768
i: 116, a: 83076749736557242056487941267521536
i: 117, a: 166153499473114484112975882535043072
i: 118, a: 332306998946228968225951765070086144
i: 119, a: 664613997892457936451903530140172288
i: 120, a: 1329227995784915872903807060280344576
i: 121, a: 2658455991569831745807614120560689152
i: 122, a: 5316911983139663491615228241121378304
i: 123, a: 10633823966279326983230456482242756608
i: 124, a: 21267647932558653966460912964485513216
i: 125, a: 42535295865117307932921825928971026432
i: 126, a: 85070591730234615865843651857942052864
i: 127, a: 170141183460469231731687303715884105728
1 -> 0
5 -> 2
16 -> 4
INT_MAX -> 30
INT_MAX/4 -> 28
a: 4294967295, b: 0
a:  743830354841113335663687211002527445691550917589907496675217161767659946515903600076263877000948019374907893503976771853840367861756440897338976262896407238579353276643916482624223533124218
b:  1937882222342677277387116053280977534409262899937645811166277832716101170624571636418378348969908886088900064046792832493580205233144692189820687388221852603391799141284194640363020431622894326596555625068799460676950
g1: 928662106305234652120879557921815175442048322670528708038
g2: 928662106305234652120879557921815175442048322670528708038

a:  423244545127019618792438730862748722049118837487058745271000712459727364397318440851984856026454492455557614189641867392327220514789420760780556945641520079685474232322016869045741
b:  182222929672515753785101969783594487544258862429066087104055694564941563445191455507873225928449597766705598656724669254876004750206829521085690425533634945782996068953175699584442152308242929110337399062350298775916166788138874978947542587182373661
g1: 217038201978197195291864091167187916339547850802146332153
g2: 217038201978197195291864091167187916339547850802146332153

a:  310103838119063891336976777122867578948333623729346070771232557923859001820492543437683082361226944586540085657409315611867012053909038410063808884528355272796073351151233936822682085395756385090083800636211231025239294605312292990228086
b:  197558326383930519000819094235265951707326694828895942810221682116874518897573702354456916198444669168124268083283110439761267782379095094918451190589997390410831154720551911123186198420613817137430547025
g1: 297406927442181972563797131275944342840026714920379649
g2: 297406927442181972563797131275944342840026714920379649

a:  -195897519009786673164161737266941193168824912957626098305779023941908887039845712000708309407562814699265575763427253545738783923215970946838094642561327662871794020455326231972682635
b:  278065338513590158254176536348448090818064848684445014830573717244814808252049222769322901677391905870623033061267014220515503684173791641175715099940476997123396583903317577816477241106742497
g1: 6373561785356011602141170419082437384673497
g2: 6373561785356011602141170419082437384673497

a:  -32654922446436027058741899029562965539020561125665116238400968481564051194967634810145607077829208904728657855083866655085560369051369477328432919642918595697460025854157025560977853898069419234059727818925993301783
b:  -1422280133407940570417333298297179252442391927691157880492515903864327946747493048985691125279049575373532446138587961748409793629730671639927664112016479080954494783631938291730049845474325784904134010413102186128326964778904603386294050
g1: 1993297756039614944826613596631533823300588213601354561694197189
g2: 1993297756039614944826613596631533823300588213601354561694197189

a:  -7110540771106925536888089600365383835067735966173054839886221720536335874639235430061821910954672215807476108971256430159621696891529847720487282435681112970081089909530832616789243325265089636327212439330356438133372711755429968647727180
b:  -4601556026190218811076567959085186438363567414726232956130049934302618845672933622494657735816969843632340680996385689012763732622843456016176157289
g1: 83828588383091471758550710187633749
g2: 83828588383091471758550710187633749

a:  3883586288873781318422140610013064189119471102985031901157075140629705862325379463369307990551910672449470718263445069787225294651493512756523240157804554281744868888797088343365546440336727985515403837811975818785281
b:  492235715494412102477016690283731544520049406530626943500829517101770796407038337701962888776827336708094951150705457014329920646213833279190246566763866624541457634957
g1: 177187750026158042119971589865139494031817
g2: 177187750026158042119971589865139494031817

a:  -15312818458133023978108424096763938862408733446508435217815598779495981670102741833867291101143148793395780566525501408664405263942396016811172103592214291797159094661281734725703928766915067775
b:  -5489995665877520907139274861753553707527523992180627681502500534301962251476666251559079935412731353595299414739196244935413316063946254184466929944295784747835012925648796444217006963947437
g1: 365523596821045481120388323457650932265196588478012899036547871
g2: 365523596821045481120388323457650932265196588478012899036547871

a:  358395869700145550441928789023417242640742822748606148820818433685637541756773721250278168365740470832197603378433909620619997900696930189154473879389480103537957793941597439777608496930218275
b:  186560762615008128029377780921088526665718829089585804512969432876946136543466657454236459301720151275676207213110127829706471047551077656702196380022377074632516753354679298412696549409847852052772816475114314415
g1: 264124086873354087266689554216392841306534153333605
g2: 264124086873354087266689554216392841306534153333605

a:  -256707005659209767902327024540154169904228554673928598069267428568945315760182206561823563757532616230872027496241647952100685812546647382073159488255169218118521977567799747617978034121129895799317161286096335933421370308596384528632765
b:  -28496679266492579987155136782076778743950557279663825473300046169264561860273968106958728076781705335556424860857204225895423832132351969924003741878243495202089985728425808100
g1: 14501416887925526137719358397703198571290433850612802412118554076001915
g2: 14501416887925526137719358397703198571290433850612802412118554076001915

a:  12327877320932909631945059388178582786653832602873663491698794615700577530592076234844170470136182960236208447471237176908057121737016316700097656100985834945711802519135450202416187665208587433971379747770932020898780870533195084743373788680841
b:  11764058994051390586457821719836568006730616885882800100447653129226044669538307108081607691018631897747590479316397024625331360287330362620719393927098481354704742008193875716056939175145
g1: 439190013864774408569463822085608765673527837
g2: 439190013864774408569463822085608765673527837

a:  -6907827555220978714895161753383857481276625167609793618916668493288519204001641756685615751302948272876700625312836198780602207778957975347675304808013811704646763131009809740053
b:  -373695777548605760443536348789052374143024443628709334254748631350658297952066044853310126889192405207600017029519195675547447962675637547663582843932264592416998032003741213280386933388640742013910491668859
g1: 1444721628472986393621153336607237332287901
g2: 1444721628472986393621153336607237332287901

a:  175195924534597543877507068435321794168550855580411413268634806591077525120299238306725394078598823552540745476118326598089272664004108947594759453156120534613074743960646290416220068439282472452359597
b:  392788686509564479371131780049561597438577823739170155647293781604114585550503182410428638669049949232704218135355953843584090521383038168094786312728853424357334226036856170879249562080408071724688977136206510263532620715608734698219883810732
g1: 722156357310772449393784444643313345855138123607390819222490398861276955832509
g2: 722156357310772449393784444643313345855138123607390819222490398861276955832509

a:  194841413476181816958579846002499081532129127838744578675618585459077512407529029475173596779583349227332545429061223799349779112095141386170719887101907590646593795556369523776557055617543448409823720850357828783
b:  -66373721312962836474182270186426847267961449527253747332653224881884954544933083887753498980181938097821763391202296902009232530567478492882087343909221997842298598532566702326497877561455009980073
g1: 153645626191081527433446595054905631870048097856688609673482187
g2: 153645626191081527433446595054905631870048097856688609673482187

a:  2449680219377093951401775337507902047913374240195182591066534934555064908956586518686800829579210811980971220193540105827994958567359153848664340105128495720957751517767561012385918441182386468745
b:  137338556515472628323196592049899975196776099241320062975800551961376492203595694391490630475246871587287632996750797065336520095743034194220113614810291020422708745511724200277851296612550165559916407163
g1: 286153640451009717663396807765058727057061088318664139943
g2: 286153640451009717663396807765058727057061088318664139943

a:  -171665263238684530480622481563513330100354204787731367965887080303887000376272467484622608456606891006064221146253297947835587130179380871058152198045889287045472948126021427184174189616895825807652124
b:  915988781846699264654511293963299065271504575852885290295939370275865106636977594158532837114284672360346304666034806580467458316131874211974688810187098340615814263401532330808390046161087272833628514708302103204001095506976572876830419
g1: 69869828857293511789512773774862039169769766464863295545991221293030681918934300611583
g2: 69869828857293511789512773774862039169769766464863295545991221293030681918934300611583

a:  2772412750423834068646404409033031724027621618928242765073196563165228729891476755171721960973997978395386083201581056506424211739515124235404221356244719189115600127239404998579755421594
b:  -157042758787437487775110006860320036219304927877508680224326456763047440197295037987791310264348669799266409534768981417466084870015683918162030562486718376090000547478255164482061644605420940162646923809572636954405
g1: 1217713223164298576393366022943021
g2: 1217713223164298576393366022943021

a:  15113268209471752063915275204051558993411355246694609424038825996486735526251668882525369974635357061960841594673407730763608121541806642665481066424935288111328240862153169019783058404130919363977727414233418455299748748247
b:  6800322172597423734156463393586084700742202677881830089940296677977545642469144271568390230843531238095791783608194775042386474098023546961590899174962780820665441847777692862144122424048940589706770476897071783399781412
g1: 120768556304634049758454195641189521073847341574333110685626143639
g2: 120768556304634049758454195641189521073847341574333110685626143639

a:  -13945088285026093766136107441385598801224805248449920050923972991775349027547429850902023218373049017661249419085075971111557457749344857566071767736762358810456542342523412959834365394563846827259945034982228571796
b:  120004406533403061982110097713559817904105584201583991257930278367609710502110729506830660010637500209593312820809920293053106329673155076324754231800389152600697453687092776506117953173
g1: 13422797159507978277261958638141874232259889157572513
g2: 13422797159507978277261958638141874232259889157572513

a:  467126524016492794062406468879218841589663493337281472963179476705704305857687337071322880820640833836520446004813207456346804466208254298165775246001167377855104728446116592357705248110311643629432337888848163298810780602
b:  31127718164846897860019041653765573215830513998218900740301831124549208030415514296412939297488146713933872500719543617954979124832967730343262816169474654604310212671039588683756235
g1: 259938283391874381322752523561200791334406270040084186102953
g2: 259938283391874381322752523561200791334406270040084186102953

a:  -120632469083493437147433963577695299890299163617206653458555620610095338819190597207557500432832194729744404750706625206062059732698958762976716029096062123912813618812198103129294367673512172948128098873028031905089565152004758620593212692188958607094346652901753765
b:  417774015074118517598969432401127727506949008660476046313423980814302999833368211651373060618667956967636483707987768926982030791989917808332193217640432216090710622655412619916119512332
g1: 28980395703435910564256151731072158604326057013778234873
g2: 28980395703435910564256151731072158604326057013778234873

a:  -273015532749100152410021880573502410710513671098559418691440574481031796554404398755088315007330552216516832487232901425533395414145027031483179785591748129823486377412089467577430221652371823247130791842
b:  -29548698105941843226128631326734936115190599813749972148029707981134708719244113692766134007911585901508098306296290360221077960765817807460523976227457240099296833844325750108112684392952642168592357879127700418091710395331
g1: 11365311606978957381593881630179458952215122678027
g2: 11365311606978957381593881630179458952215122678027

a:  1535606541475266641986203557259201441892743452888266036008730460145374026625741113317377293259537060882294262483950079761699000158592112878291186816521255152252426486504645399087204464441756729746378597989383450099136767656707256611516005
b:  6654089437217769519541691754101421546700668122289225283291753010342923099805316634821385428290806990641160749276593183137168133793916584131588797936608066926265405045680023245240995037541
g1: 10318665907223990323131463170299381247409398493187
g2: 10318665907223990323131463170299381247409398493187

a:  -27342781298125615420797255527096209685631165219057541346950868466032308056725074315294491968497708893325592949975253389648743417899207913109224062052672159118002410026057620574119577027598557242657660186897817039565354527274974156835724134
b:  -3448629329294730504652488926336710766282675165541383819293254892404162236294488386876420678799024334262773888206232925165088687803316384305949031785895740582794606852
g1: 689158045763543282090378997437287918944498202669430710766759941483274
g2: 689158045763543282090378997437287918944498202669430710766759941483274

a:  2796898684385644426590079899004576590194257629157661625792951196885677794750743324275945568152048589166544504080532651038971733747268710949141323020128027277187018438634267405414614064566927251346285846947008523
b:  -10335840824748669786264642603135169860016527425057581170566748742184308866457675036955484137798418466590496697408851929529730490103400878910236567044908752356881167217004836065924800639950136884305351370998527791
g1: 2095301868659310020912023336086652894623066321546218846762198922660739
g2: 2095301868659310020912023336086652894623066321546218846762198922660739

a:  1384674443552576305143068800284831909534038485088409197959313956122393757126399181540730774020879965837913591821219657805358853409019029421729683591824252196652754690451684352449348153596660584711881698943283979374857035739
b:  -8503093900989759356780552999703808542871183153919767478630295588361111479964795087376261387147305205640855323164847392230962567550647036671896383679530637453559095895864534661450812143268035213900536968341823096267732
g1: 939170047247507150212857785730501126075556308622761419896658885317
g2: 939170047247507150212857785730501126075556308622761419896658885317

a:  -17581170180804682616435233944058941000359641596953255427095771714107692161571384311636748356028167336590276697916814323168368617027438234433275101173647596214200089039566921050156956735724955131317497753094211615412570267786677
b:  1951132338556793645134121420450315296592821204221985567828376681401001863081985288761538634068887495237108777214311402027638566242641565216651484532156432555677915098513613654385318778348094444996847969907708
g1: 18701365504664263988293545588877194876161471243217587879
g2: 18701365504664263988293545588877194876161471243217587879

a:  -4031233765996783091335113944130236452898524041583927051553264921147242165165069248492164220685397331865941959746422870616371498451539971772733742897958862533058301142140642496327552575262494267806538461560232125200884416444872887096769607746625465463301
b:  -3227591599586336971721183562200401273844934557919258383076624693911810430285902818881662714082666804641582321592118966701057543576887486818841605148593774393896080415166355988319640514429925943243517934
g1: 1500813907173067802071708238409263177634287085985829810772658453
g2: 1500813907173067802071708238409263177634287085985829810772658453

a:  7327374904567178706362652708524463216166736435872224681625600623640953791705737800650020704224273005256274330374050188606857562791021653983656356455827965747616391933672508530050936723043723894217418611
b:  -31394022216634161873803062902836049959876292827595560037616349200604431756371450659396713300704485888103755948278764221989950589634412680317810318733418036022109757276585827002353034044737832827693827157971885753173787577136346208642612716775815651
g1: 26944763641516929658311551211160783237782770664393719810623
g2: 26944763641516929658311551211160783237782770664393719810623

a:  -6889644261452559047270297520056509495407573104239320237000294090997479384461706487550096281955128462859983107650059666455919696677570624388319822952187521504139235956623075858937
b:  88346751597561973106950131491931812995337285698012159441701427798721302233686761137913903068077078662403171311390387389456613202018165525206255260121840080741299447128877754352458883135794457689298
g1: 1113782948133124632941014018394675441382666514719394253989
g2: 1113782948133124632941014018394675441382666514719394253989

a:  -3948827553000557575029190090086915709489243092015716203572442916099406001632952870594346007337997288515165433656823386788394358091744545384324254499996409725309160909511766485193477483990025074871030337519026988962201378200247840531455626014267250151667053173188
b:  72914392923943322636006950565064193187643494692247743640992394982131582711451998902917373618318984697253991069509471304521519913411032342575734649309775908741597588413554366460900050283779294779772247084460103610355507810430629728494926
g1: 155972623789776662557498801821157851737026321058860585592718842764475584665034
g2: 155972623789776662557498801821157851737026321058860585592718842764475584665034

a:  -31612115419370924457985665966161773918635197816996953135870732099240193716978264809573788398618138982018454843155312658832210304736882752118672728925471537711069236558354066520704539166089350
b:  4137025467436949637519724100463479023128489154085937637048158619426635072500246629844316211954495653632729324377339174926989202396603893832806398268576199389618386202986291460556136680152527151703788873697966523696975
g1: 645851843574743133864373749395499961265488777855727975
g2: 645851843574743133864373749395499961265488777855727975

a:  109561093102735536478679401882114268099959234849901650598010139924023755114562293083639508634385584574206644996536147996275189605752039321259717984088365211620399818886757040914045008959842
b:  76325150482964260891024747088993486465151827727040845845228254583256845055724656907078393125082401924868637994579102620823333194795572338837286753096889730940828197125252439
g1: 74590695547166445994623255956847186556389
g2: 74590695547166445994623255956847186556389

a:  856300400467332139453303129305898185716779650587450857297454051992417313087708629407836311119464781818908836379512727751489835835474666022709867820706653756377538329395305759821321173496480995228949523716385625351319
b:  4508395209654741849017805889015413969329807817931883877611047085817473176198100481174937653222911504575455752751072786834557411021936788149762909384235836520646186225379109774901253792921567057213529169000296491
g1: 1721513532739304133852545776670878338908326905519
g2: 1721513532739304133852545776670878338908326905519

a:  328900178785280128951242086507807303016273988325680314021841805689857138468687198105692352244749219644647465316969413861561546162284833693874730282869588770818551571473753208588989717545084503737109890592082032013
b:  3113555046570917766127446749070448394971893452303973685710447926684479860179040541598654364105795378034668557444804510197189862535108180705747045230083075231323344639024141520867958313213407883792196305477010
g1: 1086905378425773275529517128489733219626857124895834676444811694752266357
g2: 1086905378425773275529517128489733219626857124895834676444811694752266357

a:  -987787853060879520644149635142694338537216469723008951829171761226563359129972206593240772843121999122519420140573168205087534233506223217467811841237280932659200271855009666014211873037247812794134
b:  132081218741045573025677602353428431485798230581948656967108976102467983993292161630109483487682094338810456384517623717630095441583892992524320979123851301916291134243062392827732611157329632232718441042513082445965
g1: 17999980218737185017453544864533103845673774175198843
g2: 17999980218737185017453544864533103845673774175198843

a:  -458293586587439683065153537736060588593947119675665739837517726399204619941017042373143411673845156534933280552141723036884635204714070625919119244224280700337908125006568939027396161928713183257146
b:  -36255629851989538155810021922305987357632734104693340814513552765714597170153947599896162682324741462568692589136288492653447950453174210785226312716596209343783695441920373876
g1: 2151274793544734894913853074549926596785506634669115437443198
g2: 2151274793544734894913853074549926596785506634669115437443198

a:  5564183181949933032084022224027591772592078827591403718244067327366888279789791515576100533107793708113303772692331108560096800814475474781015766870453320150693619725
b:  -343080894555400922789689050828769001682496448859091448943666376899402051309891762612872206795009458619865130559923312580204999749812971081883140400414486163582199663244283276081102545549398852691825023357836179262931829011
g1: 31380301775009651024467090560746219460074311
g2: 31380301775009651024467090560746219460074311

a:  -1337304000656658651529100605486465674653862652116584079227394939884492133710363428252267426922723650409598183582964442698398050483031443108872602849093016056295353999248470075055217674511980137467624240320314927
b:  4945072057056181731343340753785191065302062828923958654824483654906472440769385176930077601884641824768386885321486266159196911149427560952886107095813686935537220505333541975730578889291354151021662493164709887018271439653
g1: 9190722393140278523414826876847487083323058713177102949901
g2: 9190722393140278523414826876847487083323058713177102949901

a:  -880122659205907766575277568596406702349917285297339203590087391235231253871607258659618493524465171485733254459464747670196808081527525267403848872585446430471202798324837042628032444164975
b:  -829446004320217806490741153086506445309329483224782503618412792392176597006946855150827342740084316427387435912875851935939017280751721235966697836022818544801636818400718442884459844689565866355989419
g1: 648742266423031530296330684624408112626243
g2: 648742266423031530296330684624408112626243

a:  76117322702843076233049956750495706842155114543384031421534928034359630862541132624044244653849768819099786765088114249974798376647382114736947525626660406112186323626903902643060527740567874984037789455410059321110215489433737332274761
b:  -200321523548712007008616541064780423798963109761487227291846056937325488726726394169825980076384368487827968333015690868767743098345349202854585558212267175213432308403151
g1: 1531810467954989620464368193333613292414565098291150665057
g2: 1531810467954989620464368193333613292414565098291150665057

a:  -149129260007282125089996811532943826543060243537839747837143748454669604884031467401768011779674772755413026449847511049519334658236791277102432133764720822640087867638737265889842881845606217297944632934168857596654015
b:  123919070334805208590963912595772421151762486403821628896919017852560854652599296817053742716973383917931687046045147648854031159628254430498102538469433202324058202486017653743103963444288876
g1: 788996176824618591452683579028728502171937320162323852585329710247795523977263559184723721
g2: 788996176824618591452683579028728502171937320162323852585329710247795523977263559184723721

a:  75213196381012984805196845937607924867762794341065186569201600418816204810264068493667438815322950945008961593363411414672512891198455133582991791489743852629157333069840408299182690978876450396664130285873946775
b:  -679234183205704045295177769226237588970670864380560757713642654014223132181857470410682104076789131687482434576107286362627427842228152605829130225283210435028075301731714006637208125239756958196397495626127087352214068478107307575
g1: 38969138670267004175611456321296644923701720886775
g2: 38969138670267004175611456321296644923701720886775

a:  522948977690604897517008797408857264871798579367868996770770194162887766847861525926092970932319459814908255666216278625192729483046300706983351117081702860327190347349806866967667093741587234104761926
b:  -440108234417535697342543860545179331368338498272673502398295140902714081960062613807974251470122166697766731615958260274996315827710414758048308939352956330978426268461923900900425090551999196528689286609827264289099883542940349617126
g1: 65471349719451949082054004178662019312356594323921859317259805462620144002
g2: 65471349719451949082054004178662019312356594323921859317259805462620144002

a:  -30656082474454150931042916148020007900729213840021832725591833708279569703926571683646499333519740676664868322987555365852711134215089874767035263100964106405583253751470682592038640868098066756460121349938501854360043830775
b:  421039965218950884507181914665069615829555967850759708663145269040717058350126475869848274603649900950044459846540244544057613722713162253160695496077569411678884047952560509500943915181
g1: 820172125806949158982123398224960217047499590689261
g2: 820172125806949158982123398224960217047499590689261

a:  -670717732051852719973743408412274560093271063796592526925541716214907479052800475674846222041971466249163823570090100684068900267837054840308348582730958514912452071246646213122822866566475821684064985035946241107421380760829868311874109620190152056445
b:  -1994215985836914080635272432102777596548400209134002567776497654821281874102724726322058768948067827584177438569454616925842487573763129738064355736356084528400196230253778464706603427840344178199303
g1: 136783701049096686367406287523917285240715101769835239826629
g2: 136783701049096686367406287523917285240715101769835239826629

a:  410261434026582552642010011744804085027437870348439055405156491747912512105875400502589683430536673013895247514607973488165078930821544361718834854041941678539046585466404087775804325052198198834300
b:  -1764018360066687653632449660294734800100760223687891639545124403978147589290214298644866408470970553230410746537853470693609890161870559865210005685036553379978417705744874083548538822664973858597927769048314410726
g1: 2209194915098481356845275249142449163218268212488034
g2: 2209194915098481356845275249142449163218268212488034

a:  2517282528279910027481922464731638075558055989368125296448135503088641381656840160631989425590509548098387297834377033198775283137517107912879725631306464201046309498531111233815677
b:  4942295261445974771286949349741893296620933758576980364251926496312560455695471184689386869430549058455595892934126312438590403568769167962308536368295772084872438084595070436544947780678
g1: 17477566629945192562471576916884954110403
g2: 17477566629945192562471576916884954110403

a:  222080953466272591199075685926070986449690197545177424948221464175614296816150792216146981230467722745372842241654252947958894873066551754501797863509499913290930227125991025205626388067556110108100514141822405069711373777925
b:  4017617934712179466936807180297524109100071513171281860791553210854089166106670691028492348187290690111215256078843749209807622517332893180959866162706618294025565859229463279161575605
g1: 428132322655336791458701484849810348963343786336189049265
g2: 428132322655336791458701484849810348963343786336189049265

a:  -6209707377372051284010195298515283742045443889479106516099130319418474510624766557151611982920564481309276848363856798487352765034550902856533413205780026077482987485063287891205
b:  -21013508679003231068789794113638815334263335478632632058592833356113455483485937425658172532930550046431753668030378425811640273273402863317843434011782110522069246792606177484537001126675173185139334753
g1: 60826941244850147395694238692970880578434047991
g2: 60826941244850147395694238692970880578434047991

g: 2147483648
213^{1/5}: 3
-213^{1/5}: -2
log2(0): 0
log2(1): 0
log2(2): 1
log2(3): 1
log2(4): 2
log2(5): 2
log2(6): 2
log2(7): 2
log2(8): 3
log2(9): 3
log2(10): 3
log2(11): 3
log2(12): 3
log2(13): 3
log2(14): 3
log2(15): 3
log2(16): 4
log2(17): 4
log2(18): 4
log2(19): 4
log2(20): 4
log2(21): 4
log2(22): 4
log2(23): 4
log2(24): 4
log2(25): 4
log2(26): 4
log2(27): 4
log2(28): 4
log2(29): 4
log2(30): 4
log2(31): 4
log2(32): 5
log2(33): 5
log2(34): 5
log2(35): 5
log2(36): 5
log2(37): 5
log2(38): 5
log2(39): 5
log2(40): 5
log2(41): 5
log2(42): 5
log2(43): 5
log2(44): 5
log2(45): 5
log2(46): 5
log2(47): 5
log2(48): 5
log2(49): 5
log2(50): 5
log2(51): 5
log2(52): 5
log2(53): 5
log2(54): 5
log2(55): 5
log2(56): 5
log2(57): 5
log2(58): 5
log2(59): 5
log2(60): 5
log2(61): 5
log2(62): 5
log2(63): 5
log2(64): 6
a: 1000231
b: 102928187172727273
b: 102951963583964173000063
r: 18446744075857035263
expected: 18446744075857035263
minint: -9223372036854775808
4294967295 4294967295
1002034040050606089383838288182
1002034040050606089383838288182
*-2 = 
-2004068080101212178767676576364
v2:
4294967296
v2*v2:
18446744073709551616
v2:
4294967296
v2*v2:
18446744073709551616
v2: 115792089237316195423570985008687907853269984665640564039457584007913129639936
PASS
(test mpz :time 0.08 :before-memory 32.72 :after-memory 32.72)
i: 0, a: 1
i: 1, a: 2
i: 2, a: 4
i: 3, a: 8
i: 4, a: 16
i: 5, a: 32
i: 6, a: 64
i: 7, a: 128
i: 8, a: 256
i: 9, a: 512
i: 10, a: 1024
i: 11, a: 2048
i: 12, a: 4096
i: 13, a: 8192
i: 14, a: 16384
i: 15, a: 32768
i: 16, a: 65536
i: 17, a: 131072
i: 18, a: 262144
i: 19, a: 524288
i: 20, a: 1048576
i: 21, a: 2097152
i: 22, a: 4194304
i: 23, a: 8388608
i: 24, a: 16777216
i: 25, a: 33554432
i: 26, a: 67108864
i: 27, a: 134217728
i: 28, a: 268435456
i: 29, a: 536870912
i: 30, a: 1073741824
i: 31, a: 2147483648
i: 32, a: 4294967296
i: 33, a: 8589934592
i: 34, a: 17179869184
i: 35, a: 34359738368
i: 36, a: 68719476736
i: 37, a: 137438953472
i: 38, a: 274877906944
i: 39, a: 549755813888
i: 40, a: 1099511627776
i: 41, a: 2199023255552
i: 42, a: 4398046511104
i: 43, a: 8796093022208
i: 44, a: 17592186044416
i: 45, a: 35184372088832
i: 46, a: 70368744177664
i: 47, a: 140737488355328
i: 48, a: 281474976710656
i: 49, a: 562949953421312
i: 50, a: 1125899906842624
i: 51, a: 2251799813685248
i: 52, a: 4503599627370496
i: 53, a: 9007199254740992
i: 54, a: 18014398509481984
i: 55, a: 36028797018963968
i: 56, a: 72057594037927936
i: 57, a: 144115188075855872
i: 58, a: 288230376151711744
i: 59, a: 576460752303423488
i: 60, a: 1152921504606846976
i: 61, a: 2305843009213693952
i: 62, a: 4611686018427387904
i: 63, a: 9223372036854775808
i: 64, a: 18446744073709551616
i: 65, a: 36893488147419103232
i: 66, a: 73786976294838206464
i: 67, a: 147573952589676412928
i: 68, a: 295147905179352825856
i: 69, a: 590295810358705651712
i: 70, a: 1180591620717411303424
i: 71, a: 2361183241434822606848
i: 72, a: 4722366482869645213696
i: 73, a: 9444732965739290427392
i: 74, a: 18889465931478580854784
i: 75, a: 37778931862957161709568
i: 76, a: 75557863725914323419136
i: 77, a: 151115727451828646838272
i: 78, a: 302231454903657293676544
i: 79, a: 604462909807314587353088
i: 80, a: 1208925819614629174706176
i: 81, a: 2417851639229258349412352
i: 82, a: 4835703278458516698824704
i: 83, a: 9671406556917033397649408
i: 84, a: 19342813113834066795298816
i: 85, a: 38685626227668133590597632
i: 86, a: 77371252455336267181195264
i: 87, a: 154742504910672534362390528
i: 88, a: 309485009821345068724781056
i: 89, a: 618970019642690137449562112
i: 90, a: 1237940039285380274899124224
i: 91, a: 2475880078570760549798248448
i: 92, a: 4951760157141521099596496896
i: 93, a: 9903520314283042199192993792
i: 94, a: 19807040628566084398385987584
i: 95, a: 39614081257132168796771975168
i: 96, a: 79228162514264337593543950336
i: 97, a: 158456325028528675187087900672
i: 98, a: 316912650057057350374175801344
i: 99, a: 633825300114114700748351602688
i: 100, a: 1267650600228229401496703205376
i: 101, a: 2535301200456458802993406410752
i: 102, a: 5070602400912917605986812821504
i: 103, a: 10141204801825835211973625643008
i: 104, a: 20282409603651670423947251286016
i: 105, a: 40564819207303340847894502572032
i: 106, a: 81129638414606681695789005144064
i: 107, a: 162259276829213363391578010288128
i: 108, a: 324518553658426726783156020576256
i: 109, a: 649037107316853453566312041152512
i: 110, a: 1298074214633706907132624082305024
i: 111, a: 2596148429267413814265248164610048
i: 112, a: 5192296858534827628530496329220096
i: 113, a: 10384593717069655257060992658440192
i: 114, a: 20769187434139310514121985316880384
i: 115, a: 41538374868278621028243970633760768
i: 116, a: 83076749736557242056487941267521536
i: 117, a: 166153499473114484112975882535043072
i: 118, a: 332306998946228968225951765070086144
i: 119, a: 664613997892457936451903530140172288
i: 120, a: 1329227995784915872903807060280344576
i: 121, a: 2658455991569831745807614120560689152
i: 122, a: 5316911983139663491615228241121378304
i: 123, a: 10633823966279326983230456482242756608
i: 124, a: 21267647932558653966460912964485513216
i: 125, a: 42535295865117307932921825928971026432
i: 126, a: 85070591730234615865843651857942052864
i: 127, a: 170141183460469231731687303715884105728
1 -> 0
5 -> 2
16 -> 4
INT_MAX -> 30
INT_MAX/4 -> 28
a: 4294967295, b: 0
a:  -168467067481663903977174712412131079127809658914447376435640199351081753219528927138175722181134199012809571289734095351064567282466861035759143357680420898723105884095025
b:  2444374638435802255823877461002941489168588502815966608936667598607498996069826019955056430766831776327329306755429556490035597522897888466136857290000844647079101938093146984528152831251
g1: 7808179208668026585711255334762083927976069191303152557815331
g2: 7808179208668026585711255334762083927976069191303152557815331

a:  1735018445396727013600304741011933159981912697626914355525154638583536227106120995668443431479065705791469882971118169420517522439795234079346336385771139962344104882936866494648491080745686140604302103147399496475
b:  -288286948459647739919171020483756714927577625275529656726175647558281868972493437896811628776696900056325160125577743870907509720075861584829550485768174228809694777960441952418190181401712700829388892012630405138865781
g1: 820484908397580818526860221531730099634541032300648437929540149
g2: 820484908397580818526860221531730099634541032300648437929540149

a:  -25325400465448846805455166261129610464310420360168471893867003318597920943258054392278976062203493206225026638065050804090765855003267030995428767883986552603385073366127259014325301884055302
b:  487178164998868937977900973671209726824225721186899672843938531557799902728747072592094399672904138070440832276675536875274534841613498769847069882377621121378073505362378293569131651533769678534865377326208962517281
g1: 1363969605926052860456097037587286420047073545081883246886317079471
g2: 1363969605926052860456097037587286420047073545081883246886317079471

a:  2301128953219123281692912696603366479480794443811658798639771688417559148912334903845691418702134797820312376875880291157532966625210443440993808120742441358140255926027844232524658038851076707975883876898610859
b:  6294113825313144695636712624988128804162406622226236115910942159935235114851685181971505857165887149935547735614856517736092733360330281941994845035548629515157277750966908383299605503483861379719608552916697468
g1: 51764774489047214223414839437521849505735875354198179260074557
g2: 51764774489047214223414839437521849505735875354198179260074557

a:  1140095227742461113331294547823460771740885325817509309996174352822464479551888326803083945693258422010219048122719400909087544142307497453232652854767242749211082329781468697350036121167045105248576142568287002826165033486423329605809397457576906715
b:  -1507825173788460135901770401474646458616579010307093004813295432913066259232787772284893541290056764856050939532995349550306857889320216447042415163314282582197632621394596746123452864288479880420231678834
g1: 1174191721603694181488225344238966610872099239950268053237734073
g2: 1174191721603694181488225344238966610872099239950268053237734073

a:  28798649259069183347868210986495214833353768048985030327005831807449944216429839699772397678117858525882878498595660456236996199919817095791752516826462611833621845059464978
b:  -1171328238916069733395271981790147523606065716212940164361247253369313443722802677840901223325087394224347435249212010228163838209778518811181885019245106803531641286866026549612436524450259389361325202018945250636209075709
g1: 6169364263156734034109960377439284725560670107
g2: 6169364263156734034109960377439284725560670107

a:  -22089250809071785595434034519417230920351890419832747420335059300426923779118304290824723806571845397521572677792193866949806715123916736261641134918059780469882304309303942300039433444265584469536854803309400282495505832588956922444984450
b:  -6638733807676753970139560167141722570158270053916668716899208494301538725437390521874771536455221312372270609948138468396346963891128100429032432253260406960384639827764050376629066185567331605706016672803324684197163413484
g1: 3453073418077420845182189288236442936245258167072937789712096054277178733011442
g2: 3453073418077420845182189288236442936245258167072937789712096054277178733011442

a:  237799369822820926516909878339058026616973447834779749750146059626335296496232030721365065029900191694166552967536763753577730527260822107267661353594727732863529367636133756684954806291344663868166785214530096982421
b:  -6974244646367248525488163793847522139242076340049958811061752552244546509512032311379811071982277347410303852097570365790843255257156139513797751087154794792330607886710056485053798686934758697648468808985880337
g1: 84726320933131417367744261905693074526923680384761747731981123
g2: 84726320933131417367744261905693074526923680384761747731981123

a:  -51701631425218359471983815546020841848829921462526468720214744730515504786765950033904341985645334333979964317958541600857729245384426666414712417514278066703518581254618038770794111279013997302664967649687002873734065131619719553152342511188844
b:  -54380667301694429875030484153673436218460036995999593077846438259175764662166308300722078800457524459693082833973609708895471067657150185127756928846632853281462872831929177822041019568898798056920839110631566101346020967975
g1: 147822375042442651051655827349066814395798966963765675896844899763738136229
g2: 147822375042442651051655827349066814395798966963765675896844899763738136229

a:  23999744499696764019629661524264886849865294015195187857592383558477945049716521763973018116594001953068650133872078705543560112433078041953843308964615778244705096856238871059891220685
b:  4882479235853472767370415174874186559073649545027768221331843066411791545835584458245817410316195456626471030031137717670121562867616281165158705519522467420539380990190305536365270275990737964462572691412
g1: 387818974516604113704881643978079399
g2: 387818974516604113704881643978079399

a:  11494132798697147283122850657158572919528897086039449304473967719182410150543004050657649551897288000322141034528954110500691763137639382629284550631253137334635846626235476290478256225462183260300
b:  33749403854583603575349613085147014240867695989163747376795180303845902535473081013162819823902348894483284846560266714302459025901982035189342096747648085058605103621636810277697982780449759781455882250540242466635645668275086105355076190027780005460025
g1: 927465018368952245731193529474395096796228955945382744039222451855475
g2: 927465018368952245731193529474395096796228955945382744039222451855475

a:  819203848505952067331132149394949351755687127642100465952090509463370772087862031241736262970795499903843636606385291420089141224611708305167155099444739918265921519354572524410329292520099353430427374176919632119603946414394632351096177
b:  2374166728030160680617199997539108479318483285181407496240147092038022607134537367001433475288760597511590567415848171537062085018691612733230979513330343891739124057355842776336515263571652410665310525276775
g1: 760582095916587727407113035804176853856414953741329202688607796956059
g2: 760582095916587727407113035804176853856414953741329202688607796956059

a:  118421104221082190827830086139202256432109845098653431798267457822267124137491805383546770071707009091949128506437693118994438942204146472165614405840290963364784739342835948841952641800752901319944750959039
b:  -5193153324433912688982825636587704424329332702993279152235394259870645827070165193610920265824487832914796638488603345493689217204931221400672955250229961131158126768376997990480197023655806863463440539157107526251597843035225094193
g1: 734969368107714903583883024216277689866176390204187846373
g2: 734969368107714903583883024216277689866176390204187846373

a:  -567398528383724558670778529519869374109277976651774775829300360371000696219625208771757450075224427743411450988890864397769794248920782007560272941289640312123808964021612924212390895002889536971733524829575
b:  4276228789027909035487887785227833505673171039567721601457643457478477984610246778233448535849916702973890019984003876925864039768117661147205368573851683371115448797537210192167669902698634025
g1: 80544242041296705121734503042624758904490425
g2: 80544242041296705121734503042624758904490425

a:  3036341514175120240480307503781476193755088903641042478326805648781918430007551853871222577042157365497084840001830200249736558923439490253689316304872923302270961532943544645772474515894956596485416733422244768087970288658025
b:  -93531670319968676769776807650166621336423213633399544587515756596781784876429370816146077565314986138280909943418898463504274954658572466893701009448720577077143511278725885194425820407644734475
g1: 856819910550626503113346535710154817918988775
g2: 856819910550626503113346535710154817918988775

a:  -1226856239122788022207895525012169732934729577081422692303349670906436169355632387663657179422827756636139531131812011807177668201803915591840453698490139213943571789118701551370702098435352712150549
b:  423604602466960023882443216262554757006491401322980992209176427181250433777597565228627383586446440969253242200595932158891256688580927508380948337057105268766969053080579660772073325991954975454165
g1: 261694458095504211789002407334890381431429536142165172425140809406635958059
g2: 261694458095504211789002407334890381431429536142165172425140809406635958059

a:  22121620248777597382207940801047659539948162672004544408390072834228839239628321349089239769961895090670763559683318919778487614002243570325491386477561653494932251395001859116057195748055711690974270
b:  5147994056992539665210214431094322740074632572841858392722574593227367101358980470156527067244904086363780194085862053535190295144575345725714507100108728064222880062640963784041492930065597988988343937726946816847843
g1: 1730183007291798715943135609675495276425365420301
g2: 1730183007291798715943135609675495276425365420301

a:  -66621747053938134690456271642932877003912122725871143224752977334992393913123347143302750987209665600818058030352504195555993971565074649236004973066248755912383033345352832617612572965371394904824419045828535417595666850
b:  40833202764665568193147787361706346101499179347516560273653416228945330593706590774444770987117841728279196272916344593618480280749699026180971346672996151361837377123760124712396896910230196217
g1: 14953331887649307128811210784581035104409278284474912840650084197
g2: 14953331887649307128811210784581035104409278284474912840650084197

a:  -34703103209262325741019282620355904152418629325880524967100899079181857243020447554996086888706046648906758550195012725571936913520856988955775514906307815998184166689272864929963454240839498239514413192867777561720748617754033
b:  -66319160837077127192327691690637758618001568164725090136581677659371215214284408331011744604177827964539438082177198789572827390118282378179591969328415914926515215504059202726994054927285970413810925403843224494612433891137949335628
g1: 258089374823658534688876364125913439325784144552472879886774484714711
g2: 258089374823658534688876364125913439325784144552472879886774484714711

a:  400800630401834730776924184704900942432348647480371782831987041942746137030307494549149893291345246008823956240226568190404636806052996249316255754804592529735180898329935196588500078472332860758538504875387783583897170414656483
b:  7773389816389420412312044440243505145437683298837475753953718405321487981367696603244190502219645346360950467133414055402568889959421034063356234588147786609640264913
g1: 39560327643837279821038635168414407
g2: 39560327643837279821038635168414407

a:  1794702392417352170087370910718785281579841662433860442598136087488335468813209732374052198354668785190738749196670151554423519872472208950155978969087780445395374485402538122893566806781531265726511995674742120406101891159663231
b:  -83571326267228329726554279236174345457120311886643110964712308930233456691216992204590511292593299277765391538711428092393740731759103892633611179233205651542506131828537596375191394111770245813329480568399455688099011018417393972122392592785100939809964098475
g1: 21823488885418712241602358112830445963335229229545544082454217646585811
g2: 21823488885418712241602358112830445963335229229545544082454217646585811

a:  -1279888844330913423723933566331511551957274732965090424829330578023906905730318627074764379337793040820395166958908436320742168907596805101353232247220324423852116
b:  371947715899036075937331404707744077097533416296175935204311522013526899812471852978232197181613650923915862988195802210682034295746302317435831237567730322508383950221856364690988052694989422733
g1: 4683773470601789654728991358209269
g2: 4683773470601789654728991358209269

a:  -1244014993370841011559435859040404873277080074491062530270360646297560888697686271583622770300077960441300375400524296761857175231189707566947368070963578711421085881254735555145234111432216479147837237537424324885053988507811810844074075
b:  -625430816788736270934232118898158333431522192724946339196606587841618199592437202124732695761231060794790146156012231729019571450947769471292600607905628084388621557932466018351600473896697126338467103363753293847
g1: 31309182395316682266152475160359715458525662984652827651475448500169950009
g2: 31309182395316682266152475160359715458525662984652827651475448500169950009

a:  -259612894071456212648412608573119457373929398157503043968493279059176797147202052280029962301867846890697860387181576620482440231265209539193177344432704754866963348728774299621165058991142527778891942193582406911
b:  39792315266890637645972986645169770207933384618204131873978907963258415184653873765657504406821294986439896875794835067019666894891000548780106618382847675185908928164776617840485869858623200369607885900895573940406722674009518
g1: 828181094309281428957711851153401616283148593831203579828011
g2: 828181094309281428957711851153401616283148593831203579828011

a:  -3654112423726459474286440393358966130418600360144879830558738573673344408018831423380089548083166434490756291571176333976570747082547017041672967732057822673224162740829635815238133404711553407685502767784935628722475090969903073283649788654799
b:  1276568471843060297882045350518337816522655155148268117643460933390534124156741786710782604912555002530369501673723355925002766012779557831306445829562673771517608368906278969998483464031057751648437991347629354314103675764752429185
g1: 2822468435372848124437779024580868697324697015392401151585113254766977609
g2: 2822468435372848124437779024580868697324697015392401151585113254766977609

a:  28838238719406546989312647325383627272579714031470097354360572600186127904077533742488994054861877050464162117180234134770989569772336447602381030955826768694538927399893817481023686760748593306328741407615642026354943497740161772576007412650084565568575
b:  -1409259977478869438470929811544779756427275968625871770567103739951812006593602336689669868710203015550530894126371628310946510621110037332140578667670843072398870826028256860753006784590719480928921641256876599086325849841460
g1: 81946452941270755636472782020742077891107265088894504346668750549930508469835
g2: 81946452941270755636472782020742077891107265088894504346668750549930508469835

a:  5640848304431568424075547792356298531227576540684393481592249344965274863923914994066045765712508109891837289538657131146788588306593508149275720416910949551642818552912644146530919703122504799339416169297794061828571149435958429373848012999
b:  18491671743611480039828270785976827358195604459094083574262144144022770920330064913006500462908382297099340801855449970575667535153274991366073279012810611807169371199611195145614878431073199254414742197792027992968382559727476695414061
g1: 522094731858799894935514733073034044564361980675907927794357354853059984199
g2: 522094731858799894935514733073034044564361980675907927794357354853059984199

a:  -841025060272782187465500686420713831705558031891053601167666527674741813907010826970636338292316443245917665910631695517841679556380027286744280934767995042418082356518203339423594459613392060991012
b:  -72644837424677420662702186352004457788215936114112604034810352684930844309352711925865460307815101492217063016959155853328987854812536271966615229798839411316959473041374150710721606471109925306485648075735861114075
g1: 714030453603563828262335480756108475690932991231198013343
g2: 714030453603563828262335480756108475690932991231198013343

a:  -1296466999831963024824984086003109466541327969510223521086443951434352327408091986664622847060456838900429106823691200487379756697171091439206040345069490014611332272275927813858436388379944076793662229511679911
b:  -208570164186406032532948814754129410335709824877915393159183833506907706382148582038463991214870814360513519174694595472937590049461707794896764605518292898917136197817722639208013727520899325631194856076
g1: 369847384671477156468569561085899015803425793440055799717297
g2: 369847384671477156468569561085899015803425793440055799717297

a:  4071762793565727803091777418393621209420159852629767965305228703638676316941682238251640846169584080170704625734609570166245014536735237371348079868833261477994036282426266315018166326953460353143927449063011
b:  2995620972415351249467296899865679221649741427278732195007587293765428709513029400466864099615764060871466889445094769659088578068804912429062238197828452489960853839968177422938570786243251728093799437326566318931922893955860961078967551603788265680067509864826473435154822449
g1: 5728153454981725659232839218489499206685688543132787892760961917917807517826393838861257
g2: 5728153454981725659232839218489499206685688543132787892760961917917807517826393838861257

a:  37921027811399757050443135911778249282434631930128432801387377958470487072085767634789237266015758247306096730760436691289704280825132693957620207730347981303241870151199320794875025154218570199
b:  4158047264661974406834352939878149056830331126337169782590603316281792447748370898929397187455647269755018199698287180546907539420132111620618757393970780253363457046249129450434927409147176792588
g1: 16149071034391287329679188355323895320399450208193683
g2: 16149071034391287329679188355323895320399450208193683

a:  -2588668377582663585379762756844242100138131246476540742631516759593240341354838059226235591265935513024494991263639015244801110887739822514660090563391205878290732025117228571982157081151698996297595614010384502949438833365187937703
b:  -81823288646954733147132237959242656234206722762755047330826141498707072233458872812083181886843018768792436265540076487782372532085585417980942449171231226465270890198628
g1: 2385785868797674705035763240066485396264086746695117
g2: 2385785868797674705035763240066485396264086746695117

a:  1492313718644860878014443237521523778081068578147343668281169815956010728848691394474503447801939616588881396977479018488294675813219871998291157488505395719176450218443692745832819154798150408793062918647
b:  13802884876696383427859919817166740887818179622057006841367492839476978742865000599615828858184826520626186799688710140745112494327245450497792177803028717891906014007955770528132510094416498076653529751509556442586
g1: 3438985664076972294661577433456232174972820589103067
g2: 3438985664076972294661577433456232174972820589103067

a:  222696173954812007391945765761881476481030791272570676925676819294615243337960305940373755461922138922869520718857926290679169533309898756169389246410028014536442432255987470910039645481993412196709341039946426773820170158300
b:  -153234770756607215851384922434032189813790771449048219253100267908030734442577971124049126571542660234501484543771124389600107389473845168005832667502452782630311642830495082315
g1: 28553828037930187553607186179559986557241391733389605345
g2: 28553828037930187553607186179559986557241391733389605345

a:  9240732072331200992478367093351062291459212822907463801689507432761237878398439716210100908388581888587763330459732817511679541866125326905405618154483687299967933831
b:  3557483001511971485545925300362685959153899738992308925674968891737548442796088630023642069638737217667366983811765043634460039707288451098670339279690510057750448577821121246986053238829899978100933607276675
g1: 99394357659344223110806253903471185833705176904161393
g2: 99394357659344223110806253903471185833705176904161393

a:  16867062899581818141591032390399691543118830932093673268124526704634330497898671373390165617331643421404779906300372930763349730315053206850347013760088667850103917649066450607348143332152515126635130713352278196986322486880246468
b:  -5331681040445832679891575488322899431040260466744870116732857364181914692476879502627157146581120929446579231612262209158979913959093240247672381523816707903273887787866110020
g1: 4302201223358541067980240792413438995975303507856434228
g2: 4302201223358541067980240792413438995975303507856434228

a:  -1127684397396893074900221271028952847773775752536389833856146533038172677922520055732005283252162552828088599169657905452720825372117627783240710255984883636541342068258703779946558439252791728972604231925553
b:  1394797359356817243071372000600068772710967749674086321009818706131331717703104203433615698587460818705142784333609220987544376132876444966665138234106321078300824799174437469157852904411194046964923978506190283753584085301005552253
g1: 16197678722959537196312967517612207745955816541863
g2: 16197678722959537196312967517612207745955816541863

a:  5009230859957488794308171254890727201029820268147354310057401607958415999368844301407461762525917463106506837388205222463668352105519727280669777948972766438834563539484118237309727453195
b:  443019507371962137664315753207132585238653978550572149857465266340040531309108296809291461557520601327140988708869644455500649011740003344817818473832590153377424481156962913739928971632766917887316776933085
g1: 186797110160792536328037360861602963257999516036698450070715
g2: 186797110160792536328037360861602963257999516036698450070715

a:  -2387615722672195733637787874244244411625444291607391719900531898485086427211057764388288996738757678694315098677336827565791565667848356868553172831913926421963195193844547568249484786334402767185999301378415135140587942568089473656728421994561125475659713828292507
b:  2746071383442798509584243930099531007970647473536601865414205204296038949501992089619563027208505292977309215673365269913414149743876567034074387997444920495173543812648332138759542345353916339578707063760322708819807236
g1: 350974994026620753979675180990051647398168083073545014908480697570945345464331891
g2: 350974994026620753979675180990051647398168083073545014908480697570945345464331891

a:  -117056998580945304184821702970990642540641661408292521120201060112550819020545228979394212957414409150358468028308399361041165854001915386060803537255972968474005080989453549476390751330196730234430700004932167687137381818127
b:  10887980216824713410285775659556028917843913454396402631170924306429164759767095148705112532704275088587083941908785366178275898393450995
g1: 39670620743063294957954384556739313
g2: 39670620743063294957954384556739313

a:  -598001823912534874208517349680591539504160701915355384877665105770363629221543599843198400332955435196904981538978750612537661169776344025743444795629307548576821736212045517283833765778360353817452510327356254575668650
b:  90509048207784702620501770854042911351589061991068451125351081532712386896877288900622389859065917998452452291292615363953199710026005253474176110406031968594539099946521324850398838595086265209684192902924467849729202032029781381250219860
g1: 66828566960312378305054873708070175386473030309578066210
g2: 66828566960312378305054873708070175386473030309578066210

a:  1960352178423649225892280536314678469863235161290760134098320083785718977406685228720876400548457222670557383566413188152649739244776561301613716575787818575602170756801796949930237097950270522739079575817769427
b:  -25384154713871646476808223512414581909063492530373174271243332366838025244352050483714117680294099568596054993381312466480940437911572856264771452863538475465229700420479583225394983981052267891620066062
g1: 4179708984265806324928461116697741999511642038037
g2: 4179708984265806324928461116697741999511642038037

a:  -349256717799207080394849609820183585996524601631231936883025528029804487906948134776250214658392015308383329264038993138245202578751143214190367854605596256993077323373768381517729783048759490776101797861
b:  -985139945319990785680156247979996422530806924961814986725840561594436127527958238949245592686334932621686380586536254139616369228057092744226984377364834556541410448655953710445145559150208728074169
g1: 1346019145817437081368523953398329917380854477
g2: 1346019145817437081368523953398329917380854477

a:  -149736550027231283712206412964562178741440585785902220706191976409223479758375789833197568404472839565571847929871207212173419614542477953192909574618001850522815261545021051236484912779706286374040222860738204
b:  68178517612029643974388357228434446330959886012775393688776131853162559439238865101573215452897868702712017332339146360751741072534475020024523195821054805567130562854765878236381352570205109803
g1: 6510119565583144494776770221422526200150977226021
g2: 6510119565583144494776770221422526200150977226021

a:  568038408526896562918092114832000037709119184432925081019763944823125217530309356466832726213353409161931480395119090219197826180210048520070960296876913278180142004375949712758866324460358175538673401160955453228
b:  12918170321349774004903317349216627640937588988470219051482424880402999814899658562373151128521222204856705429478454561656205162139336704062127225501961253250051066098484720895512311679480772133281754514608420794017024199
g1: 1240858815571998317754386811122560876850367385310074033063058015235288502294909
g2: 1240858815571998317754386811122560876850367385310074033063058015235288502294909

a:  205612332648181921758372645790949691935998256975376065436061447598856682771920824932859394837461887015779961237895842372541845006958653111716035602451790922395652173198163565013780562454031323988660452717470571351
b:  162245969050809894474270260493919222406436287611885461263809013308869831025196905715466896678230370868513506490228377358881251843921220897366919646267201791262981474847161484728274113854939914447429228748712820591371127089849640695656491193
g1: 2085095625406351609368675184631662475539682827300623898296877661
g2: 2085095625406351609368675184631662475539682827300623898296877661

a:  -1390178499701917461683270380403562800751510565949079692620244522485547290500332255512457915206814077467052648312925651739531295911750536753770614196271673865206857758187378909418665677796422941437469
b:  19237436287865567569634133586479273332183434667315576796441787099686273145752986594410761057530970641427112901816475956743319139588984370398036034691370216575195755025823992847965371884498242962018423
g1: 23494334560781987777796595767756668787940703546608221053609
g2: 23494334560781987777796595767756668787940703546608221053609

a:  5593980395607533522268516602501307483202128668315103500750016665694520831930186612662416498428888546459597201770674202630636441176499621919225177954226136514070583079255734297443339225455967104452378049704218583614209
b:  -245416203671391941112704751442350908702828878883271716551584490080287568199821690268455564995896577135133165167328441588090929230436620114931222136780225055418578997119924579544918488613431334000057410770849479319007
g1: 211145515808498016031750956689701833323287518586925822365963550202201571439
g2: 211145515808498016031750956689701833323287518586925822365963550202201571439

a:  -371567976249870618929142736391847131455977187703423110783345762658310156543196901759454908249614693275405574152595340203289783397815779453727496845529286907340697958129063261225
b:  -31083328029269937083066261100223836587803810027279124083427918206588815127925333231505418078385336427406340264645110993520631386825285186833229975774415328057398140305843453053079031952740
g1: 11034914308430244615314878417607382290916211850998565994416732245
g2: 11034914308430244615314878417607382290916211850998565994416732245

a:  7066110684390952456916626518811883416127339712441988048443571673827451171269204485134032456805832052638661262800802701773280866022689156009793945697942386911348503990136239
b:  3755001110190229262374433854777410520392130065360180423683941139827484325396974328201764061592466181628621510112993796708111674033520460998215391640375413022035385455306600654045619169893305207163890497035105037885678584045509634524689296968794625728182647
g1: 1035439824674085131032840654547143944103080279051990362891
g2: 1035439824674085131032840654547143944103080279051990362891

g: 2147483648
213^{1/5}: 3
-213^{1/5}: -2
log2(0): 0
log2(1): 0
log2(2): 1
log2(3): 1
log2(4): 2
log2(5): 2
log2(6): 2
log2(7): 2
log2(8): 3
log2(9): 3
log2(10): 3
log2(11): 3
log2(12): 3
log2(13): 3
log2(14): 3
log2(15): 3
log2(16): 4
log2(17): 4
log2(18): 4
log2(19): 4
log2(20): 4
log2(21): 4
log2(22): 4
log2(23): 4
log2(24): 4
log2(25): 4
log2(26): 4
log2(27): 4
log2(28): 4
log2(29): 4
log2(30): 4
log2(31): 4
log2(32): 5
log2(33): 5
log2(34): 5
log2(35): 5
log2(36): 5
log2(37): 5
log2(38): 5
log2(39): 5
log2(40): 5
log2(41): 5
log2(42): 5
log2(43): 5
log2(44): 5
log2(45): 5
log2(46): 5
log2(47): 5
log2(48): 5
log2(49): 5
log2(50): 5
log2(51): 5
log2(52): 5
log2(53): 5
log2(54): 5
log2(55): 5
log2(56): 5
log2(57): 5
log2(58): 5
log2(59): 5
log2(60): 5
log2(61): 5
log2(62): 5
log2(63): 5
log2(64): 6
a: 1000231
b: 102928187172727273
b: 102951963583964173000063
r: 18446744075857035263
expected: 18446744075857035263
minint: -9223372036854775808
4294967295 4294967295
1002034040050606089383838288182
1002034040050606089383838288182
*-2 = 
-2004068080101212178767676576364
v2:
4294967296
v2*v2:
18446744073709551616
v2:
4294967296
v2*v2:
18446744073709551616
v2: 115792089237316195423570985008687907853269984665640564039457584007913129639936
PASS
(test mpz :time 0.09 :before-memory 32.72 :after-memory 32.72)
1
11/10
1/3
1002034040050606089383838288182
1002034040050606089383838288182
*-2 = 
-2004068080101212178767676576364
1/3: 0.3333333333?
1/4: 0.25
PASS
(test mpq :time 0.00 :before-memory 32.72 :after-memory 32.72)
1
11/10
1/3
1002034040050606089383838288182
1002034040050606089383838288182
*-2 = 
-2004068080101212178767676576364
1/3: 0.3333333333?
1/4: 0.25
PASS
(test mpq :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test mpf :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test mpf :time 0.00 :before-memory 32.72 :after-memory 32.72)
****************************************************************************************************
1 3 2

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
PASS
(test total_order :time 35.88 :before-memory 32.72 :after-memory 32.72)
****************************************************************************************************
1 3 2

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
PASS
(test total_order :time 35.87 :before-memory 32.72 :after-memory 32.72)
table with signature (2,4,8,4):
(1,3,7,2)
(1,3,7,3)

1 3 7 2 
1 3 7 3 
table with signature (2,4,8,4,2,4,8,4):
(0,3,7,1,1,3,7,3)
(1,3,7,3,1,3,7,3)

table with signature (2,4,8,4,2,4,8,4):
(0,3,7,1,1,3,7,2)
(1,3,7,3,1,3,7,2)
(0,3,7,1,1,3,7,3)
(1,3,7,3,1,3,7,3)

PASS
(test dl_table :time 0.97 :before-memory 32.72 :after-memory 32.72)
table with signature (2,4,8,4):
(1,3,7,2)
(1,3,7,3)

1 3 7 2 
1 3 7 3 
table with signature (2,4,8,4,2,4,8,4):
(0,3,7,1,1,3,7,3)
(1,3,7,3,1,3,7,3)

table with signature (2,4,8,4,2,4,8,4):
(0,3,7,1,1,3,7,2)
(1,3,7,3,1,3,7,2)
(0,3,7,1,1,3,7,3)
(1,3,7,3,1,3,7,3)

PASS
(test dl_table :time 0.98 :before-memory 32.72 :after-memory 32.72)
PASS
(test dl_context :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test dl_context :time 0.00 :before-memory 32.72 :after-memory 32.72)
test_prev passed.
test_next passed.
test_const_prev passed.
test_const_next passed.
test_init passed.
test_pop passed.
test_insert_after passed.
test_insert_before passed.
test_push_to_front passed.
test_detach passed.
test_invariant passed.
test_contains passed.
All tests passed.
PASS
(test dlist :time 0.00 :before-memory 32.72 :after-memory 32.72)
test_prev passed.
test_next passed.
test_const_prev passed.
test_const_next passed.
test_init passed.
test_pop passed.
test_insert_after passed.
test_insert_before passed.
test_push_to_front passed.
test_detach passed.
test_invariant passed.
test_contains passed.
All tests passed.
PASS
(test dlist :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test dl_util :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test dl_util :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test dl_product_relation :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test dl_product_relation :time 0.00 :before-memory 32.72 :after-memory 32.72)
empty
0 in (-oo, oo)
1 in (-oo, oo)
2 in (-oo, oo)
3 in (-oo, oo)

0 in (-oo, 0]
1 in (-oo, oo)
2 in (-oo, oo)
3 in (-oo, oo)

0 in (-oo, 0]
1 = 6 2 = 7 3 in (-oo, oo)
4 in (-oo, 0]
5 in (-oo, oo)
6 in (-oo, oo)
7 in (-oo, oo)

0 in (-oo, 0]
1 in (-oo, oo)
2 in [4, 4]
3 in (-oo, oo)

0 in (-oo, 0]
1 = 2 2 in [4, 4]
3 in (-oo, oo)

Orig
0 in (-oo, 0]
1 = 2 2 in [4, 4]
3 in (-oo, oo)

renamed 2 |-> 3 |-> 2
0 in (-oo, 0]
1 = 3 2 in (-oo, oo)
3 in [4, 4]

empty
0 in (-oo, 0]
1 = 4 2 in (-oo, 0]
3 in (-oo, oo)
4 in (-oo, oo)
5 in (-oo, oo)

bound relation
empty:
empty
full:
#0 < oo
#1 < oo
#2 < oo
#3 < oo

#0 < oo
1 = 6 2 = 7 #3 < oo
#4 < oo
#5 < oo
#6 < oo
#7 < oo

no-op still full
#0 < oo
#1 < oo
#2 < oo
#3 < oo

x2 < x3
#0 < oo
#1 < oo
#2 < 3 
#3 < oo

id
#0 < oo
1 = 2 #2 < 3 
#3 < oo

Orig
#0 < oo
1 = 2 #2 < 3 
#3 < oo

renamed 0 2 3 
#0 < oo
1 = 3 #2 < oo
#3 < 0 

#0 < oo
1 = 4 #2 < oo
#3 < oo
#4 < oo
#5 < oo

b2:
#0 < oo
#1 < oo
#2 < oo
#3 < oo

b2:
#0 < oo
#1 < oo
2 = 3 #3 < oo

b2:
#0 < 3 
#1 < oo
2 = 3 #3 < oo

b1:
#0 < 3 
1 = 3 #2 < oo
#3 < 2 

b2:
#0 < 3 
#1 < oo
2 = 3 #3 < oo

b1 u b2:
#0 < 3 
#1 < oo
#2 < oo
#3 < oo

b1:
#0 < 3 
1 = 3 2 = 3 #3 < oo

b2:
#0 < 2 3 
1 = 3 #2 < oo
#3 < oo

b1 u b2:
#0 < 1 2 
#1 < oo
#2 < oo
3 = 1 
PASS
(test dl_relation :time 0.01 :before-memory 32.72 :after-memory 32.72)
empty
0 in (-oo, oo)
1 in (-oo, oo)
2 in (-oo, oo)
3 in (-oo, oo)

0 in (-oo, 0]
1 in (-oo, oo)
2 in (-oo, oo)
3 in (-oo, oo)

0 in (-oo, 0]
1 = 6 2 = 7 3 in (-oo, oo)
4 in (-oo, 0]
5 in (-oo, oo)
6 in (-oo, oo)
7 in (-oo, oo)

0 in (-oo, 0]
1 in (-oo, oo)
2 in [4, 4]
3 in (-oo, oo)

0 in (-oo, 0]
1 = 2 2 in [4, 4]
3 in (-oo, oo)

Orig
0 in (-oo, 0]
1 = 2 2 in [4, 4]
3 in (-oo, oo)

renamed 2 |-> 3 |-> 2
0 in (-oo, 0]
1 = 3 2 in (-oo, oo)
3 in [4, 4]

empty
0 in (-oo, 0]
1 = 4 2 in (-oo, 0]
3 in (-oo, oo)
4 in (-oo, oo)
5 in (-oo, oo)

bound relation
empty:
empty
full:
#0 < oo
#1 < oo
#2 < oo
#3 < oo

#0 < oo
1 = 6 2 = 7 #3 < oo
#4 < oo
#5 < oo
#6 < oo
#7 < oo

no-op still full
#0 < oo
#1 < oo
#2 < oo
#3 < oo

x2 < x3
#0 < oo
#1 < oo
#2 < 3 
#3 < oo

id
#0 < oo
1 = 2 #2 < 3 
#3 < oo

Orig
#0 < oo
1 = 2 #2 < 3 
#3 < oo

renamed 0 2 3 
#0 < oo
1 = 3 #2 < oo
#3 < 0 

#0 < oo
1 = 4 #2 < oo
#3 < oo
#4 < oo
#5 < oo

b2:
#0 < oo
#1 < oo
#2 < oo
#3 < oo

b2:
#0 < oo
#1 < oo
2 = 3 #3 < oo

b2:
#0 < 3 
#1 < oo
2 = 3 #3 < oo

b1:
#0 < 3 
1 = 3 #2 < oo
#3 < 2 

b2:
#0 < 3 
#1 < oo
2 = 3 #3 < oo

b1 u b2:
#0 < 3 
#1 < oo
#2 < oo
#3 < oo

b1:
#0 < 3 
1 = 3 2 = 3 #3 < oo

b2:
#0 < 2 3 
1 = 3 #2 < oo
#3 < oo

b1 u b2:
#0 < 1 2 
#1 < oo
#2 < oo
3 = 1 
PASS
(test dl_relation :time 0.01 :before-memory 32.72 :after-memory 32.72)
max. heap size: 85.4476 Mbytes
max. heap size: 85.4476 Mbytes
PASS
(test parray :time 0.90 :before-memory 32.72 :after-memory 32.72)
max. heap size: 85.4476 Mbytes
max. heap size: 85.4476 Mbytes
PASS
(test parray :time 0.90 :before-memory 32.72 :after-memory 32.72)
PASS
(test stack :time 0.26 :before-memory 32.72 :after-memory 32.72)
PASS
(test stack :time 0.27 :before-memory 32.72 :after-memory 32.72)
[\"hello\"\"world\"

]
[\"hello\"
world\"]
[\"hello\"
world\"]
[\"hello\"
world\"]
[\"hello\"
\"world\"

]
[]
[


]
[]
[
]
[]
[]
[]
[]
PASS
(test escaped :time 0.00 :before-memory 32.72 :after-memory 32.72)
[\"hello\"\"world\"

]
[\"hello\"
world\"]
[\"hello\"
world\"]
[\"hello\"
world\"]
[\"hello\"
\"world\"

]
[]
[


]
[]
[
]
[]
[]
[]
[]
PASS
(test escaped :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test buffer :time 0.00 :before-memory 32.72 :after-memory 32.72)
PASS
(test buffer :time 0.00 :before-memory 32.72 :after-memory 32.72)
10 20 30 
12 10 
12 10 13 
14 12 10 13 
18 10 14 16 13 
18 14 16 13 
size: 9 9
size: 7 7
size: 662 662
PASS
(test chashtable :time 0.11 :before-memory 32.72 :after-memory 32.72)
10 20 30 
12 10 
12 10 13 
14 12 10 13 
18 10 14 16 13 
18 14 16 13 
size: 8 8
size: 8 8
size: 675 675
PASS
(test chashtable :time 0.11 :before-memory 32.72 :after-memory 32.72)
updates 15
neweqs  0 qhead: 0
(declare-fun f (Int) Int): un 11 
#7 := x [r 9] [p 11] 
#8 := y [r 9] [p 12] 
#9 := z [p 11] 
#10 := u [r 9] 
#5 := 0 
#6 := 1 
#11 := (f x) [r 5] 
#12 := (f y) [r 6] 

updates 16
neweqs  0 qhead: 0
(declare-fun f (Int) Int): un 11 
#7 := x [r 9] [p 11] 
#8 := y [r 9] [p 12] 
#9 := z [p 11] 
#10 := u [r 9] 
#5 := 0 
#6 := 1 
#11 := (f x) [r 5] 
#12 := (f y) [r 6] 

conflict: 1
conflict: 2
conflict: 5
updates 7
neweqs  0 qhead: 0
(declare-fun f (S) S): un 6 7 8 
#5 := a [p 6] 
#6 := (f a) [p 7] 
#7 := (f #6) [p 8] 
#8 := (f #7) 

updates 9
neweqs  0 qhead: 0
(declare-fun f (S) S): un 7 8 
#5 := a [r 7] [p 6] 
#6 := (f a) [p 7] 
#7 := (f #6) [p 8] 
#8 := (f #7) [r 7] 

updates 10
neweqs  0 qhead: 0
(declare-fun f (S) S): un 8 
#5 := a [r 7] [p 6] 
#6 := (f a) [r 7] [p 7] 
#7 := (f #6) [p 8] 
#8 := (f #7) [r 7] 

merge
merged 0
propagated 0.017
PASS
(test egraph :time 0.08 :before-memory 32.72 :after-memory 32.73)
updates 15
neweqs  0 qhead: 0
(declare-fun f (Int) Int): un 11 
#7 := x [r 9] [p 11] 
#8 := y [r 9] [p 12] 
#9 := z [p 11] 
#10 := u [r 9] 
#5 := 0 
#6 := 1 
#11 := (f x) [r 5] 
#12 := (f y) [r 6] 

updates 16
neweqs  0 qhead: 0
(declare-fun f (Int) Int): un 11 
#7 := x [r 9] [p 11] 
#8 := y [r 9] [p 12] 
#9 := z [p 11] 
#10 := u [r 9] 
#5 := 0 
#6 := 1 
#11 := (f x) [r 5] 
#12 := (f y) [r 6] 

conflict: 1
conflict: 2
conflict: 5
updates 7
neweqs  0 qhead: 0
(declare-fun f (S) S): un 6 7 8 
#5 := a [p 6] 
#6 := (f a) [p 7] 
#7 := (f #6) [p 8] 
#8 := (f #7) 

updates 9
neweqs  0 qhead: 0
(declare-fun f (S) S): un 7 8 
#5 := a [r 7] [p 6] 
#6 := (f a) [p 7] 
#7 := (f #6) [p 8] 
#8 := (f #7) [r 7] 

updates 10
neweqs  0 qhead: 0
(declare-fun f (S) S): un 8 
#5 := a [r 7] [p 6] 
#6 := (f a) [r 7] [p 7] 
#7 := (f #6) [p 8] 
#8 := (f #7) [r 7] 

merge
merged 0
propagated 0.017
PASS
(test egraph :time 0.08 :before-memory 32.73 :after-memory 32.73)
testing exception
Format 12 twelve
PASS
(test ex :time 0.00 :before-memory 32.73 :after-memory 32.73)
testing exception
Format 12 twelve
PASS
(test ex :time 0.00 :before-memory 32.73 :after-memory 32.73)
PASS
(test nlarith_util :time 0.19 :before-memory 32.73 :after-memory 32.73)
PASS
(test nlarith_util :time 0.19 :before-memory 32.73 :after-memory 32.73)
Using Z3 Version 4.15 (build 4, revision 0)
result 1
model : mySet -> (store (store ((as const (Array Int Bool)) false) 42 true) 43 true)

PASS
(test api_bug :time 0.01 :before-memory 32.73 :after-memory 32.75)
Using Z3 Version 4.15 (build 4, revision 0)
result 1
model : mySet -> (store (store ((as const (Array Int Bool)) false) 42 true) 43 true)

PASS
(test api_bug :time 0.01 :before-memory 32.75 :after-memory 32.75)
0.0
(<= (+ (* (/ 13.0 10.0) x y) (* (/ 23.0 10.0) y y) (* (- 2.0) x)) (/ 11.0 10.0))
(= (+ (* 3.0 x x) (* (- 4.0) y)) (- 7.0))
PASS
(test arith_rewriter :time 0.01 :before-memory 32.75 :after-memory 32.75)
0.0
(<= (+ (* (/ 13.0 10.0) x y) (* (/ 23.0 10.0) y y) (* (- 2.0) x)) (/ 11.0 10.0))
(= (+ (* 3.0 x x) (* (- 4.0) y)) (- 7.0))
PASS
(test arith_rewriter :time 0.01 :before-memory 32.75 :after-memory 32.75)
PASS
(test check_assumptions :time 0.01 :before-memory 32.75 :after-memory 32.75)
PASS
(test check_assumptions :time 0.01 :before-memory 32.75 :after-memory 32.75)
PASS
(test smt_context :time 0.01 :before-memory 32.75 :after-memory 32.75)
PASS
(test smt_context :time 0.01 :before-memory 32.75 :after-memory 32.75)
b -> 63
a -> 47
b -> 2
a -> 0
c -> 47
l_false
PASS
(test theory_dl :time 0.41 :before-memory 32.75 :after-memory 32.75)
b -> 63
a -> 47
b -> 2
a -> 0
c -> 47
l_false
PASS
(test theory_dl :time 0.41 :before-memory 32.75 :after-memory 32.75)
satisfiable
a1 -> (_ as-array k!0)
k!0 -> {
  true -> true
  else -> true
}
--------------------------
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
0 #1 := true
1 #5 := a1
#7 := (select a1 true)
#2 := false
#26 := 1
#27 := 1.0
#28 := 0
#29 := 0.0
#30 := as-array[k!0]
#6 := a2
#31 := (= a2 as-array[k!0])
asserted formulas:
#7 #31 
current assignment:
1 #7: (select a1 true)
equivalence classes: 8
#1: true
#2: false
#26: 1
#27: 1.0
#28: 0
#29: 0.0
#5: a1
#7: (select a1 true)
expression -> bool_var:
(#1 -> 0) (#7 -> 1) 
relevant exprs:
#7 #1 #5 
Theory arithmetic:
number of constraints = 8
(0) j0 >= 1
(1) j0 <= 1
(2) j1 >= 1
(3) j1 <= 1
(4) j2 >= 0
(5) j2 <= 0
(6) j3 >= 0
(7) j3 <= 0

inf columns: none
j0 =      1           [1, 1]	
j1 =      1           [1, 1]	
j2 =      0           [0, 0]	
j3 =      0           [0, 0]	
irr: v0 j0 = 1, int := 26: 1
irr: v1 j1 = 1 := 27: 1.0
irr: v2 j2 = 0, int := 28: 0
irr: v3 j3 = 0 := 29: 0.0
Theory array:
v0    #5    -> #5    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {#7 #7}
 maps: {} p_parent_maps: {} p_const: {}
v1    #7    -> #7    is_array: 0 is_select: 1 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
recfun
disabled guards:

enabled guards:

decl2enodes:
id 127 -> #7
hot bool vars:
--------------------------
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
0 #1 := true
1 #5 := a1
#7 := (select a1 true)
2 #30 := as-array[k!0]
#6 := a2
#31 := (= a2 as-array[k!0])
#2 := false
#26 := 1
#27 := 1.0
#28 := 0
#29 := 0.0
asserted formulas:
#7 #31 
current assignment:
1 #7: (select a1 true)
2 #31: (= a2 as-array[k!0])
equivalence classes: 10
#1: true
#2: false
#26: 1
#27: 1.0
#28: 0
#29: 0.0
#5: a1
#7: (select a1 true)
#30: as-array[k!0]
   #6: a2
#31: (= a2 as-array[k!0])
expression -> bool_var:
(#1 -> 0) (#7 -> 1) (#31 -> 2) 
relevant exprs:
#7 #1 #5 #31 #30 #6 
Theory arithmetic:
number of constraints = 8
(0) j0 >= 1
(1) j0 <= 1
(2) j1 >= 1
(3) j1 <= 1
(4) j2 >= 0
(5) j2 <= 0
(6) j3 >= 0
(7) j3 <= 0

inf columns: none
j0 =      1           [1, 1]	
j1 =      1           [1, 1]	
j2 =      0           [0, 0]	
j3 =      0           [0, 0]	
irr: v0 j0, int := 26: 1
irr: v1 j1 := 27: 1.0
irr: v2 j2, int := 28: 0
irr: v3 j3 := 29: 0.0
Theory array:
v0    #5    -> #5    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {#7 #7}
 maps: {} p_parent_maps: {} p_const: {}
v1    #7    -> #7    is_array: 0 is_select: 1 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
v2    #6    -> #6    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
v3    #30   -> #6    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
recfun
disabled guards:

enabled guards:

decl2enodes:
id 127 -> #7
hot bool vars:
--------------------------
unknown
PASS
(test model_retrieval :time 0.01 :before-memory 32.75 :after-memory 32.75)
satisfiable
a1 -> (_ as-array k!0)
k!0 -> {
  true -> true
  else -> true
}
--------------------------
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
0 #1 := true
1 #5 := a1
#7 := (select a1 true)
#2 := false
#26 := 1
#27 := 1.0
#28 := 0
#29 := 0.0
#30 := as-array[k!0]
#6 := a2
#31 := (= a2 as-array[k!0])
asserted formulas:
#7 #31 
current assignment:
1 #7: (select a1 true)
equivalence classes: 8
#1: true
#2: false
#26: 1
#27: 1.0
#28: 0
#29: 0.0
#5: a1
#7: (select a1 true)
expression -> bool_var:
(#1 -> 0) (#7 -> 1) 
relevant exprs:
#7 #1 #5 
Theory arithmetic:
number of constraints = 8
(0) j0 >= 1
(1) j0 <= 1
(2) j1 >= 1
(3) j1 <= 1
(4) j2 >= 0
(5) j2 <= 0
(6) j3 >= 0
(7) j3 <= 0

inf columns: none
j0 =      1           [1, 1]	
j1 =      1           [1, 1]	
j2 =      0           [0, 0]	
j3 =      0           [0, 0]	
irr: v0 j0 = 1, int := 26: 1
irr: v1 j1 = 1 := 27: 1.0
irr: v2 j2 = 0, int := 28: 0
irr: v3 j3 = 0 := 29: 0.0
Theory array:
v0    #5    -> #5    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {#7 #7}
 maps: {} p_parent_maps: {} p_const: {}
v1    #7    -> #7    is_array: 0 is_select: 1 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
recfun
disabled guards:

enabled guards:

decl2enodes:
id 127 -> #7
hot bool vars:
--------------------------
Logical context:
scope-lvl: 0
base-lvl:  0
search-lvl:  0
inconsistent(): 0
m_asserted_formulas.inconsistent(): 0
0 #1 := true
1 #5 := a1
#7 := (select a1 true)
2 #30 := as-array[k!0]
#6 := a2
#31 := (= a2 as-array[k!0])
#2 := false
#26 := 1
#27 := 1.0
#28 := 0
#29 := 0.0
asserted formulas:
#7 #31 
current assignment:
1 #7: (select a1 true)
2 #31: (= a2 as-array[k!0])
equivalence classes: 10
#1: true
#2: false
#26: 1
#27: 1.0
#28: 0
#29: 0.0
#5: a1
#7: (select a1 true)
#30: as-array[k!0]
   #6: a2
#31: (= a2 as-array[k!0])
expression -> bool_var:
(#1 -> 0) (#7 -> 1) (#31 -> 2) 
relevant exprs:
#7 #1 #5 #31 #30 #6 
Theory arithmetic:
number of constraints = 8
(0) j0 >= 1
(1) j0 <= 1
(2) j1 >= 1
(3) j1 <= 1
(4) j2 >= 0
(5) j2 <= 0
(6) j3 >= 0
(7) j3 <= 0

inf columns: none
j0 =      1           [1, 1]	
j1 =      1           [1, 1]	
j2 =      0           [0, 0]	
j3 =      0           [0, 0]	
irr: v0 j0, int := 26: 1
irr: v1 j1 := 27: 1.0
irr: v2 j2, int := 28: 0
irr: v3 j3 := 29: 0.0
Theory array:
v0    #5    -> #5    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {#7 #7}
 maps: {} p_parent_maps: {} p_const: {}
v1    #7    -> #7    is_array: 0 is_select: 1 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
v2    #6    -> #6    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
v3    #30   -> #6    is_array: 1 is_select: 0 upward: 0 stores: {} p_stores: {} p_selects: {}
 maps: {} p_parent_maps: {} p_const: {}
recfun
disabled guards:

enabled guards:

decl2enodes:
id 127 -> #7
hot bool vars:
--------------------------
unknown
PASS
(test model_retrieval :time 0.01 :before-memory 32.75 :after-memory 32.75)
((((4* v1 + 3* v2) + 5* v3) + 8) / 7)
((((2* v3 + 2* v4) + 5) / 3) / 3)
((((4* v1 + (((((2* v3 + 2* v4) + 5) / 3) / 3) * 3)) + 5* v3) + 8) / 7)
PASS
(test model_based_opt :time 0.00 :before-memory 32.75 :after-memory 32.75)
((((4* v1 + 3* v2) + 5* v3) + 8) / 7)
((((2* v3 + 2* v4) + 5) / 3) / 3)
((((4* v1 + (((((2* v3 + 2* v4) + 5) / 3) / 3) * 3)) + 5* v3) + 8) / 7)
PASS
(test model_based_opt :time 0.00 :before-memory 32.75 :after-memory 32.75)
(<= 0.0 (* 2.0 z z)) -> (or (= 0.0 (- 2.0)) (= 0.0 z) (< (- 2.0) 0.0))
PASS
(test factor_rewriter :time 0.01 :before-memory 32.75 :after-memory 32.75)
(<= 0.0 (* 2.0 z z)) -> (or (= 0.0 (- 2.0)) (= 0.0 z) (< (- 2.0) 0.0))
PASS
(test factor_rewriter :time 0.01 :before-memory 32.75 :after-memory 32.75)
spec:
(declare-datatypes (T) ((list (nil) (cons (car T) (cdr list)))))
(declare-const x Int)
(declare-const l (list Int))
(declare-fun f ((list Int)) Bool)
(assert (f (cons x l)))

done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-datatypes ((list 1)) ((par (k!00)((nil) (cons (car k!00) (cdr (list k!00)))))))
(declare-fun f ((list Int)) Bool)
(declare-fun l () (list Int))
(declare-fun x () Int)
(assert
 (let (($x8 (f (cons x l))))
(and $x8)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (f (cons x l))))
done printing
spec:
(declare-const x Int)
(declare-const a (Array Int Int))
(declare-const b (Array (Array Int Int) Bool))
(assert (select b a))
(assert (= b ((as const (Array (Array Int Int) Bool)) true)))
(assert (= b (store b a true)))
(declare-const b1 (Array Bool Bool))
(declare-const b2 (Array Bool Bool))
(assert (= ((as const (Array Bool Bool)) false) ((_ map and) b1 b2)))

done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-fun b2 () (Array Bool Bool))
(declare-fun b1 () (Array Bool Bool))
(declare-fun a () (Array Int Int))
(declare-fun b () (Array (Array Int Int) Bool))
(assert
 (let (($x16 (= ((as const (Array Bool Bool)) false) ((_ map and ) b1 b2))))
(let (($x11 (= b (store b a true))))
(let (($x9 (= b ((as const (Array (Array Int Int) Bool)) true))))
(let (($x7 (select b a)))
(and $x7 $x9 $x11 $x16))))))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (select b a)
       (= b ((as const (Array (Array Int Int) Bool)) true))
       (= b (store b a true))
       (= ((as const (Array Bool Bool)) false) ((_ map and) b1 b2))))
done printing
spec:
(declare-datatypes () ((list (nil) (cons (car tree) (cdr list))) (tree (leaf) (node (n list)))))
(declare-const x tree)
(declare-const l list)
(declare-fun f (list) Bool)
(assert (f (cons x l)))

done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-datatypes ((tree 0)
    (list 0)) (((leaf) (node (n list)))
   ((nil) (cons (car tree) (cdr list)))))
(declare-fun f (list) Bool)
(declare-fun l () list)
(declare-fun x () tree)
(assert
 (let (($x8 (f (cons x l))))
(and $x8)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (f (cons x l))))
done printing
spec:
(declare-const x Real)
(declare-const y Int)
(assert (= x 0.0))
(assert (= y 6))
(assert (> (/ x 1.4) (to_real y)))
done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-fun y () Int)
(declare-fun x () Real)
(assert
 (let (($x14 (> (/ x (/ 7.0 5.0)) (to_real y))))
(let (($x10 (= y 6)))
(let (($x7 (= x 0.0)))
(and $x7 $x10 $x14)))))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (= x 0.0) (= y 6) (> (/ x (/ 7.0 5.0)) (to_real y))))
done printing
spec:
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(assert (bvule x (bvmul y (concat ((_ extract 2 0) x) ((_ extract 3 3) #xf0)))))
done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-fun x () (_ BitVec 4))
(declare-fun y () (_ BitVec 4))
(assert
 (let (($x12 (bvule x (bvmul y (concat ((_ extract 2 0) x) ((_ extract 3 3) (_ bv240 8)))))))
(and $x12)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (let ((a!1 (bvule x
                    (bvmul y
                           (concat ((_ extract 2 0) x) ((_ extract 3 3) #xf0))))))
    (and a!1)))
done printing
spec:
(assert (= "abc" "abc"))
done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(assert
 (let (($x6 (= "abc" "abc")))
(and $x6)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (= "abc" "abc")))
done printing
testing Z3_eval_smtlib2_string
spec:
(push)
(declare-datatypes (T) ((list (nil) (cons (car T) (cdr list)))))
(declare-const x Int)
(declare-const l (list Int))
(declare-fun f ((list Int)) Bool)
(assert (f (cons x l)))
(check-sat)
(pop)

response:
sat

successful call after successful call
spec:
(push)
(declare-const a (Array Int Int))
(declare-const b (Array (Array Int Int) Bool))
(assert (select b a))
(assert (= b ((as const (Array (Array Int Int) Bool)) true)))
(assert (= b (store b a true)))
(declare-const b1 (Array Bool Bool))
(declare-const b2 (Array Bool Bool))
(assert (= ((as const (Array Bool Bool)) false) ((_ map and) b1 b2)))
(check-sat)
(pop)

response:
sat

failing call after successful call
spec:
(push)
(declare-const a@ (Array Int Int))
(declare-const b (Array (Array Int Int) Bool))
(assert (select b a))
(check-sat)
(pop)

failing call after failing call
spec:
(push)
(declare-const a (Array Int Int))
(declare-const b# (Array (Array Int Int) Bool))
(assert (select b a))
(check-sat)
(pop)

successful call after failing call
spec:
(push)
(declare-datatypes (T) ((list (nil) (cons (car T) (cdr list)))))
(declare-const x Int)
(declare-const l (list Int))
(declare-fun f ((list Int)) Bool)
(assert (f (cons x l)))
(check-sat)
(pop)

response:
sat

done evaluating
testing Z3_eval_smtlib2_string
spec:
(declare-const |a| Bool)
(assert |a|)
(check-sat)

done parsing
spec:
(declare-const |a\| Bool)
(assert |a\|)
(check-sat)

done parsing
spec:
(declare-const |a\|| Bool)
(assert |a\||)
(check-sat)

done parsing
spec:
(declare-const |a\\| Bool)
(assert |a\\|)
(check-sat)

done parsing
spec:
(declare-const |a\\|| Bool)
(assert |a\\||)
(check-sat)

done parsing
spec:
(declare-const |a\a| Bool)
(assert |a\a|)
(check-sat)

done parsing
spec:
(declare-const |a\a Bool)
(assert |a\a)
(check-sat)

done parsing
done evaluating
PASS
(test smt2print_parse :time 0.09 :before-memory 32.75 :after-memory 32.77)
spec:
(declare-datatypes (T) ((list (nil) (cons (car T) (cdr list)))))
(declare-const x Int)
(declare-const l (list Int))
(declare-fun f ((list Int)) Bool)
(assert (f (cons x l)))

done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-datatypes ((list 1)) ((par (k!00)((nil) (cons (car k!00) (cdr (list k!00)))))))
(declare-fun f ((list Int)) Bool)
(declare-fun l () (list Int))
(declare-fun x () Int)
(assert
 (let (($x8 (f (cons x l))))
(and $x8)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (f (cons x l))))
done printing
spec:
(declare-const x Int)
(declare-const a (Array Int Int))
(declare-const b (Array (Array Int Int) Bool))
(assert (select b a))
(assert (= b ((as const (Array (Array Int Int) Bool)) true)))
(assert (= b (store b a true)))
(declare-const b1 (Array Bool Bool))
(declare-const b2 (Array Bool Bool))
(assert (= ((as const (Array Bool Bool)) false) ((_ map and) b1 b2)))

done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-fun b2 () (Array Bool Bool))
(declare-fun b1 () (Array Bool Bool))
(declare-fun a () (Array Int Int))
(declare-fun b () (Array (Array Int Int) Bool))
(assert
 (let (($x16 (= ((as const (Array Bool Bool)) false) ((_ map and ) b1 b2))))
(let (($x11 (= b (store b a true))))
(let (($x9 (= b ((as const (Array (Array Int Int) Bool)) true))))
(let (($x7 (select b a)))
(and $x7 $x9 $x11 $x16))))))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (select b a)
       (= b ((as const (Array (Array Int Int) Bool)) true))
       (= b (store b a true))
       (= ((as const (Array Bool Bool)) false) ((_ map and) b1 b2))))
done printing
spec:
(declare-datatypes () ((list (nil) (cons (car tree) (cdr list))) (tree (leaf) (node (n list)))))
(declare-const x tree)
(declare-const l list)
(declare-fun f (list) Bool)
(assert (f (cons x l)))

done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-datatypes ((tree 0)
    (list 0)) (((leaf) (node (n list)))
   ((nil) (cons (car tree) (cdr list)))))
(declare-fun f (list) Bool)
(declare-fun l () list)
(declare-fun x () tree)
(assert
 (let (($x8 (f (cons x l))))
(and $x8)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (f (cons x l))))
done printing
spec:
(declare-const x Real)
(declare-const y Int)
(assert (= x 0.0))
(assert (= y 6))
(assert (> (/ x 1.4) (to_real y)))
done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-fun y () Int)
(declare-fun x () Real)
(assert
 (let (($x14 (> (/ x (/ 7.0 5.0)) (to_real y))))
(let (($x10 (= y 6)))
(let (($x7 (= x 0.0)))
(and $x7 $x10 $x14)))))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (= x 0.0) (= y 6) (> (/ x (/ 7.0 5.0)) (to_real y))))
done printing
spec:
(declare-const x (_ BitVec 4))
(declare-const y (_ BitVec 4))
(assert (bvule x (bvmul y (concat ((_ extract 2 0) x) ((_ extract 3 3) #xf0)))))
done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(declare-fun x () (_ BitVec 4))
(declare-fun y () (_ BitVec 4))
(assert
 (let (($x12 (bvule x (bvmul y (concat ((_ extract 2 0) x) ((_ extract 3 3) (_ bv240 8)))))))
(and $x12)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (let ((a!1 (bvule x
                    (bvmul y
                           (concat ((_ extract 2 0) x) ((_ extract 3 3) #xf0))))))
    (and a!1)))
done printing
spec:
(assert (= "abc" "abc"))
done parsing
spec1: benchmark->string
; test
(set-info :status unknown)
(assert
 (let (($x6 (= "abc" "abc")))
(and $x6)))
(check-sat)

attempting to parse spec1...
parse successful, converting ast->string
spec2: string->ast->string
(ast-vector
  (and (= "abc" "abc")))
done printing
testing Z3_eval_smtlib2_string
spec:
(push)
(declare-datatypes (T) ((list (nil) (cons (car T) (cdr list)))))
(declare-const x Int)
(declare-const l (list Int))
(declare-fun f ((list Int)) Bool)
(assert (f (cons x l)))
(check-sat)
(pop)

response:
sat

successful call after successful call
spec:
(push)
(declare-const a (Array Int Int))
(declare-const b (Array (Array Int Int) Bool))
(assert (select b a))
(assert (= b ((as const (Array (Array Int Int) Bool)) true)))
(assert (= b (store b a true)))
(declare-const b1 (Array Bool Bool))
(declare-const b2 (Array Bool Bool))
(assert (= ((as const (Array Bool Bool)) false) ((_ map and) b1 b2)))
(check-sat)
(pop)

response:
sat

failing call after successful call
spec:
(push)
(declare-const a@ (Array Int Int))
(declare-const b (Array (Array Int Int) Bool))
(assert (select b a))
(check-sat)
(pop)

failing call after failing call
spec:
(push)
(declare-const a (Array Int Int))
(declare-const b# (Array (Array Int Int) Bool))
(assert (select b a))
(check-sat)
(pop)

successful call after failing call
spec:
(push)
(declare-datatypes (T) ((list (nil) (cons (car T) (cdr list)))))
(declare-const x Int)
(declare-const l (list Int))
(declare-fun f ((list Int)) Bool)
(assert (f (cons x l)))
(check-sat)
(pop)

response:
sat

done evaluating
testing Z3_eval_smtlib2_string
spec:
(declare-const |a| Bool)
(assert |a|)
(check-sat)

done parsing
spec:
(declare-const |a\| Bool)
(assert |a\|)
(check-sat)

done parsing
spec:
(declare-const |a\|| Bool)
(assert |a\||)
(check-sat)

done parsing
spec:
(declare-const |a\\| Bool)
(assert |a\\|)
(check-sat)

done parsing
spec:
(declare-const |a\\|| Bool)
(assert |a\\||)
(check-sat)

done parsing
spec:
(declare-const |a\a| Bool)
(assert |a\a|)
(check-sat)

done parsing
spec:
(declare-const |a\a Bool)
(assert |a\a)
(check-sat)

done parsing
done evaluating
PASS
(test smt2print_parse :time 0.09 :before-memory 32.77 :after-memory 32.77)
VAR 0:0 --> 0
(:var 1)
PASS
(test substitution :time 0.01 :before-memory 32.77 :after-memory 32.75)
VAR 0:0 --> 0
(:var 1)
PASS
(test substitution :time 0.01 :before-memory 32.75 :after-memory 32.75)
PASS
(test polynomial :time 0.00 :before-memory 32.75 :after-memory 32.75)
PASS
(test polynomial :time 0.00 :before-memory 32.75 :after-memory 32.75)
test_factorization_basic
test_factorization_irreducible
test_factorization_cubic
test_factorization_repeated_factors
test_factorization_constant
test_factorization_zero
test_factorization_gcd
PASS
(test polynomial_factorization :time 0.00 :before-memory 32.75 :after-memory 32.75)
test_factorization_basic
test_factorization_irreducible
test_factorization_cubic
test_factorization_repeated_factors
test_factorization_constant
test_factorization_zero
test_factorization_gcd
PASS
(test polynomial_factorization :time 0.00 :before-memory 32.75 :after-memory 32.75)


Testing GCD
_p:  13 x^18 - 1560 x^17 + 86931 x^16 - 2987504 x^15 + 70923060 x^14 - 1234660752 x^13 + 16329634620 x^12 - 167746338864 x^11 + 1356661565766 x^10 - 8703145006400 x^9 + 44396368299114 x^8 - 179697656333520 x^7 + 572988784985188 x^6 - 1420294907137392 x^5 + 2677652713464300 x^4 - 3706435590858000 x^3 + 3548919735343125 x^2 - 2098635449625000 x + 577124748646875
_q:  234 x^17 - 26520 x^16 + 1390896 x^15 - 44812560 x^14 + 992922840 x^13 - 16050589776 x^12 + 195955615440 x^11 - 1845209727504 x^10 + 13566615657660 x^9 - 78328305057600 x^8 + 355170946392912 x^7 - 1257883594334640 x^6 + 3437932709911128 x^5 - 7101474535686960 x^4 + 10710610853857200 x^3 - 11119306772574000 x^2 + 7097839470686250 x - 2098635449625000
gcd: 13 x^15 - 1313 x^14 + 60645 x^13 - 1697865 x^12 + 32200545 x^11 - 437963877 x^10 + 4411517097 x^9 - 33504144765 x^8 + 193432514535 x^7 - 849099998435 x^6 + 2811735445519 x^5 - 6901018131579 x^4 + 12159189854955 x^3 - 14529083829975 x^2 + 10535573923875 x - 3497725749375
_p:  13 x^18 - 1560 x^17 + 86931 x^16 - 2987504 x^15 + 70923060 x^14 - 1234660752 x^13 + 16329634620 x^12 - 167746338864 x^11 + 1356661565766 x^10 - 8703145006400 x^9 + 44396368299114 x^8 - 179697656333520 x^7 + 572988784985188 x^6 - 1420294907137392 x^5 + 2677652713464300 x^4 - 3706435590858000 x^3 + 3548919735343125 x^2 - 2098635449625000 x + 577124748646875
_q:  234 x^17 - 26520 x^16 + 1390896 x^15 - 44812560 x^14 + 992922840 x^13 - 16050589776 x^12 + 195955615440 x^11 - 1845209727504 x^10 + 13566615657660 x^9 - 78328305057600 x^8 + 355170946392912 x^7 - 1257883594334640 x^6 + 3437932709911128 x^5 - 7101474535686960 x^4 + 10710610853857200 x^3 - 11119306772574000 x^2 + 7097839470686250 x - 2098635449625000
subresultant_gcd: x^15 - 101 x^14 + 4665 x^13 - 130605 x^12 + 2476965 x^11 - 33689529 x^10 + 339347469 x^9 - 2577241905 x^8 + 14879424195 x^7 - 65315384495 x^6 + 216287341963 x^5 - 530847548583 x^4 + 935322296535 x^3 - 1117621833075 x^2 + 810428763375 x - 269055826875
---------------
p: x0^2 - 2
_p: x^2 - 2
_p: x^2 - 2
k:  1
---------------
p: x0^5
_p: x^5
_p: x^5
k:  1
---------------
p: 64 x0^4 - 120 x0^3 + 70 x0^2 - 15 x0 + 1
_p: 64 x^4 - 120 x^3 + 70 x^2 - 15 x + 1
_p: 64 x^4 - 120 x^3 + 70 x^2 - 15 x + 1
k:  5
---------------
p: 1024 x0^5 - 1984 x0^4 + 1240 x0^3 - 310 x0^2 + 31 x0 - 1
_p: 1024 x^5 - 1984 x^4 + 1240 x^3 - 310 x^2 + 31 x - 1
_p: 1024 x^5 - 1984 x^4 + 1240 x^3 - 310 x^2 + 31 x - 1
k:  6
---------------
p: 1024 x0^8 - 1984 x0^7 + 1240 x0^6 - 310 x0^5 + 31 x0^4 - x0^3
_p: 1024 x^8 - 1984 x^7 + 1240 x^6 - 310 x^5 + 31 x^4 - x^3
_p: 1024 x^8 - 1984 x^7 + 1240 x^6 - 310 x^5 + 31 x^4 - x^3
k:  6
---------------
p: x0^5 - x0 - 1
_p: x^5 - x - 1
_p: x^5 - x - 1
k:  2
---------------
p: 1000 x0^2 - 1001 x0 + 1
_p: 1000 x^2 - 1001 x + 1
_p: 1000 x^2 - 1001 x + 1
k:  11
---------------
p: 1024 x0^5 + 704 x0^4 - 440 x0^3 - 110 x0^2 + 11 x0 + 1
_p: 1024 x^5 + 704 x^4 - 440 x^3 - 110 x^2 + 11 x + 1
_p: 1024 x^5 + 704 x^4 - 440 x^3 - 110 x^2 + 11 x + 1
k:  5
---------------
p: 1024 x0^5 + 1984 x0^4 + 1240 x0^3 + 310 x0^2 + 31 x0 + 1
_p: 1024 x^5 + 1984 x^4 + 1240 x^3 + 310 x^2 + 31 x + 1
_p: 1024 x^5 + 1984 x^4 + 1240 x^3 + 310 x^2 + 31 x + 1
k:  6
---------------
p: x0^10 - 10 x0^8 + 38 x0^6 - 2 x0^5 - 100 x0^4 - 40 x0^3 + 121 x0^2 - 38 x0 - 17
_p: x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17
_p: x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17
k:  3
---------------
p: x0^33 - 4 x0^30 - 12 x0^27 - 12 x0^29 - 5 x0^26 + 18 x0^23 - 24 x0^28 + 42 x0^25 + 9 x0^22 - 2 x0^19 + 51 x0^24 - 19 x0^21 - 8 x0^18 - 10 x0^20 - 5 x0^17 + 5 x0^32 - 94 x0^16 + 3 x0^31 - 91 x0^15 + 22 x0^14 + 18 x0^13 + 62 x0^12 + 62 x0^11 + 19 x0^10 + 2 x0^9 + 10 x0^7 - 9 x0^6 + 10 x0^8 - 64 x0^5 - 44 x0^4 - 4 x0^3 + 40 x0^2 + 56 x0 + 28
_p: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
_p: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
k:  3
---------------
p: 900 x0^19 - 6000113760 x0^18 + 10000758403594816 x0^17 - 1264023965440000000 x0^16 + 39942400000000000000 x0^15 - 2700000000000 x0^14 + 18000341280000000000 x0^13 - 30002275210784448000000000 x0^12 + 3792071896320000000000000000 x0^11 - 119827200000000000000000000000 x0^10 + 2700000000000000000000 x0^9 - 18000341280000000000000000000 x0^8 + 30002275210784448000000000000000000 x0^7 - 3792071896320000000000000000000000000 x0^6 + 119827200000000000000000000000000000000 x0^5 - 900000000000000000000000000000 x0^4 + 6000113760000000000000000000000000000 x0^3 - 10000758403594816000000000000000000000000000 x0^2 + 1264023965440000000000000000000000000000000000 x0 - 39942400000000000000000000000000000000000000000
_p: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
_p: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
k:  1
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 3)
factors:
1
*(x^2 + 5)^1
*(x - 2)^1
*(x + 2)^1
3 3
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^4 + x^2 - 20)^1
1 1
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^4 + x^2 - 20)^1
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34)^1
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34)^1
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34)^1
1 1
---------------
p: x0^10 - 10 x0^8 + 38 x0^6 - 2 x0^5 - 100 x0^4 - 40 x0^3 + 121 x0^2 - 38 x0 - 17
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17)^1
1 1
---------------
p: x0^4 - 404 x0^2 + 39204
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^2 - 242)^1
*(x^2 - 162)^1
2 2
---------------
p: - x0^8 + 3 x0^7 - 5 x0^6 + 4 x0^5 - 3 x0^4 + 4 x0^3 - 5 x0 + 3
(polynomial-factorization :at GF_5)
(polynomial-factorization :num-candidate-factors 4)
(polynomial-factorization :search-size 4)
(polynomial-factorization :distinct-factors 3)
factors:
-1
*(x^2 - 2 x + 3)^1
*(x - 1)^1
*(x^5 - x^2 + 1)^1
3 3
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 3)
factors:
1
*(x^2 + 5)^1
*(x - 2)^1
*(x + 2)^1
3 3
---------------
p: 11 x0^8 - 33 x0^7 + 55 x0^6 - 44 x0^5 + 33 x0^4 - 44 x0^3 + 55 x0 - 33
(polynomial-factorization :at GF_5)
(polynomial-factorization :num-candidate-factors 4)
(polynomial-factorization :search-size 4)
(polynomial-factorization :distinct-factors 3)
factors:
11
*(x^2 - 2 x + 3)^1
*(x - 1)^1
*(x^5 - x^2 + 1)^1
3 3
---------------
p: - 2 x0^2 + x0 + 1
(polynomial-factorization :distinct-factors 2)
factors:
-1
*(x - 1)^1
*(2 x + 1)^1
2 2
---------------
p: 13 x0^18 - 1560 x0^17 + 86931 x0^16 - 2987504 x0^15 + 70923060 x0^14 - 1234660752 x0^13 + 16329634620 x0^12 - 167746338864 x0^11 + 1356661565766 x0^10 - 8703145006400 x0^9 + 44396368299114 x0^8 - 179697656333520 x0^7 + 572988784985188 x0^6 - 1420294907137392 x0^5 + 2677652713464300 x0^4 - 3706435590858000 x0^3 + 3548919735343125 x0^2 - 2098635449625000 x0 + 577124748646875
(polynomial-factorization :distinct-factors 3)
factors:
13
*(x - 5)^5
*(x - 3)^6
*(x - 11)^7
3 3
---------------
p: x0^30 + 30 x0^29 + 435 x0^28 + 4060 x0^27 + 27405 x0^26 + 142506 x0^25 + 593775 x0^24 + 2035800 x0^23 + 5852925 x0^22 + 14307150 x0^21 + 30045015 x0^20 + 54627300 x0^19 + 86493225 x0^18 + 119759850 x0^17 + 145422675 x0^16 + 155117520 x0^15 + 145422675 x0^14 + 119759850 x0^13 + 86493225 x0^12 + 54627300 x0^11 + 30045015 x0^10 + 14307150 x0^9 + 5852925 x0^8 + 2035800 x0^7 + 593775 x0^6 + 142506 x0^5 + 27405 x0^4 + 4060 x0^3 + 435 x0^2 + 30 x0 + 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x + 1)^30
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 7)
(polynomial-factorization :search-size 17)
(polynomial-factorization :distinct-factors 3)
factors:
1
*(x^10 - 4 x^5 + 2)^1
*(x^50 - 10 x^40 + 38 x^30 - 2 x^25 - 100 x^20 - 40 x^15 + 121 x^10 - 38 x^5 - 17)^1
*(x^10 - 2 x^5 - 1)^1
3 3
---------------
p: x0^4 - 8 x0^2
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^2 - 8)^1
*(x)^2
2 2
---------------
p: x0^5 - 2 x0^3 + x0 - 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^5 - 2 x^3 + x - 1)^1
1 1
---------------
p: x0^25 - 4 x0^21 - 5 x0^20 + 6 x0^17 + 11 x0^16 + 10 x0^15 - 4 x0^13 - 7 x0^12 - 9 x0^11 - 10 x0^10 + x0^9 + x0^8 + x0^7 + x0^6 + 3 x0^5 + x0 - 1
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 2 x^3 + x - 1)^1
*(x^10 + x^8 - x^6 - 2 x^5 - x^4 - x^3 + 1)^2
2 2
---------------
p: x0^25 - 10 x0^21 - 10 x0^20 - 95 x0^17 - 470 x0^16 - 585 x0^15 - 40 x0^13 - 1280 x0^12 - 4190 x0^11 - 3830 x0^10 + 400 x0^9 + 1760 x0^8 + 760 x0^7 - 2280 x0^6 + 449 x0^5 + 640 x0^3 - 640 x0^2 + 240 x0 - 32
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 16 x - 32)^1
*(x^10 + 3 x^6 + 11 x^5 - 4 x^2 + 4 x - 1)^2
2 2
---------------
p: x0^10
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x)^10
1 1
---------------
p: x0^2 - 1
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x - 1)^1
*(x + 1)^1
2 2
---------------
p: - 2 x0^2 + 2
(polynomial-factorization :distinct-factors 2)
factors:
-2
*(x - 1)^1
*(x + 1)^1
2 2
---------------
p: 0
(polynomial-factorization :distinct-factors 0)
factors:
0
0 0
---------------
p: 3
(polynomial-factorization :distinct-factors 0)
factors:
3
0 0
---------------
p: x0 + 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x + 1)^1
1 1
---------------
p: x0 - 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x - 1)^1
1 1
---------------
p: - x0 - 1
(polynomial-factorization :distinct-factors 1)
factors:
-1
*(x + 1)^1
1 1
---------------
p: - x0 + 1
(polynomial-factorization :distinct-factors 1)
factors:
-1
*(x - 1)^1
1 1
---------------
p: x0^10 - 10 x0^8 + 38 x0^6 - 2 x0^5 - 100 x0^4 - 40 x0^3 + 121 x0^2 - 38 x0 - 17
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17)^1
1 1
---------------
p: x0^50 - 10 x0^40 + 38 x0^30 - 2 x0^25 - 100 x0^20 - 40 x0^15 + 121 x0^10 - 38 x0^5 - 17
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^50 - 10 x^40 + 38 x^30 - 2 x^25 - 100 x^20 - 40 x^15 + 121 x^10 - 38 x^5 - 17)^1
1 1
---------------
p: x0^50 + 50 x0^49 + 1225 x0^48 + 19600 x0^47 + 230300 x0^46 + 2118760 x0^45 + 15890700 x0^44 + 99884400 x0^43 + 536878650 x0^42 + 2505433700 x0^41 + 10272278160 x0^40 + 37353738400 x0^39 + 121399643300 x0^38 + 354860419800 x0^37 + 937844742400 x0^36 + 2250822995040 x0^35 + 4923651311775 x0^34 + 9847192955550 x0^33 + 18052759836925 x0^32 + 30403208994400 x0^31 + 47120735638718 x0^30 + 67304328049540 x0^29 + 88693946746330 x0^28 + 107922921291080 x0^27 + 121316591779290 x0^26 + 126008358402418 x0^25 + 120920161583200 x0^24 + 107156006937400 x0^23 + 87616235053150 x0^22 + 66015165625200 x0^21 + 45751888559970 x0^20 + 29095194780400 x0^19 + 16923012027925 x0^18 + 8964604200300 x0^17 + 4300690170275 x0^16 + 1854462502360 x0^15 + 711289628150 x0^14 + 239061007300 x0^13 + 68794843050 x0^12 + 16285796400 x0^11 + 2912250341 x0^10 + 293635660 x0^9 - 24769155 x0^8 - 18147080 x0^7 - 4334640 x0^6 - 792418 x0^5 - 181390 x0^4 - 47580 x0^3 - 8780 x0^2 - 840 x0 - 47
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^50 + 50 x^49 + 1225 x^48 + 19600 x^47 + 230300 x^46 + 2118760 x^45 + 15890700 x^44 + 99884400 x^43 + 536878650 x^42 + 2505433700 x^41 + 10272278160 x^40 + 37353738400 x^39 + 121399643300 x^38 + 354860419800 x^37 + 937844742400 x^36 + 2250822995040 x^35 + 4923651311775 x^34 + 9847192955550 x^33 + 18052759836925 x^32 + 30403208994400 x^31 + 47120735638718 x^30 + 67304328049540 x^29 + 88693946746330 x^28 + 107922921291080 x^27 + 121316591779290 x^26 + 126008358402418 x^25 + 120920161583200 x^24 + 107156006937400 x^23 + 87616235053150 x^22 + 66015165625200 x^21 + 45751888559970 x^20 + 29095194780400 x^19 + 16923012027925 x^18 + 8964604200300 x^17 + 4300690170275 x^16 + 1854462502360 x^15 + 711289628150 x^14 + 239061007300 x^13 + 68794843050 x^12 + 16285796400 x^11 + 2912250341 x^10 + 293635660 x^9 - 24769155 x^8 - 18147080 x^7 - 4334640 x^6 - 792418 x^5 - 181390 x^4 - 47580 x^3 - 8780 x^2 - 840 x - 47)^1
1 1
---------------
p: x0^4 - 404 x0^2 + 39204
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^2 - 242)^1
*(x^2 - 162)^1
2 2
---------------
p: x0^25 - 31260 x0^20 + 383062540 x0^15 - 2590282000080 x0^10 + 7334282001000080 x0^5 - 9552011721875500032
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 7)
(polynomial-factorization :search-size 19)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 15552)^1
*(x^20 - 15708 x^15 + 138771724 x^10 - 432104148432 x^5 + 614198284585616)^1
2 2
---------------
p: x0^25 - 3125 x0^21 - 15630 x0^20 + 3888750 x0^17 + 38684375 x0^16 + 95765635 x0^15 - 2489846500 x0^13 - 37650481875 x0^12 - 190548065625 x0^11 - 323785250010 x0^10 + 750249453025 x0^9 + 14962295699875 x0^8 + 111775113235000 x0^7 + 370399286731250 x0^6 + 362903064503129 x0^5 - 2387239013984400 x0^4 - 23872390139844000 x0^3 - 119361950699220000 x0^2 - 298404876748050000 x0 - 298500366308609376
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 5)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 1296 x - 7776)^1
*(x^20 - 1829 x^16 - 7854 x^15 + 1518366 x^12 + 14283287 x^11 + 34692931 x^10 - 522044164 x^8 - 7332527907 x^7 - 34519187337 x^6 - 54013018554 x^5 + 73680216481 x^4 + 1399924113139 x^3 + 10020509441416 x^2 + 31977213952754 x + 38387392786601)^1
2 2
---------------
p: - x0^27 + 54 x0^24 - 324 x0^21 + 17496 x0^18 - 34992 x0^15 + 1889568 x0^12 - 1259712 x0^9 + 68024448 x0^6
(polynomial-factorization :distinct-factors 3)
factors:
-1
*(x^3 - 54)^1
*(x^6 + 108)^3
*(x)^6
3 3
---------------
p: x0^27 - 648 x0^24 + 105300 x0^21 - 3639168 x0^18 - 521485776 x0^15 - 40761760896 x0^12 - 8435982634560 x0^9 - 326907538633728 x0^6 - 904871002816512 x0^3 - 34835065137266688
(polynomial-factorization :at GF_17)
(polynomial-factorization :num-candidate-factors 11)
(polynomial-factorization :search-size 83)
(polynomial-factorization :distinct-factors 5)
factors:
1
*(x^3 - 432)^1
*(x^6 + 6912)^1
*(x^6 - 324 x^3 + 37044)^1
*(x^6 + 108)^1
*(x^3 + 54)^2
5 5
---------------
p: x0^54 - 54 x0^52 - 1296 x0^51 + 1404 x0^50 + 607104 x0^48 - 1057536 x0^47 - 22401792 x0^46 - 131347008 x0^45 + 385174656 x0^44 + 4556424960 x0^43 + 10518648048 x0^42 + 54432 x0^49 - 69060148992 x0^41 - 565617303648 x0^40 + 445518434304 x0^39 + 8781044678784 x0^38 + 32843377234944 x0^37 - 131307918402048 x0^36 - 1186720516915200 x0^35 + 736520460602112 x0^34 + 18979903288608768 x0^33 - 112345961528001024 x0^32 + 1270197317039357952 x0^31 - 1541064534072996096 x0^30 + 16614053352447639552 x0^29 - 64121868468546937344 x0^28 - 441603923048400752640 x0^27 + 3907490603726606515200 x0^26 - 9940058828597411831808 x0^25 + 37842357616860755976192 x0^24 - 207493394698593727119360 x0^23 + 7974899726119384485888 x0^22 + 2119713138903354441449472 x0^21 - 1236506243331227840225280 x0^20 + 15633879365645789187538944 x0^19 + 135073233715906678961491968 x0^18 - 283501898470995378000297984 x0^17 - 103789476798964165693218816 x0^16 + 2149475050405063712005816320 x0^15 + 11401046311106270759794900992 x0^14 - 42594459367486176885626634240 x0^13 + 144038627307565998906953170944 x0^12 + 51604015948240925730371272704 x0^11 - 250947536887982891503528574976 x0^10 + 3480976544954551737609272426496 x0^9 + 10434520207534987392729183682560 x0^8 + 42130058836708565940278805921792 x0^7 + 28392667475502927445585073012736 x0^6 + 292548838778373337946194100355072 x0^5 + 732626185252271205256762862075904 x0^4 + 490660485015010178556685461749760 x0^3 + 1356203807400073270301299496189952 x0^2 + 436594705270365747351637721088000 x0 + 1395158047392035876769798396313600
(polynomial-factorization :at GF_23)
(polynomial-factorization :num-candidate-factors 22)
(polynomial-factorization :search-size 14448)
(polynomial-factorization :distinct-factors 5)
factors:
1
*(x^6 - 6 x^4 - 864 x^3 + 12 x^2 - 5184 x + 186616)^1
*(x^12 - 12 x^10 + 60 x^8 + 56 x^6 + 6720 x^4 + 12768 x^2 + 13456)^1
*(x^12 - 12 x^10 - 648 x^9 + 60 x^8 + 178904 x^6 + 15552 x^5 + 1593024 x^4 - 24045984 x^3 + 5704800 x^2 - 143995968 x + 1372010896)^1
*(x^12 - 12 x^10 + 60 x^8 + 13664 x^6 + 414960 x^4 + 829248 x^2 + 47886400)^1
*(x^6 - 6 x^4 + 108 x^3 + 12 x^2 + 648 x + 2908)^2
5 5
---------------
p: x0^2 + x0
q: x0
r: 0
---------------
p: x0^2 + x0 + 1
q: x0
r: 1
---------------
p: x0^2 + 2 x0 + 1
q: 2 x0 + 2
r: 0
------
p1: x^3 - 6 x^2 + 11 x - 6
p2: x^2 - 3 x + 2
r:  x - 3
expected:  x - 3
------
p1: 2 x^3 - 12 x^2 + 22 x - 12
p2: x^2 - 3 x + 2
r:  2 x - 6
expected:  2 x - 6
------
p1: 2 x^3 - 12 x^2 + 22 x - 12
p2: x^3 - 7 x^2 + 14 x - 8
------
p1: x - 3
p2: x - 1
------
p1: 0
p2: x^3 - 7 x^2 + 14 x - 8
r:  0
expected:  0
------
p1: x^3 - 7 x^2 + 14 x - 8
p2: 0
------
p1: 0
p2: 0
------
p1: 2 x - 2
p2: x - 1
r:  2
expected:  2
------
p1: 2 x - 2
p2: 4 x - 4
------
p1: 6 x - 4
p2: 2
r:  3 x - 2
expected:  3 x - 2
isolating roots of: x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34
(isolate time :time 0.04 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.85)
num. roots: 6
sign var(-oo): 16
sign var(+oo): 10
roots:
intervals: (1.25, 1.5) (1.203125, 1.21875) (1.1875, 1.203125) (0, 1) (-0.875, -0.8125) (-0.8125, -0.75)(interval check :time 0.04 :before-memory 32.85 :after-memory 32.85)

isolating roots of: x^2 - 3 x + 2
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^2 - 3 x + 2
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 2
intervals: (0, 2)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^5 - 2 x^4 + x^3
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^2 - x
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 0
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^5 - x - 1
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^5 - x - 1
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 1
sign var(-oo): 2
sign var(+oo): 1
roots:
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^6 - x^5 - 16 x^4 + 10 x^3 + 69 x^2 - 9 x - 54
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^5 + 2 x^4 - 10 x^3 - 20 x^2 + 9 x + 18
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 5
sign var(-oo): 5
sign var(+oo): 0
roots: -2
intervals: (2, 4) (0, 2) (-4, -2) (-2, 0)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 100000000 x^2 - 630000 x + 992
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 100000000 x^2 - 630000 x + 992
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots:
intervals: (0.0031738281?, 0.0034179687?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 3
sign var(+oo): 0
roots:
intervals: (0.0032958984?, 0.0034179687?) (0.0031738281?, 0.0032958984?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 11
sign var(-oo): 11
sign var(+oo): 0
roots: 64 32 16 8 4 2 0.5 0.25 0.125 0.0625
intervals: (0, 0.0625)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 1000000 x^22 - 2334000 x^21 + 1361889 x^20 - 4000000 x^17 + 9336000 x^16 - 5447556 x^15 - 2000000 x^14 + 4668000 x^13 + 3276222 x^12 - 14004000 x^11 + 8171334 x^10 + 4000000 x^9 - 9336000 x^8 + 1447556 x^7 + 10336000 x^6 - 7781556 x^5 - 638111 x^4 + 4668000 x^3 - 1723778 x^2 - 2334000 x + 1361889
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 10
sign var(+oo): 7
roots:
intervals: (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.01 :before-memory 32.76 :after-memory 32.76)
square free part: x^25 + 5 x^24 + 3 x^23 - 2 x^22 - x^21 - 12 x^20 - 8 x^19 - 8 x^18 + 3 x^17 + 6 x^16 - 20 x^15 + 5 x^14 + 14 x^13 - x^12 + 26 x^11 + 15 x^10 - 6 x^9 - x^8 - 6 x^7 + 13 x^6 - x^5 - 7 x^4 - x^3 + 6 x^2 + 14 x + 14
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 5
sign var(-oo): 15
sign var(+oo): 10
roots:
intervals: (1.25, 1.5) (1, 1.25) (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.01 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
(isolate time :time 0.01 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 15 x^7 - 50000948 x^6 + 3160000000 x^5 - 15000000000 x^2 + 50000948000000000 x - 3160000000000000000
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 5
sign var(+oo): 2
roots:
intervals: (2097152, 4194304) (63.125, 63.25) (63, 63.125)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

upolynomial sturm seq...
x^16 - 136 x^14 + 6476 x^12 - 141912 x^10 + 1513334 x^8 - 7453176 x^6 + 13950764 x^4 - 5596840 x^2 + 46225
16 x^31 - 3184 x^29 + 266896 x^27 - 12504176 x^25 + 365186736 x^23 - 7016366800 x^21 + 91296632240 x^19 - 816781071440 x^17 + 5048153319680 x^15 - 21441099366400 x^13 + 61546497478656 x^11 - 115751532406784 x^9 + 135609801916416 x^7 - 91405602717696 x^5 + 30893429293056 x^3 - 3713794375680 x
-1 x^16 + 136 x^14 - 6476 x^12 + 141912 x^10 - 1513334 x^8 + 7453176 x^6 - 13950764 x^4 + 5596840 x^2 - 46225
-1127661677367 x^15 + 80685790700977 x^13 - 2102726493398207 x^11 + 24514705741043569 x^9 - 126650346236335533 x^7 + 242589935638940027 x^5 - 97920676059890653 x^3 + 808873659526115 x
-14535239484187 x^14 + 1040002105846097 x^12 - 27102803643492427 x^10 + 315975682124035209 x^8 - 1632414202846505513 x^6 + 3126764251346253547 x^4 - 1262106621739038833 x^2 + 10425232207257915
-167716660671508667641 x^13 + 8401333185842706888530 x^11 - 134511192706723391471287 x^9 + 821751607340566559868924 x^7 - 1705905612159036016144823 x^5 + 712068977650176642124114 x^3 - 10375158858866309689337 x
-46388284262096386474101 x^12 + 2297177756962323065528714 x^10 - 36402788774274131831901243 x^8 + 220799657664499131685981196 x^6 - 455864002600254932618175227 x^4 + 187578869474987904058942602 x^2 - 1550540527908097632341045
-4781966315926860973699105567 x^11 + 144464930716069568218159788243 x^9 - 1169427211740981342868979217166 x^7 + 2878829227828597116284471589262 x^5 - 1689381939540688922079704055699 x^3 + 237821093214524613444114401119 x
-5108074971655853552979774902899 x^10 + 142894793305009146385089605918283 x^8 - 1099846101471960685926906955737574 x^6 + 2506082302169705625991475997146542 x^4 - 1056500552045609715416888450812743 x^2 + 8841855718148765940369646193383
-98120336193551253677921935999799283 x^9 + 1282821860598696804541403875934437348 x^7 - 4888580553822740399599176292389184402 x^5 + 6426442235002716205008267522870828260 x^3 - 2106362515913203012578123667196293235 x
-1561728884476847525112813341042616474011 x^8 + 17345591286879038944880672380421451809732 x^6 - 44557170670678936833666488386470071966338 x^4 + 19428144317367539496215506533408444604612 x^2 - 181424501621876268050477659663628874267
-48718567339545057971709193441047126509 x^7 + 527268188685058585740868192019254318421 x^5 - 1313868868153889289084379514485509676183 x^3 + 528737651333486566371183339800760756103 x
-220162280897461356833414966265382012563279 x^6 + 1211314214555794584950776751645547954082463 x^4 - 1230799847361844990126616667707906905070125 x^2 + 90080631010818812189690298672496136915141
-4567940256921478185902666831705495050259 x^5 + 18353182476718620132475356289264733969914 x^3 - 8965983880068785028294729109994152212011 x
-16568849839314393995007704109417733998971 x^4 + 40499812984358514784159551770437344409066 x^2 - 4567940256921478185902666831705495050259
-211307826015503935324666261 x^3 + 226566446302093673740485799 x
-1051673563609695326877268183 x^2 + 211307826015503935324666261
-1 x
-1

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (1/3, 7/5) (0.3333333333?, 1.4)
after (1/2, 21/2^4) (0.5, 1.3125)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (1/2, 7/5) (0.5, 1.4)
after (1/2, 21/2^4) (0.5, 1.3125)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (3/7, 3/2) (0.4285714285?, 1.5)
after (3/2^2, 3/2) (0.75, 1.5)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (0, 3/2) (0, 1.5)
after (0, 3/2) (0, 1.5)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (0, 23/21) (0, 1.0952380952?)
after (0, 69/2^6) (0, 1.078125)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (7/2, 5) (3.5, 5)
after (7/2, 5) (3.5, 5)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (999/1000, 1001/1000) (0.999, 1.001)
after (1047951/2^20, 524475/2^19) (0.9994039535?, 1.0003566741?)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (9999/10000, 10001/10000) (0.9999, 1.0001)
after (67103289/2^26, 8389161/2^23) (0.9999169260?, 1.0000659227?)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (39999/10000, 40001/10000) (3.9999, 4.0001)
after (268433289/2^26, 1073746843/2^28) (3.9999677091?, 4.0000186972?)
p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
q: 81 x^4 - 702 x^3 + 2079 x^2 - 2418 x + 880
p: 24 x^4 - 50 x^3 + 35 x^2 - 10 x + 1

Refining intervals
p: x0^5 - x0 - 1
before (1, 2)
new (2448013/2^21, 1224007/2^20)
as decimal: 1.16730356216430664062?
p: x0^2 - 2
before (1, 2)
new (1136276788042180458070828951474823657989790988021617205464301/2^199, 4545107152168721832283315805899294631959163952086468821857205/2^201)
as decimal: 1.4142135623730950488016887242096980785696718753769480731766796228945468916789744311432405157464679368195737862332593934694025131023094144793931710987557973124330301661899511600495316088199615478515625

Refinable intervals
p: 4 x0^3 - 27 x0^2 + 56 x0 - 33
before (1, 3)
new root: 11/2^2
before (2, 3)
new root: 11/2^2
before (5/2, 3)
new root: 11/2^2
p: 5 x0^3 - 31 x0^2 + 59 x0 - 33
before (1, 3)
new (2, 5/2)
before (2, 3)
new (2, 5/2)
before (3/2, 3)
new (3/2, 9/2^2)
before (1, 5/2)
new (7/2^2, 5/2)
before (3/2, 5/2)
new (3/2, 5/2)
p: x0^3 - 6 x0^2 + 11 x0 - 6
before (1, 3)
new root: 2

Sturm Seq
upolynomial sturm seq...
7 x^10 + 3 x^9 + x^8 + x^6 + 10 x^4 + 10 x^3 + 8 x^2 + 2 x + 8
70 x^9 + 27 x^8 + 8 x^7 + 6 x^5 + 40 x^3 + 30 x^2 + 16 x + 2
-59 x^8 + 24 x^7 - 280 x^6 + 18 x^5 - 4200 x^4 - 4780 x^3 - 4390 x^2 - 1212 x - 5594
1500 x^7 + 1203 x^6 + 24666 x^5 + 47840 x^4 + 48052 x^3 + 27528 x^2 + 38592 x + 26146
-136383 x^6 - 156626 x^5 + 987760 x^4 + 1288828 x^3 + 900792 x^2 + 434888 x + 1473094
-447977461 x^5 - 722331988 x^4 - 657814810 x^3 - 358104882 x^2 - 658907000 x - 254616997
-35151054357362 x^4 - 42237581647498 x^3 - 34012218049812 x^2 - 13572653161293 x - 46516612622356
32579335587662 x^3 + 71643021991321 x^2 - 50595120825621 x + 112457692722850
2904057856460384409 x^2 - 2842891454868987857 x + 2936283658205629262
-2803684606075989760487 x - 1222930252896030111592
-1
_p: 4 x^3 - 12 x^2 - x + 3
_r: 16 x^2 - 40 x - 24
_q: 16 x^2 - 40 x - 24
isolating roots of: x^2 - 3 x + 2
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^2 - 3 x + 2
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 2
intervals: (0, 2)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^5 - 2 x^4 + x^3
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^2 - x
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 0
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^5 - x - 1
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^5 - x - 1
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 1
sign var(-oo): 2
sign var(+oo): 1
roots:
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^6 - x^5 - 16 x^4 + 10 x^3 + 69 x^2 - 9 x - 54
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^5 + 2 x^4 - 10 x^3 - 20 x^2 + 9 x + 18
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 5
sign var(-oo): 5
sign var(+oo): 0
roots: -2
intervals: (2, 4) (0, 2) (-4, -2) (-2, 0)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 100000000 x^2 - 630000 x + 992
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 100000000 x^2 - 630000 x + 992
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots:
intervals: (0.0031738281?, 0.0034179687?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 3
sign var(+oo): 0
roots:
intervals: (0.0032958984?, 0.0034179687?) (0.0031738281?, 0.0032958984?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 11
sign var(-oo): 11
sign var(+oo): 0
roots: 64 32 16 8 4 2 0.5 0.25 0.125 0.0625
intervals: (0, 0.0625)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 1000000 x^22 - 2334000 x^21 + 1361889 x^20 - 4000000 x^17 + 9336000 x^16 - 5447556 x^15 - 2000000 x^14 + 4668000 x^13 + 3276222 x^12 - 14004000 x^11 + 8171334 x^10 + 4000000 x^9 - 9336000 x^8 + 1447556 x^7 + 10336000 x^6 - 7781556 x^5 - 638111 x^4 + 4668000 x^3 - 1723778 x^2 - 2334000 x + 1361889
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 10
sign var(+oo): 7
roots:
intervals: (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

isolating roots of: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
(isolate time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.01 :before-memory 32.76 :after-memory 32.76)
square free part: x^25 + 5 x^24 + 3 x^23 - 2 x^22 - x^21 - 12 x^20 - 8 x^19 - 8 x^18 + 3 x^17 + 6 x^16 - 20 x^15 + 5 x^14 + 14 x^13 - x^12 + 26 x^11 + 15 x^10 - 6 x^9 - x^8 - 6 x^7 + 13 x^6 - x^5 - 7 x^4 - x^3 + 6 x^2 + 14 x + 14
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 5
sign var(-oo): 15
sign var(+oo): 10
roots:
intervals: (1.25, 1.5) (1, 1.25) (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.01 :before-memory 32.76 :after-memory 32.76)

isolating roots of: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
(isolate time :time 0.01 :before-memory 32.76 :after-memory 32.76)
(sturm time :time 0.00 :before-memory 32.76 :after-memory 32.76)
square free part: 15 x^7 - 50000948 x^6 + 3160000000 x^5 - 15000000000 x^2 + 50000948000000000 x - 3160000000000000000
(sqf time :time 0.00 :before-memory 32.76 :after-memory 32.76)
(fourier time :time 0.00 :before-memory 32.76 :after-memory 32.76)
num. roots: 3
sign var(-oo): 5
sign var(+oo): 2
roots:
intervals: (2097152, 4194304) (63.125, 63.25) (63, 63.125)(interval check :time 0.00 :before-memory 32.76 :after-memory 32.76)

p: x0^5 + 2 x0^4 - 10 x0^3 - 20 x0^2 + 9 x0 + 18
q: x^5 + 2 x^4 - 10 x^3 - 20 x^2 + 9 x + 18
degree(q): 5
expanded q: 18 9 -20 -10 2 1 
new q: 2 x^5 + 3 x^4 - 9 x^3 - 19 x^2 + 10 x + 19
new q^2: 4 x^10 + 12 x^9 - 27 x^8 - 130 x^7 + 7 x^6 + 478 x^5 + 295 x^4 - 722 x^3 - 622 x^2 + 380 x + 361
new (q^2)^3: 64 x^30 + 576 x^29 + 432 x^28 - 12288 x^27 - 40020 x^26 + 79284 x^25 + 586149 x^24 + 235698 x^23 - 4140627 x^22 - 6895030 x^21 + 15251184 x^20 + 49873788 x^19 - 16794929 x^18 - 201145074 x^17 - 108039945 x^16 + 499210576 x^15 + 614825733 x^14 - 724261014 x^13 - 1616514344 x^12 + 376952670 x^11 + 2580727584 x^10 + 671496040 x^9 - 2571049230 x^8 - 1605401010 x^7 + 1474343885 x^6 + 1530682218 x^5 - 329384703 x^4 - 739359046 x^3 - 86793786 x^2 + 148565940 x + 47045881


Testing Z_p
GCD in Z[x]
_p:  x^4 + 2 x^3 + 2 x^2 + x
_q:  x^3 + x + 1
gcd: 1
_p:  x^4 + 2 x^3 + 2 x^2 + x
_q:  x^3 + x + 1
subresultant_gcd: 1
GCD in Z_3[x]
_p:  x^4 - x^3 - x^2 + x
_q:  x^3 + x + 1
gcd: x - 1
_p:  x^4 - x^3 - x^2 + x
_q:  x^3 + x + 1
subresultant_gcd: x - 1


Testing Z_p
GCD in Z[x]
_p:  x^8 + x^6 + 10 x^4 + 10 x^3 + 8 x^2 + 2 x + 8
_q:  x^6 + 5 x^5 + 9 x^4 + 5 x^2 + 5 x
gcd: 1
_p:  x^8 + x^6 + 10 x^4 + 10 x^3 + 8 x^2 + 2 x + 8
_q:  x^6 + 5 x^5 + 9 x^4 + 5 x^2 + 5 x
subresultant_gcd: 1
GCD in Z_13[x]
_p:  x^8 + x^6 - 3 x^4 - 3 x^3 - 5 x^2 + 2 x - 5
_q:  x^6 + 5 x^5 - 4 x^4 + 5 x^2 + 5 x
gcd: x^5 + 5 x^4 - 4 x^3 + 5 x + 5
_p:  x^8 + x^6 - 3 x^4 - 3 x^3 - 5 x^2 + 2 x - 5
_q:  x^6 + 5 x^5 - 4 x^4 + 5 x^2 + 5 x
subresultant_gcd: x^5 + 5 x^4 - 4 x^3 + 5 x + 5

Extended GCD
GCD in Z_13[x]
A: x^6 + 5 x^5 - 4 x^4 + 5 x^2 + 5 x
B: x^8 + x^6 - 3 x^4 - 3 x^3 - 5 x^2 + 2 x - 5
U: x^2 - 5 x + 4
V: -1
D: x^5 + 5 x^4 - 4 x^3 + 5 x + 5

Extended GCD in Z_7
GCD in Z_7[x]
A: x^3 + 2
B: -1 x^2 - 1
U: 3 x - 1
V: 3 x^2 - x - 3
D: 1
PASS
(test upolynomial :time 3.66 :before-memory 32.75 :after-memory 32.76)


Testing GCD
_p:  13 x^18 - 1560 x^17 + 86931 x^16 - 2987504 x^15 + 70923060 x^14 - 1234660752 x^13 + 16329634620 x^12 - 167746338864 x^11 + 1356661565766 x^10 - 8703145006400 x^9 + 44396368299114 x^8 - 179697656333520 x^7 + 572988784985188 x^6 - 1420294907137392 x^5 + 2677652713464300 x^4 - 3706435590858000 x^3 + 3548919735343125 x^2 - 2098635449625000 x + 577124748646875
_q:  234 x^17 - 26520 x^16 + 1390896 x^15 - 44812560 x^14 + 992922840 x^13 - 16050589776 x^12 + 195955615440 x^11 - 1845209727504 x^10 + 13566615657660 x^9 - 78328305057600 x^8 + 355170946392912 x^7 - 1257883594334640 x^6 + 3437932709911128 x^5 - 7101474535686960 x^4 + 10710610853857200 x^3 - 11119306772574000 x^2 + 7097839470686250 x - 2098635449625000
gcd: 13 x^15 - 1313 x^14 + 60645 x^13 - 1697865 x^12 + 32200545 x^11 - 437963877 x^10 + 4411517097 x^9 - 33504144765 x^8 + 193432514535 x^7 - 849099998435 x^6 + 2811735445519 x^5 - 6901018131579 x^4 + 12159189854955 x^3 - 14529083829975 x^2 + 10535573923875 x - 3497725749375
_p:  13 x^18 - 1560 x^17 + 86931 x^16 - 2987504 x^15 + 70923060 x^14 - 1234660752 x^13 + 16329634620 x^12 - 167746338864 x^11 + 1356661565766 x^10 - 8703145006400 x^9 + 44396368299114 x^8 - 179697656333520 x^7 + 572988784985188 x^6 - 1420294907137392 x^5 + 2677652713464300 x^4 - 3706435590858000 x^3 + 3548919735343125 x^2 - 2098635449625000 x + 577124748646875
_q:  234 x^17 - 26520 x^16 + 1390896 x^15 - 44812560 x^14 + 992922840 x^13 - 16050589776 x^12 + 195955615440 x^11 - 1845209727504 x^10 + 13566615657660 x^9 - 78328305057600 x^8 + 355170946392912 x^7 - 1257883594334640 x^6 + 3437932709911128 x^5 - 7101474535686960 x^4 + 10710610853857200 x^3 - 11119306772574000 x^2 + 7097839470686250 x - 2098635449625000
subresultant_gcd: x^15 - 101 x^14 + 4665 x^13 - 130605 x^12 + 2476965 x^11 - 33689529 x^10 + 339347469 x^9 - 2577241905 x^8 + 14879424195 x^7 - 65315384495 x^6 + 216287341963 x^5 - 530847548583 x^4 + 935322296535 x^3 - 1117621833075 x^2 + 810428763375 x - 269055826875
---------------
p: x0^2 - 2
_p: x^2 - 2
_p: x^2 - 2
k:  1
---------------
p: x0^5
_p: x^5
_p: x^5
k:  1
---------------
p: 64 x0^4 - 120 x0^3 + 70 x0^2 - 15 x0 + 1
_p: 64 x^4 - 120 x^3 + 70 x^2 - 15 x + 1
_p: 64 x^4 - 120 x^3 + 70 x^2 - 15 x + 1
k:  5
---------------
p: 1024 x0^5 - 1984 x0^4 + 1240 x0^3 - 310 x0^2 + 31 x0 - 1
_p: 1024 x^5 - 1984 x^4 + 1240 x^3 - 310 x^2 + 31 x - 1
_p: 1024 x^5 - 1984 x^4 + 1240 x^3 - 310 x^2 + 31 x - 1
k:  6
---------------
p: 1024 x0^8 - 1984 x0^7 + 1240 x0^6 - 310 x0^5 + 31 x0^4 - x0^3
_p: 1024 x^8 - 1984 x^7 + 1240 x^6 - 310 x^5 + 31 x^4 - x^3
_p: 1024 x^8 - 1984 x^7 + 1240 x^6 - 310 x^5 + 31 x^4 - x^3
k:  6
---------------
p: x0^5 - x0 - 1
_p: x^5 - x - 1
_p: x^5 - x - 1
k:  2
---------------
p: 1000 x0^2 - 1001 x0 + 1
_p: 1000 x^2 - 1001 x + 1
_p: 1000 x^2 - 1001 x + 1
k:  11
---------------
p: 1024 x0^5 + 704 x0^4 - 440 x0^3 - 110 x0^2 + 11 x0 + 1
_p: 1024 x^5 + 704 x^4 - 440 x^3 - 110 x^2 + 11 x + 1
_p: 1024 x^5 + 704 x^4 - 440 x^3 - 110 x^2 + 11 x + 1
k:  5
---------------
p: 1024 x0^5 + 1984 x0^4 + 1240 x0^3 + 310 x0^2 + 31 x0 + 1
_p: 1024 x^5 + 1984 x^4 + 1240 x^3 + 310 x^2 + 31 x + 1
_p: 1024 x^5 + 1984 x^4 + 1240 x^3 + 310 x^2 + 31 x + 1
k:  6
---------------
p: x0^10 - 10 x0^8 + 38 x0^6 - 2 x0^5 - 100 x0^4 - 40 x0^3 + 121 x0^2 - 38 x0 - 17
_p: x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17
_p: x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17
k:  3
---------------
p: x0^33 - 4 x0^30 - 12 x0^27 - 12 x0^29 - 5 x0^26 + 18 x0^23 - 24 x0^28 + 42 x0^25 + 9 x0^22 - 2 x0^19 + 51 x0^24 - 19 x0^21 - 8 x0^18 - 10 x0^20 - 5 x0^17 + 5 x0^32 - 94 x0^16 + 3 x0^31 - 91 x0^15 + 22 x0^14 + 18 x0^13 + 62 x0^12 + 62 x0^11 + 19 x0^10 + 2 x0^9 + 10 x0^7 - 9 x0^6 + 10 x0^8 - 64 x0^5 - 44 x0^4 - 4 x0^3 + 40 x0^2 + 56 x0 + 28
_p: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
_p: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
k:  3
---------------
p: 900 x0^19 - 6000113760 x0^18 + 10000758403594816 x0^17 - 1264023965440000000 x0^16 + 39942400000000000000 x0^15 - 2700000000000 x0^14 + 18000341280000000000 x0^13 - 30002275210784448000000000 x0^12 + 3792071896320000000000000000 x0^11 - 119827200000000000000000000000 x0^10 + 2700000000000000000000 x0^9 - 18000341280000000000000000000 x0^8 + 30002275210784448000000000000000000 x0^7 - 3792071896320000000000000000000000000 x0^6 + 119827200000000000000000000000000000000 x0^5 - 900000000000000000000000000000 x0^4 + 6000113760000000000000000000000000000 x0^3 - 10000758403594816000000000000000000000000000 x0^2 + 1264023965440000000000000000000000000000000000 x0 - 39942400000000000000000000000000000000000000000
_p: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
_p: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
k:  1
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 3)
factors:
1
*(x^2 + 5)^1
*(x - 2)^1
*(x + 2)^1
3 3
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^4 + x^2 - 20)^1
1 1
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^4 + x^2 - 20)^1
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34)^1
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34)^1
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34)^1
1 1
---------------
p: x0^10 - 10 x0^8 + 38 x0^6 - 2 x0^5 - 100 x0^4 - 40 x0^3 + 121 x0^2 - 38 x0 - 17
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17)^1
1 1
---------------
p: x0^4 - 404 x0^2 + 39204
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^2 - 242)^1
*(x^2 - 162)^1
2 2
---------------
p: - x0^8 + 3 x0^7 - 5 x0^6 + 4 x0^5 - 3 x0^4 + 4 x0^3 - 5 x0 + 3
(polynomial-factorization :at GF_5)
(polynomial-factorization :num-candidate-factors 4)
(polynomial-factorization :search-size 4)
(polynomial-factorization :distinct-factors 3)
factors:
-1
*(x^2 - 2 x + 3)^1
*(x - 1)^1
*(x^5 - x^2 + 1)^1
3 3
---------------
p: x0^4 + x0^2 - 20
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 3)
factors:
1
*(x^2 + 5)^1
*(x - 2)^1
*(x + 2)^1
3 3
---------------
p: 11 x0^8 - 33 x0^7 + 55 x0^6 - 44 x0^5 + 33 x0^4 - 44 x0^3 + 55 x0 - 33
(polynomial-factorization :at GF_5)
(polynomial-factorization :num-candidate-factors 4)
(polynomial-factorization :search-size 4)
(polynomial-factorization :distinct-factors 3)
factors:
11
*(x^2 - 2 x + 3)^1
*(x - 1)^1
*(x^5 - x^2 + 1)^1
3 3
---------------
p: - 2 x0^2 + x0 + 1
(polynomial-factorization :distinct-factors 2)
factors:
-1
*(x - 1)^1
*(2 x + 1)^1
2 2
---------------
p: 13 x0^18 - 1560 x0^17 + 86931 x0^16 - 2987504 x0^15 + 70923060 x0^14 - 1234660752 x0^13 + 16329634620 x0^12 - 167746338864 x0^11 + 1356661565766 x0^10 - 8703145006400 x0^9 + 44396368299114 x0^8 - 179697656333520 x0^7 + 572988784985188 x0^6 - 1420294907137392 x0^5 + 2677652713464300 x0^4 - 3706435590858000 x0^3 + 3548919735343125 x0^2 - 2098635449625000 x0 + 577124748646875
(polynomial-factorization :distinct-factors 3)
factors:
13
*(x - 5)^5
*(x - 3)^6
*(x - 11)^7
3 3
---------------
p: x0^30 + 30 x0^29 + 435 x0^28 + 4060 x0^27 + 27405 x0^26 + 142506 x0^25 + 593775 x0^24 + 2035800 x0^23 + 5852925 x0^22 + 14307150 x0^21 + 30045015 x0^20 + 54627300 x0^19 + 86493225 x0^18 + 119759850 x0^17 + 145422675 x0^16 + 155117520 x0^15 + 145422675 x0^14 + 119759850 x0^13 + 86493225 x0^12 + 54627300 x0^11 + 30045015 x0^10 + 14307150 x0^9 + 5852925 x0^8 + 2035800 x0^7 + 593775 x0^6 + 142506 x0^5 + 27405 x0^4 + 4060 x0^3 + 435 x0^2 + 30 x0 + 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x + 1)^30
1 1
---------------
p: x0^70 - 6 x0^65 - x0^60 + 60 x0^55 - 54 x0^50 - 230 x0^45 + 274 x0^40 + 542 x0^35 - 615 x0^30 - 1120 x0^25 + 1500 x0^20 - 160 x0^15 - 395 x0^10 + 76 x0^5 + 34
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 7)
(polynomial-factorization :search-size 17)
(polynomial-factorization :distinct-factors 3)
factors:
1
*(x^10 - 4 x^5 + 2)^1
*(x^50 - 10 x^40 + 38 x^30 - 2 x^25 - 100 x^20 - 40 x^15 + 121 x^10 - 38 x^5 - 17)^1
*(x^10 - 2 x^5 - 1)^1
3 3
---------------
p: x0^4 - 8 x0^2
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^2 - 8)^1
*(x)^2
2 2
---------------
p: x0^5 - 2 x0^3 + x0 - 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^5 - 2 x^3 + x - 1)^1
1 1
---------------
p: x0^25 - 4 x0^21 - 5 x0^20 + 6 x0^17 + 11 x0^16 + 10 x0^15 - 4 x0^13 - 7 x0^12 - 9 x0^11 - 10 x0^10 + x0^9 + x0^8 + x0^7 + x0^6 + 3 x0^5 + x0 - 1
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 2 x^3 + x - 1)^1
*(x^10 + x^8 - x^6 - 2 x^5 - x^4 - x^3 + 1)^2
2 2
---------------
p: x0^25 - 10 x0^21 - 10 x0^20 - 95 x0^17 - 470 x0^16 - 585 x0^15 - 40 x0^13 - 1280 x0^12 - 4190 x0^11 - 3830 x0^10 + 400 x0^9 + 1760 x0^8 + 760 x0^7 - 2280 x0^6 + 449 x0^5 + 640 x0^3 - 640 x0^2 + 240 x0 - 32
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 16 x - 32)^1
*(x^10 + 3 x^6 + 11 x^5 - 4 x^2 + 4 x - 1)^2
2 2
---------------
p: x0^10
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x)^10
1 1
---------------
p: x0^2 - 1
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x - 1)^1
*(x + 1)^1
2 2
---------------
p: - 2 x0^2 + 2
(polynomial-factorization :distinct-factors 2)
factors:
-2
*(x - 1)^1
*(x + 1)^1
2 2
---------------
p: 0
(polynomial-factorization :distinct-factors 0)
factors:
0
0 0
---------------
p: 3
(polynomial-factorization :distinct-factors 0)
factors:
3
0 0
---------------
p: x0 + 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x + 1)^1
1 1
---------------
p: x0 - 1
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x - 1)^1
1 1
---------------
p: - x0 - 1
(polynomial-factorization :distinct-factors 1)
factors:
-1
*(x + 1)^1
1 1
---------------
p: - x0 + 1
(polynomial-factorization :distinct-factors 1)
factors:
-1
*(x - 1)^1
1 1
---------------
p: x0^10 - 10 x0^8 + 38 x0^6 - 2 x0^5 - 100 x0^4 - 40 x0^3 + 121 x0^2 - 38 x0 - 17
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^10 - 10 x^8 + 38 x^6 - 2 x^5 - 100 x^4 - 40 x^3 + 121 x^2 - 38 x - 17)^1
1 1
---------------
p: x0^50 - 10 x0^40 + 38 x0^30 - 2 x0^25 - 100 x0^20 - 40 x0^15 + 121 x0^10 - 38 x0^5 - 17
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^50 - 10 x^40 + 38 x^30 - 2 x^25 - 100 x^20 - 40 x^15 + 121 x^10 - 38 x^5 - 17)^1
1 1
---------------
p: x0^50 + 50 x0^49 + 1225 x0^48 + 19600 x0^47 + 230300 x0^46 + 2118760 x0^45 + 15890700 x0^44 + 99884400 x0^43 + 536878650 x0^42 + 2505433700 x0^41 + 10272278160 x0^40 + 37353738400 x0^39 + 121399643300 x0^38 + 354860419800 x0^37 + 937844742400 x0^36 + 2250822995040 x0^35 + 4923651311775 x0^34 + 9847192955550 x0^33 + 18052759836925 x0^32 + 30403208994400 x0^31 + 47120735638718 x0^30 + 67304328049540 x0^29 + 88693946746330 x0^28 + 107922921291080 x0^27 + 121316591779290 x0^26 + 126008358402418 x0^25 + 120920161583200 x0^24 + 107156006937400 x0^23 + 87616235053150 x0^22 + 66015165625200 x0^21 + 45751888559970 x0^20 + 29095194780400 x0^19 + 16923012027925 x0^18 + 8964604200300 x0^17 + 4300690170275 x0^16 + 1854462502360 x0^15 + 711289628150 x0^14 + 239061007300 x0^13 + 68794843050 x0^12 + 16285796400 x0^11 + 2912250341 x0^10 + 293635660 x0^9 - 24769155 x0^8 - 18147080 x0^7 - 4334640 x0^6 - 792418 x0^5 - 181390 x0^4 - 47580 x0^3 - 8780 x0^2 - 840 x0 - 47
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
factors:
1
*(x^50 + 50 x^49 + 1225 x^48 + 19600 x^47 + 230300 x^46 + 2118760 x^45 + 15890700 x^44 + 99884400 x^43 + 536878650 x^42 + 2505433700 x^41 + 10272278160 x^40 + 37353738400 x^39 + 121399643300 x^38 + 354860419800 x^37 + 937844742400 x^36 + 2250822995040 x^35 + 4923651311775 x^34 + 9847192955550 x^33 + 18052759836925 x^32 + 30403208994400 x^31 + 47120735638718 x^30 + 67304328049540 x^29 + 88693946746330 x^28 + 107922921291080 x^27 + 121316591779290 x^26 + 126008358402418 x^25 + 120920161583200 x^24 + 107156006937400 x^23 + 87616235053150 x^22 + 66015165625200 x^21 + 45751888559970 x^20 + 29095194780400 x^19 + 16923012027925 x^18 + 8964604200300 x^17 + 4300690170275 x^16 + 1854462502360 x^15 + 711289628150 x^14 + 239061007300 x^13 + 68794843050 x^12 + 16285796400 x^11 + 2912250341 x^10 + 293635660 x^9 - 24769155 x^8 - 18147080 x^7 - 4334640 x^6 - 792418 x^5 - 181390 x^4 - 47580 x^3 - 8780 x^2 - 840 x - 47)^1
1 1
---------------
p: x0^4 - 404 x0^2 + 39204
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^2 - 242)^1
*(x^2 - 162)^1
2 2
---------------
p: x0^25 - 31260 x0^20 + 383062540 x0^15 - 2590282000080 x0^10 + 7334282001000080 x0^5 - 9552011721875500032
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 7)
(polynomial-factorization :search-size 19)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 15552)^1
*(x^20 - 15708 x^15 + 138771724 x^10 - 432104148432 x^5 + 614198284585616)^1
2 2
---------------
p: x0^25 - 3125 x0^21 - 15630 x0^20 + 3888750 x0^17 + 38684375 x0^16 + 95765635 x0^15 - 2489846500 x0^13 - 37650481875 x0^12 - 190548065625 x0^11 - 323785250010 x0^10 + 750249453025 x0^9 + 14962295699875 x0^8 + 111775113235000 x0^7 + 370399286731250 x0^6 + 362903064503129 x0^5 - 2387239013984400 x0^4 - 23872390139844000 x0^3 - 119361950699220000 x0^2 - 298404876748050000 x0 - 298500366308609376
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 5)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
factors:
1
*(x^5 - 1296 x - 7776)^1
*(x^20 - 1829 x^16 - 7854 x^15 + 1518366 x^12 + 14283287 x^11 + 34692931 x^10 - 522044164 x^8 - 7332527907 x^7 - 34519187337 x^6 - 54013018554 x^5 + 73680216481 x^4 + 1399924113139 x^3 + 10020509441416 x^2 + 31977213952754 x + 38387392786601)^1
2 2
---------------
p: - x0^27 + 54 x0^24 - 324 x0^21 + 17496 x0^18 - 34992 x0^15 + 1889568 x0^12 - 1259712 x0^9 + 68024448 x0^6
(polynomial-factorization :distinct-factors 3)
factors:
-1
*(x^3 - 54)^1
*(x^6 + 108)^3
*(x)^6
3 3
---------------
p: x0^27 - 648 x0^24 + 105300 x0^21 - 3639168 x0^18 - 521485776 x0^15 - 40761760896 x0^12 - 8435982634560 x0^9 - 326907538633728 x0^6 - 904871002816512 x0^3 - 34835065137266688
(polynomial-factorization :at GF_17)
(polynomial-factorization :num-candidate-factors 11)
(polynomial-factorization :search-size 83)
(polynomial-factorization :distinct-factors 5)
factors:
1
*(x^3 - 432)^1
*(x^6 + 6912)^1
*(x^6 - 324 x^3 + 37044)^1
*(x^6 + 108)^1
*(x^3 + 54)^2
5 5
---------------
p: x0^54 - 54 x0^52 - 1296 x0^51 + 1404 x0^50 + 607104 x0^48 - 1057536 x0^47 - 22401792 x0^46 - 131347008 x0^45 + 385174656 x0^44 + 4556424960 x0^43 + 10518648048 x0^42 + 54432 x0^49 - 69060148992 x0^41 - 565617303648 x0^40 + 445518434304 x0^39 + 8781044678784 x0^38 + 32843377234944 x0^37 - 131307918402048 x0^36 - 1186720516915200 x0^35 + 736520460602112 x0^34 + 18979903288608768 x0^33 - 112345961528001024 x0^32 + 1270197317039357952 x0^31 - 1541064534072996096 x0^30 + 16614053352447639552 x0^29 - 64121868468546937344 x0^28 - 441603923048400752640 x0^27 + 3907490603726606515200 x0^26 - 9940058828597411831808 x0^25 + 37842357616860755976192 x0^24 - 207493394698593727119360 x0^23 + 7974899726119384485888 x0^22 + 2119713138903354441449472 x0^21 - 1236506243331227840225280 x0^20 + 15633879365645789187538944 x0^19 + 135073233715906678961491968 x0^18 - 283501898470995378000297984 x0^17 - 103789476798964165693218816 x0^16 + 2149475050405063712005816320 x0^15 + 11401046311106270759794900992 x0^14 - 42594459367486176885626634240 x0^13 + 144038627307565998906953170944 x0^12 + 51604015948240925730371272704 x0^11 - 250947536887982891503528574976 x0^10 + 3480976544954551737609272426496 x0^9 + 10434520207534987392729183682560 x0^8 + 42130058836708565940278805921792 x0^7 + 28392667475502927445585073012736 x0^6 + 292548838778373337946194100355072 x0^5 + 732626185252271205256762862075904 x0^4 + 490660485015010178556685461749760 x0^3 + 1356203807400073270301299496189952 x0^2 + 436594705270365747351637721088000 x0 + 1395158047392035876769798396313600
(polynomial-factorization :at GF_23)
(polynomial-factorization :num-candidate-factors 22)
(polynomial-factorization :search-size 14448)
(polynomial-factorization :distinct-factors 5)
factors:
1
*(x^6 - 6 x^4 - 864 x^3 + 12 x^2 - 5184 x + 186616)^1
*(x^12 - 12 x^10 + 60 x^8 + 56 x^6 + 6720 x^4 + 12768 x^2 + 13456)^1
*(x^12 - 12 x^10 - 648 x^9 + 60 x^8 + 178904 x^6 + 15552 x^5 + 1593024 x^4 - 24045984 x^3 + 5704800 x^2 - 143995968 x + 1372010896)^1
*(x^12 - 12 x^10 + 60 x^8 + 13664 x^6 + 414960 x^4 + 829248 x^2 + 47886400)^1
*(x^6 - 6 x^4 + 108 x^3 + 12 x^2 + 648 x + 2908)^2
5 5
---------------
p: x0^2 + x0
q: x0
r: 0
---------------
p: x0^2 + x0 + 1
q: x0
r: 1
---------------
p: x0^2 + 2 x0 + 1
q: 2 x0 + 2
r: 0
------
p1: x^3 - 6 x^2 + 11 x - 6
p2: x^2 - 3 x + 2
r:  x - 3
expected:  x - 3
------
p1: 2 x^3 - 12 x^2 + 22 x - 12
p2: x^2 - 3 x + 2
r:  2 x - 6
expected:  2 x - 6
------
p1: 2 x^3 - 12 x^2 + 22 x - 12
p2: x^3 - 7 x^2 + 14 x - 8
------
p1: x - 3
p2: x - 1
------
p1: 0
p2: x^3 - 7 x^2 + 14 x - 8
r:  0
expected:  0
------
p1: x^3 - 7 x^2 + 14 x - 8
p2: 0
------
p1: 0
p2: 0
------
p1: 2 x - 2
p2: x - 1
r:  2
expected:  2
------
p1: 2 x - 2
p2: 4 x - 4
------
p1: 6 x - 4
p2: 2
r:  3 x - 2
expected:  3 x - 2
isolating roots of: x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34
(isolate time :time 0.04 :before-memory 32.79 :after-memory 32.79)
(sturm time :time 0.00 :before-memory 32.79 :after-memory 32.79)
square free part: x^70 - 6 x^65 - x^60 + 60 x^55 - 54 x^50 - 230 x^45 + 274 x^40 + 542 x^35 - 615 x^30 - 1120 x^25 + 1500 x^20 - 160 x^15 - 395 x^10 + 76 x^5 + 34
(sqf time :time 0.00 :before-memory 32.79 :after-memory 32.79)
(fourier time :time 0.00 :before-memory 32.79 :after-memory 32.91)
num. roots: 6
sign var(-oo): 16
sign var(+oo): 10
roots:
intervals: (1.25, 1.5) (1.203125, 1.21875) (1.1875, 1.203125) (0, 1) (-0.875, -0.8125) (-0.8125, -0.75)(interval check :time 0.04 :before-memory 32.91 :after-memory 32.91)

isolating roots of: x^2 - 3 x + 2
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^2 - 3 x + 2
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 2
intervals: (0, 2)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^5 - 2 x^4 + x^3
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^2 - x
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 0
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^5 - x - 1
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^5 - x - 1
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 1
sign var(-oo): 2
sign var(+oo): 1
roots:
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^6 - x^5 - 16 x^4 + 10 x^3 + 69 x^2 - 9 x - 54
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^5 + 2 x^4 - 10 x^3 - 20 x^2 + 9 x + 18
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 5
sign var(-oo): 5
sign var(+oo): 0
roots: -2
intervals: (2, 4) (0, 2) (-4, -2) (-2, 0)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 100000000 x^2 - 630000 x + 992
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 100000000 x^2 - 630000 x + 992
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots:
intervals: (0.0031738281?, 0.0034179687?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 3
sign var(+oo): 0
roots:
intervals: (0.0032958984?, 0.0034179687?) (0.0031738281?, 0.0032958984?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 11
sign var(-oo): 11
sign var(+oo): 0
roots: 64 32 16 8 4 2 0.5 0.25 0.125 0.0625
intervals: (0, 0.0625)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 1000000 x^22 - 2334000 x^21 + 1361889 x^20 - 4000000 x^17 + 9336000 x^16 - 5447556 x^15 - 2000000 x^14 + 4668000 x^13 + 3276222 x^12 - 14004000 x^11 + 8171334 x^10 + 4000000 x^9 - 9336000 x^8 + 1447556 x^7 + 10336000 x^6 - 7781556 x^5 - 638111 x^4 + 4668000 x^3 - 1723778 x^2 - 2334000 x + 1361889
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 10
sign var(+oo): 7
roots:
intervals: (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.01 :before-memory 32.82 :after-memory 32.82)
square free part: x^25 + 5 x^24 + 3 x^23 - 2 x^22 - x^21 - 12 x^20 - 8 x^19 - 8 x^18 + 3 x^17 + 6 x^16 - 20 x^15 + 5 x^14 + 14 x^13 - x^12 + 26 x^11 + 15 x^10 - 6 x^9 - x^8 - 6 x^7 + 13 x^6 - x^5 - 7 x^4 - x^3 + 6 x^2 + 14 x + 14
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 5
sign var(-oo): 15
sign var(+oo): 10
roots:
intervals: (1.25, 1.5) (1, 1.25) (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.01 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
(isolate time :time 0.01 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 15 x^7 - 50000948 x^6 + 3160000000 x^5 - 15000000000 x^2 + 50000948000000000 x - 3160000000000000000
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 5
sign var(+oo): 2
roots:
intervals: (2097152, 4194304) (63.125, 63.25) (63, 63.125)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

upolynomial sturm seq...
x^16 - 136 x^14 + 6476 x^12 - 141912 x^10 + 1513334 x^8 - 7453176 x^6 + 13950764 x^4 - 5596840 x^2 + 46225
16 x^31 - 3184 x^29 + 266896 x^27 - 12504176 x^25 + 365186736 x^23 - 7016366800 x^21 + 91296632240 x^19 - 816781071440 x^17 + 5048153319680 x^15 - 21441099366400 x^13 + 61546497478656 x^11 - 115751532406784 x^9 + 135609801916416 x^7 - 91405602717696 x^5 + 30893429293056 x^3 - 3713794375680 x
-1 x^16 + 136 x^14 - 6476 x^12 + 141912 x^10 - 1513334 x^8 + 7453176 x^6 - 13950764 x^4 + 5596840 x^2 - 46225
-1127661677367 x^15 + 80685790700977 x^13 - 2102726493398207 x^11 + 24514705741043569 x^9 - 126650346236335533 x^7 + 242589935638940027 x^5 - 97920676059890653 x^3 + 808873659526115 x
-14535239484187 x^14 + 1040002105846097 x^12 - 27102803643492427 x^10 + 315975682124035209 x^8 - 1632414202846505513 x^6 + 3126764251346253547 x^4 - 1262106621739038833 x^2 + 10425232207257915
-167716660671508667641 x^13 + 8401333185842706888530 x^11 - 134511192706723391471287 x^9 + 821751607340566559868924 x^7 - 1705905612159036016144823 x^5 + 712068977650176642124114 x^3 - 10375158858866309689337 x
-46388284262096386474101 x^12 + 2297177756962323065528714 x^10 - 36402788774274131831901243 x^8 + 220799657664499131685981196 x^6 - 455864002600254932618175227 x^4 + 187578869474987904058942602 x^2 - 1550540527908097632341045
-4781966315926860973699105567 x^11 + 144464930716069568218159788243 x^9 - 1169427211740981342868979217166 x^7 + 2878829227828597116284471589262 x^5 - 1689381939540688922079704055699 x^3 + 237821093214524613444114401119 x
-5108074971655853552979774902899 x^10 + 142894793305009146385089605918283 x^8 - 1099846101471960685926906955737574 x^6 + 2506082302169705625991475997146542 x^4 - 1056500552045609715416888450812743 x^2 + 8841855718148765940369646193383
-98120336193551253677921935999799283 x^9 + 1282821860598696804541403875934437348 x^7 - 4888580553822740399599176292389184402 x^5 + 6426442235002716205008267522870828260 x^3 - 2106362515913203012578123667196293235 x
-1561728884476847525112813341042616474011 x^8 + 17345591286879038944880672380421451809732 x^6 - 44557170670678936833666488386470071966338 x^4 + 19428144317367539496215506533408444604612 x^2 - 181424501621876268050477659663628874267
-48718567339545057971709193441047126509 x^7 + 527268188685058585740868192019254318421 x^5 - 1313868868153889289084379514485509676183 x^3 + 528737651333486566371183339800760756103 x
-220162280897461356833414966265382012563279 x^6 + 1211314214555794584950776751645547954082463 x^4 - 1230799847361844990126616667707906905070125 x^2 + 90080631010818812189690298672496136915141
-4567940256921478185902666831705495050259 x^5 + 18353182476718620132475356289264733969914 x^3 - 8965983880068785028294729109994152212011 x
-16568849839314393995007704109417733998971 x^4 + 40499812984358514784159551770437344409066 x^2 - 4567940256921478185902666831705495050259
-211307826015503935324666261 x^3 + 226566446302093673740485799 x
-1051673563609695326877268183 x^2 + 211307826015503935324666261
-1 x
-1

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (1/3, 7/5) (0.3333333333?, 1.4)
after (1/2, 21/2^4) (0.5, 1.3125)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (1/2, 7/5) (0.5, 1.4)
after (1/2, 21/2^4) (0.5, 1.3125)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (3/7, 3/2) (0.4285714285?, 1.5)
after (3/2^2, 3/2) (0.75, 1.5)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (0, 3/2) (0, 1.5)
after (0, 3/2) (0, 1.5)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (0, 23/21) (0, 1.0952380952?)
after (0, 69/2^6) (0, 1.078125)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (7/2, 5) (3.5, 5)
after (7/2, 5) (3.5, 5)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (999/1000, 1001/1000) (0.999, 1.001)
after (1047951/2^20, 524475/2^19) (0.9994039535?, 1.0003566741?)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (9999/10000, 10001/10000) (0.9999, 1.0001)
after (67103289/2^26, 8389161/2^23) (0.9999169260?, 1.0000659227?)

p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
before (39999/10000, 40001/10000) (3.9999, 4.0001)
after (268433289/2^26, 1073746843/2^28) (3.9999677091?, 4.0000186972?)
p: x^4 - 10 x^3 + 35 x^2 - 50 x + 24
q: 81 x^4 - 702 x^3 + 2079 x^2 - 2418 x + 880
p: 24 x^4 - 50 x^3 + 35 x^2 - 10 x + 1

Refining intervals
p: x0^5 - x0 - 1
before (1, 2)
new (2448013/2^21, 1224007/2^20)
as decimal: 1.16730356216430664062?
p: x0^2 - 2
before (1, 2)
new (1136276788042180458070828951474823657989790988021617205464301/2^199, 4545107152168721832283315805899294631959163952086468821857205/2^201)
as decimal: 1.4142135623730950488016887242096980785696718753769480731766796228945468916789744311432405157464679368195737862332593934694025131023094144793931710987557973124330301661899511600495316088199615478515625

Refinable intervals
p: 4 x0^3 - 27 x0^2 + 56 x0 - 33
before (1, 3)
new root: 11/2^2
before (2, 3)
new root: 11/2^2
before (5/2, 3)
new root: 11/2^2
p: 5 x0^3 - 31 x0^2 + 59 x0 - 33
before (1, 3)
new (2, 5/2)
before (2, 3)
new (2, 5/2)
before (3/2, 3)
new (3/2, 9/2^2)
before (1, 5/2)
new (7/2^2, 5/2)
before (3/2, 5/2)
new (3/2, 5/2)
p: x0^3 - 6 x0^2 + 11 x0 - 6
before (1, 3)
new root: 2

Sturm Seq
upolynomial sturm seq...
7 x^10 + 3 x^9 + x^8 + x^6 + 10 x^4 + 10 x^3 + 8 x^2 + 2 x + 8
70 x^9 + 27 x^8 + 8 x^7 + 6 x^5 + 40 x^3 + 30 x^2 + 16 x + 2
-59 x^8 + 24 x^7 - 280 x^6 + 18 x^5 - 4200 x^4 - 4780 x^3 - 4390 x^2 - 1212 x - 5594
1500 x^7 + 1203 x^6 + 24666 x^5 + 47840 x^4 + 48052 x^3 + 27528 x^2 + 38592 x + 26146
-136383 x^6 - 156626 x^5 + 987760 x^4 + 1288828 x^3 + 900792 x^2 + 434888 x + 1473094
-447977461 x^5 - 722331988 x^4 - 657814810 x^3 - 358104882 x^2 - 658907000 x - 254616997
-35151054357362 x^4 - 42237581647498 x^3 - 34012218049812 x^2 - 13572653161293 x - 46516612622356
32579335587662 x^3 + 71643021991321 x^2 - 50595120825621 x + 112457692722850
2904057856460384409 x^2 - 2842891454868987857 x + 2936283658205629262
-2803684606075989760487 x - 1222930252896030111592
-1
_p: 4 x^3 - 12 x^2 - x + 3
_r: 16 x^2 - 40 x - 24
_q: 16 x^2 - 40 x - 24
isolating roots of: x^2 - 3 x + 2
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^2 - 3 x + 2
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 2
intervals: (0, 2)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^5 - 2 x^4 + x^3
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^2 - x
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots: 0
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^5 - x - 1
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^5 - x - 1
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 1
sign var(-oo): 2
sign var(+oo): 1
roots:
intervals: (0, 4)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^6 - x^5 - 16 x^4 + 10 x^3 + 69 x^2 - 9 x - 54
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^5 + 2 x^4 - 10 x^3 - 20 x^2 + 9 x + 18
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 5
sign var(-oo): 5
sign var(+oo): 0
roots: -2
intervals: (2, 4) (0, 2) (-4, -2) (-2, 0)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 100000000 x^2 - 630000 x + 992
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 100000000 x^2 - 630000 x + 992
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 2
sign var(-oo): 2
sign var(+oo): 0
roots:
intervals: (0.0031738281?, 0.0034179687?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 1000000000000 x^3 - 9600000000 x^2 + 30710000 x - 32736
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 3
sign var(+oo): 0
roots:
intervals: (0.0032958984?, 0.0034179687?) (0.0031738281?, 0.0032958984?) (0.0029296875, 0.0031738281?)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 32768 x^11 - 4160512 x^10 + 174665408 x^9 - 3092100952 x^8 + 24729859214 x^7 - 89699170501 x^6 + 140975222734 x^5 - 87882836696 x^4 + 23405003968 x^3 - 2729126912 x^2 + 132087808 x - 2097152
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 11
sign var(-oo): 11
sign var(+oo): 0
roots: 64 32 16 8 4 2 0.5 0.25 0.125 0.0625
intervals: (0, 0.0625)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 1000000 x^22 - 2334000 x^21 + 1361889 x^20 - 4000000 x^17 + 9336000 x^16 - 5447556 x^15 - 2000000 x^14 + 4668000 x^13 + 3276222 x^12 - 14004000 x^11 + 8171334 x^10 + 4000000 x^9 - 9336000 x^8 + 1447556 x^7 + 10336000 x^6 - 7781556 x^5 - 638111 x^4 + 4668000 x^3 - 1723778 x^2 - 2334000 x + 1361889
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 1000 x^11 - 1167 x^10 - 2000 x^6 + 2334 x^5 - 1000 x^3 + 1167 x^2 + 1000 x - 1167
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 6
sign var(+oo): 3
roots:
intervals: (1.1672363281?, 1.1674804687?) (1.1669921875, 1.1672363281?) (0, 1)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: x^17 + 5 x^16 + 3 x^15 + 10 x^13 + 13 x^10 + x^9 + 8 x^5 + 3 x^2 + 7
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 10
sign var(+oo): 7
roots:
intervals: (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

isolating roots of: x^33 + 5 x^32 + 3 x^31 - 4 x^30 - 12 x^29 - 24 x^28 - 12 x^27 - 5 x^26 + 42 x^25 + 51 x^24 + 18 x^23 + 9 x^22 - 19 x^21 - 10 x^20 - 2 x^19 - 8 x^18 - 5 x^17 - 94 x^16 - 91 x^15 + 22 x^14 + 18 x^13 + 62 x^12 + 62 x^11 + 19 x^10 + 2 x^9 + 10 x^8 + 10 x^7 - 9 x^6 - 64 x^5 - 44 x^4 - 4 x^3 + 40 x^2 + 56 x + 28
(isolate time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.01 :before-memory 32.82 :after-memory 32.82)
square free part: x^25 + 5 x^24 + 3 x^23 - 2 x^22 - x^21 - 12 x^20 - 8 x^19 - 8 x^18 + 3 x^17 + 6 x^16 - 20 x^15 + 5 x^14 + 14 x^13 - x^12 + 26 x^11 + 15 x^10 - 6 x^9 - x^8 - 6 x^7 + 13 x^6 - x^5 - 7 x^4 - x^3 + 6 x^2 + 14 x + 14
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 5
sign var(-oo): 15
sign var(+oo): 10
roots:
intervals: (1.25, 1.5) (1, 1.25) (-8, -4) (-2, -1.5) (-1.5, -1)(interval check :time 0.01 :before-memory 32.82 :after-memory 32.82)

isolating roots of: 900 x^19 - 6000113760 x^18 + 10000758403594816 x^17 - 1264023965440000000 x^16 + 39942400000000000000 x^15 - 2700000000000 x^14 + 18000341280000000000 x^13 - 30002275210784448000000000 x^12 + 3792071896320000000000000000 x^11 - 119827200000000000000000000000 x^10 + 2700000000000000000000 x^9 - 18000341280000000000000000000 x^8 + 30002275210784448000000000000000000 x^7 - 3792071896320000000000000000000000000 x^6 + 119827200000000000000000000000000000000 x^5 - 900000000000000000000000000000 x^4 + 6000113760000000000000000000000000000 x^3 - 10000758403594816000000000000000000000000000 x^2 + 1264023965440000000000000000000000000000000000 x - 39942400000000000000000000000000000000000000000
(isolate time :time 0.01 :before-memory 32.82 :after-memory 32.82)
(sturm time :time 0.00 :before-memory 32.82 :after-memory 32.82)
square free part: 15 x^7 - 50000948 x^6 + 3160000000 x^5 - 15000000000 x^2 + 50000948000000000 x - 3160000000000000000
(sqf time :time 0.00 :before-memory 32.82 :after-memory 32.82)
(fourier time :time 0.00 :before-memory 32.82 :after-memory 32.82)
num. roots: 3
sign var(-oo): 5
sign var(+oo): 2
roots:
intervals: (2097152, 4194304) (63.125, 63.25) (63, 63.125)(interval check :time 0.00 :before-memory 32.82 :after-memory 32.82)

p: x0^5 + 2 x0^4 - 10 x0^3 - 20 x0^2 + 9 x0 + 18
q: x^5 + 2 x^4 - 10 x^3 - 20 x^2 + 9 x + 18
degree(q): 5
expanded q: 18 9 -20 -10 2 1 
new q: 2 x^5 + 3 x^4 - 9 x^3 - 19 x^2 + 10 x + 19
new q^2: 4 x^10 + 12 x^9 - 27 x^8 - 130 x^7 + 7 x^6 + 478 x^5 + 295 x^4 - 722 x^3 - 622 x^2 + 380 x + 361
new (q^2)^3: 64 x^30 + 576 x^29 + 432 x^28 - 12288 x^27 - 40020 x^26 + 79284 x^25 + 586149 x^24 + 235698 x^23 - 4140627 x^22 - 6895030 x^21 + 15251184 x^20 + 49873788 x^19 - 16794929 x^18 - 201145074 x^17 - 108039945 x^16 + 499210576 x^15 + 614825733 x^14 - 724261014 x^13 - 1616514344 x^12 + 376952670 x^11 + 2580727584 x^10 + 671496040 x^9 - 2571049230 x^8 - 1605401010 x^7 + 1474343885 x^6 + 1530682218 x^5 - 329384703 x^4 - 739359046 x^3 - 86793786 x^2 + 148565940 x + 47045881


Testing Z_p
GCD in Z[x]
_p:  x^4 + 2 x^3 + 2 x^2 + x
_q:  x^3 + x + 1
gcd: 1
_p:  x^4 + 2 x^3 + 2 x^2 + x
_q:  x^3 + x + 1
subresultant_gcd: 1
GCD in Z_3[x]
_p:  x^4 - x^3 - x^2 + x
_q:  x^3 + x + 1
gcd: x - 1
_p:  x^4 - x^3 - x^2 + x
_q:  x^3 + x + 1
subresultant_gcd: x - 1


Testing Z_p
GCD in Z[x]
_p:  x^8 + x^6 + 10 x^4 + 10 x^3 + 8 x^2 + 2 x + 8
_q:  x^6 + 5 x^5 + 9 x^4 + 5 x^2 + 5 x
gcd: 1
_p:  x^8 + x^6 + 10 x^4 + 10 x^3 + 8 x^2 + 2 x + 8
_q:  x^6 + 5 x^5 + 9 x^4 + 5 x^2 + 5 x
subresultant_gcd: 1
GCD in Z_13[x]
_p:  x^8 + x^6 - 3 x^4 - 3 x^3 - 5 x^2 + 2 x - 5
_q:  x^6 + 5 x^5 - 4 x^4 + 5 x^2 + 5 x
gcd: x^5 + 5 x^4 - 4 x^3 + 5 x + 5
_p:  x^8 + x^6 - 3 x^4 - 3 x^3 - 5 x^2 + 2 x - 5
_q:  x^6 + 5 x^5 - 4 x^4 + 5 x^2 + 5 x
subresultant_gcd: x^5 + 5 x^4 - 4 x^3 + 5 x + 5

Extended GCD
GCD in Z_13[x]
A: x^6 + 5 x^5 - 4 x^4 + 5 x^2 + 5 x
B: x^8 + x^6 - 3 x^4 - 3 x^3 - 5 x^2 + 2 x - 5
U: x^2 - 5 x + 4
V: -1
D: x^5 + 5 x^4 - 4 x^3 + 5 x + 5

Extended GCD in Z_7
GCD in Z_7[x]
A: x^3 + 2
B: -1 x^2 - 1
U: 3 x - 1
V: 3 x^2 - x - 3
D: 1
PASS
(test upolynomial :time 3.66 :before-memory 32.76 :after-memory 32.82)
p: 507962865083498496 x0^10 + 102100535881783197696 x0^9 - 14783112447185507561472 x0^8 - 2001324733200883839555072 x0^7 + 195168383210843217999079936 x0^6 + 38119811955608999164032 x0^5 + 9215524544769908136049956 x0^4 - 733241058456905205563830332 x0^3 - 15888459782104331950227 x0^2 - 10235992917286431461226534 x0 + 688689757310708660505387921
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 1)
(polynomial-factorization :distinct-factors 1)
numbers in decimal:
-199.0000036564?
-199.0000002927?
98.5000019176?
98.5000019191?
numbers as root objects
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 1)
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 2)
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 3)
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 4)
numbers as intervals
(-52166657/2^18, -104333313/2^19)
(-104333313/2^19, -199)
(13220446465/2^27, 26440892931/2^28)
(26440892931/2^28, 6610223233/2^26)
numbers in decimal:
-199.6334841049?
0.6335535718?
1.2450962798?
98.5000019267?
numbers as root objects
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 1)
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 2)
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 3)
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 4)
numbers as intervals
(-256, -128)
(0, 1)
(1, 2)
(64, 128)
a:98.5000019176?
a:(13220446465/2^27, 26440892931/2^28)
a:(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 3)
b:98.5000019191?
b:(26440892931/2^28, 6610223233/2^26)
b:(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 4)
c:98.5000019267?
c:(64, 128)
c:(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 4)
c < a sturm 0
0 (expecting 0)
b < a 0
c < b sturm 0
0
root: 2
root: (#^4 - 4, 2)
--------------
p: x1 x3 + 1
x0 -> (#, 1)
x1 -> (#, 1)
x2 -> (#, 1)
roots:
signs:
+
--------------
p: x1 x3 + 1
x0 -> (#, 1)
x1 -> (# - 1, 1)
x2 -> (#, 1)
(polynomial-factorization :distinct-factors 1)
roots:
(# + 1, 1) -1
signs:
- 0 +
--------------
p: x1 x3 + 1
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#, 1)
(polynomial-factorization :distinct-factors 1)
roots:
(2 #^2 - 1, 1) -0.7071067811?
signs:
- 0 +
--------------
p: x2 x3 + x1 x3 + 1
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 1)
roots:
(8 #^2 - 1, 1) -0.3535533905?
signs:
- 0 +
--------------
p: x2 x3 + x1 x3 + x1 x2 + 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 2)
roots:
(#^2 - 2, 1) -1.4142135623?
signs:
- 0 +
--------------
p: x2 x3^3 + x1 x3^3 + x1 x2 + 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 1)
roots:
(#^6 - 2, 1) -1.1224620483?
signs:
- 0 +
--------------
p: x2 x3^2 + x1 x3^2 - x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 1)
roots:
(#^4 - 2, 1) -1.1892071150?
(#^4 - 2, 2) 1.1892071150?
signs:
+ 0 - 0 +
--------------
p: x0 x2 x3^2 + x0 x1 x3^2 - x0 x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
roots:
signs:
-
--------------
p: - x2 x3 + x1 x3 + x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 2)
roots:
signs:
0
--------------
p: - x2 x3^3 + x1 x3^3 + x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
roots:
signs:
0
--------------
p: x3^2 - 2 x0 x3 - x1 x3 + x0^2 + x0 x1
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 3, 2)
x2 -> (#, 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
roots:
(#^2 - 2, 2) 1.4142135623?
(#^4 - 10 #^2 + 1, 4) 3.1462643699?
signs:
+ 0 - 0 +
--------------
p: x3^3 - 3 x0 x3^2 - 2 x1 x3^2 + 3 x0^2 x3 + 4 x0 x1 x3 + x1^2 x3 - x0^3 - 2 x0^2 x1 - x0 x1^2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 3, 2)
x2 -> (#, 1)
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 2)
roots:
(#^2 - 2, 2) 1.4142135623?
(#^4 - 10 #^2 + 1, 4) 3.1462643699?
signs:
- 0 + 0 +
--------------
p: x3^5 - x1 x3^4 - 4 x3^4 + 4 x1 x3^3 + 5 x3^3 - 5 x1 x3^2 - 2 x3^2 + 2 x1 x3 - x0 x3^4 + x0 x1 x3^3 + 4 x0 x3^3 - 4 x0 x1 x3^2 - 5 x0 x3^2 + 5 x0 x1 x3 + 2 x0 x3 - 2 x0 x1
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 3, 2)
x2 -> (#, 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 4)
roots:
(# - 1, 1) 1
(#^2 - 2, 2) 1.4142135623?
(#^2 - 3, 2) 1.7320508075?
(# - 2, 1) 2
signs:
- 0 - 0 + 0 - 0 +
d: 1
p: (x2^2) (x1) (0) (2 x2 + x1) 

p': (x1) (0) (6 x2 + 3 x1) 

h2: (6 x2^3 + 3 x1 x2^2) (4 x1 x2 + 2 x1^2) 

d: 2
h3: (216 x2^7 + 324 x1 x2^6 + 162 x1^2 x2^5 + 16 x1^3 x2^2 + 16 x1^4 x2 + 4 x1^5 + 27 x1^3 x2^4) 

sign(h3(v1,v2)): 1
sign(h2(v1,v2)): 1
sign(p'(v1,v2)): 1
sign(p(v1,v2)): -1
tmp: -1/2 -0.5
v0: -0.5
sign(h2(v1,v2)): 1
sign(p'(v1,v2)): 1
sign(p(v1,v2)): 1
--------------
p: x2 + x0 x1 + x1^2 + 2
x0 -> (#, 1)
x1 -> (#, 1)
x2 -> (#, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#, 1)
x1 -> (#, 1)
x2 -> (# + 2, 1)
sign: 0
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (# + 3, 1)
x1 -> (# - 1, 1)
x2 -> (# + 2, 1)
sign: -1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#, 1)
x2 -> (# + 2, 1)
sign: 0
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#, 1)
x2 -> (# - 1, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#, 1)
x2 -> (# + 3, 1)
sign: -1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (# - 1, 1)
x2 -> (# + 3, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (# - 1, 1)
x2 -> (# + 4, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (# - 1, 1)
x2 -> (# + 5, 1)
sign: -1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 2, 2)
x2 -> (# + 2, 1)
sign: 0
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 2, 2)
x2 -> (# + 3, 1)
sign: -1
--------------
p: - x2 + x0 x1 + x1^2 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 2, 2)
x2 -> (# + 3, 1)
sign: 1
----------
lower:  1/2^3 as decimal: 0.125
upper:  3/2^2 as decimal: 0.75
choice: 1/2 as decimal: 0.5
----------
lower:  1220703125/2^27 as decimal: 9.09494701?
upper:  1375/2^7 as decimal: 10.7421875
choice: 10 as decimal: 10
----------
lower:  1220703125/2^27 as decimal: 9.09494701?
upper:  10001/2^10 as decimal: 9.76660156?
choice: 19/2 as decimal: 9.5
----------
lower:  1 as decimal: 1
upper:  1 as decimal: 1
choice: 1 as decimal: 1
----------
lower:  1 as decimal: 1
upper:  2 as decimal: 2
choice: 1 as decimal: 1
----------
lower:  -1 as decimal: -1
upper:  -1 as decimal: -1
choice: -1 as decimal: -1
----------
lower:  -2 as decimal: -2
upper:  -1 as decimal: -1
choice: -2 as decimal: -2
----------
lower:  0 as decimal: 0
upper:  275/2^8 as decimal: 1.07421875
choice: 0 as decimal: 0
----------
lower:  7/2^3 as decimal: 0.875
upper:  1001/2^10 as decimal: 0.97753906?
choice: 7/2^3 as decimal: 0.875
----------
lower:  125/2^7 as decimal: 0.9765625
upper:  1001/2^10 as decimal: 0.97753906?
choice: 125/2^7 as decimal: 0.9765625
----------
lower:  4457915684525902395869512133369841539490161434991526715513934826241/2^192 as decimal: 710186941.75287040?
upper:  2228957842262951197934756066684920769745080717495763357756967413121/2^191 as decimal: 710186941.75287040?
choice: 2228957842262951197934756066684920769745080717495763357756967413121/2^191 as decimal: 710186941.75287040?
----------
lower:  4457915684525902395869512133369841539490161434991526715513934826241/2^192 as decimal: 710186941.75287040?
upper:  4457915684525902395869512133369841539490161434991526715513934826497/2^192 as decimal: 710186941.75287040?
choice: 4353433285669826558466320442743985878408360776358912808119076979/2^182 as decimal: 710186941.75287040?
two101: 1.0650410894? (#^11 - 2, 1)
two103: 1.1040895136? (#^7 - 2, 1)
(polynomial-factorization :at GF_5)
(polynomial-factorization :num-candidate-factors 6)
(polynomial-factorization :search-size 41)
(polynomial-factorization :distinct-factors 1)
sum1: 2.1691306031? (#^77 - 22 #^70 - 14 #^66 + 220 #^63 - 544236 #^59 - 1320 #^56 + 84 #^55 - 97853448 #^52 + 5280 #^49 - 25531352 #^48 - 2670956288 #^45 - 280 #^44 - 14784 #^42 + 20445649840 #^41 - 20052576544 #^38 - 155813504 #^37 + 29568 #^35 - 850951467520 #^34 + 560 #^33 - 50308241984 #^31 - 120170824928 #^30 - 42240 #^28 + 4024746461120 #^27 - 186825408 #^26 - 43405281920 #^24 - 1992710577088 #^23 - 672 #^22 + 42240 #^21 - 2544211567744 #^20 + 34723106880 #^19 - 11504100608 #^17 - 1268310460032 #^16 - 37166976 #^15 - 28160 #^14 + 171371574528 #^13 - 38011467648 #^12 + 448 #^11 - 650890240 #^10 - 20646191104 #^9 - 198253440 #^8 + 11264 #^7 - 495599104 #^6 + 96233984 #^5 - 295680 #^4 - 2050048 #^3 - 670208 #^2 - 19712 # - 2176, 1)
Wilkinson's polynomial: x0^20 - 210 x0^19 + 20615 x0^18 - 1256850 x0^17 + 53327946 x0^16 - 1672280820 x0^15 + 40171771630 x0^14 - 756111184500 x0^13 + 11310276995381 x0^12 - 135585182899530 x0^11 + 1307535010540395 x0^10 - 10142299865511450 x0^9 + 63030812099294896 x0^8 - 311333643161390640 x0^7 + 1206647803780373360 x0^6 - 3599979517947607200 x0^5 + 8037811822645051776 x0^4 - 12870931245150988800 x0^3 + 13803759753640704000 x0^2 - 8752948036761600000 x0 + 2432902008176640000
p: x0^20 - 210 x0^19 + 20615 x0^18 - 1256850 x0^17 + 53327946 x0^16 - 1672280820 x0^15 + 40171771630 x0^14 - 756111184500 x0^13 + 11310276995381 x0^12 - 135585182899530 x0^11 + 1307535010540395 x0^10 - 10142299865511450 x0^9 + 63030812099294896 x0^8 - 311333643161390640 x0^7 + 1206647803780373360 x0^6 - 3599979517947607200 x0^5 + 8037811822645051776 x0^4 - 12870931245150988800 x0^3 + 13803759753640704000 x0^2 - 8752948036761600000 x0 + 2432902008176640000
(polynomial-factorization :at GF_29)
(polynomial-factorization :num-candidate-factors 20)
(polynomial-factorization :search-size 20)
(polynomial-factorization :distinct-factors 20)
numbers in decimal:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
numbers as root objects
(# - 1, 1)
(# - 2, 1)
(# - 3, 1)
(# - 4, 1)
(# - 5, 1)
(# - 6, 1)
(# - 7, 1)
(# - 8, 1)
(# - 9, 1)
(# - 10, 1)
(# - 11, 1)
(# - 12, 1)
(# - 13, 1)
(# - 14, 1)
(# - 15, 1)
(# - 16, 1)
(# - 17, 1)
(# - 18, 1)
(# - 19, 1)
(# - 20, 1)
numbers as intervals
[1, 1]
[2, 2]
[3, 3]
[4, 4]
[5, 5]
[6, 6]
[7, 7]
[8, 8]
[9, 9]
[10, 10]
[11, 11]
[12, 12]
[13, 13]
[14, 14]
[15, 15]
[16, 16]
[17, 17]
[18, 18]
[19, 19]
[20, 20]
p: 3 x0 - 2
(polynomial-factorization :distinct-factors 1)
numbers in decimal:
0.6666666666?
numbers as root objects
(3 # - 2, 1)
numbers as intervals
[2/3, 2/3]
p: x0^2 - 2
(polynomial-factorization :distinct-factors 1)
numbers in decimal:
-1.4142135623?
1.4142135623?
numbers as root objects
(#^2 - 2, 1)
(#^2 - 2, 2)
numbers as intervals
(-4, 0)
(0, 4)
sqrt(2) + 1/3: 1.7475468957? (1/2, 13/2^2) (9 #^2 - 6 # - 17, 2)
-sqrt(2) + 1/3: -1.0808802290? (-11/2^2, 0) (9 #^2 - 6 # - 17, 1)
p: x0^7 - 3 x0^6 + 2 x0^5 - x0^3 + 2 x0^2 + x0 - 2
(polynomial-factorization :at GF_3)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 3)
numbers in decimal:
1
1.1673039782?
2
numbers as root objects
(# - 1, 1)
(#^5 - # - 1, 1)
(# - 2, 1)
numbers as intervals
[1, 1]
(0, 4)
[2, 2]
compare(1.4142135623?, 1.1673039782?): 1
(:algebraic-compare-cheap  2
 :algebraic-compare-refine 4)
p: x0^4 - 5 x0^2 + 6
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
numbers in decimal:
-1.7320508075?
-1.4142135623?
1.4142135623?
1.7320508075?
numbers as root objects
(#^2 - 3, 1)
(#^2 - 2, 1)
(#^2 - 2, 2)
(#^2 - 3, 2)
numbers as intervals
(-2, -3/2)
(-3/2, -1)
(1, 3/2)
(3/2, 2)
compare(1.4142135623?, 1.4142135623?): 0
(:algebraic-compare-cheap  10
 :algebraic-compare-poly   1
 :algebraic-compare-refine 10)
sqrt(2)^4: (polynomial-factorization :distinct-factors 1)
4
(polynomial-factorization :distinct-factors 1)
(polynomial-factorization :distinct-factors 1)
(polynomial-factorization :distinct-factors 1)
sqrt2 + gauss: 2.5815175406? (#^10 - 10 #^8 + 38 #^6 - 2 #^5 - 100 #^4 - 40 #^3 + 121 #^2 - 38 # - 17, 2)
sqrt2*sqrt2: (polynomial-factorization :distinct-factors 2)
2
sqrt2*sqrt2 == 2: (polynomial-factorization :distinct-factors 2)
1
(-3)^(1/5): -1.2457309396?
sqrt(2)^(1/3): (polynomial-factorization :distinct-factors 1)
1.1224620483?
as-root-object(sqrt(2)^(1/3)): (polynomial-factorization :distinct-factors 1)
(#^6 - 2, 2)
(sqrt(2) + 1)^(1/3): (polynomial-factorization :distinct-factors 1)
1.3415037626?
as-root-object((sqrt(2) + 1)^(1/3)): (polynomial-factorization :distinct-factors 1)
(#^6 - 2 #^3 - 1, 2)
(sqrt(2) + gauss)^(1/5): (polynomial-factorization :distinct-factors 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
1.2088572404?
as-root-object(sqrt(2) + gauss)^(1/5): (polynomial-factorization :distinct-factors 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
(#^50 - 10 #^40 + 38 #^30 - 2 #^25 - 100 #^20 - 40 #^15 + 121 #^10 - 38 #^5 - 17, 2)
(sqrt(2) / sqrt(2)): (polynomial-factorization :distinct-factors 2)
1
(sqrt(2) / gauss): (polynomial-factorization :distinct-factors 1)
1.2115212392?
(sqrt(2) / gauss) 30 digits: (polynomial-factorization :distinct-factors 1)
1.211521239291433957983023270852?
as-root-object(sqrt(2) / gauss): (polynomial-factorization :distinct-factors 1)
(#^10 - 2 #^8 + 16 #^4 - 32, 2)
is_int(sqrt(2)^(1/3)): (polynomial-factorization :distinct-factors 1)
0
1/sqrt(2): 0.7071067811?
4*1/sqrt(2): 2.8284271247?  (#^2 - 8, 2)
(polynomial-factorization :distinct-factors 2)
sqrt(2)*4*(1/sqrt2): 4  (# - 4, 1)
is_int(sqrt(2)*4*(1/sqrt2)): 1, after is-int: 4
p: 998 x0^3 - 14970 x0 - 1414 x0^2 + 21210
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
is-rational(sqrt2): 0
qr: (499 # - 707, 1), is-rational: 1, val: (499 # - 707, 1)
using refine upper...
5/2^3 < 5/7 < 5/2^2
0.625 < 0.71428571428571428571? < 1.25
5/2^3 < 5/7 < 15/2^4
0.625 < 0.71428571428571428571? < 0.9375
5/2^3 < 5/7 < 25/2^5
0.625 < 0.71428571428571428571? < 0.78125
45/2^6 < 5/7 < 95/2^7
0.703125 < 0.71428571428571428571? < 0.7421875
45/2^6 < 5/7 < 185/2^8
0.703125 < 0.71428571428571428571? < 0.72265625
365/2^9 < 5/7 < 735/2^10
0.712890625 < 0.71428571428571428571? < 0.7177734375
365/2^9 < 5/7 < 1465/2^11
0.712890625 < 0.71428571428571428571? < 0.71533203125
2925/2^12 < 5/7 < 5855/2^13
0.714111328125 < 0.71428571428571428571? < 0.7147216796875
2925/2^12 < 5/7 < 11705/2^14
0.714111328125 < 0.71428571428571428571? < 0.71441650390625
23405/2^15 < 5/7 < 46815/2^16
0.714263916015625 < 0.71428571428571428571? < 0.7143402099609375
23405/2^15 < 5/7 < 93625/2^17
0.714263916015625 < 0.71428571428571428571? < 0.71430206298828125
187245/2^18 < 5/7 < 374495/2^19
0.714282989501953125 < 0.71428571428571428571? < 0.7142925262451171875
187245/2^18 < 5/7 < 748985/2^20
0.714282989501953125 < 0.71428571428571428571? < 0.71428775787353515625
1497965/2^21 < 5/7 < 2995935/2^22
0.71428537368774414062? < 0.71428571428571428571? < 0.71428656578063964843?
1497965/2^21 < 5/7 < 5991865/2^23
0.71428537368774414062? < 0.71428571428571428571? < 0.71428596973419189453?
11983725/2^24 < 5/7 < 23967455/2^25
0.71428567171096801757? < 0.71428571428571428571? < 0.71428582072257995605?
11983725/2^24 < 5/7 < 47934905/2^26
0.71428567171096801757? < 0.71428571428571428571? < 0.71428574621677398681?
95869805/2^27 < 5/7 < 191739615/2^28
0.71428570896387100219? < 0.71428571428571428571? < 0.71428572759032249450?
95869805/2^27 < 5/7 < 383479225/2^29
0.71428570896387100219? < 0.71428571428571428571? < 0.71428571827709674835?
766958445/2^30 < 5/7 < 1533916895/2^31
0.71428571362048387527? < 0.71428571428571428571? < 0.71428571594879031181?
using refine lower...
5/2^3 < 5/7 < 5/2^2
0.625 < 0.71428571428571428571? < 1.25
45/2^6 < 5/7 < 25/2^5
0.703125 < 0.71428571428571428571? < 0.78125
365/2^9 < 5/7 < 185/2^8
0.712890625 < 0.71428571428571428571? < 0.72265625
2925/2^12 < 5/7 < 1465/2^11
0.714111328125 < 0.71428571428571428571? < 0.71533203125
23405/2^15 < 5/7 < 11705/2^14
0.714263916015625 < 0.71428571428571428571? < 0.71441650390625
187245/2^18 < 5/7 < 93625/2^17
0.714282989501953125 < 0.71428571428571428571? < 0.71430206298828125
1497965/2^21 < 5/7 < 748985/2^20
0.71428537368774414062? < 0.71428571428571428571? < 0.71428775787353515625
11983725/2^24 < 5/7 < 5991865/2^23
0.71428567171096801757? < 0.71428571428571428571? < 0.71428596973419189453?
95869805/2^27 < 5/7 < 47934905/2^26
0.71428570896387100219? < 0.71428571428571428571? < 0.71428574621677398681?
766958445/2^30 < 5/7 < 383479225/2^29
0.71428571362048387527? < 0.71428571428571428571? < 0.71428571827709674835?
6135667565/2^33 < 5/7 < 3067833785/2^32
0.71428571420256048440? < 0.71428571428571428571? < 0.71428571478463709354?
49085340525/2^36 < 5/7 < 24542670265/2^35
0.71428571427532006055? < 0.71428571428571428571? < 0.71428571434807963669?
392682724205/2^39 < 5/7 < 196341362105/2^38
0.71428571428441500756? < 0.71428571428571428571? < 0.71428571429350995458?
3141461793645/2^42 < 5/7 < 1570730896825/2^41
0.71428571428555187594? < 0.71428571428571428571? < 0.71428571428668874432?
25131694349165/2^45 < 5/7 < 12565847174585/2^44
0.71428571428569398449? < 0.71428571428571428571? < 0.71428571428583609304?
201053554793325/2^48 < 5/7 < 100526777396665/2^47
0.71428571428571174806? < 0.71428571428571428571? < 0.71428571428572951163?
1608428438346605/2^51 < 5/7 < 804214219173305/2^50
0.71428571428571396850? < 0.71428571428571428571? < 0.71428571428571618895?
12867427506772845/2^54 < 5/7 < 6433713753386425/2^53
0.71428571428571424606? < 0.71428571428571428571? < 0.71428571428571452361?
102939420054182765/2^57 < 5/7 < 51469710027091385/2^56
0.71428571428571428075? < 0.71428571428571428571? < 0.71428571428571431545?
823515360433462125/2^60 < 5/7 < 411757680216731065/2^59
0.71428571428571428509? < 0.71428571428571428571? < 0.71428571428571428943?
PASS
(test algebraic :time 4.16 :before-memory 32.82 :after-memory 32.80)
p: 507962865083498496 x0^10 + 102100535881783197696 x0^9 - 14783112447185507561472 x0^8 - 2001324733200883839555072 x0^7 + 195168383210843217999079936 x0^6 + 38119811955608999164032 x0^5 + 9215524544769908136049956 x0^4 - 733241058456905205563830332 x0^3 - 15888459782104331950227 x0^2 - 10235992917286431461226534 x0 + 688689757310708660505387921
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 1)
(polynomial-factorization :distinct-factors 1)
numbers in decimal:
-199.0000036564?
-199.0000002927?
98.5000019176?
98.5000019191?
numbers as root objects
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 1)
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 2)
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 3)
(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 4)
numbers as intervals
(-52166657/2^18, -104333313/2^19)
(-104333313/2^19, -199)
(13220446465/2^27, 26440892931/2^28)
(26440892931/2^28, 6610223233/2^26)
numbers in decimal:
-199.6334841049?
0.6335535718?
1.2450962798?
98.5000019267?
numbers as root objects
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 1)
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 2)
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 3)
(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 4)
numbers as intervals
(-256, -128)
(0, 1)
(1, 2)
(64, 128)
a:98.5000019176?
a:(13220446465/2^27, 26440892931/2^28)
a:(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 3)
b:98.5000019191?
b:(26440892931/2^28, 6610223233/2^26)
b:(507962865083498496 #^10 + 102100535881783197696 #^9 - 14783112447185507561472 #^8 - 2001324733200883839555072 #^7 + 195168383210843217999079936 #^6 + 38119811955608999164032 #^5 + 9215524544769908136049956 #^4 - 733241058456905205563830332 #^3 - 15888459782104331950227 #^2 - 10235992917286431461226534 # + 688689757310708660505387921, 4)
c:98.5000019267?
c:(64, 128)
c:(1286741608255488 #^6 + 129317531629676544 #^5 - 25384908626459170944 #^4 + 16014650289587907456 #^3 + 2042137943326838560 #^2 + 44729821875714513846 # - 29154410578758924855, 4)
c < a sturm 0
0 (expecting 0)
b < a 0
c < b sturm 0
0
root: 2
root: (#^4 - 4, 2)
--------------
p: x1 x3 + 1
x0 -> (#, 1)
x1 -> (#, 1)
x2 -> (#, 1)
roots:
signs:
+
--------------
p: x1 x3 + 1
x0 -> (#, 1)
x1 -> (# - 1, 1)
x2 -> (#, 1)
(polynomial-factorization :distinct-factors 1)
roots:
(# + 1, 1) -1
signs:
- 0 +
--------------
p: x1 x3 + 1
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#, 1)
(polynomial-factorization :distinct-factors 1)
roots:
(2 #^2 - 1, 1) -0.7071067811?
signs:
- 0 +
--------------
p: x2 x3 + x1 x3 + 1
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 1)
roots:
(8 #^2 - 1, 1) -0.3535533905?
signs:
- 0 +
--------------
p: x2 x3 + x1 x3 + x1 x2 + 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 2)
roots:
(#^2 - 2, 1) -1.4142135623?
signs:
- 0 +
--------------
p: x2 x3^3 + x1 x3^3 + x1 x2 + 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 1)
roots:
(#^6 - 2, 1) -1.1224620483?
signs:
- 0 +
--------------
p: x2 x3^2 + x1 x3^2 - x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 1)
roots:
(#^4 - 2, 1) -1.1892071150?
(#^4 - 2, 2) 1.1892071150?
signs:
+ 0 - 0 +
--------------
p: x0 x2 x3^2 + x0 x1 x3^2 - x0 x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
roots:
signs:
-
--------------
p: - x2 x3 + x1 x3 + x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
(polynomial-factorization :distinct-factors 2)
roots:
signs:
0
--------------
p: - x2 x3^3 + x1 x3^3 + x1 x2 - 2
x0 -> (#, 1)
x1 -> (#^2 - 2, 2)
x2 -> (#^2 - 2, 2)
(polynomial-factorization :distinct-factors 2)
roots:
signs:
0
--------------
p: x3^2 - 2 x0 x3 - x1 x3 + x0^2 + x0 x1
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 3, 2)
x2 -> (#, 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
roots:
(#^2 - 2, 2) 1.4142135623?
(#^4 - 10 #^2 + 1, 4) 3.1462643699?
signs:
+ 0 - 0 +
--------------
p: x3^3 - 3 x0 x3^2 - 2 x1 x3^2 + 3 x0^2 x3 + 4 x0 x1 x3 + x1^2 x3 - x0^3 - 2 x0^2 x1 - x0 x1^2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 3, 2)
x2 -> (#, 1)
(polynomial-factorization :at GF_11)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 2)
roots:
(#^2 - 2, 2) 1.4142135623?
(#^4 - 10 #^2 + 1, 4) 3.1462643699?
signs:
- 0 + 0 +
--------------
p: x3^5 - x1 x3^4 - 4 x3^4 + 4 x1 x3^3 + 5 x3^3 - 5 x1 x3^2 - 2 x3^2 + 2 x1 x3 - x0 x3^4 + x0 x1 x3^3 + 4 x0 x3^3 - 4 x0 x1 x3^2 - 5 x0 x3^2 + 5 x0 x1 x3 + 2 x0 x3 - 2 x0 x1
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 3, 2)
x2 -> (#, 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 4)
roots:
(# - 1, 1) 1
(#^2 - 2, 2) 1.4142135623?
(#^2 - 3, 2) 1.7320508075?
(# - 2, 1) 2
signs:
- 0 - 0 + 0 - 0 +
d: 1
p: (x2^2) (x1) (0) (2 x2 + x1) 

p': (x1) (0) (6 x2 + 3 x1) 

h2: (6 x2^3 + 3 x1 x2^2) (4 x1 x2 + 2 x1^2) 

d: 2
h3: (216 x2^7 + 324 x1 x2^6 + 162 x1^2 x2^5 + 16 x1^3 x2^2 + 16 x1^4 x2 + 4 x1^5 + 27 x1^3 x2^4) 

sign(h3(v1,v2)): 1
sign(h2(v1,v2)): 1
sign(p'(v1,v2)): 1
sign(p(v1,v2)): -1
tmp: -1/2 -0.5
v0: -0.5
sign(h2(v1,v2)): 1
sign(p'(v1,v2)): 1
sign(p(v1,v2)): 1
--------------
p: x2 + x0 x1 + x1^2 + 2
x0 -> (#, 1)
x1 -> (#, 1)
x2 -> (#, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#, 1)
x1 -> (#, 1)
x2 -> (# + 2, 1)
sign: 0
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (# + 3, 1)
x1 -> (# - 1, 1)
x2 -> (# + 2, 1)
sign: -1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#, 1)
x2 -> (# + 2, 1)
sign: 0
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#, 1)
x2 -> (# - 1, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#, 1)
x2 -> (# + 3, 1)
sign: -1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (# - 1, 1)
x2 -> (# + 3, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (# - 1, 1)
x2 -> (# + 4, 1)
sign: 1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (# - 1, 1)
x2 -> (# + 5, 1)
sign: -1
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 2, 2)
x2 -> (# + 2, 1)
sign: 0
--------------
p: x2 + x1^2 + x0 x1 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 2, 2)
x2 -> (# + 3, 1)
sign: -1
--------------
p: - x2 + x0 x1 + x1^2 + 2
x0 -> (#^2 - 2, 2)
x1 -> (#^2 - 2, 2)
x2 -> (# + 3, 1)
sign: 1
----------
lower:  1/2^3 as decimal: 0.125
upper:  3/2^2 as decimal: 0.75
choice: 1/2 as decimal: 0.5
----------
lower:  1220703125/2^27 as decimal: 9.09494701?
upper:  1375/2^7 as decimal: 10.7421875
choice: 10 as decimal: 10
----------
lower:  1220703125/2^27 as decimal: 9.09494701?
upper:  10001/2^10 as decimal: 9.76660156?
choice: 19/2 as decimal: 9.5
----------
lower:  1 as decimal: 1
upper:  1 as decimal: 1
choice: 1 as decimal: 1
----------
lower:  1 as decimal: 1
upper:  2 as decimal: 2
choice: 1 as decimal: 1
----------
lower:  -1 as decimal: -1
upper:  -1 as decimal: -1
choice: -1 as decimal: -1
----------
lower:  -2 as decimal: -2
upper:  -1 as decimal: -1
choice: -2 as decimal: -2
----------
lower:  0 as decimal: 0
upper:  275/2^8 as decimal: 1.07421875
choice: 0 as decimal: 0
----------
lower:  7/2^3 as decimal: 0.875
upper:  1001/2^10 as decimal: 0.97753906?
choice: 7/2^3 as decimal: 0.875
----------
lower:  125/2^7 as decimal: 0.9765625
upper:  1001/2^10 as decimal: 0.97753906?
choice: 125/2^7 as decimal: 0.9765625
----------
lower:  4457915684525902395869512133369841539490161434991526715513934826241/2^192 as decimal: 710186941.75287040?
upper:  2228957842262951197934756066684920769745080717495763357756967413121/2^191 as decimal: 710186941.75287040?
choice: 2228957842262951197934756066684920769745080717495763357756967413121/2^191 as decimal: 710186941.75287040?
----------
lower:  4457915684525902395869512133369841539490161434991526715513934826241/2^192 as decimal: 710186941.75287040?
upper:  4457915684525902395869512133369841539490161434991526715513934826497/2^192 as decimal: 710186941.75287040?
choice: 4353433285669826558466320442743985878408360776358912808119076979/2^182 as decimal: 710186941.75287040?
two101: 1.0650410894? (#^11 - 2, 1)
two103: 1.1040895136? (#^7 - 2, 1)
(polynomial-factorization :at GF_5)
(polynomial-factorization :num-candidate-factors 6)
(polynomial-factorization :search-size 41)
(polynomial-factorization :distinct-factors 1)
sum1: 2.1691306031? (#^77 - 22 #^70 - 14 #^66 + 220 #^63 - 544236 #^59 - 1320 #^56 + 84 #^55 - 97853448 #^52 + 5280 #^49 - 25531352 #^48 - 2670956288 #^45 - 280 #^44 - 14784 #^42 + 20445649840 #^41 - 20052576544 #^38 - 155813504 #^37 + 29568 #^35 - 850951467520 #^34 + 560 #^33 - 50308241984 #^31 - 120170824928 #^30 - 42240 #^28 + 4024746461120 #^27 - 186825408 #^26 - 43405281920 #^24 - 1992710577088 #^23 - 672 #^22 + 42240 #^21 - 2544211567744 #^20 + 34723106880 #^19 - 11504100608 #^17 - 1268310460032 #^16 - 37166976 #^15 - 28160 #^14 + 171371574528 #^13 - 38011467648 #^12 + 448 #^11 - 650890240 #^10 - 20646191104 #^9 - 198253440 #^8 + 11264 #^7 - 495599104 #^6 + 96233984 #^5 - 295680 #^4 - 2050048 #^3 - 670208 #^2 - 19712 # - 2176, 1)
Wilkinson's polynomial: x0^20 - 210 x0^19 + 20615 x0^18 - 1256850 x0^17 + 53327946 x0^16 - 1672280820 x0^15 + 40171771630 x0^14 - 756111184500 x0^13 + 11310276995381 x0^12 - 135585182899530 x0^11 + 1307535010540395 x0^10 - 10142299865511450 x0^9 + 63030812099294896 x0^8 - 311333643161390640 x0^7 + 1206647803780373360 x0^6 - 3599979517947607200 x0^5 + 8037811822645051776 x0^4 - 12870931245150988800 x0^3 + 13803759753640704000 x0^2 - 8752948036761600000 x0 + 2432902008176640000
p: x0^20 - 210 x0^19 + 20615 x0^18 - 1256850 x0^17 + 53327946 x0^16 - 1672280820 x0^15 + 40171771630 x0^14 - 756111184500 x0^13 + 11310276995381 x0^12 - 135585182899530 x0^11 + 1307535010540395 x0^10 - 10142299865511450 x0^9 + 63030812099294896 x0^8 - 311333643161390640 x0^7 + 1206647803780373360 x0^6 - 3599979517947607200 x0^5 + 8037811822645051776 x0^4 - 12870931245150988800 x0^3 + 13803759753640704000 x0^2 - 8752948036761600000 x0 + 2432902008176640000
(polynomial-factorization :at GF_29)
(polynomial-factorization :num-candidate-factors 20)
(polynomial-factorization :search-size 20)
(polynomial-factorization :distinct-factors 20)
numbers in decimal:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
numbers as root objects
(# - 1, 1)
(# - 2, 1)
(# - 3, 1)
(# - 4, 1)
(# - 5, 1)
(# - 6, 1)
(# - 7, 1)
(# - 8, 1)
(# - 9, 1)
(# - 10, 1)
(# - 11, 1)
(# - 12, 1)
(# - 13, 1)
(# - 14, 1)
(# - 15, 1)
(# - 16, 1)
(# - 17, 1)
(# - 18, 1)
(# - 19, 1)
(# - 20, 1)
numbers as intervals
[1, 1]
[2, 2]
[3, 3]
[4, 4]
[5, 5]
[6, 6]
[7, 7]
[8, 8]
[9, 9]
[10, 10]
[11, 11]
[12, 12]
[13, 13]
[14, 14]
[15, 15]
[16, 16]
[17, 17]
[18, 18]
[19, 19]
[20, 20]
p: 3 x0 - 2
(polynomial-factorization :distinct-factors 1)
numbers in decimal:
0.6666666666?
numbers as root objects
(3 # - 2, 1)
numbers as intervals
[2/3, 2/3]
p: x0^2 - 2
(polynomial-factorization :distinct-factors 1)
numbers in decimal:
-1.4142135623?
1.4142135623?
numbers as root objects
(#^2 - 2, 1)
(#^2 - 2, 2)
numbers as intervals
(-4, 0)
(0, 4)
sqrt(2) + 1/3: 1.7475468957? (1/2, 13/2^2) (9 #^2 - 6 # - 17, 2)
-sqrt(2) + 1/3: -1.0808802290? (-11/2^2, 0) (9 #^2 - 6 # - 17, 1)
p: x0^7 - 3 x0^6 + 2 x0^5 - x0^3 + 2 x0^2 + x0 - 2
(polynomial-factorization :at GF_3)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 3)
numbers in decimal:
1
1.1673039782?
2
numbers as root objects
(# - 1, 1)
(#^5 - # - 1, 1)
(# - 2, 1)
numbers as intervals
[1, 1]
(0, 4)
[2, 2]
compare(1.4142135623?, 1.1673039782?): 1
(:algebraic-compare-cheap  2
 :algebraic-compare-refine 4)
p: x0^4 - 5 x0^2 + 6
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
numbers in decimal:
-1.7320508075?
-1.4142135623?
1.4142135623?
1.7320508075?
numbers as root objects
(#^2 - 3, 1)
(#^2 - 2, 1)
(#^2 - 2, 2)
(#^2 - 3, 2)
numbers as intervals
(-2, -3/2)
(-3/2, -1)
(1, 3/2)
(3/2, 2)
compare(1.4142135623?, 1.4142135623?): 0
(:algebraic-compare-cheap  10
 :algebraic-compare-poly   1
 :algebraic-compare-refine 10)
sqrt(2)^4: (polynomial-factorization :distinct-factors 1)
4
(polynomial-factorization :distinct-factors 1)
(polynomial-factorization :distinct-factors 1)
(polynomial-factorization :distinct-factors 1)
sqrt2 + gauss: 2.5815175406? (#^10 - 10 #^8 + 38 #^6 - 2 #^5 - 100 #^4 - 40 #^3 + 121 #^2 - 38 # - 17, 2)
sqrt2*sqrt2: (polynomial-factorization :distinct-factors 2)
2
sqrt2*sqrt2 == 2: (polynomial-factorization :distinct-factors 2)
1
(-3)^(1/5): -1.2457309396?
sqrt(2)^(1/3): (polynomial-factorization :distinct-factors 1)
1.1224620483?
as-root-object(sqrt(2)^(1/3)): (polynomial-factorization :distinct-factors 1)
(#^6 - 2, 2)
(sqrt(2) + 1)^(1/3): (polynomial-factorization :distinct-factors 1)
1.3415037626?
as-root-object((sqrt(2) + 1)^(1/3)): (polynomial-factorization :distinct-factors 1)
(#^6 - 2 #^3 - 1, 2)
(sqrt(2) + gauss)^(1/5): (polynomial-factorization :distinct-factors 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
1.2088572404?
as-root-object(sqrt(2) + gauss)^(1/5): (polynomial-factorization :distinct-factors 1)
(polynomial-factorization :at GF_7)
(polynomial-factorization :num-candidate-factors 3)
(polynomial-factorization :search-size 3)
(polynomial-factorization :distinct-factors 1)
(#^50 - 10 #^40 + 38 #^30 - 2 #^25 - 100 #^20 - 40 #^15 + 121 #^10 - 38 #^5 - 17, 2)
(sqrt(2) / sqrt(2)): (polynomial-factorization :distinct-factors 2)
1
(sqrt(2) / gauss): (polynomial-factorization :distinct-factors 1)
1.2115212392?
(sqrt(2) / gauss) 30 digits: (polynomial-factorization :distinct-factors 1)
1.211521239291433957983023270852?
as-root-object(sqrt(2) / gauss): (polynomial-factorization :distinct-factors 1)
(#^10 - 2 #^8 + 16 #^4 - 32, 2)
is_int(sqrt(2)^(1/3)): (polynomial-factorization :distinct-factors 1)
0
1/sqrt(2): 0.7071067811?
4*1/sqrt(2): 2.8284271247?  (#^2 - 8, 2)
(polynomial-factorization :distinct-factors 2)
sqrt(2)*4*(1/sqrt2): 4  (# - 4, 1)
is_int(sqrt(2)*4*(1/sqrt2)): 1, after is-int: 4
p: 998 x0^3 - 14970 x0 - 1414 x0^2 + 21210
(polynomial-factorization :at GF_13)
(polynomial-factorization :num-candidate-factors 2)
(polynomial-factorization :search-size 2)
(polynomial-factorization :distinct-factors 2)
is-rational(sqrt2): 0
qr: (499 # - 707, 1), is-rational: 1, val: (499 # - 707, 1)
using refine upper...
5/2^3 < 5/7 < 5/2^2
0.625 < 0.71428571428571428571? < 1.25
5/2^3 < 5/7 < 15/2^4
0.625 < 0.71428571428571428571? < 0.9375
5/2^3 < 5/7 < 25/2^5
0.625 < 0.71428571428571428571? < 0.78125
45/2^6 < 5/7 < 95/2^7
0.703125 < 0.71428571428571428571? < 0.7421875
45/2^6 < 5/7 < 185/2^8
0.703125 < 0.71428571428571428571? < 0.72265625
365/2^9 < 5/7 < 735/2^10
0.712890625 < 0.71428571428571428571? < 0.7177734375
365/2^9 < 5/7 < 1465/2^11
0.712890625 < 0.71428571428571428571? < 0.71533203125
2925/2^12 < 5/7 < 5855/2^13
0.714111328125 < 0.71428571428571428571? < 0.7147216796875
2925/2^12 < 5/7 < 11705/2^14
0.714111328125 < 0.71428571428571428571? < 0.71441650390625
23405/2^15 < 5/7 < 46815/2^16
0.714263916015625 < 0.71428571428571428571? < 0.7143402099609375
23405/2^15 < 5/7 < 93625/2^17
0.714263916015625 < 0.71428571428571428571? < 0.71430206298828125
187245/2^18 < 5/7 < 374495/2^19
0.714282989501953125 < 0.71428571428571428571? < 0.7142925262451171875
187245/2^18 < 5/7 < 748985/2^20
0.714282989501953125 < 0.71428571428571428571? < 0.71428775787353515625
1497965/2^21 < 5/7 < 2995935/2^22
0.71428537368774414062? < 0.71428571428571428571? < 0.71428656578063964843?
1497965/2^21 < 5/7 < 5991865/2^23
0.71428537368774414062? < 0.71428571428571428571? < 0.71428596973419189453?
11983725/2^24 < 5/7 < 23967455/2^25
0.71428567171096801757? < 0.71428571428571428571? < 0.71428582072257995605?
11983725/2^24 < 5/7 < 47934905/2^26
0.71428567171096801757? < 0.71428571428571428571? < 0.71428574621677398681?
95869805/2^27 < 5/7 < 191739615/2^28
0.71428570896387100219? < 0.71428571428571428571? < 0.71428572759032249450?
95869805/2^27 < 5/7 < 383479225/2^29
0.71428570896387100219? < 0.71428571428571428571? < 0.71428571827709674835?
766958445/2^30 < 5/7 < 1533916895/2^31
0.71428571362048387527? < 0.71428571428571428571? < 0.71428571594879031181?
using refine lower...
5/2^3 < 5/7 < 5/2^2
0.625 < 0.71428571428571428571? < 1.25
45/2^6 < 5/7 < 25/2^5
0.703125 < 0.71428571428571428571? < 0.78125
365/2^9 < 5/7 < 185/2^8
0.712890625 < 0.71428571428571428571? < 0.72265625
2925/2^12 < 5/7 < 1465/2^11
0.714111328125 < 0.71428571428571428571? < 0.71533203125
23405/2^15 < 5/7 < 11705/2^14
0.714263916015625 < 0.71428571428571428571? < 0.71441650390625
187245/2^18 < 5/7 < 93625/2^17
0.714282989501953125 < 0.71428571428571428571? < 0.71430206298828125
1497965/2^21 < 5/7 < 748985/2^20
0.71428537368774414062? < 0.71428571428571428571? < 0.71428775787353515625
11983725/2^24 < 5/7 < 5991865/2^23
0.71428567171096801757? < 0.71428571428571428571? < 0.71428596973419189453?
95869805/2^27 < 5/7 < 47934905/2^26
0.71428570896387100219? < 0.71428571428571428571? < 0.71428574621677398681?
766958445/2^30 < 5/7 < 383479225/2^29
0.71428571362048387527? < 0.71428571428571428571? < 0.71428571827709674835?
6135667565/2^33 < 5/7 < 3067833785/2^32
0.71428571420256048440? < 0.71428571428571428571? < 0.71428571478463709354?
49085340525/2^36 < 5/7 < 24542670265/2^35
0.71428571427532006055? < 0.71428571428571428571? < 0.71428571434807963669?
392682724205/2^39 < 5/7 < 196341362105/2^38
0.71428571428441500756? < 0.71428571428571428571? < 0.71428571429350995458?
3141461793645/2^42 < 5/7 < 1570730896825/2^41
0.71428571428555187594? < 0.71428571428571428571? < 0.71428571428668874432?
25131694349165/2^45 < 5/7 < 12565847174585/2^44
0.71428571428569398449? < 0.71428571428571428571? < 0.71428571428583609304?
201053554793325/2^48 < 5/7 < 100526777396665/2^47
0.71428571428571174806? < 0.71428571428571428571? < 0.71428571428572951163?
1608428438346605/2^51 < 5/7 < 804214219173305/2^50
0.71428571428571396850? < 0.71428571428571428571? < 0.71428571428571618895?
12867427506772845/2^54 < 5/7 < 6433713753386425/2^53
0.71428571428571424606? < 0.71428571428571428571? < 0.71428571428571452361?
102939420054182765/2^57 < 5/7 < 51469710027091385/2^56
0.71428571428571428075? < 0.71428571428571428571? < 0.71428571428571431545?
823515360433462125/2^60 < 5/7 < 411757680216731065/2^59
0.71428571428571428509? < 0.71428571428571428571? < 0.71428571428571428943?
PASS
(test algebraic :time 4.18 :before-memory 32.80 :after-memory 32.80)
test_algebraic_basic_operations
test_algebraic_arithmetic
test_algebraic_comparison
test_algebraic_degree
test_algebraic_signs
PASS
(test algebraic_numbers :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_algebraic_basic_operations
test_algebraic_arithmetic
test_algebraic_comparison
test_algebraic_degree
test_algebraic_signs
PASS
(test algebraic_numbers :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_monomial_bounds_basic
test_monomial_bounds_propagation
test_monomial_bounds_intervals
test_monomial_bounds_power
test_monomial_bounds_linear_case
PASS
(test monomial_bounds :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_monomial_bounds_basic
test_monomial_bounds_propagation
test_monomial_bounds_intervals
test_monomial_bounds_power
test_monomial_bounds_linear_case
PASS
(test monomial_bounds :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_nla_intervals_basic
test_nla_intervals_negative
test_nla_intervals_zero_crossing
test_nla_intervals_power
test_nla_intervals_mixed_signs
test_nla_intervals_fractional
PASS
(test nla_intervals :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_nla_intervals_basic
test_nla_intervals_negative
test_nla_intervals_zero_crossing
test_nla_intervals_power
test_nla_intervals_mixed_signs
test_nla_intervals_fractional
PASS
(test nla_intervals :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_horner_basic_evaluation
test_horner_linear_polynomial
test_horner_constant_polynomial
test_horner_zero_polynomial
test_horner_negative_coefficients
test_horner_fractional_values
test_horner_zero_evaluation_point
test_horner_high_degree
PASS
(test horner :time 0.00 :before-memory 32.80 :after-memory 32.80)
test_horner_basic_evaluation
test_horner_linear_polynomial
test_horner_constant_polynomial
test_horner_zero_polynomial
test_horner_negative_coefficients
test_horner_fractional_values
test_horner_zero_evaluation_point
test_horner_high_degree
PASS
(test horner :time 0.00 :before-memory 32.80 :after-memory 32.80)
2, 
3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 
41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 
89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 
149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 
199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 
269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 
337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 
401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 
463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 
547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 
613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 
677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 
757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 
829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 
911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 
991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 
1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 
1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 
1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 
1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 
1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 
1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 
1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 
1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 
1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 
1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 
1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 
1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 
2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 
2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 
2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 
2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 
2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 
2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 
2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 
2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 
2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 
2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 
2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 
3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 
3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 
3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 
3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 
3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 
3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 
3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 
3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 
3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 
3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 
3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 
4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 
4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 
4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 
4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 
4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 
4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 
4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 
4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 
4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 
4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 
4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 
5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 
5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 
5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 
5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 
5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 
5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 
5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 
5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 
5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 
5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 
5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 
6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 
6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 
6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 
6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 
6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 
6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 
6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 
6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 
6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 
6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 
7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 
7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 
7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 
7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 
7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 
7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 
7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 
7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 
7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 
7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 
8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 
8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 
8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 
8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 
8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 
8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 
8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 
8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 
8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 
8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 
9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 
9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 
9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 
9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 
9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 
9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 
9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 
9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 
9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 
9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 
10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 
10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 
10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 
10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 
10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 
10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 
10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 
10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 
10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 
10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 
11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 
11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 
11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 
11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 
11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 
11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 
11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 
11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 
11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 
12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 
12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 
12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 
12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 
12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 
12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 
12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 
12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 
12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 
12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 
13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 
13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 
13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 
13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 
13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 
13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 
13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 
13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 
13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 
13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 
14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 
14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 
14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 
14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 
14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 
14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 
14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 
14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 
14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 
15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 
15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 
15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 
15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 
15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 
15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 
15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 
15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 
15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 
15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 
16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 
16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 
16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 
16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 
16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 
16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 
16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 
16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 
16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 
17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 
17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 
17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 
17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 
17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 
17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 
17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 
17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 
17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 
18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 
18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 
18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 
18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 
18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 
18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 
18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 
18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 
18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 
19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 
19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 
19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 
19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 
19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 
19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 
19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 
19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 
19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 
20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 
20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 
20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 
20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 
20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 
20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 
20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 
20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 
20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 
21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 
21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 
21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 
21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 
21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 
21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 
21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 
21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 
21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 
22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 
22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 
22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 
22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 
22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 
22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 
22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 
22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 
22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 
23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 
23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 
23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 
23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 
23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 
23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 
23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 
23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 
23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 
23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 
24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 
24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 
24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 
24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 
24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 
24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 
24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 
24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 
25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 
25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 
25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 
25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 
25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 
25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 
25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 
25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 
25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 
26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 
26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 
26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 
26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 
26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 
26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 
26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 
26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 
26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 
26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 
27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 
27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 
27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 
27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 
27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 
27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 
27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 
27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 
28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 
28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 
28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 
28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 
28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 
28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 
28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 
28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 
28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 
29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 
29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 
29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 
29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 
29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 
29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 
29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 
29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 
30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 
30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 
30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 
30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 
30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 
30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 
30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 
30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 
30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 
31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 
31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 
31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 
31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 
31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 
31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 
31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 
31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 
32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 
32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 
32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 
32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 
32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 
32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 
32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 
32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 
32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 
32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 
33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 
33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 
33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 
33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 
33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 
33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 
33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 
33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 
33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 
34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 
34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 
34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 
34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 
34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 
34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 
34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 
34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 
34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 
35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 
35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 
35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 
35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 
35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 
35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 
35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 
35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 
36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 
36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 
36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 
36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 
36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 
36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 
36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 
36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 
36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 
37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 
37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 
37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 
37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 
37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 
37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 
37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 
37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 
37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 
38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 
38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 
38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 
38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 
38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 
38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 
38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 
38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 
39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 
39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 
39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 
39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 
39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 
39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 
39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 
39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 
40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 
40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 
40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 
40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 
40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 
40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 
40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 
40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 
41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 
41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 
41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 
41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 
41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 
41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 
41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 
41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 
41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 
41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 
42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 
42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 
42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 
42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 
42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 
42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 
42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 
42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 
42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 
43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 
43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 
43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 
43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 
43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 
43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 
43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 
43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 
44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 
44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 
44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 
44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 
44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 
44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 
44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 
44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 
45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 
45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 
45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 
45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 
45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 
45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 
45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 
45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 
46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 
46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 
46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 
46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 
46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 
46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 
46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 
46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 
47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 
47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 
47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 
47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 
47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 
47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 
47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 
47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 
47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 
48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 
48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 
48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 
48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 
48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 
48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 
48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 
48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 
49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 
49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 
49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 
49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 
49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 
49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 
49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 
49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 
49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 
50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 
50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 
50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 
50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 
50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 
50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 
50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 
50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 
51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 
51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 
51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 
51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 
51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 
51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 
51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 
51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 
51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 
52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 
52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 
52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 
52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 
52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 
52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 
52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 
52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 
53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 
53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 
53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 
53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 
53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 
53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 
53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 
53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 
54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 
54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 
54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 
54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 
54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 
54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 
54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 
54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 
54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 
55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 
55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 
55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 
55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 
55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 
55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 
55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 
55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 
56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 
56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 
56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 
56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 
56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 
56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 
56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 
56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 
56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 
57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 
57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 
57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 
57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 
57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 
57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 
57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 
57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 
58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 
58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 
58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 
58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 
58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 
58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 
58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 
58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 
59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 
59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 
59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 
59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 
59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 
59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 
59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 
59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 
59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 
60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 
60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 
60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 
60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 
60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 
60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 
60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 
60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 
61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 
61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 
61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 
61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 
61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 
61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 
61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 
61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 
62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 
62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 
62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 
62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 
62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 
62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 
62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 
62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 
63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 
63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 
63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 
63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 
63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 
63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 
63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 
63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 
64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 
64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 
64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 
64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 
64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 
64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 
64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 
64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 
65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 
65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 
65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 
65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 
65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 
65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 
65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 
65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 
65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 
66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 
66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 
66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 
66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 
66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 
66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 
66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 
67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 
67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 
67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 
67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 
67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 
67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 
67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 
67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 
67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 
68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 
68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 
68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 
68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 
68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 
68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 
68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 
69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 
69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 
69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 
69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 
69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 
69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 
69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 
69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 
70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 
70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 
70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 
70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 
70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 
70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 
70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 
70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 
70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 
71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 
71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 
71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 
71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 
71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 
71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 
71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 
71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 
72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 
72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 
72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 
72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 
72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 
72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 
72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 
72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 
72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 
73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 
73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 
73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 
73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 
73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 
73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 
73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 
74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 
74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 
74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 
74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 
74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 
74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 
74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 
74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 
75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 
75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 
75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 
75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 
75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 
75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 
75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 
75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 
75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 
76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 
76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 
76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 
76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 
76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 
76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 
76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 
77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 
77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 
77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 
77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 
77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 
77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 
77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 
77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 
77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 
78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 
78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 
78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 
78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 
78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 
78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 
78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 
78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 
79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 
79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 
79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 
79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 
79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 
79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 
79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 
79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 
80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 
80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 
80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 
80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 
80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 
80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 
80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 
80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 
81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 
81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 
81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 
81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 
81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 
81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 
81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 
81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 
82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 
82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 
82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 
82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 
82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 
82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 
82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 
82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 
83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 
83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 
83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 
83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 
83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 
83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 
83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 
83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 
84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 
84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 
84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 
84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 
84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 
84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 
84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 
84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 
85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 
85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 
85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 
85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 
85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 
85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 
85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 
85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 
86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 
86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 
86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 
86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 
86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 
86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 
86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 
86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 
87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 
87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 
87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 
87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 
87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 
87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 
87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 
87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 
88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 
88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 
88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 
88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 
88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 
88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 
88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 
89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 
89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 
89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 
89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 
89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 
89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 
89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 
89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 
90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 
90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 
90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 
90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 
90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 
90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 
90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 
90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 
90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 
91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 
91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 
91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 
91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 
91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 
91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 
91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 
92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 
92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 
92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 
92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 
92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 
92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 
92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 
92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 
92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 
93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 
93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 
93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 
93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 
93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 
93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 
93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 
93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 
94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 
94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 
94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 
94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 
94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 
94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 
94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 
94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 
95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 
95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 
95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 
95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 
95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 
95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 
95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 
95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 
96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 
96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 
96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 
96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 
96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 
96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 
96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 
96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 
97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 
97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 
97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 
97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 
97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 
97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 
97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 
97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 
98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 
98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 
98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 
98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 
98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 
98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 
98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 
99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 
99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 
99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 
99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 
99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 
99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 
99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 
99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991, 100003, 
100019, 100043, 100049, 100057, 100069, 100103, 100109, 100129, 100151, 100153, 100169, 
100183, 100189, 100193, 100207, 100213, 100237, 100267, 100271, 100279, 100291, 100297, 
100313, 100333, 100343, 100357, 100361, 100363, 100379, 100391, 100393, 100403, 100411, 
100417, 100447, 100459, 100469, 100483, 100493, 100501, 100511, 100517, 100519, 100523, 
100537, 100547, 100549, 100559, 100591, 100609, 100613, 100621, 100649, 100669, 100673, 
100693, 100699, 100703, 100733, 100741, 100747, 100769, 100787, 100799, 100801, 100811, 
100823, 100829, 100847, 100853, 100907, 100913, 100927, 100931, 100937, 100943, 100957, 
100981, 100987, 100999, 101009, 101021, 101027, 101051, 101063, 101081, 101089, 101107, 
101111, 101113, 101117, 101119, 101141, 101149, 101159, 101161, 101173, 101183, 101197, 
101203, 101207, 101209, 101221, 101267, 101273, 101279, 101281, 101287, 101293, 101323, 
101333, 101341, 101347, 101359, 101363, 101377, 101383, 101399, 101411, 101419, 101429, 
101449, 101467, 101477, 101483, 101489, 101501, 101503, 101513, 101527, 101531, 101533, 
101537, 101561, 101573, 101581, 101599, 101603, 101611, 101627, 101641, 101653, 101663, 
101681, 101693, 101701, 101719, 101723, 101737, 101741, 101747, 101749, 101771, 101789, 
101797, 101807, 101833, 101837, 101839, 101863, 101869, 101873, 101879, 101891, 101917, 
101921, 101929, 101939, 101957, 101963, 101977, 101987, 101999, 102001, 102013, 102019, 
102023, 102031, 102043, 102059, 102061, 102071, 102077, 102079, 102101, 102103, 102107, 
102121, 102139, 102149, 102161, 102181, 102191, 102197, 102199, 102203, 102217, 102229, 
102233, 102241, 102251, 102253, 102259, 102293, 102299, 102301, 102317, 102329, 102337, 
102359, 102367, 102397, 102407, 102409, 102433, 102437, 102451, 102461, 102481, 102497, 
102499, 102503, 102523, 102533, 102539, 102547, 102551, 102559, 102563, 102587, 102593, 
102607, 102611, 102643, 102647, 102653, 102667, 102673, 102677, 102679, 102701, 102761, 
102763, 102769, 102793, 102797, 102811, 102829, 102841, 102859, 102871, 102877, 102881, 
102911, 102913, 102929, 102931, 102953, 102967, 102983, 103001, 103007, 103043, 103049, 
103067, 103069, 103079, 103087, 103091, 103093, 103099, 103123, 103141, 103171, 103177, 
103183, 103217, 103231, 103237, 103289, 103291, 103307, 103319, 103333, 103349, 103357, 
103387, 103391, 103393, 103399, 103409, 103421, 103423, 103451, 103457, 103471, 103483, 
103511, 103529, 103549, 103553, 103561, 103567, 103573, 103577, 103583, 103591, 103613, 
103619, 103643, 103651, 103657, 103669, 103681, 103687, 103699, 103703, 103723, 103769, 
103787, 103801, 103811, 103813, 103837, 103841, 103843, 103867, 103889, 103903, 103913, 
103919, 103951, 103963, 103967, 103969, 103979, 103981, 103991, 103993, 103997, 104003, 
104009, 104021, 104033, 104047, 104053, 104059, 104087, 104089, 104107, 104113, 104119, 
104123, 104147, 104149, 104161, 104173, 104179, 104183, 104207, 104231, 104233, 104239, 
104243, 104281, 104287, 104297, 104309, 104311, 104323, 104327, 104347, 104369, 104381, 
104383, 104393, 104399, 104417, 104459, 104471, 104473, 104479, 104491, 104513, 104527, 
104537, 104543, 104549, 104551, 104561, 104579, 104593, 104597, 104623, 104639, 104651, 
104659, 104677, 104681, 104683, 104693, 104701, 104707, 104711, 104717, 104723, 104729, 

PASS
(test prime_generator :time 0.12 :before-memory 32.80 :after-memory 32.80)
2, 
3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 
41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 
89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 
149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 
199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 
269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 
337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 
401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 
463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 
547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 
613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 
677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 
757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 
829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 
911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 
991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 
1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 
1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 
1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 
1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 
1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 
1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 
1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 
1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 
1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 
1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 
1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 
1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 
2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 
2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 
2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 
2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 
2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 
2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 
2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 
2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 
2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 
2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 
2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 
3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 
3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 
3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 
3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 
3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 
3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 
3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 
3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 
3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 
3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 
3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 
4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 
4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 
4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 
4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 
4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 
4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 
4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 
4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 
4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 
4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 
4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 
5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 
5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 
5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 
5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 
5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 
5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 
5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 
5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 
5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 
5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 
5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 
6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 
6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 
6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 
6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 
6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 
6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 
6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 
6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 
6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 
6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 
7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 
7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 
7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 
7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 
7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 
7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 
7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 
7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 
7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 
7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 
8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 
8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 
8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 
8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 
8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 
8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 
8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 
8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 
8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 
8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 
9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 
9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 
9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 
9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 
9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 
9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 
9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 
9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 
9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 
9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 
10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 
10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 
10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 
10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 
10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 
10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 
10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 
10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 
10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 
10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 
11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 
11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 
11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 
11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 
11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 
11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 
11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 
11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 
11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 
12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 
12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 
12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 
12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 
12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 
12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 
12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 
12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 
12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 
12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 
13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 
13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 
13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 
13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 
13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 
13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 
13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 
13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 
13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 
13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 
14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 
14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 
14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 
14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 
14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 
14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 
14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 
14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 
14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 
15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 
15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 
15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 
15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 
15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 
15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 
15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 
15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 
15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 
15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 
16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 
16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 
16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 
16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 
16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 
16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 
16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 
16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 
16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 
17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 
17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 
17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 
17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 
17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 
17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 
17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 
17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 
17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 
18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 
18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 
18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 
18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 
18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 
18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 
18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 
18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 
18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 
19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 
19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 
19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 
19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 
19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 
19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 
19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 
19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 
19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 
20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 
20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 
20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 
20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 
20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 
20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 
20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 
20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 
20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 
21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 
21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 
21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 
21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 
21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 
21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 
21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 
21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 
21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 
22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 
22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 
22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 
22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 
22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 
22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 
22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 
22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 
22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 
23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 
23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 
23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 
23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 
23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 
23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 
23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 
23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 
23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 
23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 
24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 
24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 
24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 
24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 
24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 
24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 
24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 
24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 
25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 
25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 
25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 
25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 
25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 
25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 
25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 
25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 
25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 
26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 
26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 
26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 
26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 
26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 
26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 
26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 
26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 
26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 
26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 
27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 
27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 
27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 
27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 
27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 
27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 
27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 
27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 
28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 
28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 
28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 
28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 
28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 
28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 
28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 
28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 
28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 
29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 
29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 
29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 
29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 
29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 
29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 
29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 
29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 
30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 
30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 
30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 
30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 
30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 
30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 
30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 
30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 
30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 
31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 
31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 
31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 
31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 
31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 
31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 
31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 
31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 
32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 
32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 
32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 
32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 
32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 
32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 
32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 
32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 
32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 
32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 
33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 
33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 
33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 
33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 
33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 
33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 
33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 
33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 
33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 
34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 
34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 
34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 
34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 
34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 
34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 
34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 
34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 
34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 
35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 
35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 
35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 
35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 
35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 
35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 
35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 
35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 
36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 
36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 
36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 
36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 
36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 
36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 
36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 
36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 
36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 
37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 
37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 
37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 
37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 
37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 
37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 
37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 
37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 
37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 
38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 
38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 
38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 
38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 
38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 
38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 
38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 
38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 
39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 
39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 
39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 
39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 
39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 
39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 
39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 
39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 
40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 
40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 
40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 
40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 
40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 
40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 
40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 
40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 
41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 
41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 
41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 
41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 
41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 
41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 
41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 
41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 
41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 
41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 
42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 
42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 
42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 
42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 
42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 
42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 
42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 
42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 
42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 
43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 
43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 
43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 
43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 
43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 
43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 
43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 
43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 
44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 
44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 
44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 
44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 
44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 
44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 
44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 
44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 
45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 
45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 
45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 
45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 
45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 
45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 
45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 
45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 
46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 
46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 
46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 
46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 
46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 
46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 
46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 
46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 
47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 
47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 
47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 
47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 
47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 
47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 
47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 
47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 
47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 
48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 
48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 
48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 
48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 
48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 
48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 
48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 
48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 
49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 
49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 
49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 
49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 
49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 
49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 
49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 
49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 
49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 
50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 
50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 
50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 
50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 
50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 
50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 
50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 
50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 
51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 
51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 
51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 
51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 
51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 
51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 
51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 
51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 
51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 
52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 
52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 
52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 
52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 
52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 
52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 
52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 
52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 
53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 
53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 
53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 
53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 
53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 
53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 
53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 
53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 
54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 
54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 
54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 
54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 
54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 
54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 
54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 
54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 
54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 
55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 
55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 
55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 
55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 
55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 
55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 
55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 
55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 
56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 
56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 
56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 
56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 
56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 
56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 
56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 
56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 
56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 
57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 
57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 
57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 
57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 
57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 
57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 
57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 
57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 
58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 
58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 
58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 
58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 
58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 
58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 
58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 
58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 
59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 
59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 
59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 
59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 
59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 
59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 
59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 
59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 
59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 
60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 
60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 
60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 
60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 
60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 
60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 
60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 
60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 
61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 
61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 
61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 
61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 
61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 
61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 
61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 
61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 
62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 
62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 
62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 
62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 
62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 
62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 
62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 
62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 
63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 
63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 
63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 
63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 
63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 
63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 
63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 
63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 
64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 
64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 
64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 
64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 
64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 
64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 
64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 
64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 
65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 
65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 
65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 
65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 
65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 
65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 
65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 
65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 
65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 
66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 
66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 
66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 
66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 
66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 
66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 
66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 
67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 
67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 
67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 
67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 
67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 
67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 
67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 
67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 
67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 
68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 
68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 
68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 
68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 
68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 
68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 
68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 
69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 
69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 
69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 
69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 
69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 
69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 
69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 
69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 
70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 
70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 
70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 
70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 
70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 
70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 
70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 
70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 
70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 
71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 
71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 
71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 
71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 
71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 
71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 
71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 
71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 
72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 
72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 
72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 
72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 
72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 
72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 
72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 
72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 
72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 
73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 
73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 
73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 
73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 
73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 
73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 
73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 
74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 
74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 
74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 
74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 
74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 
74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 
74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 
74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 
75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 
75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 
75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 
75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 
75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 
75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 
75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 
75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 
75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 
76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 
76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 
76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 
76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 
76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 
76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 
76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 
77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 
77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 
77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 
77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 
77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 
77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 
77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 
77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 
77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 
78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 
78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 
78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 
78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 
78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 
78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 
78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 
78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 
79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 
79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 
79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 
79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 
79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 
79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 
79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 
79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 
80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 
80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 
80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 
80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 
80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 
80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 
80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 
80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 
81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 
81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 
81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 
81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 
81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 
81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 
81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 
81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 
82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 
82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 
82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 
82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 
82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 
82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 
82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 
82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 
83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 
83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 
83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 
83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 
83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 
83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 
83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 
83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 
84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 
84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 
84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 
84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 
84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 
84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 
84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 
84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 
85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 
85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 
85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 
85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 
85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 
85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 
85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 
85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 
86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 
86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 
86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 
86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 
86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 
86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 
86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 
86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 
87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 
87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 
87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 
87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 
87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 
87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 
87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 
87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 
88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 
88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 
88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 
88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 
88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 
88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 
88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 
89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 
89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 
89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 
89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 
89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 
89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 
89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 
89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 
90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 
90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 
90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 
90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 
90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 
90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 
90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 
90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 
90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 
91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 
91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 
91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 
91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 
91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 
91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 
91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 
92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 
92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 
92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 
92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 
92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 
92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 
92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 
92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 
92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 
93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 
93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 
93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 
93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 
93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 
93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 
93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 
93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 
94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 
94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 
94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 
94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 
94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 
94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 
94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 
94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 
95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 
95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 
95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 
95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 
95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 
95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 
95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 
95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 
96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 
96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 
96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 
96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 
96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 
96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 
96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 
96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 
97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 
97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 
97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 
97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 
97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 
97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 
97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 
97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 
98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 
98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 
98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 
98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 
98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 
98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 
98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 
99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 
99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 
99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 
99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 
99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 
99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 
99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 
99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991, 100003, 
100019, 100043, 100049, 100057, 100069, 100103, 100109, 100129, 100151, 100153, 100169, 
100183, 100189, 100193, 100207, 100213, 100237, 100267, 100271, 100279, 100291, 100297, 
100313, 100333, 100343, 100357, 100361, 100363, 100379, 100391, 100393, 100403, 100411, 
100417, 100447, 100459, 100469, 100483, 100493, 100501, 100511, 100517, 100519, 100523, 
100537, 100547, 100549, 100559, 100591, 100609, 100613, 100621, 100649, 100669, 100673, 
100693, 100699, 100703, 100733, 100741, 100747, 100769, 100787, 100799, 100801, 100811, 
100823, 100829, 100847, 100853, 100907, 100913, 100927, 100931, 100937, 100943, 100957, 
100981, 100987, 100999, 101009, 101021, 101027, 101051, 101063, 101081, 101089, 101107, 
101111, 101113, 101117, 101119, 101141, 101149, 101159, 101161, 101173, 101183, 101197, 
101203, 101207, 101209, 101221, 101267, 101273, 101279, 101281, 101287, 101293, 101323, 
101333, 101341, 101347, 101359, 101363, 101377, 101383, 101399, 101411, 101419, 101429, 
101449, 101467, 101477, 101483, 101489, 101501, 101503, 101513, 101527, 101531, 101533, 
101537, 101561, 101573, 101581, 101599, 101603, 101611, 101627, 101641, 101653, 101663, 
101681, 101693, 101701, 101719, 101723, 101737, 101741, 101747, 101749, 101771, 101789, 
101797, 101807, 101833, 101837, 101839, 101863, 101869, 101873, 101879, 101891, 101917, 
101921, 101929, 101939, 101957, 101963, 101977, 101987, 101999, 102001, 102013, 102019, 
102023, 102031, 102043, 102059, 102061, 102071, 102077, 102079, 102101, 102103, 102107, 
102121, 102139, 102149, 102161, 102181, 102191, 102197, 102199, 102203, 102217, 102229, 
102233, 102241, 102251, 102253, 102259, 102293, 102299, 102301, 102317, 102329, 102337, 
102359, 102367, 102397, 102407, 102409, 102433, 102437, 102451, 102461, 102481, 102497, 
102499, 102503, 102523, 102533, 102539, 102547, 102551, 102559, 102563, 102587, 102593, 
102607, 102611, 102643, 102647, 102653, 102667, 102673, 102677, 102679, 102701, 102761, 
102763, 102769, 102793, 102797, 102811, 102829, 102841, 102859, 102871, 102877, 102881, 
102911, 102913, 102929, 102931, 102953, 102967, 102983, 103001, 103007, 103043, 103049, 
103067, 103069, 103079, 103087, 103091, 103093, 103099, 103123, 103141, 103171, 103177, 
103183, 103217, 103231, 103237, 103289, 103291, 103307, 103319, 103333, 103349, 103357, 
103387, 103391, 103393, 103399, 103409, 103421, 103423, 103451, 103457, 103471, 103483, 
103511, 103529, 103549, 103553, 103561, 103567, 103573, 103577, 103583, 103591, 103613, 
103619, 103643, 103651, 103657, 103669, 103681, 103687, 103699, 103703, 103723, 103769, 
103787, 103801, 103811, 103813, 103837, 103841, 103843, 103867, 103889, 103903, 103913, 
103919, 103951, 103963, 103967, 103969, 103979, 103981, 103991, 103993, 103997, 104003, 
104009, 104021, 104033, 104047, 104053, 104059, 104087, 104089, 104107, 104113, 104119, 
104123, 104147, 104149, 104161, 104173, 104179, 104183, 104207, 104231, 104233, 104239, 
104243, 104281, 104287, 104297, 104309, 104311, 104323, 104327, 104347, 104369, 104381, 
104383, 104393, 104399, 104417, 104459, 104471, 104473, 104479, 104491, 104513, 104527, 
104537, 104543, 104549, 104551, 104561, 104579, 104593, 104597, 104623, 104639, 104651, 
104659, 104677, 104681, 104683, 104693, 104701, 104707, 104711, 104717, 104723, 104729, 

PASS
(test prime_generator :time 0.11 :before-memory 32.80 :after-memory 32.80)
All tests passed!
PASS
(test permutation :time 0.13 :before-memory 32.80 :after-memory 32.80)
All tests passed!
PASS
(test permutation :time 0.13 :before-memory 32.80 :after-memory 32.80)
Project (polynomial-factorization :distinct-factors 1)
(or !(x1 = 0) !(4 x1 + x0^2 > 0) !(x2 - x0 > 0) !(x2^2 - x0 x2 - x1 = 0))
Project (or - x1 + 4 x0^2 < 0 !(x2^2 - 2 x0 x2 - x1 + x0^2 < 0) !(x2 + x0 = 0))
------------------
PASS
(test nlsat :time 0.00 :before-memory 32.80 :after-memory 32.80)
Project (polynomial-factorization :distinct-factors 1)
(or !(x1 = 0) !(4 x1 + x0^2 > 0) !(x2 - x0 > 0) !(x2^2 - x0 x2 - x1 = 0))
Project (or - x1 + 4 x0^2 < 0 !(x2^2 - 2 x0 x2 - x1 + x0^2 < 0) !(x2 + x0 = 0))
------------------
PASS
(test nlsat :time 0.00 :before-memory 32.80 :after-memory 32.80)
PASS
(test zstring :time 0.00 :before-memory 32.80 :after-memory 32.80)
PASS
(test zstring :time 0.00 :before-memory 32.80 :after-memory 32.80)
Unit tests completed
Running regression tests for additional coverage
Testing benchmarks at z3test/regressions/smt2 using build/z3
Testing z3test/regressions/smt2/3436.smt2
Testing z3test/regressions/smt2/fp-sqrt-6.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-4.smt2
Testing z3test/regressions/smt2/fp-fma-18.smt2
Testing z3test/regressions/smt2/6079-1-simp.smt2
Testing z3test/regressions/smt2/2935.smt2
Testing z3test/regressions/smt2/3742.smt2
Testing z3test/regressions/smt2/issue-628.smt2
Testing z3test/regressions/smt2/4008.smt2
Testing z3test/regressions/smt2/fp-conversions-13.smt2
Testing z3test/regressions/smt2/6052.smt2
Testing z3test/regressions/smt2/fp-to_sbv-13.smt2
Testing z3test/regressions/smt2/2943.smt2
Testing z3test/regressions/smt2/2892.smt2
Testing z3test/regressions/smt2/z3.34.smt2
Testing z3test/regressions/smt2/fp-conversions-20.smt2
Testing z3test/regressions/smt2/4010.smt2
Testing z3test/regressions/smt2/issue-1694.smt2
Testing z3test/regressions/smt2/3865.smt2
Testing z3test/regressions/smt2/z3.31.smt2
Testing z3test/regressions/smt2/3190.smt2
Testing z3test/regressions/smt2/string13.smt2
Testing z3test/regressions/smt2/3253.smt2
Testing z3test/regressions/smt2/o5.smt2
Testing z3test/regressions/smt2/t121.smt2
Testing z3test/regressions/smt2/3255.smt2
Testing z3test/regressions/smt2/5798.smt2
Testing z3test/regressions/smt2/6902.smt2
Testing z3test/regressions/smt2/z3.29.smt2
Testing z3test/regressions/smt2/6674-simp.smt2
Testing z3test/regressions/smt2/sqrt-bug.smt2
Testing z3test/regressions/smt2/3504.smt2
Testing z3test/regressions/smt2/3225.smt2
Testing z3test/regressions/smt2/z3.39.smt2
Testing z3test/regressions/smt2/3700.smt2
Testing z3test/regressions/smt2/3369.smt2
Testing z3test/regressions/smt2/4032.smt2
Testing z3test/regressions/smt2/3155.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-5.smt2
Testing z3test/regressions/smt2/fp-conversions-36.smt2
Testing z3test/regressions/smt2/z3.16.smt2
Testing z3test/regressions/smt2/3502.smt2
Testing z3test/regressions/smt2/t211.smt2
Testing z3test/regressions/smt2/3163.smt2
Testing z3test/regressions/smt2/4044.smt2
Testing z3test/regressions/smt2/3982.smt2
Testing z3test/regressions/smt2/fp-sqrt-4.smt2
Testing z3test/regressions/smt2/3937.smt2
Testing z3test/regressions/smt2/fp-fma-4.smt2
Testing z3test/regressions/smt2/ho.smt2
Testing z3test/regressions/smt2/3342.smt2
Testing z3test/regressions/smt2/fp-fma-2.smt2
Testing z3test/regressions/smt2/2557.smt2
Testing z3test/regressions/smt2/nl9.smt2
Testing z3test/regressions/smt2/4841-2.smt2
Testing z3test/regressions/smt2/t192.smt2
Testing z3test/regressions/smt2/fp-conversions-24.smt2
Testing z3test/regressions/smt2/fp-nan.smt2
Testing z3test/regressions/smt2/6319.smt2
Testing z3test/regressions/smt2/2891.smt2
Testing z3test/regressions/smt2/2955.smt2
Testing z3test/regressions/smt2/fp-sqrt-5.smt2
Testing z3test/regressions/smt2/loop.smt2
Testing z3test/regressions/smt2/6079-4.smt2
Testing z3test/regressions/smt2/t183.smt2
Testing z3test/regressions/smt2/fp-to_ubv-11.smt2
Testing z3test/regressions/smt2/fp-conversions-17.smt2
Testing z3test/regressions/smt2/fp-mul-1.smt2
Testing z3test/regressions/smt2/fp-to_fp_float-3.smt2
Testing z3test/regressions/smt2/t122.smt2
Testing z3test/regressions/smt2/t189.smt2
Testing z3test/regressions/smt2/string-itos.smt2
Testing z3test/regressions/smt2/fp-to_ubv-9.smt2
Testing z3test/regressions/smt2/fp-to_fp-10.smt2
Testing z3test/regressions/smt2/2956.smt2
Testing z3test/regressions/smt2/3146.smt2
Testing z3test/regressions/smt2/fp-fma-13.smt2
Testing z3test/regressions/smt2/fp-fma-6.smt2
Testing z3test/regressions/smt2/fp-conversions-31.smt2
Testing z3test/regressions/smt2/dt_ayrat_1.smt2
Testing z3test/regressions/smt2/fp-to_ubv-30.smt2
Testing z3test/regressions/smt2/fp-conversions-38.smt2
Testing z3test/regressions/smt2/fp-to_ubv-14.smt2
Testing z3test/regressions/smt2/3006.smt2
Testing z3test/regressions/smt2/dt_ayrat_3.smt2
Testing z3test/regressions/smt2/4009.smt2
Testing z3test/regressions/smt2/fp-fma-14.smt2
Testing z3test/regressions/smt2/fp-to_ubv-5.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-9.smt2
Testing z3test/regressions/smt2/intervalUpDivide.smt2
Testing z3test/regressions/smt2/2450.smt2
Testing z3test/regressions/smt2/abs.smt2
Testing z3test/regressions/smt2/3438.smt2
Testing z3test/regressions/smt2/3411.smt2
Testing z3test/regressions/smt2/3434.smt2
Testing z3test/regressions/smt2/t143.smt2
Testing z3test/regressions/smt2/nl46.smt2
Testing z3test/regressions/smt2/fp-conversions-10.smt2
Testing z3test/regressions/smt2/fp-to_ubv-1.smt2
Testing z3test/regressions/smt2/3517.smt2
Testing z3test/regressions/smt2/consequence_fd.smt2
Testing z3test/regressions/smt2/2939.smt2
Testing z3test/regressions/smt2/issue-1224.smt2
Testing z3test/regressions/smt2/fp-rem-4.smt2
Testing z3test/regressions/smt2/3383.smt2
Testing z3test/regressions/smt2/fp-to_ubv-6.smt2
Testing z3test/regressions/smt2/nl55.smt2
Testing z3test/regressions/smt2/crash.smt2
Testing z3test/regressions/smt2/o2.smt2
Testing z3test/regressions/smt2/3970.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-8.smt2
Testing z3test/regressions/smt2/3911.smt2
Testing z3test/regressions/smt2/2890.smt2
Testing z3test/regressions/smt2/z3.2.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-11.smt2
Testing z3test/regressions/smt2/3247.smt2
Testing z3test/regressions/smt2/strategy-par-or-1.smt2
Testing z3test/regressions/smt2/5075.smt2
Testing z3test/regressions/smt2/3961.smt2
Testing z3test/regressions/smt2/3500.smt2
Testing z3test/regressions/smt2/fp-eq-1.smt2
Testing z3test/regressions/smt2/t11.smt2
Testing z3test/regressions/smt2/2937.smt2
Testing z3test/regressions/smt2/mbqi_bug.smt2
Testing z3test/regressions/smt2/4841-simp.smt2
Testing z3test/regressions/smt2/fp-to_ubv-20.smt2
Testing z3test/regressions/smt2/5724.smt2
Testing z3test/regressions/smt2/issue-2416-2.smt2
Testing z3test/regressions/smt2/power.smt2
Testing z3test/regressions/smt2/fp-to_fp_real-2.smt2
Testing z3test/regressions/smt2/issue-1218.smt2
Testing z3test/regressions/smt2/t217.smt2
Testing z3test/regressions/smt2/2447.smt2
Testing z3test/regressions/smt2/fp-to_sbv-16.smt2
Testing z3test/regressions/smt2/fp-to_sbv-6.smt2
Testing z3test/regressions/smt2/3553.smt2
Testing z3test/regressions/smt2/t201.smt2
Testing z3test/regressions/smt2/3555.smt2
Testing z3test/regressions/smt2/3423.smt2
Testing z3test/regressions/smt2/string14.smt2
Testing z3test/regressions/smt2/issue-1851.smt2
Testing z3test/regressions/smt2/3919.smt2
Testing z3test/regressions/smt2/t212.smt2
Testing z3test/regressions/smt2/fp-operations.smt2
Testing z3test/regressions/smt2/nl27.smt2
Testing z3test/regressions/smt2/fp-to_ubv-26.smt2
Testing z3test/regressions/smt2/fp-fma-5.smt2
Testing z3test/regressions/smt2/2417.smt2
Testing z3test/regressions/smt2/3930.smt2
Testing z3test/regressions/smt2/fp-uf-2.smt2
Testing z3test/regressions/smt2/3332.smt2
Testing z3test/regressions/smt2/t16.smt2
Testing z3test/regressions/smt2/nl39.smt2
Testing z3test/regressions/smt2/3785.smt2
Testing z3test/regressions/smt2/nl33.smt2
Testing z3test/regressions/smt2/string11.smt2
Testing z3test/regressions/smt2/fp-fma-10.smt2
Testing z3test/regressions/smt2/z3.37.smt2
Testing z3test/regressions/smt2/fp-to_ubv-19.smt2
Testing z3test/regressions/smt2/z3.43.smt2
Testing z3test/regressions/smt2/t134.smt2
Testing z3test/regressions/smt2/2533.smt2
Testing z3test/regressions/smt2/z3.41.smt2
Testing z3test/regressions/smt2/3118.smt2
Testing z3test/regressions/smt2/nl49.smt2
Testing z3test/regressions/smt2/3642.smt2
Testing z3test/regressions/smt2/z3.20.smt2
Testing z3test/regressions/smt2/fp-to_ubv-8.smt2
Testing z3test/regressions/smt2/2919.smt2
Testing z3test/regressions/smt2/string3.smt2
Testing z3test/regressions/smt2/5693.smt2
Testing z3test/regressions/smt2/eq.smt2
Testing z3test/regressions/smt2/string-concat.smt2
Testing z3test/regressions/smt2/t117.smt2
Testing z3test/regressions/smt2/atan.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-6.smt2
Testing z3test/regressions/smt2/t114.smt2
Testing z3test/regressions/smt2/fp-to_ubv-15.smt2
Testing z3test/regressions/smt2/fp-to_fp-9.smt2
Testing z3test/regressions/smt2/t139.smt2
Testing z3test/regressions/smt2/t145.smt2
Testing z3test/regressions/smt2/fp-to_ubv-10.smt2
Testing z3test/regressions/smt2/nl58.smt2
Testing z3test/regressions/smt2/fp-max-zero-zero-2.smt2
Testing z3test/regressions/smt2/6196.smt2
Testing z3test/regressions/smt2/issue-1699.smt2
Testing z3test/regressions/smt2/3675.smt2
Testing z3test/regressions/smt2/z3.25.smt2
Testing z3test/regressions/smt2/fp-sqrt-9.smt2
Testing z3test/regressions/smt2/fp-conversions-27.smt2
Testing z3test/regressions/smt2/fp-mul-3.smt2
Testing z3test/regressions/smt2/3267.smt2
Testing z3test/regressions/smt2/nl41.smt2
Testing z3test/regressions/smt2/6728-1.smt2
Testing z3test/regressions/smt2/fp-uf-6.smt2
Testing z3test/regressions/smt2/issue-3023.smt2
Testing z3test/regressions/smt2/mul.smt2
Testing z3test/regressions/smt2/fp-fma-12.smt2
Testing z3test/regressions/smt2/t137.smt2
Testing z3test/regressions/smt2/t103.smt2
Testing z3test/regressions/smt2/3275.smt2
Testing z3test/regressions/smt2/lia1.smt2
Testing z3test/regressions/smt2/fp-fma-1.smt2
Testing z3test/regressions/smt2/t172.smt2
Testing z3test/regressions/smt2/2566.smt2
Testing z3test/regressions/smt2/nl52.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_2.smt2
Testing z3test/regressions/smt2/fp-datatype_with_float-3.smt2
Testing z3test/regressions/smt2/3161.smt2
Testing z3test/regressions/smt2/issue-1683.smt2
Testing z3test/regressions/smt2/nl35.smt2
Testing z3test/regressions/smt2/2415.smt2
Testing z3test/regressions/smt2/3999.smt2
Testing z3test/regressions/smt2/fp-to_ubv-4.smt2
Testing z3test/regressions/smt2/6117-4.smt2
Testing z3test/regressions/smt2/trig-quadrants.smt2
Testing z3test/regressions/smt2/fp-predicates.smt2
Testing z3test/regressions/smt2/pat1.smt2
Testing z3test/regressions/smt2/bvcore.smt2
Testing z3test/regressions/smt2/blinking_query2.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-5.smt2
Testing z3test/regressions/smt2/fp-rem-13-4.smt2
Testing z3test/regressions/smt2/fp-to_fp-5.smt2
Testing z3test/regressions/smt2/3384.smt2
Testing z3test/regressions/smt2/nl8.smt2
Testing z3test/regressions/smt2/3549.smt2
Testing z3test/regressions/smt2/z3.4.smt2
Testing z3test/regressions/smt2/t206.smt2
Testing z3test/regressions/smt2/sine7.smt2
Testing z3test/regressions/smt2/qfbv-quant.smt2
Testing z3test/regressions/smt2/issue2301.smt2
Testing z3test/regressions/smt2/3237.smt2
Testing z3test/regressions/smt2/z3.17.smt2
Testing z3test/regressions/smt2/3672.smt2
Testing z3test/regressions/smt2/testmap.smt2
Testing z3test/regressions/smt2/fp-conversions-40.smt2
Testing z3test/regressions/smt2/attr_bug.smt2
Testing z3test/regressions/smt2/fp-conversions-23.smt2
Testing z3test/regressions/smt2/t171.smt2
Testing z3test/regressions/smt2/fp-to_sbv-12.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-10.smt2
Testing z3test/regressions/smt2/t151.smt2
Testing z3test/regressions/smt2/3858.smt2
Testing z3test/regressions/smt2/3105.smt2
Testing z3test/regressions/smt2/3572.smt2
Testing z3test/regressions/smt2/6582.smt2
Testing z3test/regressions/smt2/3728.smt2
Testing z3test/regressions/smt2/fp-sqrt-7.smt2
Testing z3test/regressions/smt2/issue-963.smt2
Testing z3test/regressions/smt2/3115.smt2
Testing z3test/regressions/smt2/6079-8-simp.smt2
Testing z3test/regressions/smt2/fp-min-zero-zero-1.smt2
Testing z3test/regressions/smt2/fp-uf-3.smt2
Testing z3test/regressions/smt2/3344.smt2
Testing z3test/regressions/smt2/t8.smt2
Testing z3test/regressions/smt2/strategy-default.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-13.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_6.smt2
Testing z3test/regressions/smt2/nl36.smt2
Testing z3test/regressions/smt2/nl17.smt2
Testing z3test/regressions/smt2/3264.smt2
Testing z3test/regressions/smt2/fp-to_fp-1.smt2
Testing z3test/regressions/smt2/t124.smt2
Testing z3test/regressions/smt2/3120.smt2
Testing z3test/regressions/smt2/3391.smt2
Testing z3test/regressions/smt2/fp-rem-3.smt2
Testing z3test/regressions/smt2/t184.smt2
Testing z3test/regressions/smt2/const_array_bug.smt2
Testing z3test/regressions/smt2/3339.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_4.smt2
Testing z3test/regressions/smt2/3223.smt2
Testing z3test/regressions/smt2/fp-rem-tests-double-partial.smt2
Testing z3test/regressions/smt2/3477.smt2
Testing z3test/regressions/smt2/fp-to_sbv-14.smt2
Testing z3test/regressions/smt2/3385.smt2
Testing z3test/regressions/smt2/t9.smt2
Testing z3test/regressions/smt2/t123.smt2
Testing z3test/regressions/smt2/fp-to_ieee_bv-2.smt2
Testing z3test/regressions/smt2/nl20.smt2
Testing z3test/regressions/smt2/fp-conversions-18.smt2
Testing z3test/regressions/smt2/3645.smt2
Testing z3test/regressions/smt2/2856.smt2
Testing z3test/regressions/smt2/array.smt2
Testing z3test/regressions/smt2/tan.smt2
Testing z3test/regressions/smt2/2432.smt2
Testing z3test/regressions/smt2/fp-array-2.smt2
Testing z3test/regressions/smt2/6117-1.smt2
Testing z3test/regressions/smt2/6079-8.smt2
Testing z3test/regressions/smt2/6117-8.smt2
Testing z3test/regressions/smt2/nl48.smt2
Testing z3test/regressions/smt2/small-bv-quant-1.smt2
Testing z3test/regressions/smt2/fp-rem-13.smt2
Testing z3test/regressions/smt2/re_rewriter.smt2
Testing z3test/regressions/smt2/fp-fma-11.smt2
Testing z3test/regressions/smt2/chain.smt2
Testing z3test/regressions/smt2/3473.smt2
Testing z3test/regressions/smt2/z3.38.smt2
Testing z3test/regressions/smt2/3514.smt2
Testing z3test/regressions/smt2/3397.smt2
Testing z3test/regressions/smt2/t144.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-1.smt2
Testing z3test/regressions/smt2/strategy-par-or-2.smt2
Testing z3test/regressions/smt2/fp-to_ubv-23.smt2
Testing z3test/regressions/smt2/7489.smt2
Testing z3test/regressions/smt2/fp-to_fp-signed-1.smt2
Testing z3test/regressions/smt2/fp-to_fp_float-2.smt2
Testing z3test/regressions/smt2/3910.smt2
Testing z3test/regressions/smt2/nl4.smt2
Testing z3test/regressions/smt2/3759.smt2
Testing z3test/regressions/smt2/nl13.smt2
Testing z3test/regressions/smt2/3396.smt2
Testing z3test/regressions/smt2/t160.smt2
Testing z3test/regressions/smt2/nl15.smt2
Testing z3test/regressions/smt2/3670.smt2
Testing z3test/regressions/smt2/fp-rem-tests-single-non-partial.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_8.smt2
Testing z3test/regressions/smt2/3644.smt2
Testing z3test/regressions/smt2/2530.smt2
Testing z3test/regressions/smt2/fp-rem-5.smt2
Testing z3test/regressions/smt2/3303.smt2
Testing z3test/regressions/smt2/3116.smt2
Testing z3test/regressions/smt2/3730.smt2
Testing z3test/regressions/smt2/3218.smt2
Testing z3test/regressions/smt2/issue-1645.smt2
Testing z3test/regressions/smt2/3125.smt2
Testing z3test/regressions/smt2/3971.smt2
Testing z3test/regressions/smt2/3378.smt2
Testing z3test/regressions/smt2/fp-fma-17.smt2
Testing z3test/regressions/smt2/t208.smt2
Testing z3test/regressions/smt2/t104.smt2
Testing z3test/regressions/smt2/3811.smt2
Testing z3test/regressions/smt2/fp-to_fp-11.smt2
Testing z3test/regressions/smt2/3347.smt2
Testing z3test/regressions/smt2/3210.smt2
Testing z3test/regressions/smt2/t193.smt2
Testing z3test/regressions/smt2/3103.smt2
Testing z3test/regressions/smt2/2573.smt2
Testing z3test/regressions/smt2/fp-sqrt-8.smt2
Testing z3test/regressions/smt2/5911.smt2
Testing z3test/regressions/smt2/3226.smt2
Testing z3test/regressions/smt2/nl47.smt2
Testing z3test/regressions/smt2/fp-to_ubv-25.smt2
Testing z3test/regressions/smt2/3548.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_5.smt2
Testing z3test/regressions/smt2/nira.smt2
Testing z3test/regressions/smt2/fp-div-4.smt2
Testing z3test/regressions/smt2/t119.smt2
Testing z3test/regressions/smt2/fp-conversions-4.smt2
Testing z3test/regressions/smt2/3862.smt2
Testing z3test/regressions/smt2/3827.smt2
Testing z3test/regressions/smt2/fp-to_fp-7.smt2
Testing z3test/regressions/smt2/3825.smt2
Testing z3test/regressions/smt2/3663.smt2
Testing z3test/regressions/smt2/4000.smt2
Testing z3test/regressions/smt2/t182.smt2
Testing z3test/regressions/smt2/sine.smt2
Testing z3test/regressions/smt2/with.smt2
Testing z3test/regressions/smt2/fp-to_sbv-1.smt2
Testing z3test/regressions/smt2/power-sqrt-unsafe.smt2
Testing z3test/regressions/smt2/z3.1.smt2
Testing z3test/regressions/smt2/fp-sqrt-1.smt2
Testing z3test/regressions/smt2/acos.smt2
Testing z3test/regressions/smt2/fp-quantifiers-1.smt2
Testing z3test/regressions/smt2/fp-to_sbv-2.smt2
Testing z3test/regressions/smt2/bad_patterns.smt2
Testing z3test/regressions/smt2/3440.smt2
Testing z3test/regressions/smt2/t14.smt2
Testing z3test/regressions/smt2/fp-abs-1.smt2
Testing z3test/regressions/smt2/3422.smt2
Testing z3test/regressions/smt2/fp-to_fp_real-1.smt2
Testing z3test/regressions/smt2/3538.smt2
Testing z3test/regressions/smt2/3749.smt2
Testing z3test/regressions/smt2/3301.smt2
Testing z3test/regressions/smt2/2962.smt2
Testing z3test/regressions/smt2/fp-uf-1.smt2
Testing z3test/regressions/smt2/fp-rem-tests-double-non-partial.smt2
Testing z3test/regressions/smt2/bv0.smt2
Testing z3test/regressions/smt2/3765.smt2
Testing z3test/regressions/smt2/3249.smt2
Testing z3test/regressions/smt2/fp-rounding_mode-2.smt2
Testing z3test/regressions/smt2/o4.smt2
Testing z3test/regressions/smt2/trig-bounds.smt2
Testing z3test/regressions/smt2/fp-datatype_with_float-2.smt2
Testing z3test/regressions/smt2/incsat.smt2
Testing z3test/regressions/smt2/5721.smt2
Testing z3test/regressions/smt2/pat3.smt2
Testing z3test/regressions/smt2/3158.smt2
Testing z3test/regressions/smt2/3705.smt2
Testing z3test/regressions/smt2/3282.smt2
Testing z3test/regressions/smt2/t214.smt2
Testing z3test/regressions/smt2/fp-le-ge.smt2
Testing z3test/regressions/smt2/fp-uf-8.smt2
Testing z3test/regressions/smt2/issue-1677.smt2
Testing z3test/regressions/smt2/issue-1658.smt2
Testing z3test/regressions/smt2/issue-1725.smt2
Testing z3test/regressions/smt2/fp-to_sbv-7.smt2
Testing z3test/regressions/smt2/fp-conversions-33.smt2
Testing z3test/regressions/smt2/fp-to_ubv-28.smt2
Testing z3test/regressions/smt2/3312.smt2
Testing z3test/regressions/smt2/3279.smt2
Testing z3test/regressions/smt2/o1.smt2
Testing z3test/regressions/smt2/t102.smt2
Testing z3test/regressions/smt2/fp-template.smt2
Testing z3test/regressions/smt2/3220.smt2
Testing z3test/regressions/smt2/sine9.smt2
Testing z3test/regressions/smt2/nl53.smt2
Testing z3test/regressions/smt2/trig-intersection.smt2
Testing z3test/regressions/smt2/updt.smt2
Testing z3test/regressions/smt2/3527.smt2
Testing z3test/regressions/smt2/t177.smt2
Testing z3test/regressions/smt2/3175.smt2
Testing z3test/regressions/smt2/nl24.smt2
Testing z3test/regressions/smt2/nl28.smt2
Testing z3test/regressions/smt2/fp-array-5.smt2
Testing z3test/regressions/smt2/2990.smt2
Testing z3test/regressions/smt2/3336.smt2
Testing z3test/regressions/smt2/fp-rounding_mode-1.smt2
Testing z3test/regressions/smt2/3589.smt2
Testing z3test/regressions/smt2/2921.smt2
Testing z3test/regressions/smt2/3401.smt2
Testing z3test/regressions/smt2/nl45.smt2
Testing z3test/regressions/smt2/z3.26.smt2
Testing z3test/regressions/smt2/3277.smt2
Testing z3test/regressions/smt2/cosine3.smt2
Testing z3test/regressions/smt2/4017.smt2
Testing z3test/regressions/smt2/3960.smt2
Testing z3test/regressions/smt2/fp-feature-check-1.smt2
Testing z3test/regressions/smt2/dt_ayrat_2.smt2
Testing z3test/regressions/smt2/3886.smt2
Testing z3test/regressions/smt2/fp-conversions-5.smt2
Testing z3test/regressions/smt2/2478.smt2
Testing z3test/regressions/smt2/6117-7.smt2
Testing z3test/regressions/smt2/fp-to_ubv-21.smt2
Testing z3test/regressions/smt2/string9.smt2
Testing z3test/regressions/smt2/nl31.smt2
Testing z3test/regressions/smt2/5710.smt2
Testing z3test/regressions/smt2/3100.smt2
Testing z3test/regressions/smt2/t178.smt2
Testing z3test/regressions/smt2/fp-conversions-2.smt2
Testing z3test/regressions/smt2/3252.smt2
Testing z3test/regressions/smt2/z3.28.smt2
Testing z3test/regressions/smt2/4019.smt2
Testing z3test/regressions/smt2/issue-1458.smt2
Testing z3test/regressions/smt2/4003.smt2
Testing z3test/regressions/smt2/fp-max-zero-zero-1.smt2
Testing z3test/regressions/smt2/fp-fma-20.smt2
Testing z3test/regressions/smt2/2923.smt2
Testing z3test/regressions/smt2/t132.smt2
Testing z3test/regressions/smt2/fp-to_fp_float-1.smt2
Testing z3test/regressions/smt2/fp-sub-1.smt2
Testing z3test/regressions/smt2/fp-max-zero-zero-3.smt2
Testing z3test/regressions/smt2/3985.smt2
Testing z3test/regressions/smt2/issue-1655.smt2
Testing z3test/regressions/smt2/issue-1681.smt2
Testing z3test/regressions/smt2/t209.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-2.smt2
Testing z3test/regressions/smt2/tan3.smt2
Testing z3test/regressions/smt2/t133.smt2
Testing z3test/regressions/smt2/3148.smt2
Testing z3test/regressions/smt2/arith_bug3.smt2
Testing z3test/regressions/smt2/3799.smt2
Testing z3test/regressions/smt2/4021.smt2
Testing z3test/regressions/smt2/fp-lt-gt.smt2
Testing z3test/regressions/smt2/z3.27.smt2
Testing z3test/regressions/smt2/3335.smt2
Testing z3test/regressions/smt2/3665.smt2
Testing z3test/regressions/smt2/3597.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-7.smt2
Testing z3test/regressions/smt2/3709.smt2
Testing z3test/regressions/smt2/fp-rem-11.smt2
Testing z3test/regressions/smt2/fp-conversions-32.smt2
Testing z3test/regressions/smt2/3967.smt2
Testing z3test/regressions/smt2/epsilon.smt2
Testing z3test/regressions/smt2/3732.smt2
Testing z3test/regressions/smt2/fp-to_ubv-18.smt2
Testing z3test/regressions/smt2/qffp-quant.smt2
Testing z3test/regressions/smt2/strategy-par-or-3.smt2
Testing z3test/regressions/smt2/2924.smt2
Testing z3test/regressions/smt2/fp-conversions-26.smt2
Testing z3test/regressions/smt2/bvsmod.smt2
Testing z3test/regressions/smt2/fp-fma-8.smt2
Testing z3test/regressions/smt2/dt2bv.smt2
Testing z3test/regressions/smt2/fp-rem-14.smt2
Testing z3test/regressions/smt2/fp-to_fp-4.smt2
Testing z3test/regressions/smt2/fp-conversions-34.smt2
Testing z3test/regressions/smt2/nl21.smt2
Testing z3test/regressions/smt2/fp-conversions-12.smt2
Testing z3test/regressions/smt2/issue-1841.smt2
Testing z3test/regressions/smt2/3559.smt2
Testing z3test/regressions/smt2/t176.smt2
Testing z3test/regressions/smt2/fp-to_ubv-16.smt2
Testing z3test/regressions/smt2/fp-to_ieee_bv-1.smt2
Testing z3test/regressions/smt2/3626.smt2
Testing z3test/regressions/smt2/z3.14.smt2
Testing z3test/regressions/smt2/3816.smt2
Testing z3test/regressions/smt2/issue-1538.smt2
Testing z3test/regressions/smt2/t125.smt2
Testing z3test/regressions/smt2/issue-3106.smt2
Testing z3test/regressions/smt2/fp-conversions-16.smt2
Testing z3test/regressions/smt2/2883.smt2
Testing z3test/regressions/smt2/t109.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-2.smt2
Testing z3test/regressions/smt2/fp-to_ubv-7.smt2
Testing z3test/regressions/smt2/fp-pzero.smt2
Testing z3test/regressions/smt2/fp-div-1.smt2
Testing z3test/regressions/smt2/nl6.smt2
Testing z3test/regressions/smt2/3834.smt2
Testing z3test/regressions/smt2/t154.smt2
Testing z3test/regressions/smt2/t196.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-4.smt2
Testing z3test/regressions/smt2/t174.smt2
Testing z3test/regressions/smt2/3286.smt2
Testing z3test/regressions/smt2/fp-conversions-6.smt2
Testing z3test/regressions/smt2/3972.smt2
Testing z3test/regressions/smt2/3896.smt2
Testing z3test/regressions/smt2/6079-9.smt2
Testing z3test/regressions/smt2/3379.smt2
Testing z3test/regressions/smt2/nl59.smt2
Testing z3test/regressions/smt2/t1.smt2
Testing z3test/regressions/smt2/t198.smt2
Testing z3test/regressions/smt2/nl1.smt2
Testing z3test/regressions/smt2/nl51.smt2
Testing z3test/regressions/smt2/3601.smt2
Testing z3test/regressions/smt2/fp-fma-3.smt2
Testing z3test/regressions/smt2/fp-fp-1.smt2
Testing z3test/regressions/smt2/sine5.smt2
Testing z3test/regressions/smt2/3832.smt2
Testing z3test/regressions/smt2/nl50.smt2
Testing z3test/regressions/smt2/3221.smt2
Testing z3test/regressions/smt2/purify_arith.smt2
Testing z3test/regressions/smt2/3550.smt2
Testing z3test/regressions/smt2/nl32.smt2
Testing z3test/regressions/smt2/fp-to_ubv-24.smt2
Testing z3test/regressions/smt2/3327.smt2
Testing z3test/regressions/smt2/o6.smt2
Testing z3test/regressions/smt2/3154.smt2
Testing z3test/regressions/smt2/issue-3038.smt2
Testing z3test/regressions/smt2/t200.smt2
Testing z3test/regressions/smt2/fp-rem-16.smt2
Testing z3test/regressions/smt2/fp-conversions-7.smt2
Testing z3test/regressions/smt2/3688.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-12.smt2
Testing z3test/regressions/smt2/3569.smt2
Testing z3test/regressions/smt2/fp-to_sbv-10.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-3.smt2
Testing z3test/regressions/smt2/3633.smt2
Testing z3test/regressions/smt2/fp-uf-5.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-3.smt2
Testing z3test/regressions/smt2/3402.smt2
Testing z3test/regressions/smt2/3420.smt2
Testing z3test/regressions/smt2/4013.smt2
Testing z3test/regressions/smt2/3968.smt2
Testing z3test/regressions/smt2/macro-finder-cores.smt2
Testing z3test/regressions/smt2/cosine.smt2
Testing z3test/regressions/smt2/issue-1092.smt2
Testing z3test/regressions/smt2/3075.smt2
Testing z3test/regressions/smt2/3754.smt2
Testing z3test/regressions/smt2/fp-uf-9.smt2
Testing z3test/regressions/smt2/string-ops.smt2
Testing z3test/regressions/smt2/t168.smt2
Testing z3test/regressions/smt2/fp-conversions-41.smt2
Testing z3test/regressions/smt2/3620.smt2
Testing z3test/regressions/smt2/issue-3225.smt2
Testing z3test/regressions/smt2/z3.53.smt2
Testing z3test/regressions/smt2/nl12.smt2
Testing z3test/regressions/smt2/fp-array-1.smt2
Testing z3test/regressions/smt2/3973.smt2
Testing z3test/regressions/smt2/t181.smt2
Testing z3test/regressions/smt2/3607.smt2
Testing z3test/regressions/smt2/3680.smt2
Testing z3test/regressions/smt2/fp-to_ubv-2.smt2
Testing z3test/regressions/smt2/fp-conversions-37.smt2
Testing z3test/regressions/smt2/nl19.smt2
Testing z3test/regressions/smt2/t155.smt2
Testing z3test/regressions/smt2/2546.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-1.smt2
Testing z3test/regressions/smt2/fp-rem-2.smt2
Testing z3test/regressions/smt2/0xff.smt2
Testing z3test/regressions/smt2/nl29.smt2
Testing z3test/regressions/smt2/2456.smt2
Testing z3test/regressions/smt2/6670.smt2
Testing z3test/regressions/smt2/3521.smt2
Testing z3test/regressions/smt2/3101.smt2
Testing z3test/regressions/smt2/3554.smt2
Testing z3test/regressions/smt2/testfoldl.smt2
Testing z3test/regressions/smt2/6117-5.smt2
Testing z3test/regressions/smt2/t210.smt2
Testing z3test/regressions/smt2/3738.smt2
Testing z3test/regressions/smt2/3547.smt2
Testing z3test/regressions/smt2/fp-to_ubv-22.smt2
Testing z3test/regressions/smt2/fp-min-zero-zero-4.smt2
Testing z3test/regressions/smt2/nl38.smt2
Testing z3test/regressions/smt2/3752.smt2
Testing z3test/regressions/smt2/pb.smt2
Testing z3test/regressions/smt2/t216.smt2
Testing z3test/regressions/smt2/3209.smt2
Testing z3test/regressions/smt2/2908.smt2
Testing z3test/regressions/smt2/2549.smt2
Testing z3test/regressions/smt2/nl56.smt2
Testing z3test/regressions/smt2/4041.smt2
Testing z3test/regressions/smt2/z3.12.smt2
Testing z3test/regressions/smt2/t175.smt2
Testing z3test/regressions/smt2/2960.smt2
Testing z3test/regressions/smt2/5731.smt2
Testing z3test/regressions/smt2/z3name_bug.smt2
Testing z3test/regressions/smt2/2556.smt2
Testing z3test/regressions/smt2/2431.smt2
Testing z3test/regressions/smt2/ule.smt2
Testing z3test/regressions/smt2/4004.smt2
Testing z3test/regressions/smt2/fp-min-zero-zero-2.smt2
Testing z3test/regressions/smt2/t138.smt2
Testing z3test/regressions/smt2/tan2.smt2
Testing z3test/regressions/smt2/fp-rem-1.smt2
Testing z3test/regressions/smt2/3319.smt2
Testing z3test/regressions/smt2/3028.smt2
Testing z3test/regressions/smt2/fp-to_ubv-31.smt2
Testing z3test/regressions/smt2/3997.smt2
Testing z3test/regressions/smt2/nl25.smt2
Testing z3test/regressions/smt2/3106.smt2
Testing z3test/regressions/smt2/t113.smt2
Testing z3test/regressions/smt2/fp-array-3.smt2
Testing z3test/regressions/smt2/3137.smt2
Testing z3test/regressions/smt2/fp-rem-15.smt2
Testing z3test/regressions/smt2/fp-fma-9.smt2
Testing z3test/regressions/smt2/3933.smt2
Testing z3test/regressions/smt2/trig-spherical.smt2
Testing z3test/regressions/smt2/t148.smt2
Testing z3test/regressions/smt2/fp-fma-15.smt2
Testing z3test/regressions/smt2/t135.smt2
Testing z3test/regressions/smt2/fp-to_fp_simplifier.smt2
Testing z3test/regressions/smt2/string-eval.smt2
Testing z3test/regressions/smt2/3509.smt2
Testing z3test/regressions/smt2/fp-conversions-1.smt2
Testing z3test/regressions/smt2/t111.smt2
Testing z3test/regressions/smt2/nl43.smt2
Testing z3test/regressions/smt2/3891.smt2
Testing z3test/regressions/smt2/t101.smt2
Testing z3test/regressions/smt2/6116-float.smt2
Testing z3test/regressions/smt2/z3.40.smt2
Testing z3test/regressions/smt2/fp-fma-7.smt2
Testing z3test/regressions/smt2/fp-rem-13-2.smt2
Testing z3test/regressions/smt2/pat2.smt2
Testing z3test/regressions/smt2/t146.smt2
Testing z3test/regressions/smt2/fp-conversions-3.smt2
Testing z3test/regressions/smt2/fp-sorts-1.smt2
Testing z3test/regressions/smt2/t185.smt2
Testing z3test/regressions/smt2/4020.smt2
Testing z3test/regressions/smt2/3849.smt2
Testing z3test/regressions/smt2/t169.smt2
Testing z3test/regressions/smt2/nl40.smt2
Testing z3test/regressions/smt2/3238.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_3.smt2
Testing z3test/regressions/smt2/fp-array-7.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_1.smt2
Testing z3test/regressions/smt2/issue-790.smt2
Testing z3test/regressions/smt2/3246.smt2
Testing z3test/regressions/smt2/cosine6.smt2
Testing z3test/regressions/smt2/t190.smt2
Testing z3test/regressions/smt2/3574.smt2
Testing z3test/regressions/smt2/string7.smt2
Testing z3test/regressions/smt2/fp-conversions-19.smt2
Testing z3test/regressions/smt2/3625.smt2
Testing z3test/regressions/smt2/3695.smt2
Testing z3test/regressions/smt2/fp-to_fp-2.smt2
Testing z3test/regressions/smt2/core2.smt2
Testing z3test/regressions/smt2/3234.smt2
Testing z3test/regressions/smt2/2561.smt2
Testing z3test/regressions/smt2/nl3.smt2
Testing z3test/regressions/smt2/sine8.smt2
Testing z3test/regressions/smt2/3715.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-7.smt2
Testing z3test/regressions/smt2/nl37.smt2
Testing z3test/regressions/smt2/issue-1665.smt2
Testing z3test/regressions/smt2/lia2.smt2
Testing z3test/regressions/smt2/fp-uf-4.smt2
Testing z3test/regressions/smt2/1846.smt2
Testing z3test/regressions/smt2/bad_set_logic.smt2
Testing z3test/regressions/smt2/fp-to_fp-8.smt2
Testing z3test/regressions/smt2/fp-conversions-28.smt2
Testing z3test/regressions/smt2/nl10.smt2
Testing z3test/regressions/smt2/coercions.smt2
Testing z3test/regressions/smt2/fp-to_ubv-29.smt2
Testing z3test/regressions/smt2/fp-to_sbv-11.smt2
Testing z3test/regressions/smt2/3929.smt2
Testing z3test/regressions/smt2/nl54.smt2
Testing z3test/regressions/smt2/sine6.smt2
Testing z3test/regressions/smt2/2560.smt2
Testing z3test/regressions/smt2/segfault2.smt2
Testing z3test/regressions/smt2/fp-roundToIntegral-6.smt2
Testing z3test/regressions/smt2/t136.smt2
Testing z3test/regressions/smt2/consequences.smt2
Testing z3test/regressions/smt2/t112.smt2
Testing z3test/regressions/smt2/fp-min-zero-zero-5.smt2
Testing z3test/regressions/smt2/o3.smt2
Testing z3test/regressions/smt2/3591.smt2
Testing z3test/regressions/smt2/3010.smt2
Testing z3test/regressions/smt2/3123.smt2
Testing z3test/regressions/smt2/t170.smt2
Testing z3test/regressions/smt2/3104.smt2
Testing z3test/regressions/smt2/2343.smt2
Testing z3test/regressions/smt2/3959.smt2
Testing z3test/regressions/smt2/3689.smt2
Testing z3test/regressions/smt2/2912.smt2
Testing z3test/regressions/smt2/nl16.smt2
Testing z3test/regressions/smt2/elim-uncnstr-tactic.smt2
Testing z3test/regressions/smt2/2852.smt2
Testing z3test/regressions/smt2/token3.smt2
Testing z3test/regressions/smt2/3458.smt2
Testing z3test/regressions/smt2/error.smt2
Testing z3test/regressions/smt2/t194.smt2
Testing z3test/regressions/smt2/3133.smt2
Testing z3test/regressions/smt2/fp-conversions-11.smt2
Testing z3test/regressions/smt2/3417.smt2
Testing z3test/regressions/smt2/t199.smt2
Testing z3test/regressions/smt2/5728.smt2
Testing z3test/regressions/smt2/dejan_bug.smt2
Testing z3test/regressions/smt2/t173.smt2
Testing z3test/regressions/smt2/t150.smt2
Testing z3test/regressions/smt2/t130.smt2
Testing z3test/regressions/smt2/t205.smt2
Testing z3test/regressions/smt2/issue-1366.smt2
Testing z3test/regressions/smt2/t180.smt2
Testing z3test/regressions/smt2/fp-model_evaluator_7.smt2
Testing z3test/regressions/smt2/6553-2-simp.smt2
Testing z3test/regressions/smt2/t158.smt2
Testing z3test/regressions/smt2/3524.smt2
Testing z3test/regressions/smt2/t207.smt2
Testing z3test/regressions/smt2/3587.smt2
Testing z3test/regressions/smt2/3748.smt2
Testing z3test/regressions/smt2/fp-sqrt-3.smt2
Testing z3test/regressions/smt2/fp-to_fp-3.smt2
Testing z3test/regressions/smt2/cosine4.smt2
Testing z3test/regressions/smt2/nl30.smt2
Testing z3test/regressions/smt2/fp-rem-9.smt2
Testing z3test/regressions/smt2/mut_rec4sdk_output1.smt2
Testing z3test/regressions/smt2/3113.smt2
Testing z3test/regressions/smt2/fp-to_sbv-3.smt2
Testing z3test/regressions/smt2/nl57.smt2
Testing z3test/regressions/smt2/3124.smt2
Testing z3test/regressions/smt2/4015.smt2
Testing z3test/regressions/smt2/z3.6.smt2
Testing z3test/regressions/smt2/3299.smt2
Testing z3test/regressions/smt2/3518.smt2
Testing z3test/regressions/smt2/fp-ninf.smt2
Testing z3test/regressions/smt2/2548.smt2
Testing z3test/regressions/smt2/fp-conversions-9.smt2
Testing z3test/regressions/smt2/3529.smt2
Testing z3test/regressions/smt2/3632.smt2
Testing z3test/regressions/smt2/nl26.smt2
Testing z3test/regressions/smt2/3127.smt2
Testing z3test/regressions/smt2/3573.smt2
Testing z3test/regressions/smt2/3215.smt2
Testing z3test/regressions/smt2/fp-conversions-29.smt2
Testing z3test/regressions/smt2/3241.smt2
Testing z3test/regressions/smt2/arith_bug.smt2
Testing z3test/regressions/smt2/3735.smt2
Testing z3test/regressions/smt2/asin.smt2
Testing z3test/regressions/smt2/issue-1846.smt2
Testing z3test/regressions/smt2/4841-1.smt2
Testing z3test/regressions/smt2/fp-conversions-35.smt2
Testing z3test/regressions/smt2/z3.15.smt2
Testing z3test/regressions/smt2/2520.smt2
Testing z3test/regressions/smt2/3492.smt2
Testing z3test/regressions/smt2/fp-conversions-14.smt2
Testing z3test/regressions/smt2/blinking_query.smt2
Testing z3test/regressions/smt2/b1.smt2
Testing z3test/regressions/smt2/t115.smt2
Testing z3test/regressions/smt2/sine2.smt2
Testing z3test/regressions/smt2/fp-min-zero-zero-3.smt2
Testing z3test/regressions/smt2/sine4.smt2
Testing z3test/regressions/smt2/fp-abs-2.smt2
Testing z3test/regressions/smt2/cosine7.smt2
Testing z3test/regressions/smt2/627.smt2
Testing z3test/regressions/smt2/t213.smt2
Testing z3test/regressions/smt2/4033.smt2
Testing z3test/regressions/smt2/nl14.smt2
Testing z3test/regressions/smt2/6336.smt2
Testing z3test/regressions/smt2/power-zero-safe.smt2
Testing z3test/regressions/smt2/nl7.smt2
Testing z3test/regressions/smt2/fp-to_sbv-9.smt2
Testing z3test/regressions/smt2/3917.smt2
Testing z3test/regressions/smt2/3111.smt2
Testing z3test/regressions/smt2/4018.smt2
Testing z3test/regressions/smt2/dt_ayrat_4.smt2
Testing z3test/regressions/smt2/fp-add-sub.smt2
Testing z3test/regressions/smt2/fp-to_sbv-4.smt2
Testing z3test/regressions/smt2/2420.smt2
Testing z3test/regressions/smt2/mev_array.smt2
Testing z3test/regressions/smt2/fp-datatype_with_float-4.smt2
Testing z3test/regressions/smt2/2838.smt2
Testing z3test/regressions/smt2/sub.smt2
Testing z3test/regressions/smt2/issue-1729.smt2
Testing z3test/regressions/smt2/fp-conversions-25.smt2
Testing z3test/regressions/smt2/testmapi.smt2
Testing z3test/regressions/smt2/fp-rem-17.smt2
Testing z3test/regressions/smt2/arith_bug2.smt2
Testing z3test/regressions/smt2/fp-neg.smt2
Testing z3test/regressions/smt2/3362.smt2
Testing z3test/regressions/smt2/issue-1608.smt2
Testing z3test/regressions/smt2/issue-1566.smt2
Testing z3test/regressions/smt2/fp-conversions-22.smt2
Testing z3test/regressions/smt2/z3.30.smt2
Testing z3test/regressions/smt2/2567.smt2
Testing z3test/regressions/smt2/3532.smt2
Testing z3test/regressions/smt2/model_compact_bug.smt2
Testing z3test/regressions/smt2/string6.smt2
Testing z3test/regressions/smt2/core.smt2
Testing z3test/regressions/smt2/fp-rem-13-3.smt2
Testing z3test/regressions/smt2/3842.smt2
Testing z3test/regressions/smt2/fp-mul-2.smt2
Testing z3test/regressions/smt2/nl44.smt2
Testing z3test/regressions/smt2/fp-datatype_with_float-1.smt2
Testing z3test/regressions/smt2/fp-pinf.smt2
Testing z3test/regressions/smt2/fp-eq-2.smt2
Testing z3test/regressions/smt2/2868.smt2
Testing z3test/regressions/smt2/3953.smt2
Testing z3test/regressions/smt2/nl18.smt2
Testing z3test/regressions/smt2/z3.52.smt2
Testing z3test/regressions/smt2/segfaults2_minimal.smt2
Testing z3test/regressions/smt2/3153.smt2
Testing z3test/regressions/smt2/2531.smt2
Testing z3test/regressions/smt2/2902.smt2
Testing z3test/regressions/smt2/3294.smt2
Testing z3test/regressions/smt2/fp-to_ubv-13.smt2
Testing z3test/regressions/smt2/fp-div-2.smt2
Testing z3test/regressions/smt2/issue-1086.smt2
Testing z3test/regressions/smt2/t195.smt2
Testing z3test/regressions/smt2/fp-nzero.smt2
Testing z3test/regressions/smt2/rec.smt2
Testing z3test/regressions/smt2/fp-rem-13-1.smt2
Testing z3test/regressions/smt2/nl22.smt2
Testing z3test/regressions/smt2/fp-to_sbv-15.smt2
Testing z3test/regressions/smt2/3244.smt2
Testing z3test/regressions/smt2/o7.smt2
Testing z3test/regressions/smt2/3570.smt2
Testing z3test/regressions/smt2/fp-array-4.smt2
Testing z3test/regressions/smt2/fp-rem-7.smt2
Testing z3test/regressions/smt2/string12.smt2
Testing z3test/regressions/smt2/fp-to_ubv-17.smt2
Testing z3test/regressions/smt2/re.smt2
Testing z3test/regressions/smt2/fp-to_ubv-12.smt2
Testing z3test/regressions/smt2/nl-simp.smt2
Testing z3test/regressions/smt2/fp-to_fp_unsigned-8.smt2
Testing z3test/regressions/smt2/t131.smt2
Testing z3test/regressions/smt2/3733.smt2
Testing z3test/regressions/smt2/2938.smt2
Testing z3test/regressions/smt2/fp-add-1.smt2
Testing z3test/regressions/smt2/nl5.smt2
Testing z3test/regressions/smt2/div.smt2
Testing z3test/regressions/smt2/intervalDownDivide.smt2
Testing z3test/regressions/smt2/fp-rem-6.smt2
Testing z3test/regressions/smt2/issue-1816.smt2
Testing z3test/regressions/smt2/nl34.smt2
Testing z3test/regressions/smt2/fp-to_fp-6.smt2
Testing z3test/regressions/smt2/string-literals.smt2
Testing z3test/regressions/smt2/2877.smt2
Testing z3test/regressions/smt2/3775.smt2
Testing z3test/regressions/smt2/memset.smt2
Testing z3test/regressions/smt2/3503.smt2
Testing z3test/regressions/smt2/3986.smt2
Testing z3test/regressions/smt2/3751.smt2
Testing z3test/regressions/smt2/fp-fma-19.smt2
Testing z3test/regressions/smt2/3576.smt2
Testing z3test/regressions/smt2/3042.smt2
Testing z3test/regressions/smt2/3260.smt2
Testing z3test/regressions/smt2/fp-array-6.smt2
Testing z3test/regressions/smt2/6117-6.smt2
Testing z3test/regressions/smt2/6079-1.smt2
Testing z3test/regressions/smt2/fp-to_sbv-8.smt2
Testing z3test/regressions/smt2/fp-conversions-30.smt2
Testing z3test/regressions/smt2/fp-conversions-39.smt2
Testing z3test/regressions/smt2/6116.smt2
Testing z3test/regressions/smt2/2879.smt2
Testing z3test/regressions/smt2/fp-uf-7.smt2
Testing z3test/regressions/smt2/unsatcore.smt2
Testing z3test/regressions/smt2/3984.smt2
Testing z3test/regressions/smt2/fp-to_ubv-3.smt2
Testing z3test/regressions/smt2/3081.smt2
Testing z3test/regressions/smt2/3324.smt2
Testing z3test/regressions/smt2/t191.smt2
Testing z3test/regressions/smt2/fp-to_sbv-5.smt2
Testing z3test/regressions/smt2/3889.smt2
Testing z3test/regressions/smt2/string-simplify.smt2
Testing z3test/regressions/smt2/6593.smt2
Testing z3test/regressions/smt2/fp-rounding_mode-3.smt2
Testing z3test/regressions/smt2/cosine5.smt2
Testing z3test/regressions/smt2/fp-conversions-15.smt2
Testing z3test/regressions/smt2/issue-3028.smt2
Testing z3test/regressions/smt2/sine3.smt2
Testing z3test/regressions/smt2/fp-to_ubv-27.smt2
Testing z3test/regressions/smt2/t219.smt2
Testing z3test/regressions/smt2/root-pre.smt2
Testing z3test/regressions/smt2/6054.smt2
Testing z3test/regressions/smt2/fp-div-3.smt2
Testing z3test/regressions/smt2/2889.smt2
Testing z3test/regressions/smt2/t197.smt2
Testing z3test/regressions/smt2/fp-quantifiers-2.smt2
Testing z3test/regressions/smt2/3523.smt2
Testing z3test/regressions/smt2/fp-rem-12.smt2
Testing z3test/regressions/smt2/nl2.smt2
Testing z3test/regressions/smt2/3713.smt2
Testing z3test/regressions/smt2/z3.5.smt2
Testing z3test/regressions/smt2/nl23.smt2
Testing z3test/regressions/smt2/fp-rem-10.smt2
Testing z3test/regressions/smt2/t215.smt2
Testing z3test/regressions/smt2/issue-1733.smt2
Testing z3test/regressions/smt2/nl11.smt2
Testing z3test/regressions/smt2/3029.smt2
Testing z3test/regressions/smt2/fp-rem-8.smt2
Testing z3test/regressions/smt2/fp-fma-16.smt2
Testing z3test/regressions/smt2/3934.smt2
Testing z3test/regressions/smt2/cosine2.smt2
Testing z3test/regressions/smt2/fp-conversions-21.smt2
Testing z3test/regressions/smt2/3141.smt2
Regression tests completed
Running coverage-specific tests
Testing z3test/coverage/cpp/cov10.cpp
Testing z3test/coverage/cpp/cov7.cpp
Testing z3test/coverage/cpp/cov4.cpp
Testing z3test/coverage/cpp/cov1.cpp
Testing z3test/coverage/cpp/cov5.cpp
Testing z3test/coverage/cpp/cov8.cpp
Testing z3test/coverage/cpp/cov3.cpp
Testing z3test/coverage/cpp/cov9.cpp
Coverage tests completed
Running built examples for additional coverage
de-Morgan example
(declare-fun y () Bool)
(declare-fun x () Bool)
(assert (not (= (not (and x y)) (or (not x) (not y)))))

; 
(set-info :status unknown)
(declare-fun y () Bool)
(declare-fun x () Bool)
(assert
 (let (($x9 (or (not x) (not y))))
(let (($x12 (= (not (and x y)) $x9)))
(not $x12))))
(check-sat)

de-Morgan is valid

find_model_example1
sat
(define-fun y () Int
  3)
(define-fun x () Int
  1)
y = 3
x = 1
x + y + 1 = 5

prove_example1
conjecture 1
(=> (= x y) (= (g x) (g y)))
proved
conjecture 2
(=> (= x y) (= (g (g x)) (g y)))
failed to prove
counterexample:
(define-fun y () Int
  0)
(define-fun x () Int
  0)
(define-fun g ((x!0 Int)) Int
  (ite (= x!0 1) 2
    1))
g(g(x)) = 2
g(y)    = 1

prove_example1
conjecture 1:
(let ((a!1 (distinct (g (- (g x) (g y))) (g z))))
  (=> (and a!1 (<= (+ x z) y) (<= y x)) (< z 0)))
proved
conjecture 2:
(let ((a!1 (distinct (g (- (g x) (g y))) (g z))))
  (=> (and a!1 (<= (+ x z) y) (<= y x)) (< z (- 1))))
failed to prove
counterexample:
(define-fun x () Int
  (- 1))
(define-fun z () Int
  (- 1))
(define-fun y () Int
  (- 1))
(define-fun g ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    4))

nonlinear example 1
sat
(define-fun y () Real
  (- 1.0))
(define-fun x () Real
  0.0)
(define-fun z () Real
  (/ 1.0 2.0))
model in decimal notation
(define-fun y () Real
  (- 1.0))
(define-fun x () Real
  0.0)
(define-fun z () Real
  0.5)
model using 50 decimal places
(define-fun y () Real
  (- 1.0))
(define-fun x () Real
  0.0)
(define-fun z () Real
  0.5)

bitvector example 1
conjecture:
(= (bvsle (bvsub x #x0000000a) #x00000000) (bvsle x #x0000000a))
failed to prove
counterexample:
(define-fun x () (_ BitVec 32)
  #x80000007)
conjecture:
(= (bvule (bvsub x #x0000000a) #x00000000) (bvule x #x0000000a))
failed to prove
counterexample:
(define-fun x () (_ BitVec 32)
  #x00000004)
conjecture:
(=> (= (concat x y) (concat y x)) (= x y))
proved

bitvector example 2
(declare-fun y () (_ BitVec 32))
(declare-fun x () (_ BitVec 32))
(assert (= (bvsub (bvxor x y) #x00000067) (bvmul x y)))

sat
(define-fun y () (_ BitVec 32)
  #x7821741b)
(define-fun x () (_ BitVec 32)
  #x0e05044b)

capi example
r: (bvsrem x y)

eval example 1
sat
Model:
(define-fun x () Int
  3)
(define-fun y () Int
  4)
x+y = 7

two contexts example 1
(+ x 1)

error example
failed: invalid argument
failed: index out of bounds

numeral example
(/ 1.0 2.0) (/ 1.0 2.0) (/ 1.0 2.0)
conjecture:
(and (= (/ 1.0 2.0) (/ 1.0 2.0)) (= (/ 1.0 2.0) (/ 1.0 2.0)))
proved
(- (/ 1.0 3.0)) (- (/ 3333333333333333333333333333333333.0
      10000000000000000000000000000000000.0))
conjecture:
(distinct (- (/ 1.0 3.0))
          (- (/ 3333333333333333333333333333333333.0
                10000000000000000000000000000000000.0)))
proved

if-then-else example
term: (ite false 1 0)

if-then-else example2
(> (ite b x y) 0)

quantifier example
(declare-fun f (Int Int) Int)
(declare-fun a () Int)
(assert (forall ((x Int) (y Int)) (! (>= (f x y) 0) :weight 0)))
(assert (< (f a a) a))

sat
(define-fun a () Int
  1)
(define-fun f ((x!0 Int) (x!1 Int)) Int
  0)
unsat

unsat core example1
unsat
(ast-vector
  p1
  p2)
size: 2
p1
p2
sat

unsat core example 2
unsat
(ast-vector
  p1)
size: 1
p1
F num. args (before simplify): 2
F num. args (after simplify):  4
Creating answer literal q0 for (not (<= x 10))
Creating answer literal q1 for (not (<= y x))
Creating answer literal q2 for (not (<= 5 y))
Creating answer literal q3 for (not (<= y 0))
unsat
(ast-vector
  q0
  q1
  q2)
size: 3
q0
q1
q2

unsat core example 3
unsat
(ast-vector
  p1
  p3)

tactic example 1
(goal
  (> x 0.0)
  (> y 0.0)
  (= x (+ y 2.0)))
(goals
(goal
  (not (<= x 0.0))
  (not (<= x 2.0)))
)

tactic example 2
subgoal 0
(goal
  (< x 0.0)
  (= x (+ y 1.0))
  (< y 0.0))
subgoal 1
(goal
  (> x 0.0)
  (= x (+ y 1.0))
  (< y 0.0))

tactic example 3
(goals
(goal
  (= x 0.0)
  (= y 0.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 0.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 1.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 1.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 0.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 0.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 1.0)
  (= z 0.0)
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 1.0)
  (= z 1.0)
  (> (+ x y z) 2.0))
)
(goals
(goal
  (= x 0.0)
  (= y 0.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
(goal
  (= x 0.0)
  (= y 1.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 0.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
(goal
  (= x 1.0)
  (= y 1.0)
  (or (= z 0.0) (= z 1.0))
  (> (+ x y z) 2.0))
)
(goals
(goal)
)

tactic example 4
sat
(define-fun x () (_ BitVec 16)
  #x0500)
(define-fun y () (_ BitVec 16)
  #x600d)
x*32 + y = #x000d
x & y    = #x0000

tactic example 5
sat
(define-fun x () Int
  0)
(define-fun y () Int
  (- 2))

tactic example 6
sat
(define-fun x () Int
  2)
(define-fun z () Int
  7)
(define-fun y () Int
  1)
unknown

tactic example 7
(goals
(goal
  (not (<= y 13))
  (not (<= z y)))
)
sat
model for subgoal:
(define-fun y () Int
  14)
(define-fun z () Int
  15)
model for original goal:
(define-fun z () Int
  15)
(define-fun y () Int
  14)
(define-fun x () Int
  11)

tactic example 8
num-consts: 3
tactic failed...
trying again...
(goals
(goal
  (> (+ x y) 0))
)

tactic example 9
(goals
(goal
  (<= (* (+ y (* (- 1) x)) (+ y x)) 0))
)
(goals
(goal
  (>= (+ (* 2 x) y z) 0)
  (>= (+ (* x x) (* (- 1) y y)) 0))
)

tactic example using quantifier elimination
(forall ((x Int)) (! (=> (<= x a) (< x b)) :weight 0))
sat
(define-fun b () Int
  1)
(define-fun a () Int
  0)

visit example
application of x: x
application of *: (* x x)
application of +: (+ (* x x) (* x x))
application of y: y
application of *: (* y y)
application of -: (- (+ (* x x) (* x x)) (* y y))
application of Int: 0
application of >=: (>= (- (+ (* x x) (* x x)) (* y y)) 0)

numeral example
(/ 1.0 3.0) is 0.333333

incremental example1
sat
unsat

incremental example2
sat
unsat
sat
(declare-fun k!0 () Bool)
(declare-fun x () Int)
(declare-fun k!1 () Bool)
(assert (> x 0))
(model-del k!0)
(model-add x () Int (ite k!0 0 (+ 0 1)))
(model-del k!1)
(model-add k!0 () Bool (not k!1))
(pb2bv-model-converter)
(model-add k!1 () Bool true)


incremental example3
sat
unsat
sat
sat

enumeration sort example
1: (and (= x a) (= x b))
2: false

tuple example
(declare-fun pair2 (Int pair) pair2)

datatype example
ilist
(declare-fun nil () ilist) (declare-fun is (ilist) Bool) (ast-vector)
(declare-fun cons (Int ilist) ilist) (declare-fun is (ilist) Bool) (ast-vector
  (declare-fun hd (ilist) Int)
  (declare-fun tl (ilist) ilist))
(ast-vector
  tree
  tree_list)
(declare-fun tnil () tree) (declare-fun is (tree) Bool) (ast-vector)
(declare-fun tnode (tree_list tree_list) tree) (declare-fun is (tree) Bool) (ast-vector
  (declare-fun left (tree) tree_list)
  (declare-fun right (tree) tree_list))
(declare-fun lnil () tree_list) (declare-fun is (tree_list) Bool) (ast-vector)
(declare-fun lcons (Int tree) tree_list) (declare-fun is (tree_list) Bool) (ast-vector
  (declare-fun hd (tree_list) Int)
  (declare-fun tail (tree_list) tree))

expr_vector example
(declare-fun x_0 () Int)
(declare-fun x_1 () Int)
(declare-fun x_2 () Int)
(declare-fun x_3 () Int)
(declare-fun x_4 () Int)
(declare-fun x_5 () Int)
(declare-fun x_6 () Int)
(declare-fun x_7 () Int)
(declare-fun x_8 () Int)
(declare-fun x_9 () Int)
(assert (>= x_0 1))
(assert (>= x_1 1))
(assert (>= x_2 1))
(assert (>= x_3 1))
(assert (>= x_4 1))
(assert (>= x_5 1))
(assert (>= x_6 1))
(assert (>= x_7 1))
(assert (>= x_8 1))
(assert (>= x_9 1))

solving...
sat
solution
(define-fun x_7 () Int
  1)
(define-fun x_5 () Int
  1)
(define-fun x_3 () Int
  1)
(define-fun x_1 () Int
  1)
(define-fun x_8 () Int
  1)
(define-fun x_6 () Int
  1)
(define-fun x_4 () Int
  1)
(define-fun x_2 () Int
  1)
(define-fun x_9 () Int
  1)
(define-fun x_0 () Int
  1)
exists expr_vector example
(exists ((x_0 Int)
         (x_1 Int)
         (x_2 Int)
         (x_3 Int)
         (x_4 Int)
         (x_5 Int)
         (x_6 Int)
         (x_7 Int)
         (x_8 Int)
         (x_9 Int))
  (! (and true
          (>= x_0 0)
          (>= x_1 0)
          (>= x_2 0)
          (>= x_3 0)
          (>= x_4 0)
          (>= x_5 0)
          (>= x_6 0)
          (>= x_7 0)
          (>= x_8 0)
          (>= x_9 0))
     :weight 0))

substitute example
(or (= x 2) (= x 1))
(or (= x 3) (= x 1))

x: 4 y: 7
x: 5 y: 6
x: 3 y: 8
x: 1 y: 10
x: 2 y: 9
x: 8 y: 3
x: 9 y: 2
x: 7 y: 4
x: 10 y: 1
x: 6 y: 5

(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun z () Int)
(assert (and (>= 10 x) (>= x 0)))
(assert (and (>= 10 y) (>= y 0)))
(assert (<= (+ x y) 11))
(assert (= (+ x z) 2))
(minimize (- x))
(minimize (- y))
(minimize z)
(check-sat)


extract example
((_ extract 21 10) x) 21 10

parameter description example
(ite_extra_rules, flat, flat_and_or, sort_disjunctions, elim_and, elim_ite, local_ctx, local_ctx_limit, blast_distinct, blast_distinct_threshold, som, som_blowup, hoist_mul, hoist_ite, algebraic_number_evaluator, mul_to_power, expand_power, expand_tan, max_degree, sort_sums, gcd_rounding, arith_lhs, arith_ineq_lhs, elim_to_real, push_to_real, eq2ineq, elim_rem, split_concat_eq, bit2bool, blast_eq_value, elim_sign_ext, hi_div0, mul2concat, bv_sort_ac, bv_extract_prop, bv_not_simpl, bv_ite2id, bv_le_extra, bv_le2extract, expand_select_store, blast_select_store, expand_nested_stores, expand_select_ite, expand_store_eq, sort_store, max_memory, max_steps, push_ite_arith, push_ite_bv, pull_cheap_ite, bv_ineq_consistency_test_max, cache_all, enable_der, rewrite_patterns, ignore_patterns_on_ground_qbody)
ite_extra_rules: extra ite simplifications, these additional simplifications may reduce size locally but increase globally kind: bool
flat: create nary applications for +,*,bvadd,bvmul,bvand,bvor,bvxor kind: bool
flat_and_or: create nary applications for and,or kind: bool
sort_disjunctions: sort subterms in disjunctions kind: bool
elim_and: conjunctions are rewritten using negation and disjunctions kind: bool
elim_ite: eliminate ite in favor of and/or kind: bool
local_ctx: perform local (i.e., cheap) context simplifications kind: bool
local_ctx_limit: limit for applying local context simplifier kind: uint
blast_distinct: expand a distinct predicate into a quadratic number of disequalities kind: bool
blast_distinct_threshold: when blast_distinct is true, only distinct expressions with less than this number of arguments are blasted kind: uint
som: put polynomials in sum-of-monomials form kind: bool
som_blowup: maximum increase of monomials generated when putting a polynomial in sum-of-monomials normal form kind: uint
hoist_mul: hoist multiplication over summation to minimize number of multiplications kind: bool
hoist_ite: hoist shared summands under ite expressions kind: bool
algebraic_number_evaluator: simplify/evaluate expressions containing (algebraic) irrational numbers. kind: bool
mul_to_power: collpase (* t ... t) into (^ t k), it is ignored if expand_power is true. kind: bool
expand_power: expand (^ t k) into (* t ... t) if  1 < k <= max_degree. kind: bool
expand_tan: replace (tan x) with (/ (sin x) (cos x)). kind: bool
max_degree: max degree of algebraic numbers (and power operators) processed by simplifier. kind: uint
sort_sums: sort the arguments of + application. kind: bool
gcd_rounding: use gcd rounding on integer arithmetic atoms. kind: bool
arith_lhs: all monomials are moved to the left-hand-side, and the right-hand-side is just a constant. kind: bool
arith_ineq_lhs: rewrite inequalities so that right-hand-side is a constant. kind: bool
elim_to_real: eliminate to_real from arithmetic predicates that contain only integers. kind: bool
push_to_real: distribute to_real over * and +. kind: bool
eq2ineq: expand equalities into two inequalities kind: bool
elim_rem: replace (rem x y) with (ite (>= y 0) (mod x y) (- (mod x y))). kind: bool
split_concat_eq: split equalities of the form (= (concat t1 t2) t3) kind: bool
bit2bool: try to convert bit-vector terms of size 1 into Boolean terms kind: bool
blast_eq_value: blast (some) Bit-vector equalities into bits kind: bool
elim_sign_ext: expand sign-ext operator using concat and extract kind: bool
hi_div0: use the 'hardware interpretation' for division by zero (for bit-vector terms) kind: bool
mul2concat: replace multiplication by a power of two into a concatenation kind: bool
bv_sort_ac: sort the arguments of all AC operators kind: bool
bv_extract_prop: attempt to partially propagate extraction inwards kind: bool
bv_not_simpl: apply simplifications for bvnot kind: bool
bv_ite2id: rewrite ite that can be simplified to identity kind: bool
bv_le_extra: additional bu_(u/s)le simplifications kind: bool
bv_le2extract: disassemble bvule to extract kind: bool
expand_select_store: conservatively replace a (select (store ...) ...) term by an if-then-else term kind: bool
blast_select_store: eagerly replace all (select (store ..) ..) term by an if-then-else term kind: bool
expand_nested_stores: replace nested stores by a lambda expression kind: bool
expand_select_ite: expand select over ite expressions kind: bool
expand_store_eq: reduce (store ...) = (store ...) with a common base into selects kind: bool
sort_store: sort nested stores when the indices are known to be different kind: bool
max_memory: maximum amount of memory in megabytes kind: uint
max_steps: maximum number of steps kind: uint
push_ite_arith: push if-then-else over arithmetic terms. kind: bool
push_ite_bv: push if-then-else over bit-vector terms. kind: bool
pull_cheap_ite: pull if-then-else terms when cheap. kind: bool
bv_ineq_consistency_test_max: max size of conjunctions on which to perform consistency test based on inequalities on bitvectors. kind: uint
cache_all: cache all intermediate results. kind: bool
enable_der: enable destructive equality resolution to quantifiers. kind: bool
rewrite_patterns: rewrite patterns. kind: bool
ignore_patterns_on_ground_qbody: ignores patterns on quantifiers that don't mention their bound variables. kind: bool

sudoku example
sat
(declare-fun x_0_4 () Int)
(declare-fun x_4_5 () Int)
(declare-fun x_6_6 () Int)
(declare-fun x_1_8 () Int)
(declare-fun x_4_1 () Int)
(declare-fun x_0_5 () Int)
(declare-fun x_7_5 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_5_2 () Int)
(declare-fun x_4_3 () Int)
(declare-fun x_4_7 () Int)
(declare-fun x_0_7 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_6_1 () Int)
(declare-fun x_1_4 () Int)
(declare-fun x_7_4 () Int)
(declare-fun x_8_4 () Int)
(declare-fun x_3_8 () Int)
(declare-fun x_2_7 () Int)
(declare-fun x_6_7 () Int)
(declare-fun x_1_3 () Int)
(declare-fun x_3_6 () Int)
(declare-fun x_8_1 () Int)
(declare-fun x_8_3 () Int)
(declare-fun x_5_0 () Int)
(declare-fun x_7_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_0_3 () Int)
(declare-fun x_0_6 () Int)
(declare-fun x_0_8 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_1_5 () Int)
(declare-fun x_1_6 () Int)
(declare-fun x_1_7 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_2_3 () Int)
(declare-fun x_2_4 () Int)
(declare-fun x_2_5 () Int)
(declare-fun x_2_6 () Int)
(declare-fun x_2_8 () Int)
(declare-fun x_3_0 () Int)
(declare-fun x_3_1 () Int)
(declare-fun x_3_2 () Int)
(declare-fun x_3_3 () Int)
(declare-fun x_3_4 () Int)
(declare-fun x_3_5 () Int)
(declare-fun x_3_7 () Int)
(declare-fun x_4_0 () Int)
(declare-fun x_4_2 () Int)
(declare-fun x_4_4 () Int)
(declare-fun x_4_6 () Int)
(declare-fun x_4_8 () Int)
(declare-fun x_5_1 () Int)
(declare-fun x_5_3 () Int)
(declare-fun x_5_4 () Int)
(declare-fun x_5_5 () Int)
(declare-fun x_5_6 () Int)
(declare-fun x_5_7 () Int)
(declare-fun x_5_8 () Int)
(declare-fun x_6_0 () Int)
(declare-fun x_6_2 () Int)
(declare-fun x_6_3 () Int)
(declare-fun x_6_4 () Int)
(declare-fun x_6_5 () Int)
(declare-fun x_6_8 () Int)
(declare-fun x_7_1 () Int)
(declare-fun x_7_2 () Int)
(declare-fun x_7_3 () Int)
(declare-fun x_7_6 () Int)
(declare-fun x_7_7 () Int)
(declare-fun x_7_8 () Int)
(declare-fun x_8_0 () Int)
(declare-fun x_8_2 () Int)
(declare-fun x_8_5 () Int)
(declare-fun x_8_6 () Int)
(declare-fun x_8_7 () Int)
(declare-fun x_8_8 () Int)
(assert (and (>= x_0_0 1) (<= x_0_0 9)))
(assert (and (>= x_0_1 1) (<= x_0_1 9)))
(assert (and (>= x_0_2 1) (<= x_0_2 9)))
(assert (and (>= x_0_3 1) (<= x_0_3 9)))
(assert (and (>= x_0_4 1) (<= x_0_4 9)))
(assert (and (>= x_0_5 1) (<= x_0_5 9)))
(assert (and (>= x_0_6 1) (<= x_0_6 9)))
(assert (and (>= x_0_7 1) (<= x_0_7 9)))
(assert (and (>= x_0_8 1) (<= x_0_8 9)))
(assert (and (>= x_1_0 1) (<= x_1_0 9)))
(assert (and (>= x_1_1 1) (<= x_1_1 9)))
(assert (and (>= x_1_2 1) (<= x_1_2 9)))
(assert (and (>= x_1_3 1) (<= x_1_3 9)))
(assert (and (>= x_1_4 1) (<= x_1_4 9)))
(assert (and (>= x_1_5 1) (<= x_1_5 9)))
(assert (and (>= x_1_6 1) (<= x_1_6 9)))
(assert (and (>= x_1_7 1) (<= x_1_7 9)))
(assert (and (>= x_1_8 1) (<= x_1_8 9)))
(assert (and (>= x_2_0 1) (<= x_2_0 9)))
(assert (and (>= x_2_1 1) (<= x_2_1 9)))
(assert (and (>= x_2_2 1) (<= x_2_2 9)))
(assert (and (>= x_2_3 1) (<= x_2_3 9)))
(assert (and (>= x_2_4 1) (<= x_2_4 9)))
(assert (and (>= x_2_5 1) (<= x_2_5 9)))
(assert (and (>= x_2_6 1) (<= x_2_6 9)))
(assert (and (>= x_2_7 1) (<= x_2_7 9)))
(assert (and (>= x_2_8 1) (<= x_2_8 9)))
(assert (and (>= x_3_0 1) (<= x_3_0 9)))
(assert (and (>= x_3_1 1) (<= x_3_1 9)))
(assert (and (>= x_3_2 1) (<= x_3_2 9)))
(assert (and (>= x_3_3 1) (<= x_3_3 9)))
(assert (and (>= x_3_4 1) (<= x_3_4 9)))
(assert (and (>= x_3_5 1) (<= x_3_5 9)))
(assert (and (>= x_3_6 1) (<= x_3_6 9)))
(assert (and (>= x_3_7 1) (<= x_3_7 9)))
(assert (and (>= x_3_8 1) (<= x_3_8 9)))
(assert (and (>= x_4_0 1) (<= x_4_0 9)))
(assert (and (>= x_4_1 1) (<= x_4_1 9)))
(assert (and (>= x_4_2 1) (<= x_4_2 9)))
(assert (and (>= x_4_3 1) (<= x_4_3 9)))
(assert (and (>= x_4_4 1) (<= x_4_4 9)))
(assert (and (>= x_4_5 1) (<= x_4_5 9)))
(assert (and (>= x_4_6 1) (<= x_4_6 9)))
(assert (and (>= x_4_7 1) (<= x_4_7 9)))
(assert (and (>= x_4_8 1) (<= x_4_8 9)))
(assert (and (>= x_5_0 1) (<= x_5_0 9)))
(assert (and (>= x_5_1 1) (<= x_5_1 9)))
(assert (and (>= x_5_2 1) (<= x_5_2 9)))
(assert (and (>= x_5_3 1) (<= x_5_3 9)))
(assert (and (>= x_5_4 1) (<= x_5_4 9)))
(assert (and (>= x_5_5 1) (<= x_5_5 9)))
(assert (and (>= x_5_6 1) (<= x_5_6 9)))
(assert (and (>= x_5_7 1) (<= x_5_7 9)))
(assert (and (>= x_5_8 1) (<= x_5_8 9)))
(assert (and (>= x_6_0 1) (<= x_6_0 9)))
(assert (and (>= x_6_1 1) (<= x_6_1 9)))
(assert (and (>= x_6_2 1) (<= x_6_2 9)))
(assert (and (>= x_6_3 1) (<= x_6_3 9)))
(assert (and (>= x_6_4 1) (<= x_6_4 9)))
(assert (and (>= x_6_5 1) (<= x_6_5 9)))
(assert (and (>= x_6_6 1) (<= x_6_6 9)))
(assert (and (>= x_6_7 1) (<= x_6_7 9)))
(assert (and (>= x_6_8 1) (<= x_6_8 9)))
(assert (and (>= x_7_0 1) (<= x_7_0 9)))
(assert (and (>= x_7_1 1) (<= x_7_1 9)))
(assert (and (>= x_7_2 1) (<= x_7_2 9)))
(assert (and (>= x_7_3 1) (<= x_7_3 9)))
(assert (and (>= x_7_4 1) (<= x_7_4 9)))
(assert (and (>= x_7_5 1) (<= x_7_5 9)))
(assert (and (>= x_7_6 1) (<= x_7_6 9)))
(assert (and (>= x_7_7 1) (<= x_7_7 9)))
(assert (and (>= x_7_8 1) (<= x_7_8 9)))
(assert (and (>= x_8_0 1) (<= x_8_0 9)))
(assert (and (>= x_8_1 1) (<= x_8_1 9)))
(assert (and (>= x_8_2 1) (<= x_8_2 9)))
(assert (and (>= x_8_3 1) (<= x_8_3 9)))
(assert (and (>= x_8_4 1) (<= x_8_4 9)))
(assert (and (>= x_8_5 1) (<= x_8_5 9)))
(assert (and (>= x_8_6 1) (<= x_8_6 9)))
(assert (and (>= x_8_7 1) (<= x_8_7 9)))
(assert (and (>= x_8_8 1) (<= x_8_8 9)))
(assert (distinct x_0_0 x_0_1 x_0_2 x_0_3 x_0_4 x_0_5 x_0_6 x_0_7 x_0_8))
(assert (distinct x_1_0 x_1_1 x_1_2 x_1_3 x_1_4 x_1_5 x_1_6 x_1_7 x_1_8))
(assert (distinct x_2_0 x_2_1 x_2_2 x_2_3 x_2_4 x_2_5 x_2_6 x_2_7 x_2_8))
(assert (distinct x_3_0 x_3_1 x_3_2 x_3_3 x_3_4 x_3_5 x_3_6 x_3_7 x_3_8))
(assert (distinct x_4_0 x_4_1 x_4_2 x_4_3 x_4_4 x_4_5 x_4_6 x_4_7 x_4_8))
(assert (distinct x_5_0 x_5_1 x_5_2 x_5_3 x_5_4 x_5_5 x_5_6 x_5_7 x_5_8))
(assert (distinct x_6_0 x_6_1 x_6_2 x_6_3 x_6_4 x_6_5 x_6_6 x_6_7 x_6_8))
(assert (distinct x_7_0 x_7_1 x_7_2 x_7_3 x_7_4 x_7_5 x_7_6 x_7_7 x_7_8))
(assert (distinct x_8_0 x_8_1 x_8_2 x_8_3 x_8_4 x_8_5 x_8_6 x_8_7 x_8_8))
(assert (distinct x_0_0 x_1_0 x_2_0 x_3_0 x_4_0 x_5_0 x_6_0 x_7_0 x_8_0))
(assert (distinct x_0_1 x_1_1 x_2_1 x_3_1 x_4_1 x_5_1 x_6_1 x_7_1 x_8_1))
(assert (distinct x_0_2 x_1_2 x_2_2 x_3_2 x_4_2 x_5_2 x_6_2 x_7_2 x_8_2))
(assert (distinct x_0_3 x_1_3 x_2_3 x_3_3 x_4_3 x_5_3 x_6_3 x_7_3 x_8_3))
(assert (distinct x_0_4 x_1_4 x_2_4 x_3_4 x_4_4 x_5_4 x_6_4 x_7_4 x_8_4))
(assert (distinct x_0_5 x_1_5 x_2_5 x_3_5 x_4_5 x_5_5 x_6_5 x_7_5 x_8_5))
(assert (distinct x_0_6 x_1_6 x_2_6 x_3_6 x_4_6 x_5_6 x_6_6 x_7_6 x_8_6))
(assert (distinct x_0_7 x_1_7 x_2_7 x_3_7 x_4_7 x_5_7 x_6_7 x_7_7 x_8_7))
(assert (distinct x_0_8 x_1_8 x_2_8 x_3_8 x_4_8 x_5_8 x_6_8 x_7_8 x_8_8))
(assert (distinct x_0_0 x_0_1 x_0_2 x_1_0 x_1_1 x_1_2 x_2_0 x_2_1 x_2_2))
(assert (distinct x_0_3 x_0_4 x_0_5 x_1_3 x_1_4 x_1_5 x_2_3 x_2_4 x_2_5))
(assert (distinct x_0_6 x_0_7 x_0_8 x_1_6 x_1_7 x_1_8 x_2_6 x_2_7 x_2_8))
(assert (distinct x_3_0 x_3_1 x_3_2 x_4_0 x_4_1 x_4_2 x_5_0 x_5_1 x_5_2))
(assert (distinct x_3_3 x_3_4 x_3_5 x_4_3 x_4_4 x_4_5 x_5_3 x_5_4 x_5_5))
(assert (distinct x_3_6 x_3_7 x_3_8 x_4_6 x_4_7 x_4_8 x_5_6 x_5_7 x_5_8))
(assert (distinct x_6_0 x_6_1 x_6_2 x_7_0 x_7_1 x_7_2 x_8_0 x_8_1 x_8_2))
(assert (distinct x_6_3 x_6_4 x_6_5 x_7_3 x_7_4 x_7_5 x_8_3 x_8_4 x_8_5))
(assert (distinct x_6_6 x_6_7 x_6_8 x_7_6 x_7_7 x_7_8 x_8_6 x_8_7 x_8_8))
(assert (= x_0_4 9))
(assert (= x_0_5 4))
(assert (= x_0_7 3))
(assert (= x_1_3 5))
(assert (= x_1_4 1))
(assert (= x_1_8 7))
(assert (= x_2_1 8))
(assert (= x_2_2 9))
(assert (= x_2_7 4))
(assert (= x_3_6 2))
(assert (= x_3_8 8))
(assert (= x_4_1 6))
(assert (= x_4_3 2))
(assert (= x_4_5 1))
(assert (= x_4_7 5))
(assert (= x_5_0 1))
(assert (= x_5_2 2))
(assert (= x_6_1 7))
(assert (= x_6_6 5))
(assert (= x_6_7 2))
(assert (= x_7_0 9))
(assert (= x_7_4 6))
(assert (= x_7_5 5))
(assert (= x_8_1 4))
(assert (= x_8_3 9))
(assert (= x_8_4 7))
(model-add x_0_4 () Int 9)
(model-add x_4_5 () Int 1)
(model-add x_6_6 () Int 5)
(model-add x_1_8 () Int 7)
(model-add x_4_1 () Int 6)
(model-add x_0_5 () Int 4)
(model-add x_7_5 () Int 5)
(model-add x_2_1 () Int 8)
(model-add x_5_2 () Int 2)
(model-add x_4_3 () Int 2)
(model-add x_4_7 () Int 5)
(model-add x_0_7 () Int 3)
(model-add x_2_2 () Int 9)
(model-add x_6_1 () Int 7)
(model-add x_1_4 () Int 1)
(model-add x_7_4 () Int 6)
(model-add x_8_4 () Int 7)
(model-add x_3_8 () Int 8)
(model-add x_2_7 () Int 4)
(model-add x_6_7 () Int 2)
(model-add x_1_3 () Int 5)
(model-add x_3_6 () Int 2)
(model-add x_8_1 () Int 4)
(model-add x_8_3 () Int 9)
(model-add x_5_0 () Int 1)
(model-add x_7_0 () Int 9)
(model-add x_4_2 () Int 7)
(model-add x_3_1 () Int 9)
(model-add x_2_8 () Int 5)
(model-add x_6_5 () Int 8)
(model-add x_8_2 () Int 1)
(model-add x_0_3 () Int 8)
(model-add x_3_4 () Int 5)
(model-add x_6_0 () Int 3)
(model-add x_7_3 () Int 3)
(model-add x_0_0 () Int 7)
(model-add x_4_4 () Int 3)
(model-add x_5_4 () Int 8)
(model-add x_6_8 () Int 9)
(model-add x_7_6 () Int 4)
(model-add x_4_6 () Int 9)
(model-add x_2_4 () Int 2)
(model-add x_5_3 () Int 4)
(model-add x_3_7 () Int 1)
(model-add x_5_7 () Int 6)
(model-add x_8_5 () Int 2)
(model-add x_1_5 () Int 6)
(model-add x_0_2 () Int 5)
(model-add x_2_3 () Int 7)
(model-add x_2_5 () Int 3)
(model-add x_5_6 () Int 7)
(model-add x_8_7 () Int 8)
(model-add x_3_5 () Int 7)
(model-add x_6_4 () Int 4)
(model-add x_6_2 () Int 6)
(model-add x_8_0 () Int 5)
(model-add x_3_0 () Int 4)
(model-add x_8_6 () Int 3)
(model-add x_4_8 () Int 4)
(model-add x_1_7 () Int 9)
(model-add x_7_7 () Int 7)
(model-add x_2_6 () Int 1)
(model-add x_0_8 () Int 2)
(model-add x_5_8 () Int 3)
(model-add x_0_1 () Int 1)
(model-add x_5_5 () Int 9)
(model-add x_6_3 () Int 1)
(model-add x_4_0 () Int 8)
(model-add x_8_8 () Int 6)
(model-add x_1_0 () Int 2)
(model-add x_2_0 () Int 6)
(model-add x_3_3 () Int 6)
(model-add x_7_2 () Int 8)
(model-add x_7_1 () Int 2)
(model-add x_1_6 () Int 8)
(model-add x_0_6 () Int 6)
(model-add x_1_2 () Int 4)
(model-add x_5_1 () Int 5)
(model-add x_7_8 () Int 1)
(model-add x_3_2 () Int 3)
(model-add x_1_1 () Int 3)

715894632
234516897
689723145
493657218
867231954
152489763
376148529
928365471
541972386

consequence example
sat
(ast-vector
  (=> (not c) (not c))
  (=> (not c) (not b))
  (=> (not c) (not a)))

parse example
(ast-vector
  a)

parse string
sat

true

recfun example
conjecture:
(> ((_ f 0) x false) x)
proved

string_values
"abc\u{a}\u{a}\u{0}\u{0}"
abc\u{a}\u{a}\u{0}\u{0}
char: 97
char: 98
char: 99
char: 10
char: 10
char: 0
char: 0


iterate arguments
expression (g x y)
arg x
arg y

done
Z3tptp [4.15.4.0] (c) 2006-20**. Microsoft Corp.
Usage: tptp [options] [-file:]file
  -h, -?       prints this message.
  -smt2        print SMT-LIB2 benchmark.
  -m, -model   generate model.
  -p, -proof   generate proof.
  -c, -core    generate unsat core of named formulas.
  -st, -statistics display statistics.
  -t:timeout   set timeout (in second).
  -smt2status  display status in smt2 format instead of SZS.
  -check_status check the status produced by Z3 against annotation in benchmark.
  -<param>:<value> configuration parameter and value.
  -o:<output-file> file to place output in.
checking whether hard constraints are satisfiable...
iteration 0
iteration 1
iteration 2
result: 4
Examples execution completed
Generating HTML coverage report
(INFO) Reading coverage data...
(ERROR) Trouble processing '/home/runner/work/z3/z3/build/src/smt/CMakeFiles/smt.dir/theory_diff_logic.cpp.gcda' with working directory '/home/runner/work/z3/z3'.
Stdout of gcov was >>File '/home/runner/work/z3/z3/src/smt/theory_diff_logic.cpp'
Lines executed:-nan% of 0
No branches
No calls
Creating 'theory_diff_logic.cpp##049b681dce01e855f04d721674306541.gcov'

File '/home/runner/work/z3/z3/src/util/sat_literal.h'
Lines executed:0.00% of 18
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls
Creating 'sat_literal.h##733681b654a38ad6e4bd9040c3e16234.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_eq_justification.h'
Lines executed:0.00% of 3
No branches
No calls
Creating 'smt_eq_justification.h##028b35d9d6ad11d178a61b06ac3ceb23.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_b_justification.h'
Lines executed:0.00% of 11
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls
Creating 'smt_b_justification.h##e6ba7f82e1f2b84e14e21917fb0156af.gcov'

File '/home/runner/work/z3/z3/src/smt/theory_diff_logic.h'
Lines executed:41.33% of 75
Branches executed:61.90% of 42
Taken at least once:11.90% of 42
No calls
Creating 'theory_diff_logic.h##408ea28facaa9294e089cd22f7f23508.gcov'

File '/home/runner/work/z3/z3/src/smt/theory_diff_logic_def.h'
Lines executed:28.65% of 967
Branches executed:27.37% of 10568
Taken at least once:2.10% of 10568
No calls
Creating 'theory_diff_logic_def.h##04e0a83eddef99d18c5ab6e30844acb8.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_theory.h'
Lines executed:0.00% of 57
Branches executed:0.00% of 34
Taken at least once:0.00% of 34
No calls
Creating 'smt_theory.h##6a5e4d5ea3948c28c6244866731000d6.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_context.h'
Lines executed:0.00% of 70
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls
Creating 'smt_context.h##7cb763a29ff7c08147768b0431b8dfc9.gcov'

File '/home/runner/work/z3/z3/src/ast/ast_pp.h'
Lines executed:0.00% of 3
No branches
No calls
Creating 'ast_pp.h##369b426543f41ecada2102e875830782.gcov'

File '/home/runner/work/z3/z3/src/util/rational.h'
Lines executed:0.00% of 88
Branches executed:0.00% of 30
Taken at least once:0.00% of 30
No calls
Creating 'rational.h##c4a05872764f6424052e620497fbfad8.gcov'

File '/home/runner/work/z3/z3/src/util/hash.h'
Lines executed:0.00% of 3
No branches
No calls
Creating 'hash.h##316ed6b0a27d198b88c17c4ccd5bdff4.gcov'

File '/home/runner/work/z3/z3/src/util/vector.h'
Lines executed:61.63% of 172
Branches executed:77.89% of 2144
Taken at least once:6.34% of 2144
No calls
Creating 'vector.h##6b646b7438a276e85ae25def6c850fc5.gcov'

File '/home/runner/work/z3/z3/src/smt/diff_logic.h'
Lines executed:41.13% of 620
Branches executed:18.62% of 7778
Taken at least once:2.17% of 7778
No calls
Creating 'diff_logic.h##5fc0a94007afea0b75dc189258ba49a8.gcov'

File '/home/runner/work/z3/z3/src/util/trace_tags.h'
Lines executed:0.00% of 3
Branches executed:0.00% of 1247
Taken at least once:0.00% of 1247
No calls
Creating 'trace_tags.h##2b117d6dd56fccfa9d63b14c6ea134e4.gcov'

File '/home/runner/work/z3/z3/src/ast/ast.h'
Lines executed:0.00% of 58
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
No calls
Creating 'ast.h##aa9929745107ce6661861430c8d49a67.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_justification.h'
Lines executed:0.00% of 23
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls
Creating 'smt_justification.h##ff74ef3b59e2c2e7309efae8f003a1da.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_enode.h'
Lines executed:0.00% of 1
No branches
No calls
Creating 'smt_enode.h##1e4efe46f25bccc75fc4be2b5ac85c3c.gcov'

File '/home/runner/work/z3/z3/src/ast/arith_decl_plugin.h'
Lines executed:0.00% of 42
Branches executed:0.00% of 38
Taken at least once:0.00% of 38
No calls
Creating 'arith_decl_plugin.h##3e989823ca4b3d0ffec343792e49ac6a.gcov'

File '/home/runner/work/z3/z3/src/util/obj_ref.h'
Lines executed:0.00% of 31
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
No calls
Creating 'obj_ref.h##ede3bd5403bfda12ce7bd7318992cc3e.gcov'

File '/home/runner/work/z3/z3/src/util/map.h'
Lines executed:77.14% of 35
Branches executed:100.00% of 8
Taken at least once:12.50% of 8
No calls
Creating 'map.h##086fc8e9549721b37b69831f1ac02999.gcov'

File '/home/runner/work/z3/z3/src/util/region.h'
Lines executed:0.00% of 2
No branches
No calls
Creating 'region.h##26eca0b418f506c7e53d2b3edc70e130.gcov'

File '/home/runner/work/z3/z3/src/util/trail.h'
Lines executed:0.00% of 8
No branches
No calls
Creating 'trail.h##b005516eeef2b31fdb9b420ec5337426.gcov'

File '/usr/include/c++/14/bits/allocator.h'
Lines executed:0.00% of 9
No branches
No calls
Creating 'allocator.h##aaf510883e67728fd07ac9704dbf0870.gcov'

File '/usr/include/c++/14/bits/basic_string.h'
Lines executed:0.00% of 100
Branches executed:0.00% of 38
Taken at least once:0.00% of 38
No calls
Creating 'basic_string.h##8eb9ae90a80cc2aaed2bfea453500ccb.gcov'

File '/home/runner/work/z3/z3/src/util/z3_exception.h'
Lines executed:0.00% of 2
No branches
No calls
Creating 'z3_exception.h##eac0d15be8f76b5b7cafba822601ff5a.gcov'

File '/home/runner/work/z3/z3/src/smt/theory_opt.h'
Lines executed:0.00% of 1
No branches
No calls
Creating 'theory_opt.h##17fba58031d20dd0fb24d7a9e67d2f83.gcov'

File '/home/runner/work/z3/z3/src/smt/arith_eq_adapter.h'
Lines executed:0.00% of 4
No branches
No calls
Creating 'arith_eq_adapter.h##c72831f5b0ca03e261397c0c8aa1f792.gcov'

File '/home/runner/work/z3/z3/src/util/hashtable.h'
Lines executed:37.84% of 148
Branches executed:33.07% of 502
Taken at least once:2.99% of 502
No calls
Creating 'hashtable.h##c477ed63f5f757904ad8aeef9ec93f2d.gcov'

File '/home/runner/work/z3/z3/src/util/ref_vector.h'
Lines executed:0.00% of 50
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls
Creating 'ref_vector.h##08979a88258d61ca045c6794496b6c6b.gcov'

File '/usr/include/c++/14/bits/move.h'
Lines executed:0.00% of 5
No branches
No calls
Creating 'move.h##6f0442ee04c5bb3d678de5167b39df8d.gcov'

File '/home/runner/work/z3/z3/src/math/simplex/simplex_def.h'
Lines executed:0.00% of 658
Branches executed:0.00% of 2581
Taken at least once:0.00% of 2581
No calls
Creating 'simplex_def.h##7a2c3c0593c5c598a3fd8e795d1cf707.gcov'

File '/home/runner/work/z3/z3/src/util/memory_manager.h'
Lines executed:100.00% of 14
Branches executed:100.00% of 26
Taken at least once:11.54% of 26
No calls
Creating 'memory_manager.h##d9f9c0328060ff4ab381d41c3c8f4d35.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_model_generator.h'
Lines executed:0.00% of 5
No branches
No calls
Creating 'smt_model_generator.h##326d86b90fa9b486f06497cc6529d1b1.gcov'

File '/home/runner/work/z3/z3/src/util/inf_eps_rational.h'
Lines executed:0.00% of 28
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls
Creating 'inf_eps_rational.h##4f50d63fc43daa556ab0eaeec3f58dd3.gcov'

File '/home/runner/work/z3/z3/src/util/inf_rational.h'
Lines executed:0.00% of 43
Branches executed:0.00% of 40
Taken at least once:0.00% of 40
No calls
Creating 'inf_rational.h##40e42565b73064d26108c92cca901efd.gcov'

File '/home/runner/work/z3/z3/src/math/simplex/simplex.h'
Lines executed:0.00% of 35
Branches executed:0.00% of 20
Taken at least once:0.00% of 20
No calls
Creating 'simplex.h##b66a51a20ffacbe30ebfb0304968c8b1.gcov'

File '/home/runner/work/z3/z3/src/math/simplex/sparse_matrix.h'
Lines executed:0.00% of 108
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls
Creating 'sparse_matrix.h##2bbf9c9eae71026a57f0f7871b8009c8.gcov'

File '/usr/include/c++/14/bits/stl_pair.h'
Lines executed:30.00% of 10
No branches
No calls
Creating 'stl_pair.h##bd31064d7c2fed708972addc39b1fdc6.gcov'

File '/usr/include/c++/14/bits/stl_algobase.h'
Lines executed:32.43% of 37
Branches executed:39.13% of 23
Taken at least once:17.39% of 23
No calls
Creating 'stl_algobase.h##513e99ed1653a24cb02584cf2705e059.gcov'

File '/home/runner/work/z3/z3/src/util/mpq_inf.h'
Lines executed:0.00% of 63
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls
Creating 'mpq_inf.h##0967d60db0ba7154c17a0409bae6c65d.gcov'

File '/home/runner/work/z3/z3/src/util/mpq.h'
Lines executed:0.00% of 153
Branches executed:0.00% of 390
Taken at least once:0.00% of 390
No calls
Creating 'mpq.h##d5832c2e7028353584597b05bb3b2d75.gcov'

File '/home/runner/work/z3/z3/src/util/scoped_numeral_vector.h'
Lines executed:0.00% of 16
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls
Creating 'scoped_numeral_vector.h##6fc845c2f4da5441f770b451cc8a643c.gcov'

File '/home/runner/work/z3/z3/src/util/s_integer.h'
Lines executed:0.00% of 30
No branches
No calls
Creating 's_integer.h##ca2a94afd00e2a76275fcc04feea0d3b.gcov'

File '/home/runner/work/z3/z3/src/util/inf_int_rational.h'
Lines executed:80.52% of 77
Branches executed:87.50% of 32
Taken at least once:65.62% of 32
No calls
Creating 'inf_int_rational.h##32c43eb99d2cd201bddce85674cc5055.gcov'

File '/home/runner/work/z3/z3/src/util/heap.h'
Lines executed:12.77% of 141
Branches executed:27.45% of 998
Taken at least once:1.90% of 998
No calls
Creating 'heap.h##752c3d6c1dd52e64ab7b45d775b86273.gcov'

File '/home/runner/work/z3/z3/src/util/util.h'
Lines executed:0.00% of 8
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls
Creating 'util.h##e70398c3974f0ee3014ceea0e77e34e8.gcov'

File '/home/runner/work/z3/z3/src/util/uint_set.h'
Lines executed:0.00% of 26
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls
Creating 'uint_set.h##e3170b281c482c417a72aa6f3690e601.gcov'

File '/home/runner/work/z3/z3/src/math/simplex/sparse_matrix_def.h'
Lines executed:0.00% of 334
Branches executed:0.00% of 412
Taken at least once:0.00% of 412
No calls
Creating 'sparse_matrix_def.h##7728bde4b11b4c9452bd18899aece19c.gcov'

File '/home/runner/work/z3/z3/src/util/scoped_numeral.h'
Lines executed:0.00% of 39
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls
Creating 'scoped_numeral.h##181853b102ef2cf7617a7e4974a9b763.gcov'

File '/home/runner/work/z3/z3/src/ast/ast_smt2_pp.h'
Lines executed:-nan% of 0
No branches
No calls
Creating 'ast_smt2_pp.h##1943b50b1b39e88d8a7a0c43ad36d9dd.gcov'

File '/home/runner/work/z3/z3/src/util/mpz.h'
Lines executed:0.00% of 54
Branches executed:0.00% of 32
Taken at least once:0.00% of 32
No calls
Creating 'mpz.h##c629498f8d83430f37af294e1e6e180d.gcov'

File '/usr/include/c++/14/variant'
Lines executed:0.00% of 69
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls
Creating 'variant##7c2dcb1b1e326745253c9da82e544faf.gcov'

File '/usr/include/c++/14/bits/stl_uninitialized.h'
Lines executed:77.78% of 45
Branches executed:56.28% of 398
Taken at least once:6.03% of 398
No calls
Creating 'stl_uninitialized.h##e7e113cd59c89d148329899daa159e81.gcov'

File '/usr/include/c++/14/bits/stl_iterator.h'
Lines executed:85.71% of 21
No branches
No calls
Creating 'stl_iterator.h##593395356d89264cfc54bbafc561defa.gcov'

File '/usr/include/c++/14/bits/stl_iterator_base_types.h'
Lines executed:100.00% of 2
No branches
No calls
Creating 'stl_iterator_base_types.h##4ad4dbc2259d0bcc6295a5c957cee9ce.gcov'

File '/usr/include/c++/14/bits/stl_iterator_base_funcs.h'
Lines executed:63.16% of 19
Branches executed:100.00% of 272
Taken at least once:3.68% of 272
No calls
Creating 'stl_iterator_base_funcs.h##7060f7be2adfe4e9be6011f7d20df1d8.gcov'

File '/usr/include/c++/14/bits/stl_construct.h'
Lines executed:71.88% of 32
Branches executed:50.00% of 60
Taken at least once:13.33% of 60
No calls
Creating 'stl_construct.h##8c7696e3a158dab67142d4d86face8d5.gcov'

File '/usr/include/c++/14/bits/exception.h'
Lines executed:0.00% of 1
No branches
No calls
Creating 'exception.h##5cf3e17a54db9cd1c25e05e33b48adb8.gcov'

File '/usr/include/c++/14/bits/iterator_concepts.h'
Lines executed:100.00% of 2
No branches
No calls
Creating 'iterator_concepts.h##2fdd7e613754864558b128a3becf3103.gcov'

File '/usr/include/c++/14/bits/new_allocator.h'
Lines executed:0.00% of 13
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls
Creating 'new_allocator.h##315e46e95b83a97df029f10df5249908.gcov'

File '/usr/include/c++/14/bits/char_traits.h'
Lines executed:0.00% of 10
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls
Creating 'char_traits.h##0fd3ef54c84275914730319b1edd3eaa.gcov'

File '/usr/include/c++/14/bits/basic_string.tcc'
Lines executed:0.00% of 47
Branches executed:0.00% of 30
Taken at least once:0.00% of 30
No calls
Creating 'basic_string.tcc##1d20a43dedbc7644810166f510d36b8b.gcov'

File '/usr/include/c++/14/bits/ptr_traits.h'
Lines executed:0.00% of 2
No branches
No calls
Creating 'ptr_traits.h##54161817b8ac6c3d32f19f525b1020b9.gcov'

File '/usr/include/c++/14/bits/alloc_traits.h'
Lines executed:0.00% of 6
No branches
No calls
Creating 'alloc_traits.h##8d2898d93cd125ce13958cdb0e0c80f6.gcov'

File '/home/runner/work/z3/z3/src/util/obj_pair_hashtable.h'
Lines executed:0.00% of 7
No branches
No calls
Creating 'obj_pair_hashtable.h##1e11895d7b35598314531e3afa66a6d4.gcov'

File '/home/runner/work/z3/z3/src/solver/assertions/asserted_formulas.h'
Lines executed:0.00% of 1
No branches
No calls
Creating 'asserted_formulas.h##16e74bc9df2f7124742292bd7e10c454.gcov'

File '/usr/include/c++/14/bits/stl_algo.h'
Lines executed:100.00% of 3
No branches
No calls
Creating 'stl_algo.h##a1a2281c2667497a3ed540a9bdb5378b.gcov'

File '/usr/include/c++/14/bits/predefined_ops.h'
Lines executed:100.00% of 7
No branches
No calls
Creating 'predefined_ops.h##fa840da21c09ce1cea4b2cd605c79917.gcov'

File '/home/runner/work/z3/z3/src/smt/smt_conflict_resolution.h'
Lines executed:0.00% of 4
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls
Creating 'smt_conflict_resolution.h##5b4fc6071e056ab087c807fc004a515f.gcov'

<< End of stdout
Stderr of gcov was >><< End of stderr
Current processed gcov file was '/home/runner/work/z3/z3/sparse_matrix.h##2bbf9c9eae71026a57f0f7871b8009c8.gcov'.
Use option --verbose to get extended information.
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/workers.py", line 80, in worker
    work(*args, **kwargs)
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 422, in process_datafile
    done = run_gcov_and_process_files(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 709, in run_gcov_and_process_files
    process_gcov_data(fname, abs_filename, covdata, options)
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 231, in process_gcov_data
    insert_file_coverage(covdata, coverage, get_merge_mode_from_options(options))
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 197, in insert_file_coverage
    return _insert_coverage_item(target, file.filename, file, merge_file, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 175, in _insert_coverage_item
    merged_item = merge_item(target_dict[key], new_item, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 216, in merge_file
    left.functions = _merge_dict(
                     ^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 139, in _merge_dict
    _insert_coverage_item(left, key, right_item, merge_item, options)
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 175, in _insert_coverage_item
    merged_item = merge_item(target_dict[key], new_item, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 295, in merge_function
    raise AssertionError(
AssertionError: Got function simplex::sparse_matrix<simplex::mpq_ext>::column::~column() on multiple lines: 87, 116.
	You can run gcovr with --merge-mode-functions=MERGE_MODE.
	The available values for MERGE_MODE are described in the documentation.
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/workers.py", line 80, in worker
    work(*args, **kwargs)
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 422, in process_datafile
    done = run_gcov_and_process_files(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 709, in run_gcov_and_process_files
    process_gcov_data(fname, abs_filename, covdata, options)
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 231, in process_gcov_data
    insert_file_coverage(covdata, coverage, get_merge_mode_from_options(options))
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 197, in insert_file_coverage
    return _insert_coverage_item(target, file.filename, file, merge_file, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 175, in _insert_coverage_item
    merged_item = merge_item(target_dict[key], new_item, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 216, in merge_file
    left.functions = _merge_dict(
                     ^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 139, in _merge_dict
    _insert_coverage_item(left, key, right_item, merge_item, options)
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 175, in _insert_coverage_item
    merged_item = merge_item(target_dict[key], new_item, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 295, in merge_function
    raise AssertionError(
AssertionError: Got function simplex::sparse_matrix<simplex::mpq_ext>::column::~column() on multiple lines: 87, 116.
	You can run gcovr with --merge-mode-functions=MERGE_MODE.
	The available values for MERGE_MODE are described in the documentation.
(ERROR) Error occurred while reading reports:
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/gcovr/__main__.py", line 362, in main
    covdata: CovData = gcovr_formats.read_reports(options)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/__init__.py", line 66, in read_reports
    covdata = GcovHandler(options).read_report()
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/__init__.py", line 202, in read_report
    return read_report(self.options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 79, in read_report
    with Workers(
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/workers.py", line 173, in __exit__
    self.wait()
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/workers.py", line 164, in wait
    raise self.exceptions[0][1]
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 86, in read_report
    contexts = pool.wait()
               ^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/workers.py", line 164, in wait
    raise self.exceptions[0][1]
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/workers.py", line 80, in worker
    work(*args, **kwargs)
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 422, in process_datafile
    done = run_gcov_and_process_files(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 709, in run_gcov_and_process_files
    process_gcov_data(fname, abs_filename, covdata, options)
  File "/usr/lib/python3/dist-packages/gcovr/formats/gcov/read.py", line 231, in process_gcov_data
    insert_file_coverage(covdata, coverage, get_merge_mode_from_options(options))
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 197, in insert_file_coverage
    return _insert_coverage_item(target, file.filename, file, merge_file, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 175, in _insert_coverage_item
    merged_item = merge_item(target_dict[key], new_item, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 216, in merge_file
    left.functions = _merge_dict(
                     ^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 139, in _merge_dict
    _insert_coverage_item(left, key, right_item, merge_item, options)
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 175, in _insert_coverage_item
    merged_item = merge_item(target_dict[key], new_item, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/gcovr/merging.py", line 295, in merge_function
    raise AssertionError(
AssertionError: Got function simplex::sparse_matrix<simplex::mpq_ext>::column::~column() on multiple lines: 87, 116.
	You can run gcovr with --merge-mode-functions=MERGE_MODE.
	The available values for MERGE_MODE are described in the documentation.

Got function simplex::sparse_matrix<simplex::mpq_ext>::column::~column() on multiple lines: 87, 116.
	You can run gcovr with --merge-mode-functions=MERGE_MODE.
	The available values for MERGE_MODE are described in the documentation.
