(declare-sort T00)(declare-fun allocator_Mem()(Array T00 Bool))(declare-fun D()(Array T00 Bool))(declare-fun Next()(Array T00 T00))(declare-fun tail()T00)(declare-fun nil()T00)(declare-fun head()T00)(declare-fun %l0l%0000()Bool)(declare-fun M00000()(Array T00 Bool))(declare-fun call000formal0M00()(Array T00 Bool))(declare-fun call000formal0x00()T00)(declare-fun Next00000()(Array T00 T00))(declare-fun allocator_Mem00000()(Array T00 Bool))(declare-fun %l0l%00000()Bool)(assert(let((n(=>(!(and %l0l%0000 true): 0)(and(= allocator_Mem((_ map or)M00000 allocator_Mem00000))(exists((partition_Mem000(Array T00 Int)))(!(and(=((_ map =>)M00000((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0)))((as const(Array T00 Bool))true))(=((_ map =>)D((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0)))((_ map =>)allocator_Mem00000((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0)))((as const(Array T00 Bool))true))):||:||))(= allocator_Mem00000((_ map or)allocator_Mem00000 M00000))(= call000formal0M00(store((as const(Array T00 Bool))false)call000formal0x00 true))(exists((partition_Mem000(Array T00 Int)))(!(and(=((_ map =>)call000formal0M00((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0)))((as const(Array T00 Bool))true))(=((_ map =>)D((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0)))((_ map =>)allocator_Mem00000((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0))))):||:||))(= Next00000(store Next tail call000formal0x00))(= Next00000(store Next00000 call000formal0x00 nil))(= allocator_Mem00000((_ map or)allocator_Mem00000 call000formal0M00)))and(!(or %l0l%00000(and(select D call000formal0x00))): 0)and(select D head)(select D call000formal0x00)and(!(or %l0l%00000(forall((d000 T00))(!(=(select D d000)(or(select D(select Next00000 d000))(= d000 call000formal0x00)))))): 0)(forall((d000 T00))(!(=(select D d000)(or(select D(select Next00000 d000))(= d000 call000formal0x00))):||)))))))(declare-fun head00000()T00)(declare-fun %l0l%00001()Bool)(assert(not(let((anon0_correct000(=(!(and %l0l%0000): 0)(=(= head00000(select Next head))(and(!(or %l0l%00001(forall((d000 T00))(!(=(select D d000)(or(select D(select Next d000))(= d000 tail))):||:()))): 0)(=(forall((d000 T00))(!(=>(select D d000)(or(select D(select Next d000))(= d000 tail))):||:()))(and(!(or %l0l%00000(and(select D head00000)(select D tail))): 0)(=>(and(select D head00000)(select D tail))true))))))))(let((Precondition0enerated0ntry_correct000(=>(!(and %l0l%0000): 0)(=>(and(select D tail)(forall((d0010 T00))(!(=(select D d0010)(or(select D(select Next d0010))(= d0010 tail))):||:()))(exists((partition_Mem000(Array T00 Int)))(!(and(=((_ map =>)D((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))1)))((as const(Array T00 Bool))true)((_ map =>)allocator_Mem((_ map(=(Int Int)Bool))partition_Mem000((as const(Array T00 Int))0)))((as const(Array T00 Bool))true))):||)))anon0_correct000))))Precondition0enerated0ntry_correct000))))(check-sat)