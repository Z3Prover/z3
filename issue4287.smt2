(set-option :proof true)
(set-option :combined_solver.ignore_solver1 true)
(set-option :smt.arith.solver 6)
(set-option :smt.random_seed 3)
(set-option :smt.str.strong_arrangements false)
(set-option :smt.string_solver z3str3)
(declare-const v2 Bool)
(declare-const v4 Bool)
(declare-const v9 Bool)
(declare-const i6 Int)
(declare-const Str2 String)
(declare-const Str6 String)
(declare-const Str13 String)
(declare-const Str17 String)
(declare-const Str18 String)
(declare-const Str19 String)
(assert (! (str.contains Str19 Str18) :named IP_15))
(check-sat)
(check-sat-assuming ((! (or true (str.contains Str19 (str.++ Str17 Str18 "" "ziuyxumqcl" (str.++ "" ""))) (= true v4 (<= (- 90) 968) (or (= (str.++ "" "" (int.to.str 22) Str13) Str6 Str2) v2 v9 true v2 v2 true) true false (= (str.++ "" "" (int.to.str 22) Str13) Str6 Str2))) :named IP_25) (! (or (str.contains Str19 (str.++ Str17 Str18 "" "ziuyxumqcl" (str.++ "" ""))) (distinct (div (* 0 384 90 90) (abs 384)) i6)) :named IP_166)))
(check-sat-assuming ((! (or (str.contains Str19 (str.++ Str17 Str18 "" "ziuyxumqcl" (str.++ "" ""))) (distinct (div (* 0 384 90 90) (abs 384)) i6) (str.contains Str19 (str.++ Str17 Str18 "" "ziuyxumqcl" (str.++ "" "")))) :named IP_102) (! (or (>= (abs 384) (div (* 0 384 90 90) (abs 384))) true (= (abs 31) 22)) :named IP_140)))