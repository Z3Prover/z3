# Release pipeline
# * Builds for all platforms (with code signing)
# * Creates packages for Python and NuGet
# * Uploads build products to stores (GitHub, NuGet, PyPI)

stages:

# Builds Z3 on various platforms
- stage: Build
  condition: false
  jobs:

  - job: MacBuild
    displayName: "Mac Build"
    pool:
      vmImage: "macOS-10.14"
    steps:
    - script: python scripts/mk_unix_dist.py --dotnet-key=$(Build.SourcesDirectory)/resources/z3.snk
    - script: git clone https://github.com/z3prover/z3test z3test
    - script: python z3test/scripts/test_benchmarks.py build-dist/z3 z3test/regressions/smt2
    - script: cp dist/*.zip $(Build.ArtifactStagingDirectory)/.
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Mac'
        targetPath: $(Build.ArtifactStagingDirectory)

  - job: UbuntuBuild
    displayName: "Ubuntu build"
    pool:
      vmImage: "ubuntu-16.04"
    steps:
    - script: python scripts/mk_unix_dist.py --dotnet-key=$(Build.SourcesDirectory)/resources/z3.snk
    - script: git clone https://github.com/z3prover/z3test z3test
    - script: python z3test/scripts/test_benchmarks.py build-dist/z3 z3test/regressions/smt2
    - script: cp dist/*.zip $(Build.ArtifactStagingDirectory)/.
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Ubuntu'
        targetPath: $(Build.ArtifactStagingDirectory)

  - job: ManylinuxBuild
    displayName: "Manylinux build"
    pool:
      vmImage: "ubuntu-16.04"
    container: "rhelmot/manylinux1_x86_64:latest"
    variables:
      python: "/opt/python/cp35-cp35m/bin/python"
    steps:
    - script: $(python) scripts/mk_unix_dist.py --nodotnet --nojava
    - script: git clone https://github.com/z3prover/z3test z3test
    - script: $(python) z3test/scripts/test_benchmarks.py build-dist/z3 z3test/regressions/smt2
    - script: cp dist/*.zip $(Build.ArtifactStagingDirectory)/
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Manylinux'
        targetPath: $(Build.ArtifactStagingDirectory)

  - job: WindowsBuild
    displayName: "Windows build"
    pool:
      vmImage: "vs2017-win2016"
    steps:
    - script: scripts\mk_win_dist.cmd
    - script: xcopy dist\*.zip $(Build.ArtifactStagingDirectory)\* /y
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Windows'
        targetPath: $(Build.ArtifactStagingDirectory)

# Creates Z3 packages in various formats
- stage: Package
  jobs:

  - job: NuGetPackage
    displayName: "NuGet packaging"
    pool:
      vmImage: "windows-latest"
    steps:
    - powershell: write-host $(System.DefinitionId)
    - task: DownloadPipelineArtifact@0
      inputs:
        source: specific
        project: z3release
        pipeline: 7
        runVersion: specific
        runId: 20200107
        artifactName: 'Windows'
        targetPath: $(Agent.TempDirectory)/windows
    - task: DownloadPipelineArtifact@0
      inputs:
        source: specific
        project: z3release
        pipeline: 7
        runVersion: specific
        runId: 20200107
        artifactName: 'Windows'
        targetPath: $(Agent.TempDirectory)/ubuntu
    - task: DownloadPipelineArtifact@0
      inputs:
        source: specific
        project: z3release
        pipeline: 7
        runVersion: specific
        runId: 20200107
        artifactName: 'Mac'
        targetPath: $(Agent.TempDirectory)/mac
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: $(Agent.TempDirectory)/windows/*.zip
        destinationFolder: $(Agent.TempDirectory)/windows
    - powershell: get-childitem -recurse $(Agent.TempDirectory)

  - job: PythonPackage
    condition: false
    displayName: "Python packaging"
    pool:
      vmImage: "ubuntu-16.04"
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'Ubuntu'
        targetPath: $(Agent.TempDirectory)
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'Manylinux'
        targetPath: $(Agent.TempDirectory)
    - script: cd $(Agent.TempDirectory); mkdir linux-bin; cd linux-bin; unzip ../*centos*.zip
    - script: cd $(Agent.TempDirectory); mkdir win32-bin; cd win32-bin; unzip ../*x86-win*.zip
    - script: cd $(Agent.TempDirectory); mkdir win64-bin; cd win64-bin; unzip ../*x64-win*.zip
    - script: python -m pip install --user -U setuptools wheel
    - script: cd src/api/python; python setup.py sdist
   # take a look at this PREMIUM HACK I came up with to get around the fact that the azure variable syntax overloads the bash syntax for subshells
    - script: cd src/api/python; echo $(Agent.TempDirectory)/linux-bin/* | xargs printf 'PACKAGE_FROM_RELEASE=%s\n' | xargs -I '{}' env '{}' python setup.py bdist_wheel
    - script: cd src/api/python; echo $(Agent.TempDirectory)/win32-bin/* | xargs printf 'PACKAGE_FROM_RELEASE=%s\n' | xargs -I '{}' env '{}' python setup.py bdist_wheel
    - script: cd src/api/python; echo $(Agent.TempDirectory)/win64-bin/* | xargs printf 'PACKAGE_FROM_RELEASE=%s\n' | xargs -I '{}' env '{}' python setup.py bdist_wheel
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Python packages'
        targetPath: src/api/python/dist

# Uploads Z3 packages to various package stores
- stage: Publish
  jobs:

  - job: NuGetPublish
    displayName: "Publish to NuGet.org"
    steps:
    - powershell: write-host "publish nuget"
#
#  - job: GitHubPublish
#    condition: false
#    displayName: "Publish to GitHub"
#    pool:
#      vmImage: "windows-latest"
#    steps:
#    - task: DownloadPipelineArtifact@0
#      inputs:
#        artifactName: 'Windows'
#        targetPath: tmp
#    - task: DownloadPipelineArtifact@0
#      inputs:
#        artifactName: 'Mac'
#        targetPath: tmp
#    - task: DownloadPipelineArtifact@0
#      inputs:
#        artifactName: 'Ubuntu'
#        targetPath: tmp
#    # TBD: this script should build a specific pre-specified tag
#    - task: GitHubRelease@0
#      inputs:
#        gitHubConnection: Z3GitHub
#        repositoryName: 'Z3Prover/z3'
#        action: 'create'
#        target: '$(Build.SourceVersion)'
#        tagSource: 'manual'
#        tag: 'z3-4.8.7'
#        title: 'z3-4.8.7'
#        releaseNotesSource: 'input'
#        releaseNotes: '4.8.7 release'
#        assets: 'tmp/*'
#        isDraft: true
#        isPreRelease: true
#
#  - job: PyPIPublish
#    condition: false
#    displayName: "Publish to PyPI"
#    pool:
#      vmImage: "ubuntu-16.04"
#    steps:
#    - task: DownloadPipelineArtifact@0
#      inputs:
#        artifactName: 'Python packages'
#        targetPath: dist
#    - task: DownloadSecureFile@1
#      name: pypirc
#      inputs:
#        secureFile: 'pypirc'
#    - script: pip install --upgrade pip
#    - script: python -m pip install --user -U setuptools importlib_metadata wheel twine 
#    # Uncomment on release:
#    - script: python -m twine upload --config-file $(pypirc.secureFilePath) -r $(pypiReleaseServer) dist/*
#
# TBD: run regression tests on generated binaries.