'use strict';

// generates c wrappers with off-thread versions of specified functions

let path = require('path');

let { functions } = require('./parse-api.js');
let asyncFns = require('./async-fns.js');

let wrappers = [];

for (let fnName of asyncFns) {
  let fn = functions.find(f => f.name === fnName);
  if (fn == null) {
    throw new Error(`could not find definition for ${fnName}`);
  }
  wrappers.push(
    `
extern "C" void async_${fn.name}(${fn.params
      .map(p => `${p.isConst ? 'const ' : ''}${p.type}${p.isPtr ? '*' : ''} ${p.name}${p.isArray ? '[]' : ''}`)
      .join(', ')}) {
  wrapper<decltype(&${fn.name}), &${fn.name}>(${fn.params.map(p => `${p.name}`).join(', ')});
}
`.trim(),
  );
}

console.log(`// THIS FILE IS AUTOMATICALLY GENERATED BY ${path.basename(__filename)}
// DO NOT EDIT IT BY HAND

#include <thread>

#include <emscripten.h>

#include "../../z3.h"

template<typename Fn, Fn fn, typename... Args>
void wrapper(Args&&... args) {
  // gotta capture idx by value
  std::thread t([...args = std::forward<Args>(args)] {
    try {
      auto result = fn(args...);
      MAIN_THREAD_ASYNC_EM_ASM({
        resolve_async($0);
      }, result);
    } catch (...) {
      MAIN_THREAD_ASYNC_EM_ASM({
        reject_async('failed with unknown exception');
      });
      throw;
    }
  });
  t.detach();
}

${wrappers.join('\n\n')}`);
