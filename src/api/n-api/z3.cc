#include <node.h>
#include <node_api.h>
#include <z3.h>

#define MAX_ARGS 16
#define MAX_LEN  4096
#define Z3_NAPI_DEBUG 1

#define dprintf(fmt, ...) do { if (Z3_NAPI_DEBUG) printf(fmt, ##__VA_ARGS__); } while (0)

#define DECLARE_NAPI_METHOD(name, func) { name, 0, func, 0, 0, 0, napi_default, 0 }

/* Generated using c2napi */

namespace z3 {
        
	napi_value Z3_global_param_set_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_global_param_set\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value0[MAX_LEN];
                size_t result0;
                status = napi_get_value_string_latin1(env, args[0], value0, MAX_LEN, &result0);
                if (result0 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value0);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_global_param_set (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_global_param_reset_all_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_global_param_reset_all\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                Z3_global_param_reset_all ();
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_global_param_get_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_global_param_get\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value0[MAX_LEN];
                size_t result0;
                status = napi_get_value_string_latin1(env, args[0], value0, MAX_LEN, &result0);
                if (result0 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value0);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_string_ptr  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_global_param_get (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_config_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_config\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                Z3_config  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_config ();
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_del_config_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_del_config\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_config  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_del_config (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_set_param_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_set_param_value\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_config  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_set_param_value (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_context_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_context\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_config  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_context  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_context (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_context_rc_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_context_rc\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_config  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_context  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_context_rc (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_del_context_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_del_context\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_del_context (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_update_param_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_update_param_value\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_update_param_value (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_interrupt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_interrupt\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_interrupt (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_params_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_params\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_params  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_params (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_params_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_params_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_params_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_params_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_params_set_bool_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_set_bool\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_params_set_bool (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_params_set_uint_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_set_uint\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_params_set_uint (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_params_set_double_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_set_double\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                double  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_params_set_double (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_params_set_symbol_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_set_symbol\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_params_set_symbol (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_params_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_params_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_params_validate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_params_validate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_params_validate (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_get_kind_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_get_kind\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_kind  c_ret;
                napi_value napi_ret;

                c_ret = Z3_param_descrs_get_kind (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_param_descrs_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_get_name_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_get_name\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_param_descrs_get_name (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_get_documentation_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_get_documentation\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_param_descrs_get_documentation (value0,value1,value2);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_param_descrs_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_param_descrs_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_param_descrs  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_param_descrs_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int_symbol_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int_symbol\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int_symbol (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_string_symbol_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_string_symbol\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_string_symbol (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_uninterpreted_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_uninterpreted_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_uninterpreted_sort (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bool_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bool_sort\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bool_sort (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int_sort\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int_sort (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_real_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_real_sort\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_real_sort (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bv_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bv_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bv_sort (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_finite_domain_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_finite_domain_sort\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                /* NAPI does not have uint64 type */
                long long value2;
                status = napi_get_value_int64(env, args[2],  &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_finite_domain_sort (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_array_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_array_sort\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_array_sort (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_array_sort_n_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_array_sort_n\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_array_sort_n (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_tuple_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_tuple_sort\n");
		napi_status status;
                size_t argc= 7;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 7) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 7");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value5;
                status = napi_get_value_external(env, args[5], (void **) &value5);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype6;
                status = napi_typeof(env, args[6], &valuetype6);
                assert(status == napi_ok);

                if (valuetype6 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value6;
                status = napi_get_value_external(env, args[6], (void **) &value6);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_tuple_sort (value0,value1,value2,value3,value4,value5,value6);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_enumeration_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_enumeration_sort\n");
		napi_status status;
                size_t argc= 6;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 6) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 6");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value5;
                status = napi_get_value_external(env, args[5], (void **) &value5);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_enumeration_sort (value0,value1,value2,value3,value4,value5);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_list_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_list_sort\n");
		napi_status status;
                size_t argc= 9;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 9) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 9");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value5;
                status = napi_get_value_external(env, args[5], (void **) &value5);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype6;
                status = napi_typeof(env, args[6], &valuetype6);
                assert(status == napi_ok);

                if (valuetype6 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value6;
                status = napi_get_value_external(env, args[6], (void **) &value6);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value7;
                status = napi_get_value_external(env, args[7], (void **) &value7);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype8;
                status = napi_typeof(env, args[8], &valuetype8);
                assert(status == napi_ok);

                if (valuetype8 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value8;
                status = napi_get_value_external(env, args[8], (void **) &value8);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value8);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_list_sort (value0,value1,value2,value3,value4,value5,value6,value7,value8);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_constructor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_constructor\n");
		napi_status status;
                size_t argc= 7;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 7) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 7");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array5;
                status = napi_is_array(env, args[5], &is_array5);
                assert(status == napi_ok);

                if (!is_array5) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value5[MAX_LEN];
                
                uint32_t length5;
                status = napi_get_array_length(env, args[5], &length5);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length5;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[5],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value5[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype6;
                status = napi_typeof(env, args[6], &valuetype6);
                assert(status == napi_ok);

                if (valuetype6 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value6;
                status = napi_get_value_external(env, args[6], (void **) &value6);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                

                
                Z3_constructor  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_constructor (value0,value1,value2,value3,value4,value5,value6);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_del_constructor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_del_constructor\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_constructor  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_del_constructor (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_datatype_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_datatype\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_constructor * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_datatype (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_constructor_list_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_constructor_list\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_constructor value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_constructor_list  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_constructor_list (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_del_constructor_list_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_del_constructor_list\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_constructor_list  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_del_constructor_list (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_datatypes_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_datatypes\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_constructor_list * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_mk_datatypes (value0,value1,value2,value3,value4);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_query_constructor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_query_constructor\n");
		napi_status status;
                size_t argc= 6;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 6) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 6");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_constructor  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl * value5;
                status = napi_get_value_external(env, args[5], (void **) &value5);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                

                
                Z3_query_constructor (value0,value1,value2,value3,value4,value5);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_func_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_func_decl\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_func_decl (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_app_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_app\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_app (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_const_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_const\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_const (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fresh_func_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fresh_func_decl\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fresh_func_decl (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fresh_const_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fresh_const\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fresh_const (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_true_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_true\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_true (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_false_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_false\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_false (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_eq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_eq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_eq (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_distinct_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_distinct\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_distinct (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_not_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_not\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_not (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_ite_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_ite\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_ite (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_iff_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_iff\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_iff (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_implies_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_implies\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_implies (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_xor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_xor\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_xor (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_and_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_and\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_and (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_or_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_or\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_or (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_add_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_add\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_add (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_mul_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_mul\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_mul (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_sub_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_sub\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_sub (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_unary_minus_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_unary_minus\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_unary_minus (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_div_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_div\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_div (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_mod_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_mod\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_mod (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_rem_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_rem\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_rem (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_power_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_power\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_power (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_lt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_lt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_lt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_le_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_le\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_le (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_gt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_gt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_gt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_ge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_ge\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_ge (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int2real_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int2real\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int2real (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_real2int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_real2int\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_real2int (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_is_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_is_int\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_is_int (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvnot_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvnot\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvnot (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvredand_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvredand\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvredand (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvredor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvredor\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvredor (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvand_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvand\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvand (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvor\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvor (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvxor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvxor\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvxor (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvnand_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvnand\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvnand (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvnor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvnor\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvnor (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvxnor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvxnor\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvxnor (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvneg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvneg\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvneg (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvadd_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvadd\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvadd (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsub_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsub\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsub (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvmul_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvmul\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvmul (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvudiv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvudiv\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvudiv (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsdiv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsdiv\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsdiv (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvurem_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvurem\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvurem (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsrem_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsrem\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsrem (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsmod_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsmod\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsmod (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvult_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvult\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvult (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvslt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvslt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvslt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvule_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvule\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvule (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsle_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsle\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsle (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvuge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvuge\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvuge (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsge\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsge (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvugt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvugt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvugt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsgt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsgt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsgt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_concat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_concat\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_concat (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_extract_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_extract\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_extract (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_sign_ext_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_sign_ext\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_sign_ext (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_zero_ext_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_zero_ext\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_zero_ext (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_repeat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_repeat\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_repeat (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvshl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvshl\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvshl (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvlshr_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvlshr\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvlshr (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvashr_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvashr\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvashr (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_rotate_left_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_rotate_left\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_rotate_left (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_rotate_right_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_rotate_right\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_rotate_right (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_ext_rotate_left_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_ext_rotate_left\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_ext_rotate_left (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_ext_rotate_right_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_ext_rotate_right\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_ext_rotate_right (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int2bv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int2bv\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int2bv (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bv2int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bv2int\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bv2int (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvadd_no_overflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvadd_no_overflow\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvadd_no_overflow (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvadd_no_underflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvadd_no_underflow\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvadd_no_underflow (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsub_no_overflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsub_no_overflow\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsub_no_overflow (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsub_no_underflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsub_no_underflow\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsub_no_underflow (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvsdiv_no_overflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvsdiv_no_overflow\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvsdiv_no_overflow (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvneg_no_overflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvneg_no_overflow\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvneg_no_overflow (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvmul_no_overflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvmul_no_overflow\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvmul_no_overflow (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bvmul_no_underflow_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bvmul_no_underflow\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bvmul_no_underflow (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_select_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_select\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_select (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_select_n_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_select_n\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_select_n (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_store_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_store\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_store (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_store_n_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_store_n\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_store_n (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_const_array_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_const_array\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_const_array (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_map_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_map\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_map (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_array_default_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_array_default\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_array_default (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_as_array_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_as_array\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_as_array (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_sort (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_empty_set_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_empty_set\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_empty_set (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_full_set_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_full_set\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_full_set (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_add_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_add\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_add (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_del_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_del\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_del (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_union_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_union\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_union (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_intersect_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_intersect\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_intersect (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_difference_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_difference\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_difference (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_complement_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_complement\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_complement (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_member_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_member\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_member (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_set_subset_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_set_subset\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_set_subset (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_array_ext_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_array_ext\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_array_ext (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_numeral_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_numeral\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_numeral (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_real_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_real\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_real (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_unsigned_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_unsigned_int\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_unsigned_int (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int64\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                /* NAPI does not have uint64 type */
                long long value1;
                status = napi_get_value_int64(env, args[1],  &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int64 (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_unsigned_int64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_unsigned_int64\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                /* NAPI does not have uint64 type */
                long long value1;
                status = napi_get_value_int64(env, args[1],  &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_unsigned_int64 (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bv_numeral_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bv_numeral\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_bool value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bv_numeral (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_sort (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_seq_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_seq_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_seq_sort (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_sort (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_re_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_re_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_re_sort (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_string_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_string_sort\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_string_sort (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_string_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_string_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_string_sort (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_string (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_string (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_empty_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_empty\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_empty (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_unit_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_unit\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_unit (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_concat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_concat\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_concat (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_prefix_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_prefix\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_prefix (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_suffix_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_suffix\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_suffix (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_contains_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_contains\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_contains (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_extract_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_extract\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_extract (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_replace_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_replace\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_replace (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_at_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_at\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_at (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_length_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_length\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_length (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_index_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_index\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_index (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_str_to_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_str_to_int\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_str_to_int (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_int_to_str_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_int_to_str\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_int_to_str (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_to_re_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_to_re\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_to_re (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_seq_in_re_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_seq_in_re\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_seq_in_re (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_plus_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_plus\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_plus (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_star_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_star\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_star (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_option_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_option\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_option (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_union_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_union\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_union (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_concat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_concat\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_concat (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_range_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_range\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_range (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_loop_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_loop\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_loop (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_intersect_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_intersect\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_intersect (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_complement_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_complement\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_complement (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_empty_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_empty\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_empty (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_re_full_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_re_full\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_re_full (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_pattern_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_pattern\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_pattern  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_pattern (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_bound_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_bound\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_bound (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_forall_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_forall\n");
		napi_status status;
                size_t argc= 8;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 8) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 8");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array5;
                status = napi_is_array(env, args[5], &is_array5);
                assert(status == napi_ok);

                if (!is_array5) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value5[MAX_LEN];
                
                uint32_t length5;
                status = napi_get_array_length(env, args[5], &length5);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length5;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[5],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value5[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value7;
                status = napi_get_value_external(env, args[7], (void **) &value7);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_forall (value0,value1,value2,value3,value4,value5,value6,value7);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_exists_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_exists\n");
		napi_status status;
                size_t argc= 8;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 8) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 8");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array5;
                status = napi_is_array(env, args[5], &is_array5);
                assert(status == napi_ok);

                if (!is_array5) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value5[MAX_LEN];
                
                uint32_t length5;
                status = napi_get_array_length(env, args[5], &length5);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length5;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[5],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value5[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value7;
                status = napi_get_value_external(env, args[7], (void **) &value7);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_exists (value0,value1,value2,value3,value4,value5,value6,value7);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_quantifier_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_quantifier\n");
		napi_status status;
                size_t argc= 9;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 9) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 9");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array7;
                status = napi_is_array(env, args[7], &is_array7);
                assert(status == napi_ok);

                if (!is_array7) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value7[MAX_LEN];
                
                uint32_t length7;
                status = napi_get_array_length(env, args[7], &length7);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length7;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[7],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value7[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype8;
                status = napi_typeof(env, args[8], &valuetype8);
                assert(status == napi_ok);

                if (valuetype8 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value8;
                status = napi_get_value_external(env, args[8], (void **) &value8);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value8);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_quantifier (value0,value1,value2,value3,value4,value5,value6,value7,value8);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_quantifier_ex_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_quantifier_ex\n");
		napi_status status;
                size_t argc= 13;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 13) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 13");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value7;
                status = napi_get_value_int64(env, args[7], (long long *) &value7);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array8;
                status = napi_is_array(env, args[8], &is_array8);
                assert(status == napi_ok);

                if (!is_array8) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value8[MAX_LEN];
                
                uint32_t length8;
                status = napi_get_array_length(env, args[8], &length8);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length8;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[8],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value8[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value8);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype9;
                status = napi_typeof(env, args[9], &valuetype9);
                assert(status == napi_ok);

                if (valuetype9 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value9;
                status = napi_get_value_int64(env, args[9], (long long *) &value9);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array10;
                status = napi_is_array(env, args[10], &is_array10);
                assert(status == napi_ok);

                if (!is_array10) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value10[MAX_LEN];
                
                uint32_t length10;
                status = napi_get_array_length(env, args[10], &length10);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length10;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[10],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value10[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value10);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array11;
                status = napi_is_array(env, args[11], &is_array11);
                assert(status == napi_ok);

                if (!is_array11) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value11[MAX_LEN];
                
                uint32_t length11;
                status = napi_get_array_length(env, args[11], &length11);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length11;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[11],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value11[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value11);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype12;
                status = napi_typeof(env, args[12], &valuetype12);
                assert(status == napi_ok);

                if (valuetype12 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value12;
                status = napi_get_value_external(env, args[12], (void **) &value12);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value12);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_quantifier_ex (value0,value1,value2,value3,value4,value5,value6,value7,value8,value9,value10,value11,value12);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_forall_const_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_forall_const\n");
		napi_status status;
                size_t argc= 7;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 7) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 7");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_app value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array5;
                status = napi_is_array(env, args[5], &is_array5);
                assert(status == napi_ok);

                if (!is_array5) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value5[MAX_LEN];
                
                uint32_t length5;
                status = napi_get_array_length(env, args[5], &length5);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length5;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[5],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value5[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype6;
                status = napi_typeof(env, args[6], &valuetype6);
                assert(status == napi_ok);

                if (valuetype6 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value6;
                status = napi_get_value_external(env, args[6], (void **) &value6);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_forall_const (value0,value1,value2,value3,value4,value5,value6);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_exists_const_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_exists_const\n");
		napi_status status;
                size_t argc= 7;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 7) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 7");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_app value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array5;
                status = napi_is_array(env, args[5], &is_array5);
                assert(status == napi_ok);

                if (!is_array5) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value5[MAX_LEN];
                
                uint32_t length5;
                status = napi_get_array_length(env, args[5], &length5);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length5;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[5],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value5[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype6;
                status = napi_typeof(env, args[6], &valuetype6);
                assert(status == napi_ok);

                if (valuetype6 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value6;
                status = napi_get_value_external(env, args[6], (void **) &value6);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_exists_const (value0,value1,value2,value3,value4,value5,value6);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_quantifier_const_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_quantifier_const\n");
		napi_status status;
                size_t argc= 8;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 8) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 8");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_app value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value7;
                status = napi_get_value_external(env, args[7], (void **) &value7);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_quantifier_const (value0,value1,value2,value3,value4,value5,value6,value7);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_quantifier_const_ex_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_quantifier_const_ex\n");
		napi_status status;
                size_t argc= 12;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 12) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 12");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_app value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value7;
                status = napi_get_value_int64(env, args[7], (long long *) &value7);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array8;
                status = napi_is_array(env, args[8], &is_array8);
                assert(status == napi_ok);

                if (!is_array8) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_pattern value8[MAX_LEN];
                
                uint32_t length8;
                status = napi_get_array_length(env, args[8], &length8);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length8;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[8],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value8[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value8);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype9;
                status = napi_typeof(env, args[9], &valuetype9);
                assert(status == napi_ok);

                if (valuetype9 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value9;
                status = napi_get_value_int64(env, args[9], (long long *) &value9);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array10;
                status = napi_is_array(env, args[10], &is_array10);
                assert(status == napi_ok);

                if (!is_array10) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value10[MAX_LEN];
                
                uint32_t length10;
                status = napi_get_array_length(env, args[10], &length10);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length10;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[10],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value10[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value10);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype11;
                status = napi_typeof(env, args[11], &valuetype11);
                assert(status == napi_ok);

                if (valuetype11 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value11;
                status = napi_get_value_external(env, args[11], (void **) &value11);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value11);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_quantifier_const_ex (value0,value1,value2,value3,value4,value5,value6,value7,value8,value9,value10,value11);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_symbol_kind_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_symbol_kind\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_symbol_kind  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_symbol_kind (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_symbol_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_symbol_int\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_symbol_int (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_symbol_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_symbol_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_symbol_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_sort_name_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_sort_name\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_sort_name (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_sort_id_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_sort_id\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_sort_id (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_sort_to_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_sort_to_ast\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_sort_to_ast (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_eq_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_eq_sort\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_eq_sort (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_sort_kind_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_sort_kind\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort_kind  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_sort_kind (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_bv_sort_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_bv_sort_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_bv_sort_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_finite_domain_sort_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_finite_domain_sort_size\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                uint64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_finite_domain_sort_size (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_array_sort_domain_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_array_sort_domain\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_array_sort_domain (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_array_sort_range_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_array_sort_range\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_array_sort_range (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_tuple_sort_mk_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_tuple_sort_mk_decl\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_tuple_sort_mk_decl (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_tuple_sort_num_fields_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_tuple_sort_num_fields\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_tuple_sort_num_fields (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_tuple_sort_field_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_tuple_sort_field_decl\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_tuple_sort_field_decl (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_datatype_sort_num_constructors_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_datatype_sort_num_constructors\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_datatype_sort_num_constructors (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_datatype_sort_constructor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_datatype_sort_constructor\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_datatype_sort_constructor (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_datatype_sort_recognizer_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_datatype_sort_recognizer\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_datatype_sort_recognizer (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_datatype_sort_constructor_accessor_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_datatype_sort_constructor_accessor\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_datatype_sort_constructor_accessor (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_datatype_update_field_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_datatype_update_field\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_datatype_update_field (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_relation_arity_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_relation_arity\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_relation_arity (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_relation_column_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_relation_column\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_relation_column (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_atmost_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_atmost\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_atmost (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_atleast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_atleast\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_atleast (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_pble_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_pble\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_pble (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_pbge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_pbge\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_pbge (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_pbeq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_pbeq\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value4;
                status = napi_get_value_int64(env, args[4], (long long *) &value4);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_pbeq (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_decl_to_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_decl_to_ast\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_decl_to_ast (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_eq_func_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_eq_func_decl\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_eq_func_decl (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_func_decl_id_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_func_decl_id\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_func_decl_id (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_name_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_name\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_name (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_kind_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_kind\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_decl_kind  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_kind (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_domain_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_domain_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_domain_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_arity_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_arity\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_arity (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_domain_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_domain\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_domain (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_range_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_range\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_range (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_num_parameters_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_num_parameters\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_num_parameters (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_parameter_kind_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_parameter_kind\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_parameter_kind  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_parameter_kind (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_int_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_int_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_int_parameter (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_double_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_double_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                double  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_double_parameter (value0,value1,value2);
 
 
                
                status = napi_create_double(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_symbol_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_symbol_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_symbol_parameter (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_sort_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_sort_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_sort_parameter (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_ast_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_ast_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_ast_parameter (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_func_decl_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_func_decl_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_func_decl_parameter (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_decl_rational_parameter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_decl_rational_parameter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_decl_rational_parameter (value0,value1,value2);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_app_to_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_app_to_ast\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_app  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_app_to_ast (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_app_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_app_decl\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_app  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_app_decl (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_app_num_args_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_app_num_args\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_app  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_app_num_args (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_app_arg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_app_arg\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_app  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_app_arg (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_eq_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_eq_ast\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_eq_ast (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_ast_id_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_ast_id\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_ast_id (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_ast_hash_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_ast_hash\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_ast_hash (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_sort\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_sort (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_well_sorted_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_well_sorted\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_well_sorted (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_bool_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_bool_value\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_bool_value (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_ast_kind_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_ast_kind\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_kind  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_ast_kind (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_app_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_app\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_app (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_numeral_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_numeral_ast\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_numeral_ast (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_algebraic_number_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_algebraic_number\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_algebraic_number (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_to_app_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_to_app\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_app  c_ret;
                napi_value napi_ret;

                c_ret = Z3_to_app (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_to_func_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_to_func_decl\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_to_func_decl (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_decimal_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_decimal_string\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_decimal_string (value0,value1,value2);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numerator_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numerator\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numerator (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_denominator_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_denominator\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_denominator (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_small_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_small\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int64_t * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_small (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_int\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_int (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_uint_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_uint\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_uint (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_uint64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_uint64\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                uint64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_uint64 (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_int64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_int64\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_int64 (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_numeral_rational_int64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_numeral_rational_int64\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int64_t * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_numeral_rational_int64 (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_algebraic_number_lower_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_algebraic_number_lower\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_algebraic_number_lower (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_algebraic_number_upper_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_algebraic_number_upper\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_algebraic_number_upper (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_pattern_to_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_pattern_to_ast\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_pattern  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_pattern_to_ast (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_pattern_num_terms_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_pattern_num_terms\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_pattern  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_pattern_num_terms (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_pattern_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_pattern\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_pattern  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_pattern (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_index_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_index_value\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_index_value (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_quantifier_forall_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_quantifier_forall\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_quantifier_forall (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_weight_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_weight\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_weight (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_num_patterns_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_num_patterns\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_num_patterns (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_pattern_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_pattern_ast\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_pattern  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_pattern_ast (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_num_no_patterns_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_num_no_patterns\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_num_no_patterns (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_no_pattern_ast_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_no_pattern_ast\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_no_pattern_ast (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_num_bound_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_num_bound\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_num_bound (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_bound_name_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_bound_name\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_bound_name (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_bound_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_bound_sort\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_bound_sort (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_quantifier_body_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_quantifier_body\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_quantifier_body (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_simplify_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_simplify\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_simplify (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_simplify_ex_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_simplify_ex\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_simplify_ex (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_simplify_get_help_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_simplify_get_help\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_simplify_get_help (value0);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_simplify_get_param_descrs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_simplify_get_param_descrs\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs  c_ret;
                napi_value napi_ret;

                c_ret = Z3_simplify_get_param_descrs (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_update_term_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_update_term\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_update_term (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_substitute_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_substitute\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_substitute (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_substitute_vars_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_substitute_vars\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_substitute_vars (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_translate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_translate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_translate (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_model_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_model\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_model (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_model_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_model_eval_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_eval\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_eval (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_const_interp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_const_interp\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_const_interp (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_has_interp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_has_interp\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_has_interp (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_func_interp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_func_interp\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_interp  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_func_interp (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_num_consts_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_num_consts\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_num_consts (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_const_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_const_decl\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_const_decl (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_num_funcs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_num_funcs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_num_funcs (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_func_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_func_decl\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_func_decl (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_num_sorts_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_num_sorts\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_num_sorts (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_sort\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_sort (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_get_sort_universe_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_get_sort_universe\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_get_sort_universe (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_translate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_translate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_translate (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_is_as_array_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_is_as_array\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_is_as_array (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_as_array_func_decl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_as_array_func_decl\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_decl  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_as_array_func_decl (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_add_func_interp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_add_func_interp\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_interp  c_ret;
                napi_value napi_ret;

                c_ret = Z3_add_func_interp (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_add_const_interp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_add_const_interp\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_add_const_interp (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_interp_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_interp_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_get_num_entries_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_get_num_entries\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_interp_get_num_entries (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_get_entry_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_get_entry\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_func_entry  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_interp_get_entry (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_get_else_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_get_else\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_interp_get_else (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_set_else_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_set_else\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_interp_set_else (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_get_arity_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_get_arity\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_interp_get_arity (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_interp_add_entry_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_interp_add_entry\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_interp  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_interp_add_entry (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_entry_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_entry_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_entry  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_entry_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_entry_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_entry_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_entry  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_func_entry_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_func_entry_get_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_entry_get_value\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_entry  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_entry_get_value (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_entry_get_num_args_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_entry_get_num_args\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_entry  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_entry_get_num_args (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_entry_get_arg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_entry_get_arg\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_entry  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_entry_get_arg (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_open_log_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_open_log\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value0[MAX_LEN];
                size_t result0;
                status = napi_get_value_string_latin1(env, args[0], value0, MAX_LEN, &result0);
                if (result0 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value0);
                
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_open_log (value0);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_append_log_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_append_log\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value0[MAX_LEN];
                size_t result0;
                status = napi_get_value_string_latin1(env, args[0], value0, MAX_LEN, &result0);
                if (result0 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value0);
                
  		assert(status == napi_ok);
         
                

                
                Z3_append_log (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_close_log_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_close_log\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                Z3_close_log ();
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_toggle_warning_messages_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_toggle_warning_messages\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value0;
                status = napi_get_value_int64(env, args[0], (long long *) &value0);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_toggle_warning_messages (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_set_ast_print_mode_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_set_ast_print_mode\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_ast_print_mode  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_set_ast_print_mode (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_pattern_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_pattern_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_pattern  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_pattern_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_sort_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_sort_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_sort_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_func_decl_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_func_decl_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_func_decl_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_benchmark_to_smtlib_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_benchmark_to_smtlib_string\n");
		napi_status status;
                size_t argc= 8;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 8) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 8");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value3[MAX_LEN];
                size_t result3;
                status = napi_get_value_string_latin1(env, args[3], value3, MAX_LEN, &result3);
                if (result3 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value3);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value4[MAX_LEN];
                size_t result4;
                status = napi_get_value_string_latin1(env, args[4], value4, MAX_LEN, &result4);
                if (result4 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value4);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype7;
                status = napi_typeof(env, args[7], &valuetype7);
                assert(status == napi_ok);

                if (valuetype7 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value7;
                status = napi_get_value_external(env, args[7], (void **) &value7);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_benchmark_to_smtlib_string (value0,value1,value2,value3,value4,value5,value6,value7);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_parse_smtlib2_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_parse_smtlib2_string\n");
		napi_status status;
                size_t argc= 8;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 8) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 8");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array7;
                status = napi_is_array(env, args[7], &is_array7);
                assert(status == napi_ok);

                if (!is_array7) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_func_decl value7[MAX_LEN];
                
                uint32_t length7;
                status = napi_get_array_length(env, args[7], &length7);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length7;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[7],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value7[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_parse_smtlib2_string (value0,value1,value2,value3,value4,value5,value6,value7);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_parse_smtlib2_file_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_parse_smtlib2_file\n");
		napi_status status;
                size_t argc= 8;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 8) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 8");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_sort value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value5;
                status = napi_get_value_int64(env, args[5], (long long *) &value5);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array6;
                status = napi_is_array(env, args[6], &is_array6);
                assert(status == napi_ok);

                if (!is_array6) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value6[MAX_LEN];
                
                uint32_t length6;
                status = napi_get_array_length(env, args[6], &length6);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length6;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[6],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value6[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value6);
		
  		assert(status == napi_ok);
         
                
                
                bool is_array7;
                status = napi_is_array(env, args[7], &is_array7);
                assert(status == napi_ok);

                if (!is_array7) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_func_decl value7[MAX_LEN];
                
                uint32_t length7;
                status = napi_get_array_length(env, args[7], &length7);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length7;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[7],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value7[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value7);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_parse_smtlib2_file (value0,value1,value2,value3,value4,value5,value6,value7);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_eval_smtlib2_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_eval_smtlib2_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_eval_smtlib2_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_parser_error_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_parser_error\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_parser_error (value0);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_error_code_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_error_code\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_error_code  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_error_code (value0);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_set_error_handler_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_set_error_handler\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_error_handler * value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_set_error_handler (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_set_error_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_set_error\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_error_code  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_set_error (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_get_error_msg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_error_msg\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_error_code  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_error_msg (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_error_msg_ex_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_error_msg_ex\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_error_code  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_error_msg_ex (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_version_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_version\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_get_version (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_get_full_version_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_full_version\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_full_version ();
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_enable_trace_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_enable_trace\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value0[MAX_LEN];
                size_t result0;
                status = napi_get_value_string_latin1(env, args[0], value0, MAX_LEN, &result0);
                if (result0 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value0);
                
  		assert(status == napi_ok);
         
                

                
                Z3_enable_trace (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_disable_trace_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_disable_trace\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value0[MAX_LEN];
                size_t result0;
                status = napi_get_value_string_latin1(env, args[0], value0, MAX_LEN, &result0);
                if (result0 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value0);
                
  		assert(status == napi_ok);
         
                

                
                Z3_disable_trace (value0);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_reset_memory_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_reset_memory\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                Z3_reset_memory ();
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_finalize_memory_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_finalize_memory\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                Z3_finalize_memory ();
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_goal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_goal\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_goal  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_goal (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_goal_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_goal_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_goal_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_goal_precision_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_precision\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_goal_prec  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_precision (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_assert_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_assert\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_goal_assert (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_goal_inconsistent_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_inconsistent\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_inconsistent (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_depth_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_depth\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_depth (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_reset_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_reset\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_goal_reset (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_goal_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_formula_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_formula\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_formula (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_num_exprs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_num_exprs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_num_exprs (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_is_decided_sat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_is_decided_sat\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_is_decided_sat (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_is_decided_unsat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_is_decided_unsat\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_is_decided_unsat (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_translate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_translate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_goal  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_translate (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_convert_model_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_convert_model\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_convert_model (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_goal_to_dimacs_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_goal_to_dimacs_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_goal_to_dimacs_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_tactic_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_tactic\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_tactic (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_probe_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_probe\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_probe (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_probe_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_and_then_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_and_then\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_and_then (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_or_else_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_or_else\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_or_else (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_par_or_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_par_or\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_tactic value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_par_or (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_par_and_then_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_par_and_then\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_par_and_then (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_try_for_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_try_for\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_try_for (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_when_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_when\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_when (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_cond_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_cond\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_cond (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_repeat_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_repeat\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_repeat (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_skip_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_skip\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_skip (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_fail_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_fail\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_fail (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_fail_if_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_fail_if\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_fail_if (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_fail_if_not_decided_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_fail_if_not_decided\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_fail_if_not_decided (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_using_params_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_using_params\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_tactic  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_using_params (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_const_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_const\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                double  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_const (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_lt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_lt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_lt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_gt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_gt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_gt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_le_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_le\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_le (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_ge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_ge\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_ge (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_eq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_eq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_eq (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_and_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_and\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_and (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_or_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_or\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_or (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_not_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_not\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_probe  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_not (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_num_tactics_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_num_tactics\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_num_tactics (value0);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_tactic_name_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_tactic_name\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_tactic_name (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_num_probes_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_num_probes\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_num_probes (value0);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_probe_name_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_probe_name\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_probe_name (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_get_help_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_get_help\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_get_help (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_get_param_descrs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_get_param_descrs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_get_param_descrs (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_get_descr_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_get_descr\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_get_descr (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_get_descr_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_get_descr\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_get_descr (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_probe_apply_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_probe_apply\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_probe  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                double  c_ret;
                napi_value napi_ret;

                c_ret = Z3_probe_apply (value0,value1,value2);
 
 
                
                status = napi_create_double(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_apply_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_apply\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_apply_result  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_apply (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_tactic_apply_ex_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_tactic_apply_ex\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_goal  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_apply_result  c_ret;
                napi_value napi_ret;

                c_ret = Z3_tactic_apply_ex (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_apply_result_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_apply_result_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_apply_result  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_apply_result_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_apply_result_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_apply_result_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_apply_result  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_apply_result_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_apply_result_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_apply_result_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_apply_result  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_apply_result_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_apply_result_get_num_subgoals_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_apply_result_get_num_subgoals\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_apply_result  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_apply_result_get_num_subgoals (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_apply_result_get_subgoal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_apply_result_get_subgoal\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_apply_result  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_goal  c_ret;
                napi_value napi_ret;

                c_ret = Z3_apply_result_get_subgoal (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_solver_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_solver\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_solver (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_simple_solver_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_simple_solver\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_simple_solver (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_solver_for_logic_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_solver_for_logic\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_solver_for_logic (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_solver_from_tactic_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_solver_from_tactic\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_tactic  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_solver_from_tactic (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_translate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_translate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_translate (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_import_model_converter_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_import_model_converter\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_import_model_converter (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_help_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_help\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_help (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_param_descrs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_param_descrs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_param_descrs (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_set_params_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_set_params\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_set_params (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_push_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_push\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_push (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_pop_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_pop\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_solver_pop (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_reset_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_reset\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_reset (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_num_scopes_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_num_scopes\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_num_scopes (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_assert_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_assert\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_assert (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_assert_and_track_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_assert_and_track\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_solver_assert_and_track (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_from_file_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_from_file\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_solver_from_file (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_from_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_from_string\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_solver_from_string (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_assertions_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_assertions\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_assertions (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_units_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_units\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_units (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_check_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_check\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_check (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_check_assumptions_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_check_assumptions\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_check_assumptions (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_implied_equalities_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_implied_equalities\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_ast value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_implied_equalities (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_consequences_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_consequences\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_consequences (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_cube_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_cube\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_cube (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_model_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_model\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_model (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_proof_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_proof\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_proof (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_unsat_core_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_unsat_core\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_unsat_core (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_reason_unknown_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_reason_unknown\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_reason_unknown (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_get_statistics_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_get_statistics\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_stats  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_get_statistics (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_solver_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_solver_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_solver  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_solver_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_stats_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_stats_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_stats_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_stats_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_get_key_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_get_key\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_get_key (value0,value1,value2);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_is_uint_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_is_uint\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_is_uint (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_is_double_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_is_double\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_is_double (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_get_uint_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_get_uint_value\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_get_uint_value (value0,value1,value2);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_stats_get_double_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_stats_get_double_value\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_stats  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                double  c_ret;
                napi_value napi_ret;

                c_ret = Z3_stats_get_double_value (value0,value1,value2);
 
 
                
                status = napi_create_double(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_get_estimated_alloc_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_get_estimated_alloc_size\n");
		napi_status status;
                size_t argc= 0;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 0) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 0");
    			return nullptr;
  		}
                
                

                
                uint64_t  c_ret;
                napi_value napi_ret;

                c_ret = Z3_get_estimated_alloc_size ();
 
 
                
                status = napi_create_int64(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_ast_vector_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_ast_vector\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_ast_vector (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_vector_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_get_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_get\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_vector_get (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_set_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_set\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector_set (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_resize_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_resize\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector_resize (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_push_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_push\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector_push (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_translate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_translate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_vector_translate (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_vector_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_vector_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_vector_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_ast_map_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_ast_map\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_map  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_ast_map (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_map_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_map_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_contains_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_contains\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_map_contains (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_find_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_find\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_map_find (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_insert_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_insert\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_map_insert (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_erase_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_erase\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_map_erase (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_reset_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_reset\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_map_reset (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_size_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_size\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_map_size (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_keys_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_keys\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_map_keys (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_ast_map_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_ast_map_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_ast_map_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_is_value_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_is_value\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_is_value (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_is_pos_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_is_pos\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_is_pos (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_is_neg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_is_neg\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_is_neg (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_is_zero_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_is_zero\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_is_zero (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_sign_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_sign\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_sign (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_add_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_add\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_add (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_sub_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_sub\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_sub (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_mul_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_mul\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_mul (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_div_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_div\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_div (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_root_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_root\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_root (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_power_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_power\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_power (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_lt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_lt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_lt (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_gt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_gt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_gt (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_le_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_le\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_le (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_ge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_ge\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_ge (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_eq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_eq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_eq (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_neq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_neq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_neq (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_roots_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_roots\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_roots (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_algebraic_eval_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_algebraic_eval\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_algebraic_eval (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_polynomial_subresultants_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_polynomial_subresultants\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_polynomial_subresultants (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_del_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_del\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_del (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mk_rational_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mk_rational\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value1[MAX_LEN];
                size_t result1;
                status = napi_get_value_string_latin1(env, args[1], value1, MAX_LEN, &result1);
                if (result1 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value1);
                
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mk_rational (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mk_small_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mk_small_int\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mk_small_int (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mk_pi_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mk_pi\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mk_pi (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mk_e_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mk_e\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mk_e (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mk_infinitesimal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mk_infinitesimal\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mk_infinitesimal (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mk_roots_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mk_roots\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array2;
                status = napi_is_array(env, args[2], &is_array2);
                assert(status == napi_ok);

                if (!is_array2) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_rcf_num value2[MAX_LEN];
                
                uint32_t length2;
                status = napi_get_array_length(env, args[2], &length2);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length2;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[2],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value2[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mk_roots (value0,value1,value2,value3);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_add_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_add\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_add (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_sub_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_sub\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_sub (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_mul_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_mul\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_mul (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_div_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_div\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_div (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_neg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_neg\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_neg (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_inv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_inv\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_inv (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_power_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_power\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_num  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_power (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_lt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_lt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_lt (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_gt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_gt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_gt (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_le_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_le\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_le (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_ge_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_ge\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_ge (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_eq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_eq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_eq (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_neq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_neq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_neq (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_num_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_num_to_string\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_num_to_string (value0,value1,value2,value3);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_num_to_decimal_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_num_to_decimal_string\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_rcf_num_to_decimal_string (value0,value1,value2);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_rcf_get_numerator_denominator_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_rcf_get_numerator_denominator\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_rcf_num * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_rcf_get_numerator_denominator (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fixedpoint_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fixedpoint\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fixedpoint (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_add_rule_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_add_rule\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_add_rule (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_add_fact_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_add_fact\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                unsigned int * value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_add_fact (value0,value1,value2,value3,value4);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_assert_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_assert\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_assert (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_query_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_query\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_query (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_query_relations_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_query_relations\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_func_decl value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_query_relations (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_answer_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_answer\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_answer (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_reason_unknown_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_reason_unknown\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_reason_unknown (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_update_rule_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_update_rule\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_update_rule (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_num_levels_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_num_levels\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_num_levels (value0,value1,value2);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_cover_delta_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_cover_delta\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_cover_delta (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_add_cover_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_add_cover\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_add_cover (value0,value1,value2,value3,value4);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_statistics_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_statistics\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_stats  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_statistics (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_register_relation_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_register_relation\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_register_relation (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_set_predicate_representation_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_set_predicate_representation\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array4;
                status = napi_is_array(env, args[4], &is_array4);
                assert(status == napi_ok);

                if (!is_array4) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_symbol value4[MAX_LEN];
                
                uint32_t length4;
                status = napi_get_array_length(env, args[4], &length4);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length4;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[4],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value4[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_set_predicate_representation (value0,value1,value2,value3,value4);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_rules_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_rules\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_rules (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_assertions_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_assertions\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_assertions (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_set_params_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_set_params\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_set_params (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_help_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_help\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_help (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_param_descrs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_param_descrs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_param_descrs (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_to_string\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast * value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_to_string (value0,value1,value2,value3);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_from_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_from_string\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_from_string (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_from_file_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_from_file\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_from_file (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_push_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_push\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_push (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_pop_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_pop\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_pop (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_init_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_init\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                void * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_init (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_set_reduce_assign_callback_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_set_reduce_assign_callback\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint_reduce_assign_callback_fptr * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_set_reduce_assign_callback (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_set_reduce_app_callback_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_set_reduce_app_callback\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint_reduce_app_callback_fptr * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_set_reduce_app_callback (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_mk_optimize_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_optimize\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_optimize (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_inc_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_inc_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_inc_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_dec_ref_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_dec_ref\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_dec_ref (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_assert_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_assert\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_assert (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_assert_soft_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_assert_soft\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value3[MAX_LEN];
                size_t result3;
                status = napi_get_value_string_latin1(env, args[3], value3, MAX_LEN, &result3);
                if (result3 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value3);
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_symbol  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_assert_soft (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_maximize_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_maximize\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_maximize (value0,value1,value2);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_minimize_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_minimize\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_minimize (value0,value1,value2);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_push_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_push\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_push (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_pop_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_pop\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_pop (value0,value1);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_check_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_check\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_check (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_reason_unknown_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_reason_unknown\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_reason_unknown (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_model_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_model\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_model  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_model (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_set_params_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_set_params\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_params  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_set_params (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_param_descrs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_param_descrs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_param_descrs  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_param_descrs (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_lower_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_lower\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_lower (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_upper_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_upper\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_upper (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_lower_as_vector_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_lower_as_vector\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_lower_as_vector (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_upper_as_vector_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_upper_as_vector\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_upper_as_vector (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_to_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_to_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_to_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_from_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_from_string\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_from_string (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_from_file_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_from_file\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_string) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                char value2[MAX_LEN];
                size_t result2;
                status = napi_get_value_string_latin1(env, args[2], value2, MAX_LEN, &result2);
                if (result2 > 4094) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                dprintf("Got string argument: %s\n", value2);
                
  		assert(status == napi_ok);
         
                

                
                Z3_optimize_from_file (value0,value1,value2);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_help_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_help\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_help (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_statistics_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_statistics\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_stats  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_statistics (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_assertions_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_assertions\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_assertions (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_optimize_get_objectives_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_optimize_get_objectives\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_optimize  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_optimize_get_objectives (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rounding_mode_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rounding_mode_sort\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rounding_mode_sort (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_round_nearest_ties_to_even_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_round_nearest_ties_to_even\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_round_nearest_ties_to_even (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rne_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rne\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rne (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_round_nearest_ties_to_away_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_round_nearest_ties_to_away\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_round_nearest_ties_to_away (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rna_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rna\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rna (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_round_toward_positive_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_round_toward_positive\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_round_toward_positive (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rtp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rtp\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rtp (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_round_toward_negative_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_round_toward_negative\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_round_toward_negative (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rtn_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rtn\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rtn (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_round_toward_zero_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_round_toward_zero\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_round_toward_zero (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rtz_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rtz\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rtz (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_half_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_half\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_half (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_16_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_16\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_16 (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_single_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_single\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_single (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_32_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_32\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_32 (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_double_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_double\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_double (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_64\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_64 (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_quadruple_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_quadruple\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_quadruple (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sort_128_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sort_128\n");
		napi_status status;
                size_t argc= 1;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 1) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 1");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                

                
                Z3_sort  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sort_128 (value0);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_nan_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_nan\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_nan (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_inf_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_inf\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_inf (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_zero_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_zero\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_zero (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_fp_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_fp\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_fp (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_numeral_float_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_numeral_float\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                float  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_numeral_float (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_numeral_double_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_numeral_double\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                double  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_numeral_double (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_numeral_int_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_numeral_int\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_numeral_int (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_numeral_int_uint_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_numeral_int_uint\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_numeral_int_uint (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_numeral_int64_uint64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_numeral_int64_uint64\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value1;
                status = napi_get_value_int64(env, args[1], (long long *) &value1);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                /* NAPI does not have uint64 type */
                long long value2;
                status = napi_get_value_int64(env, args[2],  &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                /* NAPI does not have uint64 type */
                long long value3;
                status = napi_get_value_int64(env, args[3],  &value3);
                
                
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_numeral_int64_uint64 (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_abs_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_abs\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_abs (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_neg_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_neg\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_neg (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_add_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_add\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_add (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sub_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sub\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sub (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_mul_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_mul\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_mul (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_div_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_div\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_div (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_fma_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_fma\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_fma (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_sqrt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_sqrt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_sqrt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_rem_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_rem\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_rem (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_round_to_integral_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_round_to_integral\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_round_to_integral (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_min_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_min\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_min (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_max_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_max\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_max (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_leq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_leq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_leq (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_lt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_lt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_lt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_geq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_geq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_geq (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_gt_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_gt\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_gt (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_eq_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_eq\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_eq (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_normal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_normal\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_normal (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_subnormal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_subnormal\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_subnormal (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_zero_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_zero\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_zero (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_infinite_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_infinite\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_infinite (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_nan_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_nan\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_nan (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_negative_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_negative\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_negative (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_is_positive_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_is_positive\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_is_positive (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_fp_bv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_fp_bv\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_fp_bv (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_fp_float_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_fp_float\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_fp_float (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_fp_real_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_fp_real\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_fp_real (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_fp_signed_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_fp_signed\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_fp_signed (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_fp_unsigned_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_fp_unsigned\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_fp_unsigned (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_ubv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_ubv\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_ubv (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_sbv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_sbv\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_sbv (value0,value1,value2,value3);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_real_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_real\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_real (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_ebits_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_ebits\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_ebits (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_sbits_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_sbits\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                unsigned int  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_sbits (value0,value1);
 
 
                
                status = napi_create_uint32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_nan_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_nan\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_nan (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_inf_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_inf\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_inf (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_zero_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_zero\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_zero (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_normal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_normal\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_normal (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_subnormal_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_subnormal\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_subnormal (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_positive_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_positive\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_positive (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_is_numeral_negative_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_is_numeral_negative\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_is_numeral_negative (value0,value1);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_sign_bv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_sign_bv\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_sign_bv (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_significand_bv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_significand_bv\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_significand_bv (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_sign_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_sign\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_sign (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_significand_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_significand_string\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_significand_string (value0,value1);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_significand_uint64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_significand_uint64\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                uint64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_significand_uint64 (value0,value1,value2);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_exponent_string_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_exponent_string\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_string  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_exponent_string (value0,value1,value2);
 
 
                
                status = napi_create_string_latin1(env, c_ret, NAPI_AUTO_LENGTH, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_exponent_int64_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_exponent_int64\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                int64_t * value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_bool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_exponent_int64 (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fpa_get_numeral_exponent_bv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fpa_get_numeral_exponent_bv\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                Z3_bool  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fpa_get_numeral_exponent_bv (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_ieee_bv_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_ieee_bv\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_ieee_bv (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_mk_fpa_to_fp_int_real_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_mk_fpa_to_fp_int_real\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_sort  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_mk_fpa_to_fp_int_real (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_query_from_lvl_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_query_from_lvl\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value3;
                status = napi_get_value_int64(env, args[3], (long long *) &value3);
                
                
  		assert(status == napi_ok);
         
                

                
                Z3_lbool  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_query_from_lvl (value0,value1,value2,value3);
 
 
                
                status = napi_create_int32(env, c_ret, &napi_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_ground_sat_answer_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_ground_sat_answer\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_ground_sat_answer (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_rules_along_trace_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_rules_along_trace\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast_vector  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_rules_along_trace (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_rule_names_along_trace_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_rule_names_along_trace\n");
		napi_status status;
                size_t argc= 2;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 2) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 2");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                

                
                Z3_symbol  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_rule_names_along_trace (value0,value1);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_add_invariant_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_add_invariant\n");
		napi_status status;
                size_t argc= 4;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 4) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 4");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype3;
                status = napi_typeof(env, args[3], &valuetype3);
                assert(status == napi_ok);

                if (valuetype3 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value3;
                status = napi_get_value_external(env, args[3], (void **) &value3);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                

                
                Z3_fixedpoint_add_invariant (value0,value1,value2,value3);
                napi_value napi_ret;
                status = napi_create_int32(env, 0, &napi_ret);
          
                return napi_ret;
                
              
	}
        
	napi_value Z3_fixedpoint_get_reachable_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_fixedpoint_get_reachable\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_fixedpoint  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_func_decl  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_fixedpoint_get_reachable (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_qe_model_project_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_qe_model_project\n");
		napi_status status;
                size_t argc= 5;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 5) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 5");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_app value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_qe_model_project (value0,value1,value2,value3,value4);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_qe_model_project_skolem_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_qe_model_project_skolem\n");
		napi_status status;
                size_t argc= 6;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 6) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 6");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_number) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                
                unsigned int  value2;
                status = napi_get_value_int64(env, args[2], (long long *) &value2);
                
                
  		assert(status == napi_ok);
         
                
                
                bool is_array3;
                status = napi_is_array(env, args[3], &is_array3);
                assert(status == napi_ok);

                if (!is_array3) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
                }
                


                
                Z3_app value3[MAX_LEN];
                
                uint32_t length3;
                status = napi_get_array_length(env, args[3], &length3);
                assert(status == napi_ok);

                for(uint32_t i=0;i<length3;i++) {
                        napi_value elt;
                        status = napi_get_element(env,
                             args[3],
                             i,
                             &elt);
                	assert(status == napi_ok);
                        status = napi_get_value_external(env, elt, (void **) &value3[i]);
                	assert(status == napi_ok);
                }
                
                dprintf("Got array value for pointer: 0x%lx\n", (unsigned long) value3);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype4;
                status = napi_typeof(env, args[4], &valuetype4);
                assert(status == napi_ok);

                if (valuetype4 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value4;
                status = napi_get_value_external(env, args[4], (void **) &value4);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value4);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype5;
                status = napi_typeof(env, args[5], &valuetype5);
                assert(status == napi_ok);

                if (valuetype5 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_map  value5;
                status = napi_get_value_external(env, args[5], (void **) &value5);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value5);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_qe_model_project_skolem (value0,value1,value2,value3,value4,value5);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_model_extrapolate_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_model_extrapolate\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_model  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_model_extrapolate (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        
	napi_value Z3_qe_lite_Method(napi_env env, napi_callback_info info) {
                
                dprintf("Entering method: Z3_qe_lite\n");
		napi_status status;
                size_t argc= 3;
  		napi_value args[MAX_ARGS];
  		status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
  		assert(status == napi_ok);

                dprintf("Collected callback info\n");
                if (argc != 3) {
    			napi_throw_type_error(env, nullptr, "Incorrect number of arguments. Expected: 3");
    			return nullptr;
  		}
                
                
                
                napi_valuetype valuetype0;
                status = napi_typeof(env, args[0], &valuetype0);
                assert(status == napi_ok);

                if (valuetype0 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_context  value0;
                status = napi_get_value_external(env, args[0], (void **) &value0);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value0);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype1;
                status = napi_typeof(env, args[1], &valuetype1);
                assert(status == napi_ok);

                if (valuetype1 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast_vector  value1;
                status = napi_get_value_external(env, args[1], (void **) &value1);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value1);
		
  		assert(status == napi_ok);
         
                
                
                napi_valuetype valuetype2;
                status = napi_typeof(env, args[2], &valuetype2);
                assert(status == napi_ok);

                if (valuetype2 != napi_external) {
    			napi_throw_type_error(env, nullptr, "Type error");
    			return nullptr;
  		}
                


                
                Z3_ast  value2;
                status = napi_get_value_external(env, args[2], (void **) &value2);
                dprintf("Got external value for pointer: 0x%lx\n", (unsigned long) value2);
		
  		assert(status == napi_ok);
         
                

                
                Z3_ast  c_ret;
                napi_value napi_ret;

                c_ret = Z3_qe_lite (value0,value1,value2);
 
 
                
                status = napi_create_external(env, c_ret, NULL, NULL, &napi_ret);
                dprintf("Created external value as pointer: 0x%lx\n", (unsigned long) c_ret);
                

		if (status != napi_ok) return nullptr;
		return napi_ret;
                
              
	}
        

	napi_value init(napi_env env, napi_value exports) {
		napi_status status;
                
                
                napi_property_descriptor Z3_global_param_set_Descriptor = DECLARE_NAPI_METHOD("Z3_global_param_set", Z3_global_param_set_Method);

                status = napi_define_properties(env, exports, 1, &Z3_global_param_set_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_global_param_reset_all_Descriptor = DECLARE_NAPI_METHOD("Z3_global_param_reset_all", Z3_global_param_reset_all_Method);

                status = napi_define_properties(env, exports, 1, &Z3_global_param_reset_all_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_global_param_get_Descriptor = DECLARE_NAPI_METHOD("Z3_global_param_get", Z3_global_param_get_Method);

                status = napi_define_properties(env, exports, 1, &Z3_global_param_get_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_config_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_config", Z3_mk_config_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_config_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_del_config_Descriptor = DECLARE_NAPI_METHOD("Z3_del_config", Z3_del_config_Method);

                status = napi_define_properties(env, exports, 1, &Z3_del_config_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_set_param_value_Descriptor = DECLARE_NAPI_METHOD("Z3_set_param_value", Z3_set_param_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_set_param_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_context_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_context", Z3_mk_context_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_context_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_context_rc_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_context_rc", Z3_mk_context_rc_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_context_rc_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_del_context_Descriptor = DECLARE_NAPI_METHOD("Z3_del_context", Z3_del_context_Method);

                status = napi_define_properties(env, exports, 1, &Z3_del_context_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_inc_ref", Z3_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_dec_ref", Z3_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_update_param_value_Descriptor = DECLARE_NAPI_METHOD("Z3_update_param_value", Z3_update_param_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_update_param_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_interrupt_Descriptor = DECLARE_NAPI_METHOD("Z3_interrupt", Z3_interrupt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_interrupt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_params_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_params", Z3_mk_params_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_params_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_params_inc_ref", Z3_params_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_params_dec_ref", Z3_params_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_set_bool_Descriptor = DECLARE_NAPI_METHOD("Z3_params_set_bool", Z3_params_set_bool_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_set_bool_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_set_uint_Descriptor = DECLARE_NAPI_METHOD("Z3_params_set_uint", Z3_params_set_uint_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_set_uint_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_set_double_Descriptor = DECLARE_NAPI_METHOD("Z3_params_set_double", Z3_params_set_double_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_set_double_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_set_symbol_Descriptor = DECLARE_NAPI_METHOD("Z3_params_set_symbol", Z3_params_set_symbol_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_set_symbol_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_params_to_string", Z3_params_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_params_validate_Descriptor = DECLARE_NAPI_METHOD("Z3_params_validate", Z3_params_validate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_params_validate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_inc_ref", Z3_param_descrs_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_dec_ref", Z3_param_descrs_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_get_kind_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_get_kind", Z3_param_descrs_get_kind_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_get_kind_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_size_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_size", Z3_param_descrs_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_get_name_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_get_name", Z3_param_descrs_get_name_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_get_name_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_get_documentation_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_get_documentation", Z3_param_descrs_get_documentation_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_get_documentation_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_param_descrs_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_param_descrs_to_string", Z3_param_descrs_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_param_descrs_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int_symbol_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int_symbol", Z3_mk_int_symbol_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int_symbol_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_string_symbol_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_string_symbol", Z3_mk_string_symbol_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_string_symbol_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_uninterpreted_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_uninterpreted_sort", Z3_mk_uninterpreted_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_uninterpreted_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bool_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bool_sort", Z3_mk_bool_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bool_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int_sort", Z3_mk_int_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_real_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_real_sort", Z3_mk_real_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_real_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bv_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bv_sort", Z3_mk_bv_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bv_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_finite_domain_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_finite_domain_sort", Z3_mk_finite_domain_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_finite_domain_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_array_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_array_sort", Z3_mk_array_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_array_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_array_sort_n_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_array_sort_n", Z3_mk_array_sort_n_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_array_sort_n_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_tuple_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_tuple_sort", Z3_mk_tuple_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_tuple_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_enumeration_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_enumeration_sort", Z3_mk_enumeration_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_enumeration_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_list_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_list_sort", Z3_mk_list_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_list_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_constructor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_constructor", Z3_mk_constructor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_constructor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_del_constructor_Descriptor = DECLARE_NAPI_METHOD("Z3_del_constructor", Z3_del_constructor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_del_constructor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_datatype_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_datatype", Z3_mk_datatype_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_datatype_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_constructor_list_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_constructor_list", Z3_mk_constructor_list_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_constructor_list_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_del_constructor_list_Descriptor = DECLARE_NAPI_METHOD("Z3_del_constructor_list", Z3_del_constructor_list_Method);

                status = napi_define_properties(env, exports, 1, &Z3_del_constructor_list_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_datatypes_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_datatypes", Z3_mk_datatypes_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_datatypes_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_query_constructor_Descriptor = DECLARE_NAPI_METHOD("Z3_query_constructor", Z3_query_constructor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_query_constructor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_func_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_func_decl", Z3_mk_func_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_func_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_app_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_app", Z3_mk_app_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_app_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_const_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_const", Z3_mk_const_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_const_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fresh_func_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fresh_func_decl", Z3_mk_fresh_func_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fresh_func_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fresh_const_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fresh_const", Z3_mk_fresh_const_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fresh_const_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_true_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_true", Z3_mk_true_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_true_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_false_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_false", Z3_mk_false_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_false_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_eq_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_eq", Z3_mk_eq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_eq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_distinct_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_distinct", Z3_mk_distinct_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_distinct_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_not_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_not", Z3_mk_not_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_not_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_ite_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_ite", Z3_mk_ite_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_ite_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_iff_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_iff", Z3_mk_iff_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_iff_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_implies_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_implies", Z3_mk_implies_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_implies_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_xor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_xor", Z3_mk_xor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_xor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_and_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_and", Z3_mk_and_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_and_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_or_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_or", Z3_mk_or_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_or_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_add_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_add", Z3_mk_add_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_add_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_mul_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_mul", Z3_mk_mul_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_mul_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_sub_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_sub", Z3_mk_sub_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_sub_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_unary_minus_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_unary_minus", Z3_mk_unary_minus_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_unary_minus_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_div_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_div", Z3_mk_div_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_div_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_mod_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_mod", Z3_mk_mod_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_mod_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_rem_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_rem", Z3_mk_rem_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_rem_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_power_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_power", Z3_mk_power_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_power_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_lt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_lt", Z3_mk_lt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_lt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_le_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_le", Z3_mk_le_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_le_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_gt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_gt", Z3_mk_gt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_gt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_ge_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_ge", Z3_mk_ge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_ge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int2real_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int2real", Z3_mk_int2real_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int2real_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_real2int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_real2int", Z3_mk_real2int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_real2int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_is_int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_is_int", Z3_mk_is_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_is_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvnot_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvnot", Z3_mk_bvnot_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvnot_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvredand_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvredand", Z3_mk_bvredand_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvredand_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvredor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvredor", Z3_mk_bvredor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvredor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvand_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvand", Z3_mk_bvand_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvand_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvor", Z3_mk_bvor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvxor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvxor", Z3_mk_bvxor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvxor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvnand_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvnand", Z3_mk_bvnand_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvnand_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvnor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvnor", Z3_mk_bvnor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvnor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvxnor_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvxnor", Z3_mk_bvxnor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvxnor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvneg_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvneg", Z3_mk_bvneg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvneg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvadd_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvadd", Z3_mk_bvadd_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvadd_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsub_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsub", Z3_mk_bvsub_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsub_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvmul_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvmul", Z3_mk_bvmul_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvmul_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvudiv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvudiv", Z3_mk_bvudiv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvudiv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsdiv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsdiv", Z3_mk_bvsdiv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsdiv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvurem_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvurem", Z3_mk_bvurem_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvurem_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsrem_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsrem", Z3_mk_bvsrem_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsrem_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsmod_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsmod", Z3_mk_bvsmod_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsmod_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvult_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvult", Z3_mk_bvult_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvult_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvslt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvslt", Z3_mk_bvslt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvslt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvule_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvule", Z3_mk_bvule_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvule_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsle_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsle", Z3_mk_bvsle_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsle_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvuge_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvuge", Z3_mk_bvuge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvuge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsge_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsge", Z3_mk_bvsge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvugt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvugt", Z3_mk_bvugt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvugt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsgt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsgt", Z3_mk_bvsgt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsgt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_concat_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_concat", Z3_mk_concat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_concat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_extract_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_extract", Z3_mk_extract_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_extract_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_sign_ext_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_sign_ext", Z3_mk_sign_ext_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_sign_ext_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_zero_ext_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_zero_ext", Z3_mk_zero_ext_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_zero_ext_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_repeat_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_repeat", Z3_mk_repeat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_repeat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvshl_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvshl", Z3_mk_bvshl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvshl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvlshr_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvlshr", Z3_mk_bvlshr_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvlshr_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvashr_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvashr", Z3_mk_bvashr_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvashr_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_rotate_left_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_rotate_left", Z3_mk_rotate_left_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_rotate_left_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_rotate_right_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_rotate_right", Z3_mk_rotate_right_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_rotate_right_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_ext_rotate_left_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_ext_rotate_left", Z3_mk_ext_rotate_left_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_ext_rotate_left_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_ext_rotate_right_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_ext_rotate_right", Z3_mk_ext_rotate_right_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_ext_rotate_right_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int2bv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int2bv", Z3_mk_int2bv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int2bv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bv2int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bv2int", Z3_mk_bv2int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bv2int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvadd_no_overflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvadd_no_overflow", Z3_mk_bvadd_no_overflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvadd_no_overflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvadd_no_underflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvadd_no_underflow", Z3_mk_bvadd_no_underflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvadd_no_underflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsub_no_overflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsub_no_overflow", Z3_mk_bvsub_no_overflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsub_no_overflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsub_no_underflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsub_no_underflow", Z3_mk_bvsub_no_underflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsub_no_underflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvsdiv_no_overflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvsdiv_no_overflow", Z3_mk_bvsdiv_no_overflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvsdiv_no_overflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvneg_no_overflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvneg_no_overflow", Z3_mk_bvneg_no_overflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvneg_no_overflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvmul_no_overflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvmul_no_overflow", Z3_mk_bvmul_no_overflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvmul_no_overflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bvmul_no_underflow_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bvmul_no_underflow", Z3_mk_bvmul_no_underflow_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bvmul_no_underflow_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_select_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_select", Z3_mk_select_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_select_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_select_n_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_select_n", Z3_mk_select_n_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_select_n_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_store_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_store", Z3_mk_store_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_store_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_store_n_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_store_n", Z3_mk_store_n_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_store_n_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_const_array_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_const_array", Z3_mk_const_array_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_const_array_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_map_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_map", Z3_mk_map_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_map_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_array_default_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_array_default", Z3_mk_array_default_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_array_default_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_as_array_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_as_array", Z3_mk_as_array_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_as_array_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_sort", Z3_mk_set_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_empty_set_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_empty_set", Z3_mk_empty_set_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_empty_set_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_full_set_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_full_set", Z3_mk_full_set_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_full_set_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_add_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_add", Z3_mk_set_add_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_add_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_del_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_del", Z3_mk_set_del_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_del_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_union_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_union", Z3_mk_set_union_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_union_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_intersect_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_intersect", Z3_mk_set_intersect_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_intersect_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_difference_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_difference", Z3_mk_set_difference_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_difference_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_complement_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_complement", Z3_mk_set_complement_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_complement_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_member_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_member", Z3_mk_set_member_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_member_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_set_subset_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_set_subset", Z3_mk_set_subset_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_set_subset_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_array_ext_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_array_ext", Z3_mk_array_ext_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_array_ext_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_numeral_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_numeral", Z3_mk_numeral_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_numeral_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_real_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_real", Z3_mk_real_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_real_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int", Z3_mk_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_unsigned_int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_unsigned_int", Z3_mk_unsigned_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_unsigned_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int64_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int64", Z3_mk_int64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_unsigned_int64_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_unsigned_int64", Z3_mk_unsigned_int64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_unsigned_int64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bv_numeral_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bv_numeral", Z3_mk_bv_numeral_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bv_numeral_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_sort", Z3_mk_seq_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_seq_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_is_seq_sort", Z3_is_seq_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_seq_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_sort", Z3_mk_re_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_re_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_is_re_sort", Z3_is_re_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_re_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_string_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_string_sort", Z3_mk_string_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_string_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_string_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_is_string_sort", Z3_is_string_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_string_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_string_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_string", Z3_mk_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_string_Descriptor = DECLARE_NAPI_METHOD("Z3_is_string", Z3_is_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_string_Descriptor = DECLARE_NAPI_METHOD("Z3_get_string", Z3_get_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_empty_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_empty", Z3_mk_seq_empty_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_empty_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_unit_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_unit", Z3_mk_seq_unit_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_unit_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_concat_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_concat", Z3_mk_seq_concat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_concat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_prefix_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_prefix", Z3_mk_seq_prefix_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_prefix_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_suffix_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_suffix", Z3_mk_seq_suffix_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_suffix_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_contains_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_contains", Z3_mk_seq_contains_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_contains_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_extract_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_extract", Z3_mk_seq_extract_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_extract_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_replace_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_replace", Z3_mk_seq_replace_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_replace_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_at_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_at", Z3_mk_seq_at_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_at_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_length_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_length", Z3_mk_seq_length_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_length_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_index_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_index", Z3_mk_seq_index_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_index_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_str_to_int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_str_to_int", Z3_mk_str_to_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_str_to_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_int_to_str_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_int_to_str", Z3_mk_int_to_str_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_int_to_str_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_to_re_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_to_re", Z3_mk_seq_to_re_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_to_re_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_seq_in_re_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_seq_in_re", Z3_mk_seq_in_re_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_seq_in_re_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_plus_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_plus", Z3_mk_re_plus_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_plus_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_star_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_star", Z3_mk_re_star_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_star_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_option_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_option", Z3_mk_re_option_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_option_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_union_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_union", Z3_mk_re_union_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_union_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_concat_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_concat", Z3_mk_re_concat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_concat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_range_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_range", Z3_mk_re_range_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_range_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_loop_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_loop", Z3_mk_re_loop_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_loop_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_intersect_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_intersect", Z3_mk_re_intersect_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_intersect_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_complement_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_complement", Z3_mk_re_complement_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_complement_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_empty_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_empty", Z3_mk_re_empty_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_empty_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_re_full_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_re_full", Z3_mk_re_full_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_re_full_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_pattern_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_pattern", Z3_mk_pattern_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_pattern_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_bound_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_bound", Z3_mk_bound_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_bound_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_forall_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_forall", Z3_mk_forall_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_forall_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_exists_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_exists", Z3_mk_exists_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_exists_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_quantifier_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_quantifier", Z3_mk_quantifier_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_quantifier_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_quantifier_ex_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_quantifier_ex", Z3_mk_quantifier_ex_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_quantifier_ex_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_forall_const_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_forall_const", Z3_mk_forall_const_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_forall_const_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_exists_const_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_exists_const", Z3_mk_exists_const_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_exists_const_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_quantifier_const_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_quantifier_const", Z3_mk_quantifier_const_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_quantifier_const_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_quantifier_const_ex_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_quantifier_const_ex", Z3_mk_quantifier_const_ex_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_quantifier_const_ex_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_symbol_kind_Descriptor = DECLARE_NAPI_METHOD("Z3_get_symbol_kind", Z3_get_symbol_kind_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_symbol_kind_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_symbol_int_Descriptor = DECLARE_NAPI_METHOD("Z3_get_symbol_int", Z3_get_symbol_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_symbol_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_symbol_string_Descriptor = DECLARE_NAPI_METHOD("Z3_get_symbol_string", Z3_get_symbol_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_symbol_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_sort_name_Descriptor = DECLARE_NAPI_METHOD("Z3_get_sort_name", Z3_get_sort_name_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_sort_name_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_sort_id_Descriptor = DECLARE_NAPI_METHOD("Z3_get_sort_id", Z3_get_sort_id_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_sort_id_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_sort_to_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_sort_to_ast", Z3_sort_to_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_sort_to_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_eq_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_is_eq_sort", Z3_is_eq_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_eq_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_sort_kind_Descriptor = DECLARE_NAPI_METHOD("Z3_get_sort_kind", Z3_get_sort_kind_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_sort_kind_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_bv_sort_size_Descriptor = DECLARE_NAPI_METHOD("Z3_get_bv_sort_size", Z3_get_bv_sort_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_bv_sort_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_finite_domain_sort_size_Descriptor = DECLARE_NAPI_METHOD("Z3_get_finite_domain_sort_size", Z3_get_finite_domain_sort_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_finite_domain_sort_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_array_sort_domain_Descriptor = DECLARE_NAPI_METHOD("Z3_get_array_sort_domain", Z3_get_array_sort_domain_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_array_sort_domain_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_array_sort_range_Descriptor = DECLARE_NAPI_METHOD("Z3_get_array_sort_range", Z3_get_array_sort_range_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_array_sort_range_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_tuple_sort_mk_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_get_tuple_sort_mk_decl", Z3_get_tuple_sort_mk_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_tuple_sort_mk_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_tuple_sort_num_fields_Descriptor = DECLARE_NAPI_METHOD("Z3_get_tuple_sort_num_fields", Z3_get_tuple_sort_num_fields_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_tuple_sort_num_fields_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_tuple_sort_field_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_get_tuple_sort_field_decl", Z3_get_tuple_sort_field_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_tuple_sort_field_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_datatype_sort_num_constructors_Descriptor = DECLARE_NAPI_METHOD("Z3_get_datatype_sort_num_constructors", Z3_get_datatype_sort_num_constructors_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_datatype_sort_num_constructors_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_datatype_sort_constructor_Descriptor = DECLARE_NAPI_METHOD("Z3_get_datatype_sort_constructor", Z3_get_datatype_sort_constructor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_datatype_sort_constructor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_datatype_sort_recognizer_Descriptor = DECLARE_NAPI_METHOD("Z3_get_datatype_sort_recognizer", Z3_get_datatype_sort_recognizer_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_datatype_sort_recognizer_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_datatype_sort_constructor_accessor_Descriptor = DECLARE_NAPI_METHOD("Z3_get_datatype_sort_constructor_accessor", Z3_get_datatype_sort_constructor_accessor_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_datatype_sort_constructor_accessor_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_datatype_update_field_Descriptor = DECLARE_NAPI_METHOD("Z3_datatype_update_field", Z3_datatype_update_field_Method);

                status = napi_define_properties(env, exports, 1, &Z3_datatype_update_field_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_relation_arity_Descriptor = DECLARE_NAPI_METHOD("Z3_get_relation_arity", Z3_get_relation_arity_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_relation_arity_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_relation_column_Descriptor = DECLARE_NAPI_METHOD("Z3_get_relation_column", Z3_get_relation_column_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_relation_column_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_atmost_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_atmost", Z3_mk_atmost_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_atmost_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_atleast_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_atleast", Z3_mk_atleast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_atleast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_pble_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_pble", Z3_mk_pble_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_pble_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_pbge_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_pbge", Z3_mk_pbge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_pbge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_pbeq_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_pbeq", Z3_mk_pbeq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_pbeq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_decl_to_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_func_decl_to_ast", Z3_func_decl_to_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_decl_to_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_eq_func_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_is_eq_func_decl", Z3_is_eq_func_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_eq_func_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_func_decl_id_Descriptor = DECLARE_NAPI_METHOD("Z3_get_func_decl_id", Z3_get_func_decl_id_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_func_decl_id_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_name_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_name", Z3_get_decl_name_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_name_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_kind_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_kind", Z3_get_decl_kind_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_kind_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_domain_size_Descriptor = DECLARE_NAPI_METHOD("Z3_get_domain_size", Z3_get_domain_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_domain_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_arity_Descriptor = DECLARE_NAPI_METHOD("Z3_get_arity", Z3_get_arity_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_arity_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_domain_Descriptor = DECLARE_NAPI_METHOD("Z3_get_domain", Z3_get_domain_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_domain_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_range_Descriptor = DECLARE_NAPI_METHOD("Z3_get_range", Z3_get_range_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_range_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_num_parameters_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_num_parameters", Z3_get_decl_num_parameters_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_num_parameters_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_parameter_kind_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_parameter_kind", Z3_get_decl_parameter_kind_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_parameter_kind_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_int_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_int_parameter", Z3_get_decl_int_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_int_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_double_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_double_parameter", Z3_get_decl_double_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_double_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_symbol_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_symbol_parameter", Z3_get_decl_symbol_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_symbol_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_sort_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_sort_parameter", Z3_get_decl_sort_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_sort_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_ast_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_ast_parameter", Z3_get_decl_ast_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_ast_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_func_decl_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_func_decl_parameter", Z3_get_decl_func_decl_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_func_decl_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_decl_rational_parameter_Descriptor = DECLARE_NAPI_METHOD("Z3_get_decl_rational_parameter", Z3_get_decl_rational_parameter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_decl_rational_parameter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_app_to_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_app_to_ast", Z3_app_to_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_app_to_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_app_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_get_app_decl", Z3_get_app_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_app_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_app_num_args_Descriptor = DECLARE_NAPI_METHOD("Z3_get_app_num_args", Z3_get_app_num_args_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_app_num_args_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_app_arg_Descriptor = DECLARE_NAPI_METHOD("Z3_get_app_arg", Z3_get_app_arg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_app_arg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_eq_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_is_eq_ast", Z3_is_eq_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_eq_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_ast_id_Descriptor = DECLARE_NAPI_METHOD("Z3_get_ast_id", Z3_get_ast_id_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_ast_id_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_ast_hash_Descriptor = DECLARE_NAPI_METHOD("Z3_get_ast_hash", Z3_get_ast_hash_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_ast_hash_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_get_sort", Z3_get_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_well_sorted_Descriptor = DECLARE_NAPI_METHOD("Z3_is_well_sorted", Z3_is_well_sorted_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_well_sorted_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_bool_value_Descriptor = DECLARE_NAPI_METHOD("Z3_get_bool_value", Z3_get_bool_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_bool_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_ast_kind_Descriptor = DECLARE_NAPI_METHOD("Z3_get_ast_kind", Z3_get_ast_kind_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_ast_kind_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_app_Descriptor = DECLARE_NAPI_METHOD("Z3_is_app", Z3_is_app_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_app_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_numeral_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_is_numeral_ast", Z3_is_numeral_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_numeral_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_algebraic_number_Descriptor = DECLARE_NAPI_METHOD("Z3_is_algebraic_number", Z3_is_algebraic_number_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_algebraic_number_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_to_app_Descriptor = DECLARE_NAPI_METHOD("Z3_to_app", Z3_to_app_Method);

                status = napi_define_properties(env, exports, 1, &Z3_to_app_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_to_func_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_to_func_decl", Z3_to_func_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_to_func_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_string_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_string", Z3_get_numeral_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_decimal_string_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_decimal_string", Z3_get_numeral_decimal_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_decimal_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numerator_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numerator", Z3_get_numerator_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numerator_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_denominator_Descriptor = DECLARE_NAPI_METHOD("Z3_get_denominator", Z3_get_denominator_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_denominator_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_small_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_small", Z3_get_numeral_small_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_small_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_int_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_int", Z3_get_numeral_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_uint_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_uint", Z3_get_numeral_uint_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_uint_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_uint64_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_uint64", Z3_get_numeral_uint64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_uint64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_int64_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_int64", Z3_get_numeral_int64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_int64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_numeral_rational_int64_Descriptor = DECLARE_NAPI_METHOD("Z3_get_numeral_rational_int64", Z3_get_numeral_rational_int64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_numeral_rational_int64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_algebraic_number_lower_Descriptor = DECLARE_NAPI_METHOD("Z3_get_algebraic_number_lower", Z3_get_algebraic_number_lower_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_algebraic_number_lower_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_algebraic_number_upper_Descriptor = DECLARE_NAPI_METHOD("Z3_get_algebraic_number_upper", Z3_get_algebraic_number_upper_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_algebraic_number_upper_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_pattern_to_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_pattern_to_ast", Z3_pattern_to_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_pattern_to_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_pattern_num_terms_Descriptor = DECLARE_NAPI_METHOD("Z3_get_pattern_num_terms", Z3_get_pattern_num_terms_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_pattern_num_terms_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_pattern_Descriptor = DECLARE_NAPI_METHOD("Z3_get_pattern", Z3_get_pattern_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_pattern_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_index_value_Descriptor = DECLARE_NAPI_METHOD("Z3_get_index_value", Z3_get_index_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_index_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_quantifier_forall_Descriptor = DECLARE_NAPI_METHOD("Z3_is_quantifier_forall", Z3_is_quantifier_forall_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_quantifier_forall_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_weight_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_weight", Z3_get_quantifier_weight_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_weight_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_num_patterns_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_num_patterns", Z3_get_quantifier_num_patterns_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_num_patterns_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_pattern_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_pattern_ast", Z3_get_quantifier_pattern_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_pattern_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_num_no_patterns_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_num_no_patterns", Z3_get_quantifier_num_no_patterns_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_num_no_patterns_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_no_pattern_ast_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_no_pattern_ast", Z3_get_quantifier_no_pattern_ast_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_no_pattern_ast_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_num_bound_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_num_bound", Z3_get_quantifier_num_bound_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_num_bound_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_bound_name_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_bound_name", Z3_get_quantifier_bound_name_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_bound_name_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_bound_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_bound_sort", Z3_get_quantifier_bound_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_bound_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_quantifier_body_Descriptor = DECLARE_NAPI_METHOD("Z3_get_quantifier_body", Z3_get_quantifier_body_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_quantifier_body_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_simplify_Descriptor = DECLARE_NAPI_METHOD("Z3_simplify", Z3_simplify_Method);

                status = napi_define_properties(env, exports, 1, &Z3_simplify_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_simplify_ex_Descriptor = DECLARE_NAPI_METHOD("Z3_simplify_ex", Z3_simplify_ex_Method);

                status = napi_define_properties(env, exports, 1, &Z3_simplify_ex_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_simplify_get_help_Descriptor = DECLARE_NAPI_METHOD("Z3_simplify_get_help", Z3_simplify_get_help_Method);

                status = napi_define_properties(env, exports, 1, &Z3_simplify_get_help_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_simplify_get_param_descrs_Descriptor = DECLARE_NAPI_METHOD("Z3_simplify_get_param_descrs", Z3_simplify_get_param_descrs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_simplify_get_param_descrs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_update_term_Descriptor = DECLARE_NAPI_METHOD("Z3_update_term", Z3_update_term_Method);

                status = napi_define_properties(env, exports, 1, &Z3_update_term_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_substitute_Descriptor = DECLARE_NAPI_METHOD("Z3_substitute", Z3_substitute_Method);

                status = napi_define_properties(env, exports, 1, &Z3_substitute_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_substitute_vars_Descriptor = DECLARE_NAPI_METHOD("Z3_substitute_vars", Z3_substitute_vars_Method);

                status = napi_define_properties(env, exports, 1, &Z3_substitute_vars_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_translate_Descriptor = DECLARE_NAPI_METHOD("Z3_translate", Z3_translate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_translate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_model_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_model", Z3_mk_model_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_model_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_model_inc_ref", Z3_model_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_model_dec_ref", Z3_model_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_eval_Descriptor = DECLARE_NAPI_METHOD("Z3_model_eval", Z3_model_eval_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_eval_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_const_interp_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_const_interp", Z3_model_get_const_interp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_const_interp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_has_interp_Descriptor = DECLARE_NAPI_METHOD("Z3_model_has_interp", Z3_model_has_interp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_has_interp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_func_interp_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_func_interp", Z3_model_get_func_interp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_func_interp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_num_consts_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_num_consts", Z3_model_get_num_consts_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_num_consts_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_const_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_const_decl", Z3_model_get_const_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_const_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_num_funcs_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_num_funcs", Z3_model_get_num_funcs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_num_funcs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_func_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_func_decl", Z3_model_get_func_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_func_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_num_sorts_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_num_sorts", Z3_model_get_num_sorts_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_num_sorts_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_sort", Z3_model_get_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_get_sort_universe_Descriptor = DECLARE_NAPI_METHOD("Z3_model_get_sort_universe", Z3_model_get_sort_universe_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_get_sort_universe_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_translate_Descriptor = DECLARE_NAPI_METHOD("Z3_model_translate", Z3_model_translate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_translate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_is_as_array_Descriptor = DECLARE_NAPI_METHOD("Z3_is_as_array", Z3_is_as_array_Method);

                status = napi_define_properties(env, exports, 1, &Z3_is_as_array_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_as_array_func_decl_Descriptor = DECLARE_NAPI_METHOD("Z3_get_as_array_func_decl", Z3_get_as_array_func_decl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_as_array_func_decl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_add_func_interp_Descriptor = DECLARE_NAPI_METHOD("Z3_add_func_interp", Z3_add_func_interp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_add_func_interp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_add_const_interp_Descriptor = DECLARE_NAPI_METHOD("Z3_add_const_interp", Z3_add_const_interp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_add_const_interp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_inc_ref", Z3_func_interp_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_dec_ref", Z3_func_interp_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_get_num_entries_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_get_num_entries", Z3_func_interp_get_num_entries_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_get_num_entries_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_get_entry_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_get_entry", Z3_func_interp_get_entry_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_get_entry_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_get_else_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_get_else", Z3_func_interp_get_else_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_get_else_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_set_else_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_set_else", Z3_func_interp_set_else_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_set_else_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_get_arity_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_get_arity", Z3_func_interp_get_arity_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_get_arity_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_interp_add_entry_Descriptor = DECLARE_NAPI_METHOD("Z3_func_interp_add_entry", Z3_func_interp_add_entry_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_interp_add_entry_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_entry_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_func_entry_inc_ref", Z3_func_entry_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_entry_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_entry_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_func_entry_dec_ref", Z3_func_entry_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_entry_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_entry_get_value_Descriptor = DECLARE_NAPI_METHOD("Z3_func_entry_get_value", Z3_func_entry_get_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_entry_get_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_entry_get_num_args_Descriptor = DECLARE_NAPI_METHOD("Z3_func_entry_get_num_args", Z3_func_entry_get_num_args_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_entry_get_num_args_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_entry_get_arg_Descriptor = DECLARE_NAPI_METHOD("Z3_func_entry_get_arg", Z3_func_entry_get_arg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_entry_get_arg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_open_log_Descriptor = DECLARE_NAPI_METHOD("Z3_open_log", Z3_open_log_Method);

                status = napi_define_properties(env, exports, 1, &Z3_open_log_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_append_log_Descriptor = DECLARE_NAPI_METHOD("Z3_append_log", Z3_append_log_Method);

                status = napi_define_properties(env, exports, 1, &Z3_append_log_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_close_log_Descriptor = DECLARE_NAPI_METHOD("Z3_close_log", Z3_close_log_Method);

                status = napi_define_properties(env, exports, 1, &Z3_close_log_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_toggle_warning_messages_Descriptor = DECLARE_NAPI_METHOD("Z3_toggle_warning_messages", Z3_toggle_warning_messages_Method);

                status = napi_define_properties(env, exports, 1, &Z3_toggle_warning_messages_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_set_ast_print_mode_Descriptor = DECLARE_NAPI_METHOD("Z3_set_ast_print_mode", Z3_set_ast_print_mode_Method);

                status = napi_define_properties(env, exports, 1, &Z3_set_ast_print_mode_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_to_string", Z3_ast_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_pattern_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_pattern_to_string", Z3_pattern_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_pattern_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_sort_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_sort_to_string", Z3_sort_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_sort_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_func_decl_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_func_decl_to_string", Z3_func_decl_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_func_decl_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_model_to_string", Z3_model_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_benchmark_to_smtlib_string_Descriptor = DECLARE_NAPI_METHOD("Z3_benchmark_to_smtlib_string", Z3_benchmark_to_smtlib_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_benchmark_to_smtlib_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_parse_smtlib2_string_Descriptor = DECLARE_NAPI_METHOD("Z3_parse_smtlib2_string", Z3_parse_smtlib2_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_parse_smtlib2_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_parse_smtlib2_file_Descriptor = DECLARE_NAPI_METHOD("Z3_parse_smtlib2_file", Z3_parse_smtlib2_file_Method);

                status = napi_define_properties(env, exports, 1, &Z3_parse_smtlib2_file_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_eval_smtlib2_string_Descriptor = DECLARE_NAPI_METHOD("Z3_eval_smtlib2_string", Z3_eval_smtlib2_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_eval_smtlib2_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_parser_error_Descriptor = DECLARE_NAPI_METHOD("Z3_get_parser_error", Z3_get_parser_error_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_parser_error_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_error_code_Descriptor = DECLARE_NAPI_METHOD("Z3_get_error_code", Z3_get_error_code_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_error_code_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_set_error_handler_Descriptor = DECLARE_NAPI_METHOD("Z3_set_error_handler", Z3_set_error_handler_Method);

                status = napi_define_properties(env, exports, 1, &Z3_set_error_handler_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_set_error_Descriptor = DECLARE_NAPI_METHOD("Z3_set_error", Z3_set_error_Method);

                status = napi_define_properties(env, exports, 1, &Z3_set_error_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_error_msg_Descriptor = DECLARE_NAPI_METHOD("Z3_get_error_msg", Z3_get_error_msg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_error_msg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_error_msg_ex_Descriptor = DECLARE_NAPI_METHOD("Z3_get_error_msg_ex", Z3_get_error_msg_ex_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_error_msg_ex_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_version_Descriptor = DECLARE_NAPI_METHOD("Z3_get_version", Z3_get_version_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_version_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_full_version_Descriptor = DECLARE_NAPI_METHOD("Z3_get_full_version", Z3_get_full_version_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_full_version_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_enable_trace_Descriptor = DECLARE_NAPI_METHOD("Z3_enable_trace", Z3_enable_trace_Method);

                status = napi_define_properties(env, exports, 1, &Z3_enable_trace_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_disable_trace_Descriptor = DECLARE_NAPI_METHOD("Z3_disable_trace", Z3_disable_trace_Method);

                status = napi_define_properties(env, exports, 1, &Z3_disable_trace_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_reset_memory_Descriptor = DECLARE_NAPI_METHOD("Z3_reset_memory", Z3_reset_memory_Method);

                status = napi_define_properties(env, exports, 1, &Z3_reset_memory_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_finalize_memory_Descriptor = DECLARE_NAPI_METHOD("Z3_finalize_memory", Z3_finalize_memory_Method);

                status = napi_define_properties(env, exports, 1, &Z3_finalize_memory_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_goal_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_goal", Z3_mk_goal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_goal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_inc_ref", Z3_goal_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_dec_ref", Z3_goal_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_precision_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_precision", Z3_goal_precision_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_precision_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_assert_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_assert", Z3_goal_assert_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_assert_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_inconsistent_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_inconsistent", Z3_goal_inconsistent_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_inconsistent_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_depth_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_depth", Z3_goal_depth_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_depth_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_reset_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_reset", Z3_goal_reset_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_reset_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_size_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_size", Z3_goal_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_formula_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_formula", Z3_goal_formula_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_formula_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_num_exprs_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_num_exprs", Z3_goal_num_exprs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_num_exprs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_is_decided_sat_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_is_decided_sat", Z3_goal_is_decided_sat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_is_decided_sat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_is_decided_unsat_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_is_decided_unsat", Z3_goal_is_decided_unsat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_is_decided_unsat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_translate_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_translate", Z3_goal_translate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_translate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_convert_model_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_convert_model", Z3_goal_convert_model_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_convert_model_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_to_string", Z3_goal_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_goal_to_dimacs_string_Descriptor = DECLARE_NAPI_METHOD("Z3_goal_to_dimacs_string", Z3_goal_to_dimacs_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_goal_to_dimacs_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_tactic_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_tactic", Z3_mk_tactic_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_tactic_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_inc_ref", Z3_tactic_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_dec_ref", Z3_tactic_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_probe_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_probe", Z3_mk_probe_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_probe_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_inc_ref", Z3_probe_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_dec_ref", Z3_probe_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_and_then_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_and_then", Z3_tactic_and_then_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_and_then_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_or_else_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_or_else", Z3_tactic_or_else_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_or_else_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_par_or_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_par_or", Z3_tactic_par_or_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_par_or_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_par_and_then_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_par_and_then", Z3_tactic_par_and_then_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_par_and_then_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_try_for_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_try_for", Z3_tactic_try_for_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_try_for_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_when_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_when", Z3_tactic_when_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_when_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_cond_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_cond", Z3_tactic_cond_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_cond_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_repeat_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_repeat", Z3_tactic_repeat_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_repeat_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_skip_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_skip", Z3_tactic_skip_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_skip_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_fail_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_fail", Z3_tactic_fail_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_fail_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_fail_if_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_fail_if", Z3_tactic_fail_if_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_fail_if_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_fail_if_not_decided_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_fail_if_not_decided", Z3_tactic_fail_if_not_decided_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_fail_if_not_decided_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_using_params_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_using_params", Z3_tactic_using_params_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_using_params_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_const_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_const", Z3_probe_const_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_const_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_lt_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_lt", Z3_probe_lt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_lt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_gt_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_gt", Z3_probe_gt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_gt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_le_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_le", Z3_probe_le_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_le_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_ge_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_ge", Z3_probe_ge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_ge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_eq_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_eq", Z3_probe_eq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_eq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_and_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_and", Z3_probe_and_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_and_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_or_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_or", Z3_probe_or_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_or_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_not_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_not", Z3_probe_not_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_not_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_num_tactics_Descriptor = DECLARE_NAPI_METHOD("Z3_get_num_tactics", Z3_get_num_tactics_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_num_tactics_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_tactic_name_Descriptor = DECLARE_NAPI_METHOD("Z3_get_tactic_name", Z3_get_tactic_name_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_tactic_name_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_num_probes_Descriptor = DECLARE_NAPI_METHOD("Z3_get_num_probes", Z3_get_num_probes_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_num_probes_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_probe_name_Descriptor = DECLARE_NAPI_METHOD("Z3_get_probe_name", Z3_get_probe_name_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_probe_name_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_get_help_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_get_help", Z3_tactic_get_help_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_get_help_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_get_param_descrs_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_get_param_descrs", Z3_tactic_get_param_descrs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_get_param_descrs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_get_descr_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_get_descr", Z3_tactic_get_descr_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_get_descr_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_get_descr_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_get_descr", Z3_probe_get_descr_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_get_descr_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_probe_apply_Descriptor = DECLARE_NAPI_METHOD("Z3_probe_apply", Z3_probe_apply_Method);

                status = napi_define_properties(env, exports, 1, &Z3_probe_apply_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_apply_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_apply", Z3_tactic_apply_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_apply_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_tactic_apply_ex_Descriptor = DECLARE_NAPI_METHOD("Z3_tactic_apply_ex", Z3_tactic_apply_ex_Method);

                status = napi_define_properties(env, exports, 1, &Z3_tactic_apply_ex_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_apply_result_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_apply_result_inc_ref", Z3_apply_result_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_apply_result_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_apply_result_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_apply_result_dec_ref", Z3_apply_result_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_apply_result_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_apply_result_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_apply_result_to_string", Z3_apply_result_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_apply_result_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_apply_result_get_num_subgoals_Descriptor = DECLARE_NAPI_METHOD("Z3_apply_result_get_num_subgoals", Z3_apply_result_get_num_subgoals_Method);

                status = napi_define_properties(env, exports, 1, &Z3_apply_result_get_num_subgoals_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_apply_result_get_subgoal_Descriptor = DECLARE_NAPI_METHOD("Z3_apply_result_get_subgoal", Z3_apply_result_get_subgoal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_apply_result_get_subgoal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_solver_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_solver", Z3_mk_solver_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_solver_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_simple_solver_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_simple_solver", Z3_mk_simple_solver_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_simple_solver_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_solver_for_logic_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_solver_for_logic", Z3_mk_solver_for_logic_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_solver_for_logic_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_solver_from_tactic_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_solver_from_tactic", Z3_mk_solver_from_tactic_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_solver_from_tactic_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_translate_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_translate", Z3_solver_translate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_translate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_import_model_converter_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_import_model_converter", Z3_solver_import_model_converter_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_import_model_converter_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_help_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_help", Z3_solver_get_help_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_help_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_param_descrs_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_param_descrs", Z3_solver_get_param_descrs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_param_descrs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_set_params_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_set_params", Z3_solver_set_params_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_set_params_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_inc_ref", Z3_solver_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_dec_ref", Z3_solver_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_push_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_push", Z3_solver_push_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_push_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_pop_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_pop", Z3_solver_pop_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_pop_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_reset_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_reset", Z3_solver_reset_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_reset_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_num_scopes_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_num_scopes", Z3_solver_get_num_scopes_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_num_scopes_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_assert_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_assert", Z3_solver_assert_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_assert_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_assert_and_track_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_assert_and_track", Z3_solver_assert_and_track_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_assert_and_track_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_from_file_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_from_file", Z3_solver_from_file_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_from_file_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_from_string_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_from_string", Z3_solver_from_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_from_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_assertions_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_assertions", Z3_solver_get_assertions_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_assertions_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_units_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_units", Z3_solver_get_units_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_units_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_check_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_check", Z3_solver_check_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_check_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_check_assumptions_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_check_assumptions", Z3_solver_check_assumptions_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_check_assumptions_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_implied_equalities_Descriptor = DECLARE_NAPI_METHOD("Z3_get_implied_equalities", Z3_get_implied_equalities_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_implied_equalities_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_consequences_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_consequences", Z3_solver_get_consequences_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_consequences_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_cube_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_cube", Z3_solver_cube_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_cube_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_model_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_model", Z3_solver_get_model_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_model_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_proof_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_proof", Z3_solver_get_proof_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_proof_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_unsat_core_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_unsat_core", Z3_solver_get_unsat_core_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_unsat_core_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_reason_unknown_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_reason_unknown", Z3_solver_get_reason_unknown_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_reason_unknown_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_get_statistics_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_get_statistics", Z3_solver_get_statistics_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_get_statistics_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_solver_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_solver_to_string", Z3_solver_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_solver_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_to_string", Z3_stats_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_inc_ref", Z3_stats_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_dec_ref", Z3_stats_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_size_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_size", Z3_stats_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_get_key_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_get_key", Z3_stats_get_key_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_get_key_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_is_uint_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_is_uint", Z3_stats_is_uint_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_is_uint_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_is_double_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_is_double", Z3_stats_is_double_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_is_double_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_get_uint_value_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_get_uint_value", Z3_stats_get_uint_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_get_uint_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_stats_get_double_value_Descriptor = DECLARE_NAPI_METHOD("Z3_stats_get_double_value", Z3_stats_get_double_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_stats_get_double_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_get_estimated_alloc_size_Descriptor = DECLARE_NAPI_METHOD("Z3_get_estimated_alloc_size", Z3_get_estimated_alloc_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_get_estimated_alloc_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_ast_vector_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_ast_vector", Z3_mk_ast_vector_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_ast_vector_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_inc_ref", Z3_ast_vector_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_dec_ref", Z3_ast_vector_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_size_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_size", Z3_ast_vector_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_get_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_get", Z3_ast_vector_get_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_get_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_set_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_set", Z3_ast_vector_set_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_set_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_resize_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_resize", Z3_ast_vector_resize_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_resize_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_push_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_push", Z3_ast_vector_push_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_push_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_translate_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_translate", Z3_ast_vector_translate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_translate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_vector_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_vector_to_string", Z3_ast_vector_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_vector_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_ast_map_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_ast_map", Z3_mk_ast_map_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_ast_map_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_inc_ref", Z3_ast_map_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_dec_ref", Z3_ast_map_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_contains_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_contains", Z3_ast_map_contains_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_contains_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_find_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_find", Z3_ast_map_find_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_find_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_insert_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_insert", Z3_ast_map_insert_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_insert_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_erase_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_erase", Z3_ast_map_erase_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_erase_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_reset_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_reset", Z3_ast_map_reset_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_reset_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_size_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_size", Z3_ast_map_size_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_size_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_keys_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_keys", Z3_ast_map_keys_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_keys_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_ast_map_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_ast_map_to_string", Z3_ast_map_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_ast_map_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_is_value_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_is_value", Z3_algebraic_is_value_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_is_value_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_is_pos_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_is_pos", Z3_algebraic_is_pos_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_is_pos_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_is_neg_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_is_neg", Z3_algebraic_is_neg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_is_neg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_is_zero_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_is_zero", Z3_algebraic_is_zero_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_is_zero_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_sign_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_sign", Z3_algebraic_sign_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_sign_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_add_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_add", Z3_algebraic_add_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_add_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_sub_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_sub", Z3_algebraic_sub_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_sub_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_mul_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_mul", Z3_algebraic_mul_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_mul_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_div_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_div", Z3_algebraic_div_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_div_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_root_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_root", Z3_algebraic_root_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_root_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_power_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_power", Z3_algebraic_power_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_power_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_lt_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_lt", Z3_algebraic_lt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_lt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_gt_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_gt", Z3_algebraic_gt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_gt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_le_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_le", Z3_algebraic_le_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_le_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_ge_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_ge", Z3_algebraic_ge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_ge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_eq_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_eq", Z3_algebraic_eq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_eq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_neq_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_neq", Z3_algebraic_neq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_neq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_roots_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_roots", Z3_algebraic_roots_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_roots_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_algebraic_eval_Descriptor = DECLARE_NAPI_METHOD("Z3_algebraic_eval", Z3_algebraic_eval_Method);

                status = napi_define_properties(env, exports, 1, &Z3_algebraic_eval_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_polynomial_subresultants_Descriptor = DECLARE_NAPI_METHOD("Z3_polynomial_subresultants", Z3_polynomial_subresultants_Method);

                status = napi_define_properties(env, exports, 1, &Z3_polynomial_subresultants_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_del_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_del", Z3_rcf_del_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_del_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mk_rational_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mk_rational", Z3_rcf_mk_rational_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mk_rational_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mk_small_int_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mk_small_int", Z3_rcf_mk_small_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mk_small_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mk_pi_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mk_pi", Z3_rcf_mk_pi_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mk_pi_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mk_e_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mk_e", Z3_rcf_mk_e_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mk_e_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mk_infinitesimal_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mk_infinitesimal", Z3_rcf_mk_infinitesimal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mk_infinitesimal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mk_roots_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mk_roots", Z3_rcf_mk_roots_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mk_roots_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_add_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_add", Z3_rcf_add_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_add_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_sub_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_sub", Z3_rcf_sub_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_sub_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_mul_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_mul", Z3_rcf_mul_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_mul_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_div_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_div", Z3_rcf_div_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_div_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_neg_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_neg", Z3_rcf_neg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_neg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_inv_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_inv", Z3_rcf_inv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_inv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_power_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_power", Z3_rcf_power_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_power_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_lt_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_lt", Z3_rcf_lt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_lt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_gt_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_gt", Z3_rcf_gt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_gt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_le_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_le", Z3_rcf_le_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_le_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_ge_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_ge", Z3_rcf_ge_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_ge_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_eq_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_eq", Z3_rcf_eq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_eq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_neq_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_neq", Z3_rcf_neq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_neq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_num_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_num_to_string", Z3_rcf_num_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_num_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_num_to_decimal_string_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_num_to_decimal_string", Z3_rcf_num_to_decimal_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_num_to_decimal_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_rcf_get_numerator_denominator_Descriptor = DECLARE_NAPI_METHOD("Z3_rcf_get_numerator_denominator", Z3_rcf_get_numerator_denominator_Method);

                status = napi_define_properties(env, exports, 1, &Z3_rcf_get_numerator_denominator_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fixedpoint_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fixedpoint", Z3_mk_fixedpoint_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fixedpoint_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_inc_ref", Z3_fixedpoint_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_dec_ref", Z3_fixedpoint_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_add_rule_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_add_rule", Z3_fixedpoint_add_rule_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_add_rule_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_add_fact_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_add_fact", Z3_fixedpoint_add_fact_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_add_fact_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_assert_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_assert", Z3_fixedpoint_assert_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_assert_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_query_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_query", Z3_fixedpoint_query_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_query_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_query_relations_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_query_relations", Z3_fixedpoint_query_relations_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_query_relations_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_answer_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_answer", Z3_fixedpoint_get_answer_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_answer_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_reason_unknown_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_reason_unknown", Z3_fixedpoint_get_reason_unknown_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_reason_unknown_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_update_rule_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_update_rule", Z3_fixedpoint_update_rule_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_update_rule_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_num_levels_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_num_levels", Z3_fixedpoint_get_num_levels_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_num_levels_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_cover_delta_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_cover_delta", Z3_fixedpoint_get_cover_delta_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_cover_delta_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_add_cover_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_add_cover", Z3_fixedpoint_add_cover_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_add_cover_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_statistics_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_statistics", Z3_fixedpoint_get_statistics_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_statistics_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_register_relation_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_register_relation", Z3_fixedpoint_register_relation_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_register_relation_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_set_predicate_representation_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_set_predicate_representation", Z3_fixedpoint_set_predicate_representation_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_set_predicate_representation_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_rules_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_rules", Z3_fixedpoint_get_rules_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_rules_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_assertions_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_assertions", Z3_fixedpoint_get_assertions_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_assertions_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_set_params_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_set_params", Z3_fixedpoint_set_params_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_set_params_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_help_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_help", Z3_fixedpoint_get_help_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_help_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_param_descrs_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_param_descrs", Z3_fixedpoint_get_param_descrs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_param_descrs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_to_string", Z3_fixedpoint_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_from_string_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_from_string", Z3_fixedpoint_from_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_from_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_from_file_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_from_file", Z3_fixedpoint_from_file_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_from_file_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_push_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_push", Z3_fixedpoint_push_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_push_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_pop_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_pop", Z3_fixedpoint_pop_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_pop_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_init_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_init", Z3_fixedpoint_init_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_init_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_set_reduce_assign_callback_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_set_reduce_assign_callback", Z3_fixedpoint_set_reduce_assign_callback_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_set_reduce_assign_callback_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_set_reduce_app_callback_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_set_reduce_app_callback", Z3_fixedpoint_set_reduce_app_callback_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_set_reduce_app_callback_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_optimize_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_optimize", Z3_mk_optimize_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_optimize_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_inc_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_inc_ref", Z3_optimize_inc_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_inc_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_dec_ref_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_dec_ref", Z3_optimize_dec_ref_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_dec_ref_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_assert_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_assert", Z3_optimize_assert_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_assert_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_assert_soft_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_assert_soft", Z3_optimize_assert_soft_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_assert_soft_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_maximize_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_maximize", Z3_optimize_maximize_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_maximize_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_minimize_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_minimize", Z3_optimize_minimize_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_minimize_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_push_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_push", Z3_optimize_push_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_push_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_pop_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_pop", Z3_optimize_pop_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_pop_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_check_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_check", Z3_optimize_check_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_check_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_reason_unknown_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_reason_unknown", Z3_optimize_get_reason_unknown_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_reason_unknown_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_model_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_model", Z3_optimize_get_model_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_model_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_set_params_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_set_params", Z3_optimize_set_params_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_set_params_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_param_descrs_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_param_descrs", Z3_optimize_get_param_descrs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_param_descrs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_lower_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_lower", Z3_optimize_get_lower_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_lower_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_upper_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_upper", Z3_optimize_get_upper_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_upper_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_lower_as_vector_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_lower_as_vector", Z3_optimize_get_lower_as_vector_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_lower_as_vector_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_upper_as_vector_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_upper_as_vector", Z3_optimize_get_upper_as_vector_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_upper_as_vector_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_to_string_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_to_string", Z3_optimize_to_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_to_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_from_string_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_from_string", Z3_optimize_from_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_from_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_from_file_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_from_file", Z3_optimize_from_file_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_from_file_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_help_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_help", Z3_optimize_get_help_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_help_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_statistics_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_statistics", Z3_optimize_get_statistics_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_statistics_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_assertions_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_assertions", Z3_optimize_get_assertions_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_assertions_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_optimize_get_objectives_Descriptor = DECLARE_NAPI_METHOD("Z3_optimize_get_objectives", Z3_optimize_get_objectives_Method);

                status = napi_define_properties(env, exports, 1, &Z3_optimize_get_objectives_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rounding_mode_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rounding_mode_sort", Z3_mk_fpa_rounding_mode_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rounding_mode_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_round_nearest_ties_to_even_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_round_nearest_ties_to_even", Z3_mk_fpa_round_nearest_ties_to_even_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_round_nearest_ties_to_even_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rne_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rne", Z3_mk_fpa_rne_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rne_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_round_nearest_ties_to_away_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_round_nearest_ties_to_away", Z3_mk_fpa_round_nearest_ties_to_away_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_round_nearest_ties_to_away_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rna_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rna", Z3_mk_fpa_rna_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rna_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_round_toward_positive_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_round_toward_positive", Z3_mk_fpa_round_toward_positive_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_round_toward_positive_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rtp_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rtp", Z3_mk_fpa_rtp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rtp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_round_toward_negative_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_round_toward_negative", Z3_mk_fpa_round_toward_negative_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_round_toward_negative_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rtn_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rtn", Z3_mk_fpa_rtn_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rtn_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_round_toward_zero_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_round_toward_zero", Z3_mk_fpa_round_toward_zero_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_round_toward_zero_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rtz_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rtz", Z3_mk_fpa_rtz_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rtz_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort", Z3_mk_fpa_sort_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_half_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_half", Z3_mk_fpa_sort_half_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_half_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_16_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_16", Z3_mk_fpa_sort_16_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_16_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_single_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_single", Z3_mk_fpa_sort_single_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_single_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_32_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_32", Z3_mk_fpa_sort_32_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_32_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_double_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_double", Z3_mk_fpa_sort_double_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_double_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_64_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_64", Z3_mk_fpa_sort_64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_quadruple_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_quadruple", Z3_mk_fpa_sort_quadruple_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_quadruple_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sort_128_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sort_128", Z3_mk_fpa_sort_128_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sort_128_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_nan_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_nan", Z3_mk_fpa_nan_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_nan_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_inf_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_inf", Z3_mk_fpa_inf_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_inf_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_zero_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_zero", Z3_mk_fpa_zero_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_zero_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_fp_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_fp", Z3_mk_fpa_fp_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_fp_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_numeral_float_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_numeral_float", Z3_mk_fpa_numeral_float_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_numeral_float_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_numeral_double_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_numeral_double", Z3_mk_fpa_numeral_double_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_numeral_double_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_numeral_int_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_numeral_int", Z3_mk_fpa_numeral_int_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_numeral_int_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_numeral_int_uint_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_numeral_int_uint", Z3_mk_fpa_numeral_int_uint_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_numeral_int_uint_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_numeral_int64_uint64_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_numeral_int64_uint64", Z3_mk_fpa_numeral_int64_uint64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_numeral_int64_uint64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_abs_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_abs", Z3_mk_fpa_abs_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_abs_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_neg_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_neg", Z3_mk_fpa_neg_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_neg_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_add_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_add", Z3_mk_fpa_add_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_add_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sub_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sub", Z3_mk_fpa_sub_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sub_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_mul_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_mul", Z3_mk_fpa_mul_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_mul_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_div_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_div", Z3_mk_fpa_div_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_div_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_fma_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_fma", Z3_mk_fpa_fma_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_fma_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_sqrt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_sqrt", Z3_mk_fpa_sqrt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_sqrt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_rem_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_rem", Z3_mk_fpa_rem_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_rem_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_round_to_integral_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_round_to_integral", Z3_mk_fpa_round_to_integral_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_round_to_integral_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_min_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_min", Z3_mk_fpa_min_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_min_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_max_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_max", Z3_mk_fpa_max_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_max_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_leq_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_leq", Z3_mk_fpa_leq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_leq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_lt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_lt", Z3_mk_fpa_lt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_lt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_geq_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_geq", Z3_mk_fpa_geq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_geq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_gt_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_gt", Z3_mk_fpa_gt_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_gt_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_eq_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_eq", Z3_mk_fpa_eq_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_eq_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_normal_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_normal", Z3_mk_fpa_is_normal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_normal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_subnormal_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_subnormal", Z3_mk_fpa_is_subnormal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_subnormal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_zero_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_zero", Z3_mk_fpa_is_zero_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_zero_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_infinite_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_infinite", Z3_mk_fpa_is_infinite_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_infinite_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_nan_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_nan", Z3_mk_fpa_is_nan_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_nan_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_negative_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_negative", Z3_mk_fpa_is_negative_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_negative_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_is_positive_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_is_positive", Z3_mk_fpa_is_positive_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_is_positive_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_fp_bv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_fp_bv", Z3_mk_fpa_to_fp_bv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_fp_bv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_fp_float_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_fp_float", Z3_mk_fpa_to_fp_float_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_fp_float_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_fp_real_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_fp_real", Z3_mk_fpa_to_fp_real_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_fp_real_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_fp_signed_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_fp_signed", Z3_mk_fpa_to_fp_signed_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_fp_signed_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_fp_unsigned_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_fp_unsigned", Z3_mk_fpa_to_fp_unsigned_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_fp_unsigned_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_ubv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_ubv", Z3_mk_fpa_to_ubv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_ubv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_sbv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_sbv", Z3_mk_fpa_to_sbv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_sbv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_real_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_real", Z3_mk_fpa_to_real_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_real_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_ebits_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_ebits", Z3_fpa_get_ebits_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_ebits_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_sbits_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_sbits", Z3_fpa_get_sbits_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_sbits_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_nan_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_nan", Z3_fpa_is_numeral_nan_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_nan_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_inf_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_inf", Z3_fpa_is_numeral_inf_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_inf_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_zero_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_zero", Z3_fpa_is_numeral_zero_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_zero_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_normal_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_normal", Z3_fpa_is_numeral_normal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_normal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_subnormal_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_subnormal", Z3_fpa_is_numeral_subnormal_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_subnormal_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_positive_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_positive", Z3_fpa_is_numeral_positive_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_positive_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_is_numeral_negative_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_is_numeral_negative", Z3_fpa_is_numeral_negative_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_is_numeral_negative_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_sign_bv_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_sign_bv", Z3_fpa_get_numeral_sign_bv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_sign_bv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_significand_bv_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_significand_bv", Z3_fpa_get_numeral_significand_bv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_significand_bv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_sign_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_sign", Z3_fpa_get_numeral_sign_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_sign_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_significand_string_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_significand_string", Z3_fpa_get_numeral_significand_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_significand_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_significand_uint64_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_significand_uint64", Z3_fpa_get_numeral_significand_uint64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_significand_uint64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_exponent_string_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_exponent_string", Z3_fpa_get_numeral_exponent_string_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_exponent_string_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_exponent_int64_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_exponent_int64", Z3_fpa_get_numeral_exponent_int64_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_exponent_int64_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fpa_get_numeral_exponent_bv_Descriptor = DECLARE_NAPI_METHOD("Z3_fpa_get_numeral_exponent_bv", Z3_fpa_get_numeral_exponent_bv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fpa_get_numeral_exponent_bv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_ieee_bv_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_ieee_bv", Z3_mk_fpa_to_ieee_bv_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_ieee_bv_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_mk_fpa_to_fp_int_real_Descriptor = DECLARE_NAPI_METHOD("Z3_mk_fpa_to_fp_int_real", Z3_mk_fpa_to_fp_int_real_Method);

                status = napi_define_properties(env, exports, 1, &Z3_mk_fpa_to_fp_int_real_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_query_from_lvl_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_query_from_lvl", Z3_fixedpoint_query_from_lvl_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_query_from_lvl_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_ground_sat_answer_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_ground_sat_answer", Z3_fixedpoint_get_ground_sat_answer_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_ground_sat_answer_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_rules_along_trace_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_rules_along_trace", Z3_fixedpoint_get_rules_along_trace_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_rules_along_trace_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_rule_names_along_trace_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_rule_names_along_trace", Z3_fixedpoint_get_rule_names_along_trace_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_rule_names_along_trace_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_add_invariant_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_add_invariant", Z3_fixedpoint_add_invariant_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_add_invariant_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_fixedpoint_get_reachable_Descriptor = DECLARE_NAPI_METHOD("Z3_fixedpoint_get_reachable", Z3_fixedpoint_get_reachable_Method);

                status = napi_define_properties(env, exports, 1, &Z3_fixedpoint_get_reachable_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_qe_model_project_Descriptor = DECLARE_NAPI_METHOD("Z3_qe_model_project", Z3_qe_model_project_Method);

                status = napi_define_properties(env, exports, 1, &Z3_qe_model_project_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_qe_model_project_skolem_Descriptor = DECLARE_NAPI_METHOD("Z3_qe_model_project_skolem", Z3_qe_model_project_skolem_Method);

                status = napi_define_properties(env, exports, 1, &Z3_qe_model_project_skolem_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_model_extrapolate_Descriptor = DECLARE_NAPI_METHOD("Z3_model_extrapolate", Z3_model_extrapolate_Method);

                status = napi_define_properties(env, exports, 1, &Z3_model_extrapolate_Descriptor);
	        assert(status == napi_ok);
                
                napi_property_descriptor Z3_qe_lite_Descriptor = DECLARE_NAPI_METHOD("Z3_qe_lite", Z3_qe_lite_Method);

                status = napi_define_properties(env, exports, 1, &Z3_qe_lite_Descriptor);
	        assert(status == napi_ok);
                

		return exports;
	}

	NAPI_MODULE(NODE_GYP_MODULE_NAME, init)
}
