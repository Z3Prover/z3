(set-option :fixedpoint.engine datalog)

(define-sort node_t () (_ BitVec 4))
(define-sort cost_t () (_ BitVec 8))

(declare-rel OspfNeighbors (node_t node_t cost_t))
(declare-rel MinOspfIARouteCost (node_t cost_t))
(declare-rel OspfIARoute (node_t cost_t))
(declare-rel BestOspfIARoute (node_t cost_t))
(declare-rel OspfCost (node_t cost_t))
(declare-rel F (node_t cost_t))

(declare-var node node_t)
(declare-var source node_t)
(declare-var target node_t)

(declare-var targetCost cost_t)
(declare-var nextTargetCost cost_t)
(declare-var nodeCost cost_t)
(declare-var cost cost_t)

(rule (OspfNeighbors #x1 #x2 #x02))
(rule (OspfNeighbors #x2 #x1 #x02))
(rule (OspfNeighbors #x2 #x3 #x02))
(rule (OspfNeighbors #x3 #x2 #x02))
(rule (OspfNeighbors #x3 #x4 #x02))
(rule (OspfNeighbors #x4 #x3 #x02))
(rule (OspfNeighbors #x2 #x4 #x03))
(rule (OspfNeighbors #x4 #x2 #x03))
(rule (OspfNeighbors #x4 #x7 #x01))
(rule (OspfNeighbors #x7 #x4 #x01))
(rule (OspfNeighbors #x4 #x8 #x03))
(rule (OspfNeighbors #x8 #x4 #x03))
(rule (OspfNeighbors #x7 #x8 #x02))
(rule (OspfNeighbors #x8 #x7 #x02))
(rule (OspfNeighbors #x4 #x5 #x07))
(rule (OspfNeighbors #x5 #x4 #x07))
(rule (OspfNeighbors #x4 #x6 #x03))
(rule (OspfNeighbors #x6 #x4 #x03))
(rule (OspfNeighbors #x5 #x6 #x02))
(rule (OspfNeighbors #x6 #x5 #x02))
(rule (OspfNeighbors #x6 #xA #x04))
(rule (OspfNeighbors #xA #x6 #x04))
(rule (OspfNeighbors #xA #x9 #x03))
(rule (OspfNeighbors #x9 #xA #x03))
(rule (OspfNeighbors #xA #xB #x02))
(rule (OspfNeighbors #xB #xA #x02))
(rule (OspfNeighbors #x9 #x8 #x03))
(rule (OspfNeighbors #x8 #x9 #x03))
(rule (OspfNeighbors #x2 #xB #x08))

(rule (=> (and (OspfIARoute node cost) ((_ min OspfIARoute 1) node cost))
          (MinOspfIARouteCost node cost)))

(rule (=>
  (MinOspfIARouteCost node cost)
  (BestOspfIARoute node cost)))

(rule (=>
  (OspfNeighbors node target cost)
  (OspfCost node cost)))

(rule (=>
  (and (OspfNeighbors node target targetCost)
       (OspfCost target nextTargetCost)
       (= cost (bvadd targetCost nextTargetCost)))
  (OspfIARoute node cost)))

(rule (=>
  (and (OspfNeighbors source target nodeCost)
       (OspfIARoute target targetCost)
       ((_ min OspfIARoute 1) target targetCost)
       (= cost (bvadd targetCost nodeCost))
       (bvult cost #x7f))
  (OspfIARoute source cost)))

(query (OspfIARoute node cost) :print-answer true)

; sat
; (or (and (= (:var 0) #x5) (= (:var 1) #x0a))
;     (and (= (:var 0) #x9) (= (:var 1) #x07))
;     (and (= (:var 0) #x2) (= (:var 1) #x04))
;     (and (= (:var 0) #x1) (= (:var 1) #x04))
;     (and (= (:var 0) #x3) (= (:var 1) #x04))
;     (and (= (:var 0) #xb) (= (:var 1) #x04))
;     (and (= (:var 0) #x7) (= (:var 1) #x03))
;     (and (= (:var 0) #x4) (= (:var 1) #x04))
;     (and (= (:var 0) #xa) (= (:var 1) #x04))
;     (and (= (:var 0) #x8) (= (:var 1) #x0a))
;     (and (= (:var 0) #x6) (= (:var 1) #x07))
;     (and (= (:var 0) #x5) (= (:var 1) #x05))
;     (and (= (:var 0) #x4) (= (:var 1) #x06))
;     (and (= (:var 0) #x2) (= (:var 1) #x06))
;     (and (= (:var 0) #x5) (= (:var 1) #x0e))
;     (and (= (:var 0) #x8) (= (:var 1) #x06))
;     (and (= (:var 0) #x4) (= (:var 1) #x05))
;     (and (= (:var 0) #x7) (= (:var 1) #x04))
;     (and (= (:var 0) #x3) (= (:var 1) #x03))
;     (and (= (:var 0) #xa) (= (:var 1) #x06))
;     (and (= (:var 0) #x7) (= (:var 1) #x02))
;     (and (= (:var 0) #x2) (= (:var 1) #x05))
;     (and (= (:var 0) #x6) (= (:var 1) #x06))
;     (and (= (:var 0) #x8) (= (:var 1) #x05))
;     (and (= (:var 0) #x4) (= (:var 1) #x02))
;     (and (= (:var 0) #x6) (= (:var 1) #x09))
;     (and (= (:var 0) #x8) (= (:var 1) #x03))
;     (and (= (:var 0) #x8) (= (:var 1) #x04))
;     (and (= (:var 0) #x6) (= (:var 1) #x05))
;     (and (= (:var 0) #x4) (= (:var 1) #x03))
;     (and (= (:var 0) #x6) (= (:var 1) #x04))
;     (and (= (:var 0) #x1) (= (:var 1) #x05))
;     (and (= (:var 0) #x3) (= (:var 1) #x05))
;     (and (= (:var 0) #x5) (= (:var 1) #x06))
;     (and (= (:var 0) #x6) (= (:var 1) #x0a))
;     (and (= (:var 0) #x4) (= (:var 1) #x0e))
;     (and (= (:var 0) #xa) (= (:var 1) #x08))
;     (and (= (:var 0) #xb) (= (:var 1) #x06))
;     (and (= (:var 0) #xb) (= (:var 1) #x05))
;     (and (= (:var 0) #x6) (= (:var 1) #x08))
;     (and (= (:var 0) #x4) (= (:var 1) #x09))
;     (and (= (:var 0) #x9) (= (:var 1) #x06))
;     (and (= (:var 0) #x7) (= (:var 1) #x08))
;     (and (= (:var 0) #x4) (= (:var 1) #x0b))
;     (and (= (:var 0) #x2) (= (:var 1) #x0a))
;     (and (= (:var 0) #x7) (= (:var 1) #x05))
;     (and (= (:var 0) #x5) (= (:var 1) #x04))
;     (and (= (:var 0) #xa) (= (:var 1) #x07))
;     (and (= (:var 0) #x3) (= (:var 1) #x09))
;     (and (= (:var 0) #x1) (= (:var 1) #x0a))
;     (and (= (:var 0) #x9) (= (:var 1) #x05))
;     (and (= (:var 0) #x5) (= (:var 1) #x08))
;     (and (= (:var 0) #x4) (= (:var 1) #x07))
;     (and (= (:var 0) #x5) (= (:var 1) #x09))
;     (and (= (:var 0) #x3) (= (:var 1) #x0a))
;     (and (= (:var 0) #x8) (= (:var 1) #x08))
;     (and (= (:var 0) #x2) (= (:var 1) #x0c))
;     (and (= (:var 0) #x1) (= (:var 1) #x06))
;     (and (= (:var 0) #x3) (= (:var 1) #x06)))

