(set-option :fixedpoint.engine datalog)
(set-option :fixedpoint.datalog.transform_rules false)

(define-sort Node () (_ BitVec 8))
(define-sort Cost () (_ BitVec 12))

(declare-var node Node)
(declare-var nextHop Node)
(declare-var ANY_nextHop Node)
(declare-var cost Cost)
(declare-var subCost Cost)
(declare-var exportCost Cost)
(declare-var nodeIntCost Cost)
(declare-var nextHopIntCost Cost)

(declare-rel OspfExport (Cost))

(declare-rel OspfE1Route (Node Cost))
(declare-rel BestOspfE1Route (Node Cost))
(declare-rel MinOspfE1RouteCost (Node Cost))

(declare-rel OspfIARoute (Node Cost))
(declare-rel BestOspfIARoute (Node Cost))
(declare-rel MinOspfIARouteCost (Node Cost))

(declare-rel OspfRoute (Node Cost))
(declare-rel BestOspfRoute (Node Cost))
(declare-rel MinOspfRouteCost (Node Cost))

(declare-rel OspfNeighbors (Node Cost Node))

(rule (=> (and (OspfE1Route node cost)
               (MinOspfE1RouteCost node cost))
          (BestOspfE1Route node cost)))

(rule (=> (and (OspfIARoute node cost)
               (MinOspfIARouteCost node cost))
          (BestOspfIARoute node cost)))

(rule (=> (and (OspfRoute node cost)
               (MinOspfRouteCost node cost))
          (BestOspfRoute node cost)))

(rule (=> (and (OspfE1Route node cost)
               ((_ min OspfE1Route 1) node cost))
          (MinOspfE1RouteCost node cost)))

(rule (=> (and (OspfIARoute node cost)
               ((_ min OspfIARoute 1) node cost))
          (MinOspfIARouteCost node cost)))

(rule (=> (and (OspfRoute node cost)
               ((_ min OspfRoute 1) node cost))
          (MinOspfRouteCost node cost)))

(rule (=> (and (OspfNeighbors node nodeIntCost nextHop)
               (OspfExport exportCost)
               (= cost (bvadd exportCost nodeIntCost)))
      (OspfE1Route node cost)))

(rule (=> (and (OspfNeighbors node nodeIntCost ANY_nextHop)
               (BestOspfE1Route nextHop subCost)
               (= cost (bvadd subCost nodeIntCost)))
          (OspfE1Route node cost)))

(rule (=> (and (OspfNeighbors node nodeIntCost nextHop)
               (OspfNeighbors nextHop nextHopIntCost ANY_nextHop)
               (= cost (bvadd nodeIntCost nextHopIntCost)))
      (OspfIARoute node cost)))

(rule (=> (and (OspfNeighbors node nodeIntCost nextHop)
               (BestOspfIARoute nextHop subCost)
               (= cost (bvadd subCost nodeIntCost)))
           (OspfIARoute node cost)))


(rule (=> (and (OspfNeighbors node nodeIntCost nextHop)
               (OspfNeighbors nextHop nextHopIntCost ANY_nextHop)
               (= cost (bvadd nodeIntCost nextHopIntCost)))
          (OspfRoute node cost)))

(rule (=> (and (OspfNeighbors node nodeIntCost nextHop)
               (BestOspfRoute nextHop subCost)
               (= cost (bvadd subCost nodeIntCost)))
           (OspfRoute node cost)))

(rule (OspfNeighbors #x01 #x040 #x03))
(rule (OspfNeighbors #x03 #x040 #x01))
(rule (OspfNeighbors #x01 #x020 #x02))
(rule (OspfNeighbors #x02 #x030 #x01))
(rule (OspfNeighbors #x02 #x080 #x04))
(rule (OspfNeighbors #x04 #x080 #x02))
(rule (OspfNeighbors #x04 #x0e0 #x03))
(rule (OspfNeighbors #x03 #x0e0 #x04))
(rule (OspfNeighbors #x04 #x0a0 #x05))
(rule (OspfNeighbors #x05 #x0a0 #x04))
(rule (OspfNeighbors #x05 #x010 #x01))
(rule (OspfNeighbors #x01 #x010 #x05))
(rule (OspfNeighbors #x05 #x0c0 #x0a))
(rule (OspfNeighbors #x0a #x0c0 #x05))
(rule (OspfNeighbors #x0a #x030 #x0f))
(rule (OspfNeighbors #x0f #x040 #x0a))
(rule (OspfNeighbors #x0a #x010 #x0b))
(rule (OspfNeighbors #x0b #x010 #x0a))
(rule (OspfNeighbors #x0a #x020 #x0c))
(rule (OspfNeighbors #x0c #x020 #x0a))
(rule (OspfNeighbors #x0a #x030 #x0d))
(rule (OspfNeighbors #x0d #x030 #x0a))
(rule (OspfNeighbors #x0d #x050 #x0e))
(rule (OspfNeighbors #x0e #x050 #x0d))
(rule (OspfNeighbors #x0e #x030 #x0f))
(rule (OspfNeighbors #x0f #x030 #x0e))
(rule (OspfNeighbors #x0f #x020 #x20))
(rule (OspfNeighbors #x20 #x020 #x0f))
(rule (OspfNeighbors #x0f #x010 #x10))
(rule (OspfNeighbors #x10 #x010 #x0f))
(rule (OspfNeighbors #x0f #x0c0 #x09))
(rule (OspfNeighbors #x09 #x0c0 #x0f))
(rule (OspfNeighbors #x09 #x010 #x08))
(rule (OspfNeighbors #x08 #x010 #x09))
(rule (OspfNeighbors #x09 #x0a0 #x04))
(rule (OspfNeighbors #x04 #x0a0 #x09))
(rule (OspfNeighbors #x04 #x080 #x07))
(rule (OspfNeighbors #x07 #x080 #x04))
(rule (OspfNeighbors #x07 #x020 #x08))
(rule (OspfNeighbors #x08 #x030 #x07))
(rule (OspfNeighbors #x04 #x0e0 #x06))
(rule (OspfNeighbors #x06 #x0e0 #x04))
(rule (OspfNeighbors #x03 #x070 #x06))
(rule (OspfNeighbors #x06 #x070 #x03))
(rule (OspfNeighbors #x06 #x060 #x08))
(rule (OspfNeighbors #x08 #x060 #x06))

(rule (OspfExport #x010))
(rule (OspfExport #x030))
(rule (OspfExport #x060))
(rule (OspfExport #x0e0))

(query (BestOspfIARoute node cost) :print-answer true)

;sat
;(or (and (= (:var 0) #x04) (= (:var 1) #x0a0))
;    (and (= (:var 0) #x05) (= (:var 1) #x020))
;    (and (= (:var 0) #x01) (= (:var 1) #x020))
;    (and (= (:var 0) #x0a) (= (:var 1) #x020))
;    (and (= (:var 0) #x0d) (= (:var 1) #x040))
;    (and (= (:var 0) #x0b) (= (:var 1) #x020))
;    (and (= (:var 0) #x0c) (= (:var 1) #x030))
;    (and (= (:var 0) #x0e) (= (:var 1) #x040))
;    (and (= (:var 0) #x03) (= (:var 1) #x050))
;    (and (= (:var 0) #x0f) (= (:var 1) #x020))
;    (and (= (:var 0) #x20) (= (:var 1) #x030))
;    (and (= (:var 0) #x10) (= (:var 1) #x020))
;    (and (= (:var 0) #x09) (= (:var 1) #x020))
;    (and (= (:var 0) #x08) (= (:var 1) #x020))
;    (and (= (:var 0) #x07) (= (:var 1) #x030))
;    (and (= (:var 0) #x06) (= (:var 1) #x070))
;    (and (= (:var 0) #x02) (= (:var 1) #x040)))

(query (BestOspfRoute node cost) :print-answer true)

;sat
;(or (and (= (:var 0) #x04) (= (:var 1) #x0a0))
;    (and (= (:var 0) #x05) (= (:var 1) #x020))
;    (and (= (:var 0) #x01) (= (:var 1) #x020))
;    (and (= (:var 0) #x0a) (= (:var 1) #x020))
;    (and (= (:var 0) #x0d) (= (:var 1) #x040))
;    (and (= (:var 0) #x0b) (= (:var 1) #x020))
;    (and (= (:var 0) #x0c) (= (:var 1) #x030))
;    (and (= (:var 0) #x0e) (= (:var 1) #x040))
;    (and (= (:var 0) #x03) (= (:var 1) #x050))
;    (and (= (:var 0) #x0f) (= (:var 1) #x020))
;    (and (= (:var 0) #x20) (= (:var 1) #x030))
;    (and (= (:var 0) #x10) (= (:var 1) #x020))
;    (and (= (:var 0) #x09) (= (:var 1) #x020))
;    (and (= (:var 0) #x08) (= (:var 1) #x020))
;    (and (= (:var 0) #x07) (= (:var 1) #x030))
;    (and (= (:var 0) #x06) (= (:var 1) #x070))
;    (and (= (:var 0) #x02) (= (:var 1) #x040)))


(query (BestOspfE1Route node cost) :print-answer true)

;sat
;(or (and (= (:var 0) #x0c) (= (:var 1) #x030))
;    (and (= (:var 0) #x02) (= (:var 1) #x040))
;    (and (= (:var 0) #x05) (= (:var 1) #x020))
;    (and (= (:var 0) #x01) (= (:var 1) #x020))
;    (and (= (:var 0) #x03) (= (:var 1) #x050))
;    (and (= (:var 0) #x0a) (= (:var 1) #x020))
;    (and (= (:var 0) #x20) (= (:var 1) #x030))
;    (and (= (:var 0) #x0b) (= (:var 1) #x020))
;    (and (= (:var 0) #x07) (= (:var 1) #x030))
;    (and (= (:var 0) #x0f) (= (:var 1) #x020))
;    (and (= (:var 0) #x10) (= (:var 1) #x020))
;    (and (= (:var 0) #x0d) (= (:var 1) #x040))
;    (and (= (:var 0) #x04) (= (:var 1) #x090))
;    (and (= (:var 0) #x09) (= (:var 1) #x020))
;    (and (= (:var 0) #x08) (= (:var 1) #x020))
;    (and (= (:var 0) #x0e) (= (:var 1) #x040))
;    (and (= (:var 0) #x06) (= (:var 1) #x070)))

